(self["webpackChunkadacad_weaver"] = self["webpackChunkadacad_weaver"] || []).push([["main"],{

/***/ 90158:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppRoutingModule": () => (/* binding */ AppRoutingModule)
/* harmony export */ });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 60124);
/* harmony import */ var _mixer_mixer_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixer/mixer.component */ 27195);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);




const routes = [{
  path: '',
  component: _mixer_mixer_component__WEBPACK_IMPORTED_MODULE_0__.MixerComponent,
  children: []
}, {
  path: '**',
  component: _mixer_mixer_component__WEBPACK_IMPORTED_MODULE_0__.MixerComponent,
  children: []
}];
class AppRoutingModule {}
AppRoutingModule.ɵfac = function AppRoutingModule_Factory(t) {
  return new (t || AppRoutingModule)();
};
AppRoutingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: AppRoutingModule
});
AppRoutingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule.forRoot(routes), _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](AppRoutingModule, {
    imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule],
    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule]
  });
})();

/***/ }),

/***/ 55041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ 60124);


class AppComponent {
  constructor() {
    this.title = 'app';
  }
}
AppComponent.ɵfac = function AppComponent_Factory(t) {
  return new (t || AppComponent)();
};
AppComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: AppComponent,
  selectors: [["app-root"]],
  decls: 1,
  vars: 0,
  template: function AppComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
    }
  },
  dependencies: [_angular_router__WEBPACK_IMPORTED_MODULE_1__.RouterOutlet],
  styles: ["\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 36747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppModule": () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_fire_analytics__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/fire/analytics */ 52591);
/* harmony import */ var _angular_fire_app__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/fire/app */ 89674);
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/fire/auth */ 61577);
/* harmony import */ var _angular_fire_database__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/fire/database */ 36139);
/* harmony import */ var _angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/fire/firestore */ 56466);
/* harmony import */ var _angular_fire_functions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/fire/functions */ 88833);
/* harmony import */ var _angular_fire_messaging__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/fire/messaging */ 60798);
/* harmony import */ var _angular_fire_performance__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/fire/performance */ 92494);
/* harmony import */ var _angular_fire_remote_config__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/fire/remote-config */ 57586);
/* harmony import */ var _angular_fire_storage__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/fire/storage */ 42111);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser */ 34497);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser/animations */ 37146);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environments/environment */ 92340);
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-routing.module */ 90158);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app.component */ 55041);
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/core.module */ 40294);
/* harmony import */ var _mixer_mixer_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mixer/mixer.module */ 58529);
/* harmony import */ var _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./draftdetail/draftdetail.module */ 68073);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);






























class AppModule {}
AppModule.ɵfac = function AppModule_Factory(t) {
  return new (t || AppModule)();
};
AppModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineNgModule"]({
  type: AppModule,
  bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_2__.AppComponent]
});
AppModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjector"]({
  providers: [{
    provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__.HAMMER_GESTURE_CONFIG,
    useClass: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__.HammerGestureConfig
  }],
  imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__.BrowserModule, _app_routing_module__WEBPACK_IMPORTED_MODULE_1__.AppRoutingModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_8__.HttpClientModule, _core_core_module__WEBPACK_IMPORTED_MODULE_3__.CoreModule, _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_5__.DraftDetailModule, _mixer_mixer_module__WEBPACK_IMPORTED_MODULE_4__.MixerModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__.BrowserAnimationsModule, (0,_angular_fire_app__WEBPACK_IMPORTED_MODULE_10__.provideFirebaseApp)(() => (0,_angular_fire_app__WEBPACK_IMPORTED_MODULE_10__.initializeApp)(_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.firebase)), (0,_angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.provideFirestore)(() => (0,_angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.getFirestore)()), (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_12__.provideAnalytics)(() => (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_12__.getAnalytics)()), (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_13__.provideAuth)(() => (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_13__.getAuth)()), (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_14__.provideDatabase)(() => (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_14__.getDatabase)()), (0,_angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.provideFirestore)(() => (0,_angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.getFirestore)()), (0,_angular_fire_functions__WEBPACK_IMPORTED_MODULE_15__.provideFunctions)(() => (0,_angular_fire_functions__WEBPACK_IMPORTED_MODULE_15__.getFunctions)()), (0,_angular_fire_messaging__WEBPACK_IMPORTED_MODULE_16__.provideMessaging)(() => (0,_angular_fire_messaging__WEBPACK_IMPORTED_MODULE_16__.getMessaging)()), (0,_angular_fire_performance__WEBPACK_IMPORTED_MODULE_17__.providePerformance)(() => (0,_angular_fire_performance__WEBPACK_IMPORTED_MODULE_17__.getPerformance)()), (0,_angular_fire_remote_config__WEBPACK_IMPORTED_MODULE_18__.provideRemoteConfig)(() => (0,_angular_fire_remote_config__WEBPACK_IMPORTED_MODULE_18__.getRemoteConfig)()), (0,_angular_fire_storage__WEBPACK_IMPORTED_MODULE_19__.provideStorage)(() => (0,_angular_fire_storage__WEBPACK_IMPORTED_MODULE_19__.getStorage)())]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵsetNgModuleScope"](AppModule, {
    declarations: [_app_component__WEBPACK_IMPORTED_MODULE_2__.AppComponent],
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__.BrowserModule, _app_routing_module__WEBPACK_IMPORTED_MODULE_1__.AppRoutingModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_8__.HttpClientModule, _core_core_module__WEBPACK_IMPORTED_MODULE_3__.CoreModule, _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_5__.DraftDetailModule, _mixer_mixer_module__WEBPACK_IMPORTED_MODULE_4__.MixerModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__.BrowserAnimationsModule, _angular_fire_app__WEBPACK_IMPORTED_MODULE_10__.FirebaseAppModule, _angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.FirestoreModule, _angular_fire_analytics__WEBPACK_IMPORTED_MODULE_12__.AnalyticsModule, _angular_fire_auth__WEBPACK_IMPORTED_MODULE_13__.AuthModule, _angular_fire_database__WEBPACK_IMPORTED_MODULE_14__.DatabaseModule, _angular_fire_firestore__WEBPACK_IMPORTED_MODULE_11__.FirestoreModule, _angular_fire_functions__WEBPACK_IMPORTED_MODULE_15__.FunctionsModule, _angular_fire_messaging__WEBPACK_IMPORTED_MODULE_16__.MessagingModule, _angular_fire_performance__WEBPACK_IMPORTED_MODULE_17__.PerformanceModule, _angular_fire_remote_config__WEBPACK_IMPORTED_MODULE_18__.RemoteConfigModule, _angular_fire_storage__WEBPACK_IMPORTED_MODULE_19__.StorageModule]
  });
})();

/***/ }),

/***/ 40294:
/*!*************************************!*\
  !*** ./src/app/core/core.module.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreModule": () => (/* binding */ CoreModule)
/* harmony export */ });
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @angular/cdk/scrolling */ 76328);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/autocomplete */ 88550);
/* harmony import */ var _angular_material_badge__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @angular/material/badge */ 83335);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/button-toggle */ 19837);
/* harmony import */ var _angular_material_card__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/material/card */ 82156);
/* harmony import */ var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/checkbox */ 44792);
/* harmony import */ var _angular_material_chips__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @angular/material/chips */ 11169);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/material/divider */ 71528);
/* harmony import */ var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @angular/material/expansion */ 17591);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/material/icon */ 57822);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_list__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/material/list */ 6517);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @angular/material/progress-bar */ 51294);
/* harmony import */ var _angular_material_radio__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @angular/material/radio */ 52922);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @angular/material/sidenav */ 16643);
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/material/slide-toggle */ 84714);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @angular/material/snack-bar */ 10930);
/* harmony import */ var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @angular/material/tabs */ 15892);
/* harmony import */ var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @angular/material/toolbar */ 52543);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @angular/material/tree */ 53453);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/platform-browser */ 34497);
/* harmony import */ var ngx_color_picker__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ngx-color-picker */ 18251);
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./login/login.component */ 2409);
/* harmony import */ var _modal_about_about_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal/about/about.modal */ 5401);
/* harmony import */ var _modal_init_init_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modal/init/init.modal */ 61746);
/* harmony import */ var _modal_loom_loom_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modal/loom/loom.modal */ 1110);
/* harmony import */ var _modal_material_material_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal/material/material.modal */ 75727);
/* harmony import */ var _profile_profile_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./profile/profile.component */ 14328);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider/auth.service */ 46866);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./provider/file.service */ 96374);
/* harmony import */ var _provider_patternfinder_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./provider/patternfinder.service */ 22791);
/* harmony import */ var _provider_vae_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./provider/vae.service */ 85646);
/* harmony import */ var _signup_signup_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./signup/signup.component */ 26701);
/* harmony import */ var _topbar_topbar_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./topbar/topbar.component */ 34181);
/* harmony import */ var _uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./uploads/upload-form/upload-form.component */ 81901);
/* harmony import */ var _provider_upload_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./provider/upload.service */ 5794);
/* harmony import */ var _modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modal/blankdraft/blankdraft.modal */ 84602);
/* harmony import */ var _modal_examples_examples_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modal/examples/examples.component */ 12324);
/* harmony import */ var _modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modal/loadfile/loadfile.component */ 17623);
/* harmony import */ var _filebrowser_filebrowser_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./filebrowser/filebrowser.component */ 52609);
/* harmony import */ var _keycodes_directive__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./keycodes.directive */ 85150);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/core */ 22560);























































class CoreModule {}
CoreModule.ɵfac = function CoreModule_Factory(t) {
  return new (t || CoreModule)();
};
CoreModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵdefineNgModule"]({
  type: CoreModule
});
CoreModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵdefineInjector"]({
  providers: [_provider_upload_service__WEBPACK_IMPORTED_MODULE_13__.UploadService, _provider_file_service__WEBPACK_IMPORTED_MODULE_7__.FileService, _provider_vae_service__WEBPACK_IMPORTED_MODULE_9__.VaeService, _provider_patternfinder_service__WEBPACK_IMPORTED_MODULE_8__.PatternfinderService, _provider_auth_service__WEBPACK_IMPORTED_MODULE_6__.AuthService],
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_20__.CommonModule, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__.BrowserModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_22__.HttpClientModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_24__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_26__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_27__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_28__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_29__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_31__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_32__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_33__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_34__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_35__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_36__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_37__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_38__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_39__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_40__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_41__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_42__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_43__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_44__.MatTooltipModule, _angular_material_tree__WEBPACK_IMPORTED_MODULE_45__.MatTreeModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_46__.ColorPickerModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_47__.MatChipsModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_48__.MatSnackBarModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_49__.ScrollingModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_50__.DragDropModule, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_51__.MatProgressBarModule, _angular_material_badge__WEBPACK_IMPORTED_MODULE_52__.MatBadgeModule, _angular_common__WEBPACK_IMPORTED_MODULE_20__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.FormsModule, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__.BrowserModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_22__.HttpClientModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_24__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_26__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_27__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_28__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_29__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_31__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_32__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_33__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_34__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_35__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_36__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_37__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_38__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_39__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_40__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_41__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_42__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_43__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_44__.MatTooltipModule, _angular_material_tree__WEBPACK_IMPORTED_MODULE_45__.MatTreeModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_46__.ColorPickerModule, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_51__.MatProgressBarModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_47__.MatChipsModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_48__.MatSnackBarModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_49__.ScrollingModule, _angular_material_badge__WEBPACK_IMPORTED_MODULE_52__.MatBadgeModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_50__.DragDropModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵsetNgModuleScope"](CoreModule, {
    declarations: [_uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_12__.UploadFormComponent, _topbar_topbar_component__WEBPACK_IMPORTED_MODULE_11__.TopbarComponent, _modal_init_init_modal__WEBPACK_IMPORTED_MODULE_2__.InitModal, _modal_about_about_modal__WEBPACK_IMPORTED_MODULE_1__.AboutModal, _modal_material_material_modal__WEBPACK_IMPORTED_MODULE_4__.MaterialModal, _modal_loom_loom_modal__WEBPACK_IMPORTED_MODULE_3__.LoomModal, _login_login_component__WEBPACK_IMPORTED_MODULE_0__.LoginComponent, _signup_signup_component__WEBPACK_IMPORTED_MODULE_10__.SignupComponent, _profile_profile_component__WEBPACK_IMPORTED_MODULE_5__.ProfileComponent, _modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_14__.BlankdraftModal, _modal_examples_examples_component__WEBPACK_IMPORTED_MODULE_15__.ExamplesComponent, _modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_16__.LoadfileComponent, _filebrowser_filebrowser_component__WEBPACK_IMPORTED_MODULE_17__.FilebrowserComponent, _keycodes_directive__WEBPACK_IMPORTED_MODULE_18__.KeycodesDirective],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_20__.CommonModule, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__.BrowserModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_22__.HttpClientModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_24__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_26__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_27__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_28__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_29__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_31__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_32__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_33__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_34__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_35__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_36__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_37__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_38__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_39__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_40__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_41__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_42__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_43__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_44__.MatTooltipModule, _angular_material_tree__WEBPACK_IMPORTED_MODULE_45__.MatTreeModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_46__.ColorPickerModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_47__.MatChipsModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_48__.MatSnackBarModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_49__.ScrollingModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_50__.DragDropModule, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_51__.MatProgressBarModule, _angular_material_badge__WEBPACK_IMPORTED_MODULE_52__.MatBadgeModule],
    exports: [_angular_common__WEBPACK_IMPORTED_MODULE_20__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.FormsModule, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__.BrowserModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_22__.HttpClientModule, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_24__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_26__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_27__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_28__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_29__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_31__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_32__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_33__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_34__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_35__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_36__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_37__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_38__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_39__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_40__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_41__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_42__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_43__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_44__.MatTooltipModule, _angular_material_tree__WEBPACK_IMPORTED_MODULE_45__.MatTreeModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_46__.ColorPickerModule, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_51__.MatProgressBarModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_47__.MatChipsModule, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_48__.MatSnackBarModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_49__.ScrollingModule, _angular_material_badge__WEBPACK_IMPORTED_MODULE_52__.MatBadgeModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_50__.DragDropModule, _uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_12__.UploadFormComponent, _topbar_topbar_component__WEBPACK_IMPORTED_MODULE_11__.TopbarComponent, _modal_init_init_modal__WEBPACK_IMPORTED_MODULE_2__.InitModal, _modal_about_about_modal__WEBPACK_IMPORTED_MODULE_1__.AboutModal, _modal_material_material_modal__WEBPACK_IMPORTED_MODULE_4__.MaterialModal, _modal_loom_loom_modal__WEBPACK_IMPORTED_MODULE_3__.LoomModal, _filebrowser_filebrowser_component__WEBPACK_IMPORTED_MODULE_17__.FilebrowserComponent, _modal_examples_examples_component__WEBPACK_IMPORTED_MODULE_15__.ExamplesComponent, _keycodes_directive__WEBPACK_IMPORTED_MODULE_18__.KeycodesDirective]
  });
})();
_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵsetComponentScope"](_modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_16__.LoadfileComponent, [_angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogClose, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogContent, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_30__.MatDialogActions, _uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_12__.UploadFormComponent], []);

/***/ }),

/***/ 52609:
/*!***********************************************************!*\
  !*** ./src/app/core/filebrowser/filebrowser.component.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FilebrowserComponent": () => (/* binding */ FilebrowserComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _provider_filesystem_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../provider/filesystem.service */ 65130);
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../login/login.component */ 2409);
/* harmony import */ var _provider_workspace_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../provider/workspace.service */ 80828);
/* harmony import */ var _modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modal/loadfile/loadfile.component */ 17623);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/divider */ 71528);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);




















function FilebrowserComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1, " Create Blank Workspace");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
}
function FilebrowserComponent_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1, " Clear Workspace");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
}
function FilebrowserComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div")(1, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_div_20_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r6.openLoginDialog());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](2, "i", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](3, " Log in");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](4, " to load and save files online ");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
}
function FilebrowserComponent_ng_container_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1, " Saved files cannot be accessed because you are offline. ");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerEnd"]();
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div")(1, "mat-form-field", 24)(2, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](3, "Rename File");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](4, "div")(5, "input", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("ngModelChange", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template_input_ngModelChange_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r19);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r18.files.current_file_name = $event);
    })("change", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template_input_change_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r19);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r20.rename());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](6, "mat-form-field", 26)(7, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](8, "Description");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](9, "textarea", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("ngModelChange", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template_textarea_ngModelChange_9_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r19);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r21.files.current_file_desc = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](10, "button", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template_button_click_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r19);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r22.rename());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](11, " Save ");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngModel", ctx_r11.files.current_file_name);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngModel", ctx_r11.files.current_file_desc);
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "button", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_4_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r25);
      const file_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2).$implicit;
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r23.openFile(file_r9.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const file_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2).$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵclassProp"]("primary", file_r9.id == ctx_r12.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtextInterpolate1"](" ", file_r9.meta.name, " ");
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const file_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtextInterpolate1"]("last viewed on: ", file_r9.meta.date, " ");
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtextInterpolate1"]("last saved at: ", ctx_r14.last_saved_time, " ");
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "button", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](1, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵreference"](12);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("matMenuTriggerFor", _r2);
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "button", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_9_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r29);
      const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r28.rename());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](1, "i", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
}
function FilebrowserComponent_ng_container_22_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r32 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](1, "div", 13)(2, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](3, FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_3_Template, 12, 2, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](4, FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_4_Template, 2, 3, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](5, FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_5_Template, 2, 1, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](6, FilebrowserComponent_ng_container_22_div_1_ng_container_1_div_6_Template, 2, 1, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](7, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](8, FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_8_Template, 2, 1, "button", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](9, FilebrowserComponent_ng_container_22_div_1_ng_container_1_button_9_Template, 2, 0, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](10, "button", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](11, "i", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](12, "mat-menu", null, 22)(14, "button", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_ng_container_22_div_1_ng_container_1_Template_button_click_14_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r32);
      const file_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]().$implicit;
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r30.remove(file_r9.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](15, " Are you sure? ");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵreference"](13);
    const file_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]().$implicit;
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵclassProp"]("current", file_r9.id === ctx_r10.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id == ctx_r10.files.current_file_id && ctx_r10.rename_mode);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id == ctx_r10.files.current_file_id && !ctx_r10.rename_mode || file_r9.id !== ctx_r10.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id != ctx_r10.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id == ctx_r10.files.current_file_id && !ctx_r10.rename_mode);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id === ctx_r10.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9.id === ctx_r10.files.current_file_id);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("matMenuTriggerFor", _r17);
  }
}
function FilebrowserComponent_ng_container_22_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](1, FilebrowserComponent_ng_container_22_div_1_ng_container_1_Template, 16, 9, "ng-container", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const file_r9 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", file_r9 !== null && file_r9.meta !== null);
  }
}
function FilebrowserComponent_ng_container_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](1, FilebrowserComponent_ng_container_22_div_1_Template, 2, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngForOf", ctx_r5.filelist);
  }
}
class FilebrowserComponent {
  constructor(files, auth, ws, dialog) {
    this.files = files;
    this.auth = auth;
    this.ws = ws;
    this.dialog = dialog;
    this.onLoadNewFile = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onClearScreen = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onCurrentFileDeleted = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onSave = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onLoadFromDB = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.isLoggedIn = false;
    this.filelist = [];
    this.rename_mode = false;
    this.last_saved_time = '--';
    this.filelist = this.files.file_tree;
    this.files.file_tree_change$.subscribe(data => {
      this.updateFileData(data);
    });
    this.files.file_saved_change$.subscribe(data => {
      this.last_saved_time = new Date(data).toUTCString();
    });
  }
  ngOnInit() {}
  updateFileData(data) {
    function compareFn(a, b) {
      if (a.meta.timestamp > b.meta.timestamp) {
        return -1;
      }
      if (a.meta.timestamp < b.meta.timestamp) {
        return 1;
      }
      // a must be equal to b
      return 0;
    }
    const timesorted = data.sort(compareFn);
    // const favs = timesorted.filter(el => this.ws.isFavorite(el.id) || this.files.current_file_id == el.id);
    // const other = timesorted.filter(el => !this.ws.isFavorite(el.id) && this.files.current_file_id !== el.id);
    //this.filelist = favs.concat(other);
    this.filelist = timesorted;
  }
  openFile(id) {
    this.onLoadFromDB.emit(id);
  }
  toggleFavorite(id) {
    this.ws.toggleFavorite(id);
    this.updateFileData(this.filelist);
  }
  duplicate() {}
  rename() {
    if (this.rename_mode === true) {
      this.files.renameFile(this.files.current_file_id, this.files.current_file_name);
      this.files.updateDescription(this.files.current_file_id, this.files.current_file_desc);
      this.rename_mode = false;
    } else {
      this.rename_mode = true;
    }
  }
  remove(fileid) {
    this.files.removeFile(fileid);
    if (fileid === this.files.current_file_id) {
      this.onCurrentFileDeleted.emit();
    }
  }
  saveAsBmp() {
    var obj = {
      type: "bmp"
    };
    console.log(obj);
    this.onSave.emit(obj);
  }
  saveAsAda() {
    var obj = {
      type: "ada"
    };
    console.log(obj);
    this.onSave.emit(obj);
  }
  saveAsWif() {
    var obj = {
      type: "wif"
    };
    this.onSave.emit(obj);
  }
  saveAsPrint() {
    var obj = {
      type: "jpg"
    };
    this.onSave.emit(obj);
  }
  //need to handle this and load the file somehow
  openNewFileDialog() {
    const dialogRef = this.dialog.open(_modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_4__.LoadfileComponent, {
      data: {
        multiple: false,
        accepts: '.ada',
        type: 'ada',
        title: 'Select an AdaCAD (.ada) file to Import'
      }
    });
    dialogRef.afterClosed().subscribe(loadResponse => {
      if (loadResponse !== undefined) this.onLoadNewFile.emit(loadResponse);
    });
  }
  openLoginDialog() {
    const dialogRef = this.dialog.open(_login_login_component__WEBPACK_IMPORTED_MODULE_2__.LoginComponent, {
      width: '600px'
    });
  }
  onNewWorkspace() {
    this.onClearScreen.emit();
  }
}
FilebrowserComponent.ɵfac = function FilebrowserComponent_Factory(t) {
  return new (t || FilebrowserComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_provider_filesystem_service__WEBPACK_IMPORTED_MODULE_1__.FilesystemService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_0__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_provider_workspace_service__WEBPACK_IMPORTED_MODULE_3__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__.MatDialog));
};
FilebrowserComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineComponent"]({
  type: FilebrowserComponent,
  selectors: [["app-filebrowser"]],
  outputs: {
    onLoadNewFile: "onLoadNewFile",
    onClearScreen: "onClearScreen",
    onCurrentFileDeleted: "onCurrentFileDeleted",
    onSave: "onSave",
    onLoadFromDB: "onLoadFromDB"
  },
  decls: 23,
  vars: 6,
  consts: [[1, "filebrowser"], ["mat-stroked-button", "", "color", "primary", 3, "click"], [1, "fa-regular", "fa-plus"], [4, "ngIf"], [1, "fa-regular", "fa-folder-open"], ["mat-stroked-button", "", "color", "primary", 3, "matMenuTriggerFor"], [1, "fa-solid", "fa-download"], ["mat-raised-button", ""], ["downloadDropdown", ""], ["mat-menu-item", "", 3, "click"], ["mat-flat-button", "", "color", "primary", "matTooltip", "login", 3, "click"], [1, "fa", "fa-sign-in"], [4, "ngFor", "ngForOf"], [1, "file-item-block"], [1, "details"], ["mat-button", "", "class", "file_name", 3, "primary", "click", 4, "ngIf"], ["class", "timestamp", 4, "ngIf"], [1, "more"], ["mat-icon-button", "", "matListItemIcon", "", "matTooltip", "Download the current AdaCAD file", 3, "matMenuTriggerFor", 4, "ngIf"], ["mat-icon-button", "", "matListItemIcon", "", "matTooltip", "rename this file", 3, "click", 4, "ngIf"], ["mat-icon-button", "", 3, "matMenuTriggerFor"], [1, "fa-solid", "fa-trash"], ["deleteConfirm", ""], ["mat-icon-button", "", "matListItemIcon", "", 3, "click"], [1, "filename"], ["matInput", "", "color", "accent", "placeholder", "Filename", 3, "ngModel", "ngModelChange", "change"], [1, "example-full-width"], ["matInput", "", "placeholder", "Ex. this file creates...", 3, "ngModel", "ngModelChange"], ["mat-raised-button", "", "color", "accent", 3, "click"], ["mat-button", "", 1, "file_name", 3, "click"], [1, "timestamp"], ["mat-icon-button", "", "matListItemIcon", "", "matTooltip", "Download the current AdaCAD file", 3, "matMenuTriggerFor"], ["mat-icon-button", "", "matListItemIcon", "", "matTooltip", "rename this file", 3, "click"], [1, "fas", "fa-edit"]],
  template: function FilebrowserComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_Template_button_click_1_listener() {
        return ctx.onNewWorkspace();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](3, FilebrowserComponent_span_3_Template, 2, 0, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](4, FilebrowserComponent_span_4_Template, 2, 0, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](5, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_Template_button_click_5_listener() {
        return ctx.openNewFileDialog();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](6, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](7, " Import .ada Workspace");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](8, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](9, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](10, " Download Workspace ");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](11, "mat-menu", 7, 8)(13, "a", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_Template_a_click_13_listener() {
        return ctx.saveAsAda();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](14, " as AdaCAD workspace file");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](15, "a", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function FilebrowserComponent_Template_a_click_15_listener() {
        return ctx.saveAsBmp();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](16, " export all visible drafts as bitmaps");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](17, "mat-divider");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](18, "h2");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](19, "Your Saved AdaCAD Files");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](20, FilebrowserComponent_div_20_Template, 5, 0, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](21, FilebrowserComponent_ng_container_21_Template, 2, 0, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](22, FilebrowserComponent_ng_container_22_Template, 2, 1, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵreference"](12);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", ctx.auth.isLoggedIn);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", !ctx.auth.isLoggedIn);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("matMenuTriggerFor", _r2);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](12);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", !ctx.auth.isLoggedIn);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", !ctx.files.connected);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", ctx.filelist !== undefined && ctx.auth.isLoggedIn && ctx.files.connected);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgModel, _angular_material_button__WEBPACK_IMPORTED_MODULE_9__.MatButton, _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__.MatDivider, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_12__.MatInput, _angular_material_menu__WEBPACK_IMPORTED_MODULE_13__.MatMenu, _angular_material_menu__WEBPACK_IMPORTED_MODULE_13__.MatMenuItem, _angular_material_menu__WEBPACK_IMPORTED_MODULE_13__.MatMenuTrigger, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__.MatTooltip],
  styles: ["h2 {\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 0.8em;\n  padding-bottom: 12px;\n}\n\nbutton {\n  margin-bottom: 4px;\n}\n\n.mat-stroked-button {\n  margin: 4px 0px;\n}\n\n.folder {\n  display: flex;\n  flex-direction: column;\n}\n\n.filebrowser {\n  margin: 20px;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8em;\n}\n\n.file-item-block {\n  display: flex;\n  flex: 1 0 0px;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  padding: 4px 0px;\n}\n\n.current {\n  color: #ff4081;\n}\n\n.more {\n  display: flex;\n  flex-direction: row;\n  color: grey;\n}\n\n.mat-form-field {\n  width: 100%;\n}\n\n.mat-list-item {\n  padding: 0px !important;\n  width: 100%;\n}\n\n.timestamp {\n  position: relative;\n  left: 16px;\n  font-size: 0.8em;\n  padding: 4px 0px;\n}\n\n.details {\n  width: inherit;\n  display: flex;\n  flex: 2 2 75%;\n  flex-direction: column;\n}\n\n.accent {\n  color: #ff4081;\n}\n\n.details .mat-button {\n  height: -moz-fit-content !important;\n  height: fit-content !important;\n  display: flex;\n  flex-direction: column;\n}\n\n.details .mat-button-wrapper {\n  display: flex;\n  white-space: normal;\n  text-overflow: clip;\n  overflow-wrap: anywhere;\n  overflow: hidden;\n  line-height: 1em;\n  width: inherit;\n}\n\n.details .mat-icon-button {\n  width: 30px;\n  height: 30px;\n}\n/*# sourceURL=webpack://./src/app/core/filebrowser/filebrowser.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9maWxlYnJvd3Nlci9maWxlYnJvd3Nlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDBCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxvQkFBQTtBQUNKOztBQUdBO0VBQ0ksa0JBQUE7QUFBSjs7QUFPQTtFQUNLLGVBQUE7QUFKTDs7QUFRQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtBQUxKOztBQVFBO0VBQ0ksWUFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0FBTEo7O0FBUUE7RUFDSSxhQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFMSjs7QUFRQTtFQUNJLGNBQUE7QUFMSjs7QUFTQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7QUFOSjs7QUFTQTtFQUNJLFdBQUE7QUFOSjs7QUFTQTtFQUNJLHVCQUFBO0VBQ0EsV0FBQTtBQU5KOztBQWFBO0VBQ0ksa0JBQUE7RUFDQSxVQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtBQVZKOztBQWFBO0VBQ0ksY0FBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFWSjs7QUFhQTtFQUNJLGNBQUE7QUFWSjs7QUFhQTtFQUNJLG1DQUFBO0VBQUEsOEJBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFWSjs7QUFjQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxnQkFBQTtFQUNBLGdCQUFBO0VBQ0EsY0FBQTtBQVhKOztBQWNBO0VBQ0ksV0FBQTtFQUNBLFlBQUE7QUFYSiIsInNvdXJjZXNDb250ZW50IjpbImgyIHtcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIHBhZGRpbmctYm90dG9tOiAxMnB4O1xufVxuXG5idXR0b24ge1xuICBtYXJnaW4tYm90dG9tOiA0cHg7XG59XG5cbi5tYXQtc3Ryb2tlZC1idXR0b24ge1xuICBtYXJnaW46IDRweCAwcHg7XG59XG5cbi5mb2xkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uZmlsZWJyb3dzZXIge1xuICBtYXJnaW46IDIwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGZvbnQtc2l6ZTogMC44ZW07XG59XG5cbi5maWxlLWl0ZW0tYmxvY2sge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxIDAgMHB4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA0cHggMHB4O1xufVxuXG4uY3VycmVudCB7XG4gIGNvbG9yOiAjZmY0MDgxO1xufVxuXG4ubW9yZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGNvbG9yOiBncmV5O1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1saXN0LWl0ZW0ge1xuICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi50aW1lc3RhbXAge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDE2cHg7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIHBhZGRpbmc6IDRweCAwcHg7XG59XG5cbi5kZXRhaWxzIHtcbiAgd2lkdGg6IGluaGVyaXQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDIgMiA3NSU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5hY2NlbnQge1xuICBjb2xvcjogI2ZmNDA4MTtcbn1cblxuLmRldGFpbHMgLm1hdC1idXR0b24ge1xuICBoZWlnaHQ6IGZpdC1jb250ZW50ICFpbXBvcnRhbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5kZXRhaWxzIC5tYXQtYnV0dG9uLXdyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICB0ZXh0LW92ZXJmbG93OiBjbGlwO1xuICBvdmVyZmxvdy13cmFwOiBhbnl3aGVyZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgd2lkdGg6IGluaGVyaXQ7XG59XG5cbi5kZXRhaWxzIC5tYXQtaWNvbi1idXR0b24ge1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAzMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"],
  encapsulation: 2
});

/***/ }),

/***/ 85150:
/*!********************************************!*\
  !*** ./src/app/core/keycodes.directive.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeycodesDirective": () => (/* binding */ KeycodesDirective)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _draftdetail_provider_render_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../draftdetail/provider/render.service */ 78793);
/* harmony import */ var _mixer_provider_zoom_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mixer/provider/zoom.service */ 75817);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider/file.service */ 96374);
/* harmony import */ var _provider_state_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider/state.service */ 99938);










class KeycodesDirective {
  constructor(zs, fs, ss, render) {
    this.zs = zs;
    this.fs = fs;
    this.ss = ss;
    this.render = render;
    this.mixer_has_focus = true;
    this.onUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onRedo = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.updateMixerView = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.updateDetailView = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onCopySelections = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onPasteSelections = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }
  /**
   * Set a listern to keep track of the location that the user last clicked
   * @param event
   */
  onMouseDown(event) {
    if (event.target.id == 'scrollable-container') this.mixer_has_focus = true;
    if (event.target.id == 'draft-container') this.mixer_has_focus = false;
  }
  keyEventDetected(e) {
    /**
     * ZOOM IN
     */
    if (e.key == "=" && e.metaKey) {
      if (!this.mixer_has_focus) {
        console.log("ZOOM IN ON RENDER", e, e.target);
        this.render.zoomIn();
        this.updateDetailView.emit();
        return false;
      } else {
        console.log("ZOOM IN on MIXER", e, e.target);
        const old_zoom = this.zs.zoom;
        this.zs.zoomIn();
        this.updateMixerView.emit(old_zoom);
        return false;
      }
    }
    /**
     *  ZOOM OUT
     */
    if (e.key == "-" && e.metaKey) {
      if (!this.mixer_has_focus) {
        console.log("ZOOM IN ON RENDER", e, e.target);
        this.render.zoomOut();
        this.updateDetailView.emit();
        return false;
      } else {
        console.log("ZOOM IN on MIXER", e, e.target);
        const old_zoom = this.zs.zoom;
        this.zs.zoomOut();
        this.updateMixerView.emit(old_zoom);
        return false;
      }
    }
    /**
     * SAVE
     */
    if (e.key == "s" && e.metaKey) {
      console.log("KEYDOWN S");
      this.fs.saver.ada('mixer', true, this.zs.zoom).then(so => {
        this.ss.addMixerHistoryState(so);
      });
      e.preventDefault();
    }
    /**
     * UNDO
     */
    if (e.key == "z" && e.metaKey) {
      this.onUndo.emit();
    }
    /**
     * REDO
     */
    if (e.key == "y" && e.metaKey) {
      this.onRedo.emit();
    }
    if (e.key == "c" && e.metaKey) {
      this.onCopySelections.emit();
    }
    if (e.key == "v" && e.metaKey) {
      this.onPasteSelections.emit();
    }
    // /**
    //  * Sets selected area to clear
    //  * @extends WeaveComponent
    //  * @param {Event} delete key pressed
    //  * @returns {void}
    //  */
    // @HostListener('window:keydown.e', ['$event'])
    // private keyEventErase(e) {
    //   this.dm.selectDesignMode('down','draw_modes');
    //   this.weaveRef.unsetSelection();
    // }
    // /**
    //  * Sets brush to point on key control + d.
    //  * @extends WeaveComponent
    //  * @param {Event} e - Press Control + d
    //  * @returns {void}
    //  */
    // @HostListener('window:keydown.d', ['$event'])
    // private keyEventPoint(e) {
    //   this.dm.selectDesignMode('up','draw_modes');
    //   this.weaveRef.unsetSelection();
    // }
    // /**
    //  * Sets brush to select on key control + s
    //  * @extends WeaveComponent
    //  * @param {Event} e - Press Control + s
    //  * @returns {void}
    //  */
    // @HostListener('window:keydown.s', ['$event'])
    // private keyEventSelect(e) {
    //   this.dm.selectDesignMode('select','design_modes');
    //   this.weaveRef.unsetSelection();
    // }
    // /**
    //  * Sets key control to invert on control + x
    //  * @extends WeaveComponent
    //  * @param {Event} e - Press Control + x
    //  * @returns {void}
    //  */
    // @HostListener('window:keydown.x', ['$event'])
    // private keyEventInvert(e) {
    //   this.dm.selectDesignMode('toggle','draw_modes');
    //   this.weaveRef.unsetSelection();
    // }
    // /**
    //  * Sets key to copy 
    //  * @extends WeaveComponent
    //  * @param {Event} e - Press Control + x
    //  * @returns {void}
    //  */
    // // @HostListener('window:keydown.c', ['$event'])
    // // private keyEventCopy(e) {
    // //   this.onCopy();  
    // // }
    //   /**
    //  * Sets key to copy 
    //  * @extends WeaveComponent
    //  * @param {Event} e - Press Control + x
    //  * @returns {void}
    //  */
    // @HostListener('window:keydown.p', ['$event'])
    // private keyEventPaste(e) {
    //   this.weaveRef.onPaste({});
    // }
    // }
  }
}

KeycodesDirective.ɵfac = function KeycodesDirective_Factory(t) {
  return new (t || KeycodesDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_mixer_provider_zoom_service__WEBPACK_IMPORTED_MODULE_1__.ZoomService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_provider_file_service__WEBPACK_IMPORTED_MODULE_2__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_provider_state_service__WEBPACK_IMPORTED_MODULE_3__.StateService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_draftdetail_provider_render_service__WEBPACK_IMPORTED_MODULE_0__.RenderService));
};
KeycodesDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: KeycodesDirective,
  selectors: [["appKeycodes"]],
  hostBindings: function KeycodesDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("mousedown", function KeycodesDirective_mousedown_HostBindingHandler($event) {
        return ctx.onMouseDown($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresolveWindow"])("keydown", function KeycodesDirective_keydown_HostBindingHandler($event) {
        return ctx.keyEventDetected($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresolveWindow"]);
    }
  },
  outputs: {
    onUndo: "onUndo",
    onRedo: "onRedo",
    updateMixerView: "updateMixerView",
    updateDetailView: "updateDetailView",
    onCopySelections: "onCopySelections",
    onPasteSelections: "onPasteSelections"
  }
});

/***/ }),

/***/ 2409:
/*!***********************************************!*\
  !*** ./src/app/core/login/login.component.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoginComponent": () => (/* binding */ LoginComponent),
/* harmony export */   "MyErrorStateMatcher": () => (/* binding */ MyErrorStateMatcher)
/* harmony export */ });
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 60124);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/input */ 68562);













function LoginComponent_div_14_mat_error_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "mat-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, " Please enter a valid email address ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
}
function LoginComponent_div_14_mat_error_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "mat-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, " Email is ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "strong");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "required");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
  }
}
function LoginComponent_div_14_div_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r3.error);
  }
}
function LoginComponent_div_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div")(1, "mat-form-field", 9)(2, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "Email");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](4, "input", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, LoginComponent_div_14_mat_error_5_Template, 2, 0, "mat-error", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](6, LoginComponent_div_14_mat_error_6_Template, 4, 0, "mat-error", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "mat-form-field", 9)(8, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](9, "Password");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](10, "input", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](11, LoginComponent_div_14_div_11_Template, 2, 1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](12, "div", 13)(13, "button", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function LoginComponent_div_14_Template_button_click_13_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r5);
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r4.onEmailSignUp());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](14, "Sign Up");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](15, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function LoginComponent_div_14_Template_button_click_15_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r5);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r6.onEmailLogin());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](16, "Log in");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("formControl", ctx_r0.emailFormControl)("errorStateMatcher", ctx_r0.matcher);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0.emailFormControl.hasError("email") && !ctx_r0.emailFormControl.hasError("required"));
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0.emailFormControl.hasError("required"));
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("formControl", ctx_r0.passwordFormControl);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0.error !== "");
  }
}
/** Error when invalid control is dirty, touched, or submitted. */
class MyErrorStateMatcher {
  isErrorState(control, form) {
    const isSubmitted = form && form.submitted;
    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
  }
}
class LoginComponent {
  constructor(router, auth, dialogRef, data) {
    this.router = router;
    this.auth = auth;
    this.dialogRef = dialogRef;
    this.data = data;
    this.emailFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UntypedFormControl('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.email]);
    this.passwordFormControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UntypedFormControl('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required]);
    this.matcher = new MyErrorStateMatcher();
    this.useemail = false;
    this.error = "";
  }
  ngOnInit() {}
  onEmailLogin() {
    console.log("sign in with ", this.emailFormControl.value, this.passwordFormControl.value);
    this.auth.emailSignIn(this.emailFormControl.value, this.passwordFormControl.value).then(res => {
      if (res === '') {
        this.dialogRef.close('Created and Logged In New User!');
      } else {
        console.log("res", res);
        switch (res) {
          case "auth/user-not-found":
            this.error = "there is no user at that email address, did you mean to hit sign up?";
            break;
          case "auth/wrong-password":
            this.error = "wrong password";
            break;
          default:
            this.error = res;
        }
      }
    });
  }
  onEmailSignUp() {
    console.log("sign up with ", this.emailFormControl.value, this.passwordFormControl.value);
    this.auth.emailSignUp(this.emailFormControl.value, this.passwordFormControl.value).then(res => {
      if (res === '') {
        this.dialogRef.close('Created and Logged In New User!');
      } else {
        console.log("res", res);
        switch (res) {
          case "auth/weak-password":
            this.error = "please use a stronger password (with symbols or numbers)";
            break;
          case "auth/email-already-in-use":
            this.error = "this email is already associated with an existing account";
            break;
          default:
            this.error = res;
        }
      }
    });
  }
  // onEmailSubmit() {
  // }
  loginGoogle() {
    this.auth.login().then(logged_in => {
      this.dialogRef.close('Log In Via Google Success!');
    }, not_logged_in => {
      console.log(Error);
    });
  }
  openEmailLogin() {
    this.router.navigateByUrl('/email-login');
  }
  createNewEmailUser() {
    this.router.navigateByUrl('/signup');
  }
}
LoginComponent.ɵfac = function LoginComponent_Factory(t) {
  return new (t || LoginComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_3__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_0__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MAT_DIALOG_DATA));
};
LoginComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: LoginComponent,
  selectors: [["app-login"]],
  decls: 20,
  vars: 1,
  consts: [[1, "dialog-header"], ["mat-dialog-title", ""], [1, "form-container"], [1, "left"], ["mat-raised-button", "", 1, "google", 3, "click"], [1, "right"], [4, "ngIf"], ["align", "start"], ["mat-button", "", "mat-dialog-close", ""], ["appearance", "fill", 1, "example-full-width"], ["matInput", "", "placeholder", "email", "name", "email", "required", "", 1, "input-txt", 3, "formControl", "errorStateMatcher"], ["matInput", "", "placeholder", "password", "name", "password", "required", "", 1, "input-txt", 3, "formControl"], ["class", "error", 4, "ngIf"], [1, "email_input"], ["mat-raised-button", "", "type", "submit", 1, "auth-btn", 3, "click"], ["mat-raised-button", "", "color", "primary", "type", "submit", 1, "auth-btn", 3, "click"], [1, "error"]],
  template: function LoginComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0)(1, "h2", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, "Login to Save your File");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "mat-dialog-content")(4, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](5, "Creating a user account allows us to save the state of your design so that if the system crashes or closes for any reason you can recover your file when you reload AdaCAD.");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "div", 2)(7, "div", 3)(8, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function LoginComponent_Template_button_click_8_listener() {
        return ctx.loginGoogle();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](9, "Login or Signup With Google");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](10, "div", 5)(11, "p")(12, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](13, "We currently only support logging in through google, more methods coming soon");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](14, LoginComponent_div_14_Template, 17, 6, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](15, "mat-dialog-actions", 7)(16, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](17, "Continue Without an Account");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](18, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](19, "Close");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.useemail);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.RequiredValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormControlDirective, _angular_material_button__WEBPACK_IMPORTED_MODULE_6__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogClose, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogContent, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogActions, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__.MatError, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_8__.MatInput],
  styles: [".form-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.dialog-header[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.mat-dialog-title[_ngcontent-%COMP%] {\n  margin: 0px !important;\n}\n\n.mat-dialog-actions[_ngcontent-%COMP%] {\n  justify-content: space-between;\n}\n\n.error[_ngcontent-%COMP%] {\n  color: red;\n  font: 0.8em;\n}\n\n.left[_ngcontent-%COMP%], .right[_ngcontent-%COMP%] {\n  width: 45%;\n  display: flex;\n  flex-direction: column;\n  margin: 10px;\n}\n\n.email_input[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\n.mat-form-field[_ngcontent-%COMP%] {\n  min-width: 100%;\n}\n\n.email_input[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  margin: 0px 5px;\n}\n\nbutton[_ngcontent-%COMP%] {\n  display: block;\n}\n/*# sourceURL=webpack://./src/app/core/login/login.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtBQUNKOztBQUVBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7QUFDSjs7QUFFQTtFQUNJLHNCQUFBO0FBQ0o7O0FBRUE7RUFDSSw4QkFBQTtBQUNKOztBQUVBO0VBQ0ksVUFBQTtFQUNBLFdBQUE7QUFDSjs7QUFFQTtFQUNJLFVBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxZQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtBQUNKOztBQUVBO0VBQ0ksZUFBQTtBQUNKOztBQUVBO0VBQ0ksZUFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLmZvcm0tY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cblxuLmRpYWxvZy1oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5tYXQtZGlhbG9nLXRpdGxlIHtcbiAgbWFyZ2luOiAwcHggIWltcG9ydGFudDtcbn1cblxuLm1hdC1kaWFsb2ctYWN0aW9ucyB7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLmVycm9yIHtcbiAgY29sb3I6IHJlZDtcbiAgZm9udDogMC44ZW07XG59XG5cbi5sZWZ0LCAucmlnaHQge1xuICB3aWR0aDogNDUlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW46IDEwcHg7XG59XG5cbi5lbWFpbF9pbnB1dCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG59XG5cbi5tYXQtZm9ybS1maWVsZCB7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLmVtYWlsX2lucHV0IGJ1dHRvbiB7XG4gIG1hcmdpbjogMHB4IDVweDtcbn1cblxuYnV0dG9uIHtcbiAgZGlzcGxheTogYmxvY2s7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 5401:
/*!*************************************************!*\
  !*** ./src/app/core/modal/about/about.modal.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AboutModal": () => (/* binding */ AboutModal)
/* harmony export */ });
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _provider_version_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../provider/version.service */ 20911);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);





class AboutModal {
  constructor(vs, dialogRef, data) {
    this.vs = vs;
    this.dialogRef = dialogRef;
    this.data = data;
    this.version = vs.currentVersion();
  }
  ngOnInit() {}
  close() {
    this.dialogRef.close();
  }
}
AboutModal.ɵfac = function AboutModal_Factory(t) {
  return new (t || AboutModal)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_provider_version_service__WEBPACK_IMPORTED_MODULE_0__.VersionService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__.MAT_DIALOG_DATA));
};
AboutModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: AboutModal,
  selectors: [["app-about"]],
  decls: 52,
  vars: 1,
  consts: [["mat-dialog-title", ""], [1, "is-fullwidth"], [1, "mat-body"], ["href", "https://www.gnu.org/licenses/gpl-3.0.en.html", "target", "_blank"], ["href", "https://unstable.design", "target", "_blank"], ["href", "https://www.nsf.gov/awardsearch/showAward?AWD_ID=1755587&HistoricalAwards=false", "target", "_blank"], ["href", "https://www.nsf.gov/awardsearch/showAward?AWD_ID=1943109", "target", "_blank"], [1, "mat-h3"], ["href", "https://forms.gle/wWpdnikW8Vj8JcoWA", "target", "_blank"], ["href", "https://unstabledesign.github.io", "target", "_blank"], ["href", "https://www.youtube.com/channel/UCRK7RAt8Z7Nw1u3aJ0FyPuQ", "target", "_blank"], ["href", "https://github.com/UnstableDesign/AdaCAD-weaver", "target", "_blank"], [1, "mat-raised-button", "mat-primary", 3, "click"]],
  template: function AboutModal_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "h2", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, "About");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "mat-dialog-content")(3, "div", 1)(4, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](7, "---");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](8, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](9, "AdaCAD is ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](10, "a", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](11, "Free Software");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](12, " created by the ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](13, "a", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](14, "Unstable Design Lab");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](15, " with support from National Science Foundation Grants ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](16, "a", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](17, "#1755587");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](18, " and ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](19, "a", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](20, "#1943109");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](21, "h3", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](22, "Your Feedback is Important!");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](23, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](24, "We are excited to build this in order to explore the intersections between open source, computational design, weaving. Your feedback can help us make it better. ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](25, "a", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](26, "Tell us about your experience here");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](27, "h3", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](28, "How To");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](29, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](30, " We have prepared documents describing our software and features as well as how-to videos. You can find all available documentation at this link: ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](31, "a", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](32, "unstabledesign.github.io");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](33, " or you can view our ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](34, "a", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](35, "youtube channel");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](36, "h3", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](37, "Contribute");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](38, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](39, " If you are a developer and would like to contribute to this project you can do so via ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](40, "a", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](41, "GitHub");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](42, "h3", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](43, "Request Features via Github");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](44, "p", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](45, " If you would like to request features, you may do so by submitting an \"issue\" or feature request via ");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](46, "a", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](47, "GitHub");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](48, " or write to us directly via email at unstabledesignlab@gmail.com");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](49, "mat-dialog-actions")(50, "button", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function AboutModal_Template_button_click_50_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](51, "Close");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"]("You are using AdaCAD version ", ctx.version, "");
    }
  },
  dependencies: [_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__.MatDialogContent, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__.MatDialogActions],
  styles: ["a[_ngcontent-%COMP%] {\n  color: #00d1b2;\n  font-weight: bold;\n}\n\nh3[_ngcontent-%COMP%] {\n  padding-top: 1em;\n}\n/*# sourceURL=webpack://./src/app/core/modal/about/about.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9hYm91dC9hYm91dC5tb2RhbC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0MsY0FBQTtFQUNBLGlCQUFBO0FBQ0Q7O0FBRUE7RUFDQyxnQkFBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiYSB7XG4gIGNvbG9yOiAjMDBkMWIyO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuaDMge1xuICBwYWRkaW5nLXRvcDogMWVtO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 84602:
/*!***********************************************************!*\
  !*** ./src/app/core/modal/blankdraft/blankdraft.modal.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlankdraftModal": () => (/* binding */ BlankdraftModal)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _provider_designmodes_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/designmodes.service */ 73169);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../provider/file.service */ 96374);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/select */ 57371);















function BlankdraftModal_mat_option_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const type_r5 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", type_r5.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", type_r5.viewValue, " ");
  }
}
function BlankdraftModal_mat_option_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const unit_r6 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", unit_r6.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", unit_r6.viewValue, " ");
  }
}
function BlankdraftModal_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](1, "mat-form-field", 1)(2, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](3, "Frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "input", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function BlankdraftModal_ng_container_24_Template_input_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r7.frame_num = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx_r3.frame_num);
  }
}
function BlankdraftModal_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](1, "mat-form-field", 1)(2, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](3, "Treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "input", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function BlankdraftModal_ng_container_25_Template_input_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r9.treadle_num = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx_r4.treadle_num);
  }
}
class BlankdraftModal {
  constructor(fls, dm, dialogRef, data) {
    this.fls = fls;
    this.dm = dm;
    this.dialogRef = dialogRef;
    this.data = data;
    this.loom_types = [];
    this.units = [];
    this.selected_unit = "in";
    this.loomtype = 'jacquard';
    this.epi = 30;
    this.valid = false;
    this.frame_num = 8;
    this.treadle_num = 10;
    this.onNewDraftCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.loom_types = this.dm.getOptionSet('loom_types');
    this.units = this.dm.getOptionSet('density_units');
  }
  ngOnInit() {}
  close() {
    console.log("CLOSE");
    this.createDraftAndClose();
  }
  onNoClick() {
    console.log("NO CLICK");
    this.createDraftAndClose();
  }
  createDraftAndClose() {
    const draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      wefts: this.wefts,
      warps: this.warps
    });
    let loom = null;
    if (this.loomtype !== 'jacquard') {
      loom = {
        threading: [],
        treadling: [],
        tieup: []
      };
    }
    const loom_settings = {
      treadles: this.treadle_num,
      frames: this.frame_num,
      type: this.loomtype,
      epi: this.epi,
      units: this.selected_unit
    };
    console.log("CREATED", draft, loom, loom_settings);
    this.dialogRef.close({
      draft,
      loom,
      loom_settings
    });
  }
  /**
  * called when the init form is complete
  *  */
  save(f) {
    console.log("SAVE CALLED");
    //if the INIT form parent is listening, it gets the entire form
    this.onNewDraftCreated.emit(f);
    //Otherwise, the dialog ref will just return the new draft to add to the palette
    this.createDraftAndClose();
  }
}
BlankdraftModal.ɵfac = function BlankdraftModal_Factory(t) {
  return new (t || BlankdraftModal)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_file_service__WEBPACK_IMPORTED_MODULE_2__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_1__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MAT_DIALOG_DATA));
};
BlankdraftModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: BlankdraftModal,
  selectors: [["app-blankdraft"]],
  outputs: {
    onNewDraftCreated: "onNewDraftCreated"
  },
  decls: 29,
  vars: 11,
  consts: [["initForm", "ngForm"], ["appearance", "fill"], ["name", "loomtype", 3, "value", "ngModel", "valueChange", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "type", "number", "placeholder", "Number of Warp Ends", "value", "20", "name", "warps", "min", "2", "step", "1", 3, "ngModel", "ngModelChange"], ["matInput", "", "type", "number", "placeholder", "Number of Weft Picks", "value", "20", "name", "wefts", "min", "2", "step", "1", 3, "ngModel", "ngModelChange"], ["name", "units", 3, "value", "ngModel", "valueChange", "ngModelChange"], ["matInput", "", "type", "number", "placeholder", "Weave Density", "name", "epi", "value", "10", 3, "ngModel", "ngModelChange"], [4, "ngIf"], [1, "mat-raised-button", "mat-primary", 3, "click"], [3, "value"], ["matInput", "", "type", "number", "placeholder", "Number of Shafts", "name", "frame_num", "min", "2", "step", "1", "value", "8", 3, "ngModel", "ngModelChange"], ["matInput", "", "type", "number", "placeholder", "Number of Treadles", "name", "treadle_num", "min", "2", "step", "1", "value", "10", 3, "ngModel", "ngModelChange"]],
  template: function BlankdraftModal_Template(rf, ctx) {
    if (rf & 1) {
      const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "form", null, 0)(2, "mat-form-field", 1)(3, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4, "Which type of loom are you designing for?");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "mat-select", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("valueChange", function BlankdraftModal_Template_mat_select_valueChange_5_listener($event) {
        return ctx.loomtype = $event;
      })("ngModelChange", function BlankdraftModal_Template_mat_select_ngModelChange_5_listener($event) {
        return ctx.loomtype = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](6, BlankdraftModal_mat_option_6_Template, 2, 2, "mat-option", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](7, "mat-form-field", 1)(8, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](9, "Warps");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](10, "input", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function BlankdraftModal_Template_input_ngModelChange_10_listener($event) {
        return ctx.warps = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](11, "mat-form-field", 1)(12, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](13, "Wefts");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "input", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function BlankdraftModal_Template_input_ngModelChange_14_listener($event) {
        return ctx.wefts = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](15, "mat-form-field", 1)(16, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](17, "Density Units");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](18, "mat-select", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("valueChange", function BlankdraftModal_Template_mat_select_valueChange_18_listener($event) {
        return ctx.units = $event;
      })("ngModelChange", function BlankdraftModal_Template_mat_select_ngModelChange_18_listener($event) {
        return ctx.selected_unit = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](19, BlankdraftModal_mat_option_19_Template, 2, 2, "mat-option", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](20, "mat-form-field", 1)(21, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](22, "Weave Density");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](23, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function BlankdraftModal_Template_input_ngModelChange_23_listener($event) {
        return ctx.epi = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](24, BlankdraftModal_ng_container_24_Template, 5, 1, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](25, BlankdraftModal_ng_container_25_Template, 5, 1, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](26, "mat-dialog-actions")(27, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function BlankdraftModal_Template_button_click_27_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r11);
        const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](1);
        return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx.save(_r0));
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](28, "Load");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx.loomtype)("ngModel", ctx.loomtype);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx.loom_types);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx.warps);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx.wefts);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx.units)("ngModel", ctx.selected_unit);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx.units);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx.epi);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.loomtype == "frame" || ctx.loomtype == "direct");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.loomtype == "frame");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgForm, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__.MatOption, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogActions, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_9__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_10__.MatSelect],
  styles: [".mat-form-field[_ngcontent-%COMP%] {\n  width: 400px !important;\n  clear: both;\n  display: block;\n}\n/*# sourceURL=webpack://./src/app/core/modal/blankdraft/blankdraft.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9ibGFua2RyYWZ0L2JsYW5rZHJhZnQubW9kYWwuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNDLHVCQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZm9ybS1maWVsZCB7XG4gIHdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBjbGVhcjogYm90aDtcbiAgZGlzcGxheTogYmxvY2s7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 12324:
/*!***********************************************************!*\
  !*** ./src/app/core/modal/examples/examples.component.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExamplesComponent": () => (/* binding */ ExamplesComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_fire_analytics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/fire/analytics */ 52591);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../provider/auth.service */ 46866);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/file.service */ 96374);
/* harmony import */ var _provider_exampleservice_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../provider/exampleservice.service */ 22031);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_card__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/card */ 82156);














function ExamplesComponent_mat_card_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-card")(1, "mat-card-title");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](3, "img", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "mat-card-content")(5, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](7, "mat-card-actions")(8, "button", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ExamplesComponent_mat_card_1_Template_button_click_8_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r3);
      const example_r1 = restoredCtx.$implicit;
      const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r2.loadExample(example_r1.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](9, " Open ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const example_r1 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("", example_r1.title, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpropertyInterpolate2"]("src", "/assets/example_img/", example_r1.id, ".", example_r1.ext, "", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsanitizeUrl"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", example_r1.desc, " ");
  }
}
class ExamplesComponent {
  constructor(fls, auth, http, examples) {
    this.fls = fls;
    this.auth = auth;
    this.http = http;
    this.examples = examples;
    this.onLoadExample = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.local_examples = examples.getExamples();
  }
  loadExample(filename) {
    const analytics = (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_4__.getAnalytics)();
    (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_4__.logEvent)(analytics, 'onloadexample', {
      items: [{
        uid: this.auth.uid,
        name: filename
      }]
    });
    this.http.get('assets/examples/' + filename + ".ada", {
      observe: 'response'
    }).subscribe(res => {
      this.fls.loader.ada(filename, -1, '', res.body).then(res => {
        this.onLoadExample.emit(res);
        return;
      }).catch(e => {
        console.log("CAUGHT ERROR IN FILE LOADER ");
      });
    });
  }
}
ExamplesComponent.ɵfac = function ExamplesComponent_Factory(t) {
  return new (t || ExamplesComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_file_service__WEBPACK_IMPORTED_MODULE_1__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_0__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_exampleservice_service__WEBPACK_IMPORTED_MODULE_2__.ExampleserviceService));
};
ExamplesComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: ExamplesComponent,
  selectors: [["app-examples"]],
  outputs: {
    onLoadExample: "onLoadExample"
  },
  decls: 2,
  vars: 1,
  consts: [[1, "preloaded_files"], [4, "ngFor", "ngForOf"], ["mat-card-image", "", "alt", "Screenshot of the File Contents", 3, "src"], ["mat-raised-button", "", "color", "primary", 3, "click"]],
  template: function ExamplesComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](1, ExamplesComponent_mat_card_1_Template, 10, 4, "mat-card", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx.local_examples);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgForOf, _angular_material_button__WEBPACK_IMPORTED_MODULE_7__.MatButton, _angular_material_card__WEBPACK_IMPORTED_MODULE_8__.MatCard, _angular_material_card__WEBPACK_IMPORTED_MODULE_8__.MatCardContent, _angular_material_card__WEBPACK_IMPORTED_MODULE_8__.MatCardTitle, _angular_material_card__WEBPACK_IMPORTED_MODULE_8__.MatCardActions, _angular_material_card__WEBPACK_IMPORTED_MODULE_8__.MatCardImage],
  styles: ["p[_ngcontent-%COMP%] {\n  font: 100;\n  font-style: italic;\n  width: 80%;\n  padding-bottom: 8px;\n  padding-left: 8px;\n}\n\n.preloaded_files[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.preloaded_files[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  width: 90%;\n  margin: 10px 5%;\n}\n\n.mat-card-title[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n}\n/*# sourceURL=webpack://./src/app/core/modal/examples/examples.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9leGFtcGxlcy9leGFtcGxlcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNDLFNBQUE7RUFDQSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBO0FBQ0Q7O0FBR0E7RUFDQyxhQUFBO0VBQ0Esc0JBQUE7QUFBRDs7QUFHQTtFQUNDLFVBQUE7RUFDQSxlQUFBO0FBQUQ7O0FBR0E7RUFDQyxhQUFBO0VBQ0EsOEJBQUE7QUFBRCIsInNvdXJjZXNDb250ZW50IjpbInAge1xuICBmb250OiAxMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgd2lkdGg6IDgwJTtcbiAgcGFkZGluZy1ib3R0b206IDhweDtcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XG59XG5cbi5wcmVsb2FkZWRfZmlsZXMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ucHJlbG9hZGVkX2ZpbGVzIC5tYXQtY2FyZCB7XG4gIHdpZHRoOiA5MCU7XG4gIG1hcmdpbjogMTBweCA1JTtcbn1cblxuLm1hdC1jYXJkLXRpdGxlIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 61746:
/*!***********************************************!*\
  !*** ./src/app/core/modal/init/init.modal.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InitModal": () => (/* binding */ InitModal)
/* harmony export */ });
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../provider/designmodes.service */ 73169);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/auth.service */ 46866);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../provider/file.service */ 96374);
/* harmony import */ var _blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../blankdraft/blankdraft.modal */ 84602);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _examples_examples_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../examples/examples.component */ 12324);
/* harmony import */ var _loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../loadfile/loadfile.component */ 17623);





















function InitModal_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "h2", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Open a Workspace");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function InitModal_h2_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "h2", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Create a Blank Draft");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function InitModal_ng_container_8_mat_option_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-option", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const opt_r8 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", opt_r8.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", opt_r8.viewValue, " ");
  }
}
function InitModal_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "mat-form-field", 7)(2, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3, "Where would you like to begin?");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "mat-select", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("valueChange", function InitModal_ng_container_8_Template_mat_select_valueChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r9.selected = $event);
    })("selectionChange", function InitModal_ng_container_8_Template_mat_select_selectionChange_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r11.selectionMade(ctx_r11.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](5, InitModal_ng_container_8_mat_option_5_Template, 2, 2, "mat-option", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", ctx_r3.selected);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx_r3.opts);
  }
}
function InitModal_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "app-blankdraft", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("onNewDraftCreated", function InitModal_ng_container_9_Template_app_blankdraft_onNewDraftCreated_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r13);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r12.newDraftCreated($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function InitModal_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](1, "app-loadfile");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function InitModal_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](1, "app-examples");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
class InitModal {
  constructor(fls, auth, dm, http, dialogRef, data) {
    this.fls = fls;
    this.auth = auth;
    this.dm = dm;
    this.http = http;
    this.dialogRef = dialogRef;
    this.data = data;
    this.opts = [{
      value: 'example',
      viewValue: 'Browse Examples',
      mixeronly: true
    }, {
      value: 'ada',
      viewValue: 'Open an AdaCAD (.ada) File from you Computer',
      mixeronly: true
    },
    // {value: 'bmp', viewValue: 'Two Color Image (.bmp, .jpg, .png) File', mixeronly: false},
    // {value: 'wif', viewValue: 'WIF (.wif) File', mixeronly: false},   
    {
      value: 'blank',
      viewValue: 'Open an Empty Workspace',
      mixeronly: false
    }, {
      value: 'new',
      viewValue: 'Create a Blank Draft',
      mixeronly: false
    }];
    this.import_opts = [];
    //form: any = {};
    this.selected = null;
    this.valid = false;
    // result: LoadResponse;
    this.new_draft = false;
    this.source = data.source;
    this.import_opts = this.opts.filter(el => !el.mixeronly);
  }
  ngOnInit() {
    if (this.data.source === "newdraft") this.new_draft = true;
  }
  selectionMade(selection) {
    if (selection === 'blank') this.dialogRef.close({
      data: null,
      status: -1
    });
  }
  close() {
    this.dialogRef.close(null);
  }
  onNoClick() {
    this.dialogRef.close(null);
  }
  newDraftCreated(f) {
    console.log("SAVE CALLED", f);
    return this.fls.loader.form(f).then(res => this.dialogRef.close(res));
  }
}
InitModal.ɵfac = function InitModal_Factory(t) {
  return new (t || InitModal)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_file_service__WEBPACK_IMPORTED_MODULE_2__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_1__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_8__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_8__.MAT_DIALOG_DATA));
};
InitModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
  type: InitModal,
  selectors: [["app-init"]],
  viewQuery: function InitModal_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵviewQuery"](_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_3__.BlankdraftModal, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵloadQuery"]()) && (ctx.blankdraft = _t.first);
    }
  },
  decls: 12,
  vars: 6,
  consts: [[1, "toprow"], ["mat-icon-button", "", 3, "click"], [1, "fas", "fa-times"], ["mat-dialog-title", "", 4, "ngIf"], ["initForm", "ngForm"], [4, "ngIf"], ["mat-dialog-title", ""], ["appearance", "fill"], [3, "value", "valueChange", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "onNewDraftCreated"]],
  template: function InitModal_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function InitModal_Template_button_click_1_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](3, InitModal_h2_3_Template, 2, 0, "h2", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](4, InitModal_h2_4_Template, 2, 0, "h2", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](5, "mat-dialog-content")(6, "form", null, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](8, InitModal_ng_container_8_Template, 6, 2, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](9, InitModal_ng_container_9_Template, 2, 0, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](10, InitModal_ng_container_10_Template, 2, 0, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](11, InitModal_ng_container_11_Template, 2, 0, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", !ctx.new_draft);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.new_draft);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", !ctx.new_draft);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.selected == "new" || ctx.new_draft);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.selected == "ada" || ctx.selected == "bmp" || ctx.selected == "wif" || ctx.selected == "jpg");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.selected == "example");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_9__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_10__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_10__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_10__.NgForm, _angular_material_core__WEBPACK_IMPORTED_MODULE_11__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_12__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_8__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_8__.MatDialogContent, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__.MatLabel, _angular_material_select__WEBPACK_IMPORTED_MODULE_14__.MatSelect, _blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_3__.BlankdraftModal, _examples_examples_component__WEBPACK_IMPORTED_MODULE_4__.ExamplesComponent, _loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_5__.LoadfileComponent],
  styles: [".mat-form-field[_ngcontent-%COMP%] {\n  width: 400px !important;\n  clear: both;\n  display: block;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\np[_ngcontent-%COMP%] {\n  font: 100;\n  font-style: italic;\n  width: 80%;\n  padding-bottom: 8px;\n  padding-left: 8px;\n}\n\n.error[_ngcontent-%COMP%] {\n  color: red;\n}\n/*# sourceURL=webpack://./src/app/core/modal/init/init.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9pbml0L2luaXQubW9kYWwuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNDLHVCQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7QUFDRDs7QUFFQTtFQUNDLGFBQUE7RUFDQSxtQkFBQTtBQUNEOztBQUVBO0VBQ0MsU0FBQTtFQUNBLGtCQUFBO0VBQ0EsVUFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7QUFDRDs7QUFJQTtFQUNDLFVBQUE7QUFERCIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZm9ybS1maWVsZCB7XG4gIHdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBjbGVhcjogYm90aDtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi50b3Byb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuXG5wIHtcbiAgZm9udDogMTAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIHdpZHRoOiA4MCU7XG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XG4gIHBhZGRpbmctbGVmdDogOHB4O1xufVxuXG4uZXJyb3Ige1xuICBjb2xvcjogcmVkO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 17623:
/*!***********************************************************!*\
  !*** ./src/app/core/modal/loadfile/loadfile.component.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoadfileComponent": () => (/* binding */ LoadfileComponent)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _provider_file_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/file.service */ 96374);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);






class LoadfileComponent {
  constructor(fls, dialogRef, data) {
    this.fls = fls;
    this.dialogRef = dialogRef;
    this.data = data;
    this.multiple = false;
    this.accepts = '';
    this.type = ''; //'single_image', 'ada', or 'bitmap_collection'
    this.title = 'Select Files';
    this.errorstring = '';
    this.multiple = data.multiple;
    this.accepts = data.accepts;
    this.type = data.type;
    if (data.title !== undefined) this.title = data.title;
  }
  handleError(e) {
    this.errorstring = e;
  }
  /**
   * this is called on upload of a file from any location
   * @param e
   */
  handleFile(e) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.errorstring = '';
      switch (e.type) {
        // case 'image': 
        // return this.fls.loader.bmp(e.name, e.data).then(
        //   res => this.dialogRef.close(res)
        // );
        // case 'wif': 
        //   return this.fls.loader.wif(e.name, e.data)
        //   .then(
        //     res => this.dialogRef.close(res)
        //   );
        case 'bitmap_collection':
          _this.dialogRef.close(e.drafts);
          break;
        case 'ada':
          return _this.fls.loader.ada(e.name, -1, '', e.data).then(res => _this.dialogRef.close(res));
      }
    })();
  }
}
LoadfileComponent.ɵfac = function LoadfileComponent_Factory(t) {
  return new (t || LoadfileComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_provider_file_service__WEBPACK_IMPORTED_MODULE_1__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MAT_DIALOG_DATA));
};
LoadfileComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: LoadfileComponent,
  selectors: [["app-loadfile"]],
  decls: 9,
  vars: 6,
  consts: [["mat-dialog-title", ""], ["type", "init", 1, "button", 3, "multiple", "type", "accepts", "onData", "onError"], [1, "err"], ["mat-button", "", 3, "mat-dialog-close"]],
  template: function LoadfileComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "h2", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "mat-dialog-content")(3, "upload-form", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("onData", function LoadfileComponent_Template_upload_form_onData_3_listener($event) {
        return ctx.handleFile($event);
      })("onError", function LoadfileComponent_Template_upload_form_onError_3_listener($event) {
        return ctx.handleError($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](4, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](6, "mat-dialog-actions")(7, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](8, "Close (and don't upload)");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx.title);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("multiple", ctx.multiple)("type", ctx.type)("accepts", ctx.accepts);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx.errorstring);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("mat-dialog-close", true);
    }
  },
  styles: ["\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 1110:
/*!***********************************************!*\
  !*** ./src/app/core/modal/loom/loom.modal.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoomModal": () => (/* binding */ LoomModal)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../provider/designmodes.service */ 73169);
/* harmony import */ var _provider_workspace_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/workspace.service */ 80828);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/looms */ 58364);
/* harmony import */ var _provider_tree_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../provider/tree.service */ 6177);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../model/util */ 75973);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);





















function LoomModal_p_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "p", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Workspace Preferences");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_p_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "p", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Draft Settings");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_p_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "p", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "The workspace can show you information about your drafts based on the defaults you provide here. You can change these at any time");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_form_field_9_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-option", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r23 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", option_r23.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", option_r23.view, " ");
  }
}
function LoomModal_mat_form_field_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-form-field")(1, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "When viewing Draft Details, Place the (0,0) point at: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](3, "mat-select", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("selectionChange", function LoomModal_mat_form_field_9_Template_mat_select_selectionChange_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r25);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r24.originChange(_r3));
    })("valueChange", function LoomModal_mat_form_field_9_Template_mat_select_valueChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r25);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r26.selected_origin = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](4, LoomModal_mat_form_field_9_mat_option_4_Template, 2, 2, "mat-option", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", ctx_r4.selected_origin);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx_r4.origin_options);
  }
}
function LoomModal_mat_label_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Default Loom Type");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_label_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Loom Type");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_option_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-option", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const loomtype_r27 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", loomtype_r27.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", loomtype_r27.viewValue, " ");
  }
}
function LoomModal_mat_form_field_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-form-field")(1, "input", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_mat_form_field_15_Template_input_ngModelChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r29);
      const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r28.warps = $event);
    })("change", function LoomModal_mat_form_field_15_Template_input_change_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r29);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r30.warpChange(_r3));
    })("blur", function LoomModal_mat_form_field_15_Template_input_blur_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r29);
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r31.warpChange(_r3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("readonly", ctx_r8.warp_locked)("ngModel", ctx_r8.warps);
  }
}
function LoomModal_button_16_i_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r34 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "i", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function LoomModal_button_16_i_1_Template_i_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r34);
      const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r33.warp_locked = !ctx_r33.warp_locked);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵclassProp"]("fa-lock", ctx_r32.warp_locked)("fa-unlock", !ctx_r32.warp_locked);
  }
}
function LoomModal_button_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "button", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](1, LoomModal_button_16_i_1_Template, 1, 4, "i", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵclassProp"]("hide", ctx_r9.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r9.type === "local");
  }
}
function LoomModal_mat_form_field_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r36 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-form-field")(1, "input", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_mat_form_field_17_Template_input_ngModelChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r36);
      const ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r35.wefts = $event);
    })("change", function LoomModal_mat_form_field_17_Template_input_change_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r36);
      const ctx_r37 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r37.weftChange(_r3));
    })("blur", function LoomModal_mat_form_field_17_Template_input_blur_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r36);
      const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r38.weftChange(_r3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx_r10.wefts);
  }
}
function LoomModal_mat_label_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Default Density Units");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_label_20_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Density Units");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_option_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-option", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const unit_r39 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", unit_r39.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", unit_r39.viewValue, " ");
  }
}
function LoomModal_mat_label_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Default Density");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_mat_label_25_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Density");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_ng_container_27_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "ends / 10cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function LoomModal_ng_container_28_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "epi");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function LoomModal_mat_form_field_29_Template(rf, ctx) {
  if (rf & 1) {
    const _r41 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-form-field")(1, "input", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_mat_form_field_29_Template_input_ngModelChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r41);
      const ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r40.width = $event);
    })("change", function LoomModal_mat_form_field_29_Template_input_change_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r41);
      const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r42.widthChange(_r3));
    })("blur", function LoomModal_mat_form_field_29_Template_input_blur_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r41);
      const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r43.widthChange(_r3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx_r18.width);
  }
}
function LoomModal_ng_container_30_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "inches");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function LoomModal_ng_container_31_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
}
function LoomModal_ng_container_32_mat_label_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Default Number of Frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_ng_container_32_mat_label_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Number of Frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_ng_container_32_mat_form_field_7_mat_label_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Default Number of Treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_ng_container_32_mat_form_field_7_mat_label_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1, "Number of Treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
}
function LoomModal_ng_container_32_mat_form_field_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r50 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-form-field");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](1, LoomModal_ng_container_32_mat_form_field_7_mat_label_1_Template, 2, 0, "mat-label", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](2, LoomModal_ng_container_32_mat_form_field_7_mat_label_2_Template, 2, 0, "mat-label", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](3, "input", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_ng_container_32_mat_form_field_7_Template_input_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r50);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r49.treadles = $event);
    })("change", function LoomModal_ng_container_32_mat_form_field_7_Template_input_change_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r50);
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r51.updateMinTreadles(_r3));
    })("blur", function LoomModal_ng_container_32_mat_form_field_7_Template_input_blur_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r50);
      const ctx_r52 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r52.updateMinTreadles(_r3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](5, "treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r46.type == "global");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r46.type == "local");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx_r46.treadles);
  }
}
function LoomModal_ng_container_32_Template(rf, ctx) {
  if (rf & 1) {
    const _r54 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "mat-form-field");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](2, LoomModal_ng_container_32_mat_label_2_Template, 2, 0, "mat-label", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](3, LoomModal_ng_container_32_mat_label_3_Template, 2, 0, "mat-label", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "input", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_ng_container_32_Template_input_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r54);
      const ctx_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r53.frames = $event);
    })("change", function LoomModal_ng_container_32_Template_input_change_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r54);
      const ctx_r55 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r55.updateMinFrames(_r3));
    })("blur", function LoomModal_ng_container_32_Template_input_blur_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r54);
      const ctx_r56 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r56.updateMinFrames(_r3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](5, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](6, "frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](7, LoomModal_ng_container_32_mat_form_field_7_Template, 6, 3, "mat-form-field", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r21.type == "global");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r21.type == "local");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx_r21.frames);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r21.loomtype == "frame" || ctx_r21.loomtype == "direct");
  }
}
class LoomModal {
  constructor(ws, dm, tree, dialogRef, data) {
    this.ws = ws;
    this.dm = dm;
    this.tree = tree;
    this.dialogRef = dialogRef;
    this.data = data;
    this.localLoomNeedsRedraw = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onGlobalLoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    // draft: Draft;
    // loom:Loom;
    // loom_settings:LoomSettings;
    this.epi = 10;
    this.warps = 100;
    this.wefts = 100;
    this.units = 'cm';
    this.frames = 8;
    this.treadles = 10;
    this.loomtype = "frame";
    this.loomtypes = [];
    this.density_units = [];
    this.warp_locked = false;
    this.width = 0;
    this.type = 'local';
    this.origin_options = null;
    this.selected_origin = 0;
    this.type = data.type;
    this.id = data.id;
    this.selected_origin = this.ws.selected_origin_option;
    if (this.type === 'local') {
      const draft = this.tree.getDraft(this.id);
      const loom_settings = this.tree.getLoomSettings(this.id);
      this.warps = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown);
      this.wefts = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown);
      this.epi = loom_settings.epi;
      this.units = loom_settings.units;
      this.frames = loom_settings.frames;
      this.treadles = loom_settings.treadles;
      this.loomtype = loom_settings.type;
    } else {
      this.origin_options = this.ws.getOriginOptions();
      this.epi = ws.epi;
      this.units = ws.units;
      this.frames = ws.min_frames;
      this.treadles = ws.min_treadles;
      this.loomtype = ws.type;
    }
    this.width = this.units == 'cm' ? this.warps / this.epi * 10 : this.warps / this.epi;
    this.loomtypes = dm.getOptionSet('loom_types');
    this.density_units = dm.getOptionSet('density_units');
  }
  ngOnInit() {}
  onNoClick() {
    this.dialogRef.close();
  }
  close() {
    this.dialogRef.close(null);
  }
  updateMinTreadles(f) {
    //validate the input
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom = this.tree.getLoom(this.id);
    if (!f.value.treadles) {
      f.value.treadles = 2;
      this.treadles = f.value.treadles;
    }
    f.value.treadles = Math.ceil(f.value.treadles);
    if (this.type == "global") {
      this.ws.min_treadles = f.value.treadles;
    } else {
      loom_settings.treadles = f.value.treadles;
      if (loom_settings.type == 'direct') {
        this.frames = f.value.treadles;
        this.treadles = f.value.treadles;
        loom_settings.frames = this.frames;
        loom_settings.treadles = this.treadles;
        loom.tieup = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.generateDirectTieup)(f.value.treadles);
        this.tree.setLoom(this.id, loom);
      }
      this.tree.setLoomSettings(this.id, loom_settings);
      this.localLoomNeedsRedraw.emit();
    }
  }
  updateMinFrames(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom = this.tree.getLoom(this.id);
    if (!f.value.frames) {
      f.value.frames = 2;
      this.frames = f.value.frames;
    }
    f.value.frames = Math.ceil(f.value.frames);
    if (this.type == "global") {
      this.ws.min_frames = f.value.frames;
      this.dm.selectDesignMode(this.type, 'loom_settings');
    } else {
      loom_settings.frames = f.value.frames;
      if (loom_settings.type == 'direct') {
        this.frames = f.value.frames;
        this.treadles = f.value.frames;
        loom_settings.frames = this.frames;
        loom_settings.treadles = this.treadles;
        loom.tieup = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.generateDirectTieup)(f.value.frames);
        this.tree.setLoom(this.id, loom);
      }
      this.tree.setLoomSettings(this.id, loom_settings);
      this.localLoomNeedsRedraw.emit();
    }
  }
  /**
   * when the origin changes, all drafts on the canavs should be modified to the new position
   * origin changes can ONLY happen on globals
   * @param e
   */
  originChange(e) {
    const flips = _model_util__WEBPACK_IMPORTED_MODULE_5__["default"].getFlips(this.ws.selected_origin_option, this.selected_origin);
    this.ws.selected_origin_option = this.selected_origin;
    const dn = this.tree.getDraftNodes();
    const data = dn.map(node => {
      return {
        draft: node.draft,
        loom: node.loom,
        horiz: flips.horiz,
        vert: flips.vert
      };
    });
    // dn.forEach(node => {
    //  if(node.loom !== null) console.log(node.loom.treadling)
    // })
    const draft_fns = data.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.flipDraft)(el.draft, el.horiz, el.vert));
    return Promise.all(draft_fns).then(res => {
      for (let i = 0; i < dn.length; i++) {
        dn[i].draft = {
          id: res[i].id,
          gen_name: res[i].gen_name,
          ud_name: res[i].ud_name,
          drawdown: res[i].drawdown,
          rowShuttleMapping: res[i].rowShuttleMapping,
          rowSystemMapping: res[i].rowSystemMapping,
          colShuttleMapping: res[i].colShuttleMapping,
          colSystemMapping: res[i].colSystemMapping
        };
      }
      const loom_fns = data.map(el => (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.flipLoom)(el.loom, el.horiz, el.vert));
      return Promise.all(loom_fns).then(res => {
        for (let i = 0; i < dn.length; i++) {
          if (res[i] !== null) {
            dn[i].loom = {
              threading: res[i].threading.slice(),
              tieup: res[i].tieup.slice(),
              treadling: res[i].treadling.slice()
            };
          }
        }
      }).then(res => {
        this.onGlobalLoomChange.emit();
      });
    });
  }
  loomChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let utils = null;
    if (this.type == 'global') {
      this.ws.type = e.value.loomtype;
      if (this.ws.type === 'jacquard') this.dm.selectDesignMode('drawdown', 'drawdown_editing_style');else this.dm.selectDesignMode('loom', 'drawdown_editing_style');
    } else {
      const new_settings = {
        type: e.value.loomtype,
        epi: loom_settings.epi,
        units: loom_settings.units,
        frames: loom_settings.frames,
        treadles: loom_settings.treadles
      };
      if (loom_settings.type == 'direct') {
        new_settings.frames = Math.max(loom_settings.treadles, loom_settings.frames);
        new_settings.treadles = Math.max(loom_settings.treadles, loom_settings.frames);
        this.treadles = Math.max(loom_settings.treadles, loom_settings.frames);
        this.frames = Math.max(loom_settings.treadles, loom_settings.frames);
      }
      //if we are changing from null or jacquard to a frame type loom 
      if (loom_settings.type === null || loom_settings.type === 'jacquard') {
        //from jacquard to frame
        utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(new_settings.type);
        utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, this.ws.selected_origin_option).then(loom => {
          this.tree.setLoom(this.id, loom);
          this.localLoomNeedsRedraw.emit();
        });
      } else if ((0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.isFrame)(loom_settings) && new_settings.type == 'jacquard') {
        //from a frame loom to jacquard
        utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(new_settings.type);
        utils.computeDrawdownFromLoom(loom, this.ws.selected_origin_option).then(drawdown => {
          draft.drawdown = drawdown;
          this.tree.setDraftOnly(this.id, draft);
          this.localLoomNeedsRedraw.emit();
        });
      } else if ((0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.isFrame)(loom_settings) && (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.isFrame)(new_settings)) {
        console.log("swtching kinds of frame looms");
        //from one frame loom to another
        const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(new_settings.type);
        if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
          utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, this.ws.selected_origin_option).then(loom => {
            this.tree.setLoom(this.id, loom);
            this.localLoomNeedsRedraw.emit();
          });
        } else {
          utils.recomputeLoomFromThreadingAndDrawdown(loom, new_settings, draft.drawdown, this.ws.selected_origin_option).then(loom => {
            this.tree.setLoom(this.id, loom);
            this.localLoomNeedsRedraw.emit();
          });
        }
      } else {
        this.localLoomNeedsRedraw.emit();
      }
      if (loom_settings.type === 'jacquard') this.dm.selectDesignMode('drawdown', 'drawdown_editing_style');else this.dm.selectDesignMode('loom', 'drawdown_editing_style');
      this.tree.setLoomSettings(this.id, new_settings);
    }
  }
  unitChange(e) {
    if (this.type == 'global') {
      this.ws.units = e.value.units;
    } else {
      const loom_settings = this.tree.getLoomSettings(this.id);
      loom_settings.units = e.value.units;
      this.tree.setLoomSettings(this.id, loom_settings);
      this.localLoomNeedsRedraw.emit();
    }
  }
  /**
   * recomputes warps and epi if the width of the loom is changed
   * @param f
   */
  widthChange(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (!f.value.width) {
      f.value.width = 1;
      this.width = f.value.width;
    }
    if (this.warp_locked) {
      var new_epi = this.units == "in" ? f.value.warps / f.value.width : 10 * f.value.warps / f.value.width;
      loom_settings.epi = new_epi;
      f.value.epi = new_epi;
      this.epi = new_epi;
      this.tree.setLoomSettings(this.id, loom_settings);
      this.localLoomNeedsRedraw.emit();
    } else {
      var new_warps = this.units === "in" ? Math.ceil(f.value.width * f.value.epi) : Math.ceil(10 * f.value.warps / f.value.width);
      this.warpNumChange({
        warps: new_warps
      });
    }
  }
  warpNumChange(e) {
    if (e.warps == "") return;
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (e.warps > (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown)) {
      var diff = e.warps - (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown);
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown);
        const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(loom_settings.type);
        loom = utils.insertIntoThreading(loom, ndx, -1);
        draft.drawdown = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertDrawdownCol)(draft.drawdown, ndx, null);
        draft.colShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertMappingCol)(draft.colShuttleMapping, ndx, 0);
        draft.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertMappingCol)(draft.colSystemMapping, ndx, 0);
      }
    } else {
      var diff = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown) - e.warps;
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown) - 1;
        const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(loom_settings.type);
        loom = utils.deleteFromThreading(loom, ndx);
        draft.drawdown = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteDrawdownCol)(draft.drawdown, ndx);
        draft.colShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteMappingCol)(draft.colShuttleMapping, ndx);
        draft.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteMappingCol)(draft.colSystemMapping, ndx);
      }
    }
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.localLoomNeedsRedraw.emit();
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.localLoomNeedsRedraw.emit();
      });
    }
  }
  warpChange(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (!f.value.warps) {
      f.value.warps = 2;
      this.warps = f.value.warps;
    }
    this.warpNumChange({
      warps: f.value.warps
    });
    this.width = this.units == 'cm' ? f.value.warps / loom_settings.epi * 10 : f.value.warps / loom_settings.epi;
    f.value.width = this.width;
  }
  weftChange(f) {
    if (!f.value.wefts) {
      f.value.wefts = 2;
      this.wefts = 2;
    }
    this.weftNumChange({
      wefts: f.value.wefts
    });
  }
  weftNumChange(e) {
    if (e.wefts === "" || e.wefts == "null") return;
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (e.wefts > (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown)) {
      var diff = e.wefts - (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown);
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown);
        draft.drawdown = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertDrawdownRow)(draft.drawdown, ndx, null);
        draft.rowShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertMappingRow)(draft.rowShuttleMapping, ndx, 1);
        draft.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.insertMappingRow)(draft.rowSystemMapping, ndx, 0);
        const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(loom_settings.type);
        loom = utils.insertIntoTreadling(loom, ndx, []);
      }
    } else {
      var diff = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown) - e.wefts;
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown) - 1;
        draft.drawdown = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteDrawdownRow)(draft.drawdown, ndx);
        draft.rowShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteMappingRow)(draft.rowShuttleMapping, ndx);
        draft.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_2__.deleteMappingRow)(draft.rowSystemMapping, ndx);
        const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(loom_settings.type);
        loom = utils.deleteFromTreadling(loom, ndx);
      }
    }
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.localLoomNeedsRedraw.emit();
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.localLoomNeedsRedraw.emit();
      });
    }
  }
  epiChange(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (!f.value.epi) {
      f.value.epi = 1;
      this.epi = f.value.epi;
    }
    //this.loom.overloadEpi(f.value.epi);
    this.ws.epi = f.value.epi;
    if (this.type === "local") {
      if (this.warp_locked) {
        //change the width
        this.width = this.units == 'cm' ? f.value.warps / loom_settings.epi * 10 : f.value.warps / loom_settings.epi;
        f.value.width = this.width;
      } else {
        var new_warps = this.units === "in" ? Math.ceil(f.value.width * f.value.epi) : Math.ceil(10 * f.value.warps / f.value.width);
        f.value.warps = new_warps;
        this.warps = new_warps;
        this.warpNumChange({
          warps: new_warps
        });
      }
    }
  }
}
LoomModal.ɵfac = function LoomModal_Factory(t) {
  return new (t || LoomModal)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_workspace_service__WEBPACK_IMPORTED_MODULE_1__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_tree_service__WEBPACK_IMPORTED_MODULE_4__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MAT_DIALOG_DATA));
};
LoomModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
  type: LoomModal,
  selectors: [["app-loom-modal"]],
  outputs: {
    localLoomNeedsRedraw: "localLoomNeedsRedraw",
    onGlobalLoomChange: "onGlobalLoomChange"
  },
  decls: 33,
  vars: 26,
  consts: [[1, "toprow"], ["mat-icon-button", "", 3, "click"], [1, "fas", "fa-times"], ["mat-dialog-title", "", "cdkDrag", "", "cdkDragRootElement", ".cdk-overlay-pane", "cdkDragHandle", "", 4, "ngIf"], ["class", "description", 4, "ngIf"], ["novalidate", ""], ["envt", "ngForm"], [4, "ngIf"], ["name", "loomtype", 3, "value", "ngModel", "selectionChange", "valueChange", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "hide", 4, "ngIf"], ["name", "units", 3, "value", "ngModel", "valueChange", "ngModelChange", "selectionChange"], ["matInput", "", "name", "epi", "type", "number", "min", "0", 3, "ngModel", "ngModelChange", "change", "blur"], ["mat-dialog-title", "", "cdkDrag", "", "cdkDragRootElement", ".cdk-overlay-pane", "cdkDragHandle", ""], [1, "description"], [3, "value", "selectionChange", "valueChange"], [3, "value"], ["matInput", "", "name", "warps", "type", "number", "min", "2", "placeholder", "Warp Ends", 3, "readonly", "ngModel", "ngModelChange", "change", "blur"], ["mat-icon-button", ""], ["aria-label", "warp lock button", "class", "fa", 3, "fa-lock", "fa-unlock", "click", 4, "ngIf"], ["aria-label", "warp lock button", 1, "fa", 3, "click"], ["matInput", "", "name", "wefts", "type", "number", "min", "2", "placeholder", "Weft Picks", 3, "ngModel", "ngModelChange", "change", "blur"], ["matSuffix", ""], ["matInput", "", "name", "width", "step", "0.125", "type", "number", "min", "0.25", "max", "60", "placeholder", "Width", 3, "ngModel", "ngModelChange", "change", "blur"], ["matInput", "", "name", "frames", "step", "1", "type", "number", "min", "2", "max", "1000", 3, "ngModel", "ngModelChange", "change", "blur"], ["matInput", "", "name", "treadles", "step", "1", "type", "number", "min", "2", "max", "1000", 3, "ngModel", "ngModelChange", "change", "blur"]],
  template: function LoomModal_Template(rf, ctx) {
    if (rf & 1) {
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function LoomModal_Template_button_click_1_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](3, LoomModal_p_3_Template, 2, 0, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](4, LoomModal_p_4_Template, 2, 0, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](5, "mat-dialog-content");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](6, LoomModal_p_6_Template, 2, 0, "p", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](7, "form", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](9, LoomModal_mat_form_field_9_Template, 5, 2, "mat-form-field", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](10, "mat-form-field");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](11, LoomModal_mat_label_11_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](12, LoomModal_mat_label_12_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](13, "mat-select", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("selectionChange", function LoomModal_Template_mat_select_selectionChange_13_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r57);
        const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
        return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx.loomChange(_r3));
      })("valueChange", function LoomModal_Template_mat_select_valueChange_13_listener($event) {
        return ctx.loomtype = $event;
      })("ngModelChange", function LoomModal_Template_mat_select_ngModelChange_13_listener($event) {
        return ctx.loomtype = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](14, LoomModal_mat_option_14_Template, 2, 2, "mat-option", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](15, LoomModal_mat_form_field_15_Template, 2, 2, "mat-form-field", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](16, LoomModal_button_16_Template, 2, 3, "button", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](17, LoomModal_mat_form_field_17_Template, 2, 1, "mat-form-field", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](18, "mat-form-field");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](19, LoomModal_mat_label_19_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](20, LoomModal_mat_label_20_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](21, "mat-select", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("valueChange", function LoomModal_Template_mat_select_valueChange_21_listener($event) {
        return ctx.units = $event;
      })("ngModelChange", function LoomModal_Template_mat_select_ngModelChange_21_listener($event) {
        return ctx.units = $event;
      })("selectionChange", function LoomModal_Template_mat_select_selectionChange_21_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r57);
        const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
        return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx.unitChange(_r3));
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](22, LoomModal_mat_option_22_Template, 2, 2, "mat-option", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](23, "mat-form-field");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](24, LoomModal_mat_label_24_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](25, LoomModal_mat_label_25_Template, 2, 0, "mat-label", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](26, "input", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function LoomModal_Template_input_ngModelChange_26_listener($event) {
        return ctx.epi = $event;
      })("change", function LoomModal_Template_input_change_26_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r57);
        const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
        return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx.epiChange(_r3));
      })("blur", function LoomModal_Template_input_blur_26_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r57);
        const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵreference"](8);
        return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx.epiChange(_r3));
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](27, LoomModal_ng_container_27_Template, 3, 0, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](28, LoomModal_ng_container_28_Template, 3, 0, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](29, LoomModal_mat_form_field_29_Template, 2, 1, "mat-form-field", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](30, LoomModal_ng_container_30_Template, 3, 0, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](31, LoomModal_ng_container_31_Template, 3, 0, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](32, LoomModal_ng_container_32_Template, 8, 4, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", ctx.loomtype)("ngModel", ctx.loomtype);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx.loomtypes);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", ctx.units)("ngModel", ctx.units);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx.density_units);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "global");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type == "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx.epi);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.units === "cm");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.units == "in");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local" && ctx.units === "in");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.type === "local" && ctx.units === "cm");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.loomtype == "frame" || ctx.loomtype == "direct");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_8__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_9__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_9__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgForm, _angular_material_core__WEBPACK_IMPORTED_MODULE_10__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_11__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogContent, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatLabel, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatSuffix, _angular_material_input__WEBPACK_IMPORTED_MODULE_13__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_14__.MatSelect, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDragHandle],
  styles: ["span[_ngcontent-%COMP%] {\n  font-size: 0.8em;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n}\n\n.description[_ngcontent-%COMP%] {\n  font-style: italic;\n  width: 80%;\n  padding: 0px 0px 8px 8px;\n}\n\n.toggle[_ngcontent-%COMP%] {\n  padding: 8px;\n}\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 80%;\n}\n/*# sourceURL=webpack://./src/app/core/modal/loom/loom.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9sb29tL2xvb20ubW9kYWwuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxVQUFBO0VBQ0Esd0JBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbInNwYW4ge1xuICBmb250LXNpemU6IDAuOGVtO1xufVxuXG4udG9wcm93IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgbGluZS1oZWlnaHQ6IDFlbTtcbn1cblxuLmRlc2NyaXB0aW9uIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICB3aWR0aDogODAlO1xuICBwYWRkaW5nOiAwcHggMHB4IDhweCA4cHg7XG59XG5cbi50b2dnbGUge1xuICBwYWRkaW5nOiA4cHg7XG59XG5cbi5tYXQtZm9ybS1maWVsZCB7XG4gIHdpZHRoOiA4MCU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 75727:
/*!*******************************************************!*\
  !*** ./src/app/core/modal/material/material.modal.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MaterialModal": () => (/* binding */ MaterialModal)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../provider/designmodes.service */ 73169);
/* harmony import */ var _provider_materials_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/materials.service */ 2940);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/provider/tree.service */ 6177);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);
/* harmony import */ var _model_datatypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/datatypes */ 86789);
/* harmony import */ var _model_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../model/material */ 90008);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/expansion */ 17591);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var ngx_color_picker__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ngx-color-picker */ 18251);




















function MaterialModal_ng_container_1_div_26_mat_option_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-option", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const rep_r7 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", rep_r7.id);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", rep_r7.name, " ");
  }
}
function MaterialModal_ng_container_1_div_26_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 2)(1, "button", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function MaterialModal_ng_container_1_div_26_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r10);
      const shuttle_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r8.delete(shuttle_r2.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "i", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3, " Delete and Reassign to:");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "mat-select", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function MaterialModal_ng_container_1_div_26_Template_mat_select_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r10);
      const shuttle_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r11.replacements[shuttle_r2.id] = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](5, MaterialModal_ng_container_1_div_26_mat_option_5_Template, 2, 2, "mat-option", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const shuttle_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx_r5.replacements[shuttle_r2.id]);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx_r5.ms.materials);
  }
}
const _c0 = function () {
  return {
    standalone: true
  };
};
function MaterialModal_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "form", null, 10)(3, "mat-expansion-panel")(4, "mat-expansion-panel-header")(5, "mat-panel-title");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](6, "i", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](8, "mat-panel-description");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](9, "mat-form-field", 2)(10, "input", 3, 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("colorPickerChange", function MaterialModal_ng_container_1_Template_input_colorPickerChange_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r14.change());
    })("colorPickerChange", function MaterialModal_ng_container_1_Template_input_colorPickerChange_10_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const shuttle_r2 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](shuttle_r2.color = $event);
    })("ngModelChange", function MaterialModal_ng_container_1_Template_input_ngModelChange_10_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const shuttle_r2 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](shuttle_r2.color = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](12, "mat-form-field", 2)(13, "input", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function MaterialModal_ng_container_1_Template_input_ngModelChange_13_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const shuttle_r2 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](shuttle_r2.name = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](14, "div", 2)(15, "mat-form-field", 6)(16, "input", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("change", function MaterialModal_ng_container_1_Template_input_change_16_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r19.change());
    })("ngModelChange", function MaterialModal_ng_container_1_Template_input_ngModelChange_16_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const shuttle_r2 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](shuttle_r2.diameter = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](17, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](18, "\u00A0\u00A0mm");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](19, "div", 2)(20, "mat-form-field", 2)(21, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](22, "Add Notes");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](23, "textarea", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function MaterialModal_ng_container_1_Template_textarea_ngModelChange_23_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r15);
      const shuttle_r2 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](shuttle_r2.notes = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](24);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](25, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](26, MaterialModal_ng_container_1_div_26_Template, 6, 2, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const shuttle_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵstyleProp"]("color", shuttle_r2.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", shuttle_r2.name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵstyleProp"]("background", shuttle_r2.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("colorPicker", shuttle_r2.color)("ngModel", shuttle_r2.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", shuttle_r2.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", shuttle_r2.diameter);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", shuttle_r2.notes)("ngModelOptions", _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵpureFunction0"](13, _c0));
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](shuttle_r2.notes);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx_r0.ms.materials.length > 1);
  }
}
class MaterialModal {
  constructor(dm, ms, tree) {
    this.dm = dm;
    this.ms = ms;
    this.tree = tree;
    this.onMaterialChange = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.replacements = [];
    this.newshuttle = (0,_model_material__WEBPACK_IMPORTED_MODULE_5__.createMaterial)();
    this.addmaterial = false;
    ms.getShuttles().forEach((el, ndx) => {
      this.replacements.push(ndx + 1 % this.ms.getShuttles().length);
    });
    this.types = dm.material_types;
  }
  ngOnInit() {}
  /**emitted on any action that would change the current rendering */
  change() {
    this.onMaterialChange.emit();
  }
  addMaterial() {}
  /**
   * handles user input of delete event and reads the "replace" value to reassign draft
   * @param index  - the shuttle to delete
   */
  delete(index) {
    //never delete all of the shuttles
    if (this.ms.getShuttles().length == 1) return;
    const map = this.ms.deleteShuttle(index);
    const dn = this.tree.getDraftNodes();
    dn.forEach(dn => {
      dn.draft.rowShuttleMapping = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].updateMaterialIds(dn.draft.rowShuttleMapping, map, this.replacements[index]);
      dn.draft.colShuttleMapping = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].updateMaterialIds(dn.draft.colShuttleMapping, map, this.replacements[index]);
    });
    //remove this from replacements
    this.replacements = this.replacements.filter((el, ndx) => ndx != index);
    //map remaning replacement values to valid indices 
    this.replacements = this.replacements.map(el => el % this.ms.getShuttles().length);
    this.onMaterialChange.emit();
  }
  addNewShuttle() {
    console.log(this.newshuttle);
    (0,_model_material__WEBPACK_IMPORTED_MODULE_5__.setMaterialID)(this.newshuttle, this.ms.getShuttles().length);
    this.ms.addShuttle(this.newshuttle);
    this.newshuttle = (0,_model_material__WEBPACK_IMPORTED_MODULE_5__.createMaterial)();
  }
  // close() {
  //   this.dialogRef.close(null);
  // }
  save() {}
}
MaterialModal.ɵfac = function MaterialModal_Factory(t) {
  return new (t || MaterialModal)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_materials_service__WEBPACK_IMPORTED_MODULE_1__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_2__.TreeService));
};
MaterialModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
  type: MaterialModal,
  selectors: [["app-material-modal"]],
  outputs: {
    onMaterialChange: "onMaterialChange"
  },
  decls: 26,
  vars: 11,
  consts: [[4, "ngFor", "ngForOf"], [1, "fas", "fa-plus", 3, "click"], [1, "is-fullwidth"], ["matInput", "", "placeholder", "Color", "name", "color", "cpDialogDisplay", "inline", "cpToggle", "true", 1, "colorpicker", 3, "colorPicker", "ngModel", "colorPickerChange", "ngModelChange"], ["colorpicker", ""], ["matInput", "", "placeholder", "Material Name", "name", "name", 3, "ngModel", "ngModelChange"], [1, "form-field"], ["matInput", "", "type", "number", "placeholder", "Yarn Diameter", "name", "diameter", "min", "0", "max", "100", "step", "10", 3, "ngModel", "change", "ngModelChange"], ["matInput", "", 3, "ngModel", "ngModelOptions", "ngModelChange"], ["mat-flat-button", "", "color", "primary", 3, "click"], ["materialForm", "ngForm"], [1, "fas", "fa-square"], ["matInput", "", "type", "number", "placeholder", "Yarn Diameter (in mm)", "name", "diameter", "min", "0", "max", "100", "step", ".5", 3, "ngModel", "change", "ngModelChange"], ["class", "is-fullwidth", 4, "ngIf"], ["mat-flat-button", "", "color", "grey", 1, "is-fullwidth", 3, "click"], ["aria-hidden", "true", 1, "fa", "fa-trash"], ["lass", "is-fullwidth", "placeholder", "Replacement", "name", "replacement", 3, "ngModel", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]],
  template: function MaterialModal_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "mat-accordion");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](1, MaterialModal_ng_container_1_Template, 27, 14, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](2, "mat-expansion-panel")(3, "mat-expansion-panel-header")(4, "mat-panel-title")(5, "i", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function MaterialModal_Template_i_click_5_listener() {
        return ctx.addmaterial = !ctx.addmaterial;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](6, " Add Material ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](7, "mat-panel-description");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](8, "mat-form-field", 2)(9, "input", 3, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("colorPickerChange", function MaterialModal_Template_input_colorPickerChange_9_listener() {
        return ctx.change();
      })("colorPickerChange", function MaterialModal_Template_input_colorPickerChange_9_listener($event) {
        return ctx.newshuttle.color = $event;
      })("ngModelChange", function MaterialModal_Template_input_ngModelChange_9_listener($event) {
        return ctx.newshuttle.color = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](11, "mat-form-field", 2)(12, "input", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function MaterialModal_Template_input_ngModelChange_12_listener($event) {
        return ctx.newshuttle.name = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](13, "div", 2)(14, "mat-form-field", 6)(15, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("change", function MaterialModal_Template_input_change_15_listener() {
        return ctx.change();
      })("ngModelChange", function MaterialModal_Template_input_ngModelChange_15_listener($event) {
        return ctx.newshuttle.diameter = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](16, "span");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](17, "\u00A0\u00A0%");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](18, "div", 2)(19, "mat-form-field", 2)(20, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](21, "Add Notes");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](22, "textarea", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("ngModelChange", function MaterialModal_Template_textarea_ngModelChange_22_listener($event) {
        return ctx.newshuttle.notes = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](23);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](24, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function MaterialModal_Template_button_click_24_listener() {
        return ctx.addNewShuttle();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](25, " Add This Material");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx.ms.materials);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](8);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵstyleProp"]("background", ctx.newshuttle.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("colorPicker", ctx.newshuttle.color)("ngModel", ctx.newshuttle.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx.newshuttle.name);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx.newshuttle.diameter);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngModel", ctx.newshuttle.notes)("ngModelOptions", _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵpureFunction0"](10, _c0));
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](ctx.newshuttle.notes);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgForm, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__.MatButton, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatAccordion, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanel, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelHeader, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelTitle, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelDescription, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_13__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_14__.MatSelect, ngx_color_picker__WEBPACK_IMPORTED_MODULE_15__.ColorPickerDirective],
  styles: ["d[_ngcontent-%COMP%]   .colorpicker[_ngcontent-%COMP%] {\n  outline: grey;\n  width: 40px;\n  height: 40px;\n  margin: 2px 8px 0px 0px;\n}\n\n.okbutton[_ngcontent-%COMP%] {\n  color: blue;\n}\n\ni[_ngcontent-%COMP%] {\n  padding-right: 8px;\n  margin: 4px 0px 0px 0px;\n}\n\n.delete_material[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  font-size: 0.8em;\n}\n.delete_material[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  width: 66%;\n}\n.delete_material[_ngcontent-%COMP%]   mat-select[_ngcontent-%COMP%] {\n  width: 33%;\n  overflow: hidden;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n}\n/*# sourceURL=webpack://./src/app/core/modal/material/material.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9tb2RhbC9tYXRlcmlhbC9tYXRlcmlhbC5tb2RhbC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBR0ksYUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsdUJBQUE7QUFESjs7QUFJQTtFQUNJLFdBQUE7QUFESjs7QUFJQTtFQUNDLGtCQUFBO0VBQ0csdUJBQUE7QUFESjs7QUFJQTtFQUNHLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGdCQUFBO0FBREg7QUFHRztFQUNDLFVBQUE7QUFESjtBQUtHO0VBQ0ksVUFBQTtFQUNBLGdCQUFBO0FBSFA7O0FBT0E7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQUpKIiwic291cmNlc0NvbnRlbnQiOlsiZCAuY29sb3JwaWNrZXIge1xuICBvdXRsaW5lOiBncmV5O1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBtYXJnaW46IDJweCA4cHggMHB4IDBweDtcbn1cblxuLm9rYnV0dG9uIHtcbiAgY29sb3I6IGJsdWU7XG59XG5cbmkge1xuICBwYWRkaW5nLXJpZ2h0OiA4cHg7XG4gIG1hcmdpbjogNHB4IDBweCAwcHggMHB4O1xufVxuXG4uZGVsZXRlX21hdGVyaWFsIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgZm9udC1zaXplOiAwLjhlbTtcbn1cbi5kZWxldGVfbWF0ZXJpYWwgYnV0dG9uIHtcbiAgd2lkdGg6IDY2JTtcbn1cbi5kZWxldGVfbWF0ZXJpYWwgbWF0LXNlbGVjdCB7XG4gIHdpZHRoOiAzMyU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi50b3Byb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBsaW5lLWhlaWdodDogMWVtO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 94467:
/*!************************************!*\
  !*** ./src/app/core/model/cell.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCell": () => (/* binding */ createCell),
/* harmony export */   "createCellFromSequenceVal": () => (/* binding */ createCellFromSequenceVal),
/* harmony export */   "getCellValue": () => (/* binding */ getCellValue),
/* harmony export */   "setCellValue": () => (/* binding */ setCellValue),
/* harmony export */   "toggleHeddle": () => (/* binding */ toggleHeddle)
/* harmony export */ });
const createCell = setting => {
  if (setting !== null && typeof setting !== 'boolean') console.error("CREATE CELL GOT NON BOOLEAN VALUE", setting);
  let c = {
    is_set: false,
    is_up: false
  };
  if (setting === null || setting === undefined) {
    c.is_set = false;
    c.is_up = false;
  } else {
    c.is_set = true;
    c.is_up = setting;
  }
  return c;
};
const toggleHeddle = c => {
  if (!c.is_set) {
    c.is_set = true;
    c.is_up = true;
  } else {
    c.is_up = !c.is_up;
  }
  return c;
};
const createCellFromSequenceVal = val => {
  let c = {
    is_set: false,
    is_up: false
  };
  switch (val) {
    case 0:
      c.is_set = true;
      c.is_up = false;
      break;
    case 1:
      c.is_set = true;
      c.is_up = true;
      break;
    case 2:
      c.is_set = false;
      c.is_up = false;
      break;
  }
  return c;
};
const setCellValue = (c, value) => {
  if (value === null) {
    c.is_up = false;
    c.is_set = false;
  } else {
    c.is_up = value;
    c.is_set = true;
  }
  return c;
};
const getCellValue = c => {
  if (c.is_set) {
    return c.is_up;
  }
  return null;
};
/**
 * Definition of Cell object.
 * @class Cell describes values assigned to one cell within a draft
 * @param poles describes the path of the yarn through this cell as a 4-bit number corresponding to NSEW.
 * @params is_up describes if the heddle at this location is up or down
 * @params is_set describes if a yarn will move over this heddle (used in inlay and shape weaving to draw boundaries)
 * @param mast_id describes the mask region for which this cell belongs (not currently used)
 */
// export class Cell {
//   is_up: boolean;
//   is_set: boolean;
/**
 *
 * @param setting describes if the Cell should be set to heddle up or not. Null value leaves cell unset.
 */
// constructor(setting: boolean) {
//   if(setting === null || setting === undefined){
//     this.is_set = false;
//     this.is_up = false;
//   } 
//   else {
//     this.is_set = true;
//     this.is_up = setting;
//   }
// }
/**
 * this is called from the reload file. it takes a cell in the form of a list of params and sets the variables that are present
 * @param params
 */
// reloadCell(params: any){
//   if(params.is_up !== undefined){
//     this.is_set = true;
//     this.is_up = params.is_up;
//   }else{
//     this.is_set = false;
//     this.is_up = false;
//   }
//   if(params.is_set !== undefined){
//     this.is_set = params.is_set;
//   }
// }
// setHeddleUp(){
//   this.is_up = true;
//   this.is_set = true;
// }
// setHeddleDown(){
//    this.is_set = true;
//    this.is_up = false;
// }
// /**
//  * sets the value to true or false. If null, will unset the heddle
//  * @param value 
//  */
// setHeddle(value:boolean){
//   if(value === null){
//     this.is_up = false;
//     this.is_set = false;
//   }else{
//     this.is_up = value;
//     this.is_set = true;
//   }
// }
//   /**
//  * sets the value to true or false. If null, will unset the heddle
//  * @param value 
//  */
//   getHeddle():boolean{
//      if(this.is_set){
//       return this.is_up;
//      }
//      return null;
//   }
// unsetHeddle(){
//   this.is_up = false;
//   this.is_set = false;
// }
// isUp():boolean{
//   return this.is_up;
// }
// }

/***/ }),

/***/ 86789:
/*!*****************************************!*\
  !*** ./src/app/core/model/datatypes.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ 45286:
/*!****************************************!*\
  !*** ./src/app/core/model/defaults.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaults": () => (/* binding */ defaults)
/* harmony export */ });
const defaults = {
  draft_detail_cell_size: 15,
  draft_detail_zoom: 1,
  draft_name: 'drafty',
  row_shuttle: 1,
  row_system: 0,
  col_shuttle: 0,
  col_system: 0,
  mixer_cell_size: 5,
  mixer_canvas_width: 16380,
  mixer_canvas_height: 16380,
  inlet_button_width: 50,
  weft_system_codes: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
};

/***/ }),

/***/ 1435:
/*!**************************************!*\
  !*** ./src/app/core/model/drafts.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyMask": () => (/* binding */ applyMask),
/* harmony export */   "copyDraft": () => (/* binding */ copyDraft),
/* harmony export */   "createBlankDrawdown": () => (/* binding */ createBlankDrawdown),
/* harmony export */   "createDraft": () => (/* binding */ createDraft),
/* harmony export */   "deleteDrawdownCol": () => (/* binding */ deleteDrawdownCol),
/* harmony export */   "deleteDrawdownRow": () => (/* binding */ deleteDrawdownRow),
/* harmony export */   "deleteMappingCol": () => (/* binding */ deleteMappingCol),
/* harmony export */   "deleteMappingRow": () => (/* binding */ deleteMappingRow),
/* harmony export */   "flipDraft": () => (/* binding */ flipDraft),
/* harmony export */   "flipDrawdown": () => (/* binding */ flipDrawdown),
/* harmony export */   "generateMappingFromPattern": () => (/* binding */ generateMappingFromPattern),
/* harmony export */   "getCol": () => (/* binding */ getCol),
/* harmony export */   "getDraftName": () => (/* binding */ getDraftName),
/* harmony export */   "getHeddle": () => (/* binding */ getHeddle),
/* harmony export */   "hasCell": () => (/* binding */ hasCell),
/* harmony export */   "initDraft": () => (/* binding */ initDraft),
/* harmony export */   "initDraftFromDrawdown": () => (/* binding */ initDraftFromDrawdown),
/* harmony export */   "initDraftWithParams": () => (/* binding */ initDraftWithParams),
/* harmony export */   "insertDrawdownCol": () => (/* binding */ insertDrawdownCol),
/* harmony export */   "insertDrawdownRow": () => (/* binding */ insertDrawdownRow),
/* harmony export */   "insertMappingCol": () => (/* binding */ insertMappingCol),
/* harmony export */   "insertMappingRow": () => (/* binding */ insertMappingRow),
/* harmony export */   "invertDrawdown": () => (/* binding */ invertDrawdown),
/* harmony export */   "isSet": () => (/* binding */ isSet),
/* harmony export */   "isUp": () => (/* binding */ isUp),
/* harmony export */   "loadDraftFromFile": () => (/* binding */ loadDraftFromFile),
/* harmony export */   "pasteIntoDrawdown": () => (/* binding */ pasteIntoDrawdown),
/* harmony export */   "setHeddle": () => (/* binding */ setHeddle),
/* harmony export */   "shiftDrawdown": () => (/* binding */ shiftDrawdown),
/* harmony export */   "updateWarpSystemsAndShuttles": () => (/* binding */ updateWarpSystemsAndShuttles),
/* harmony export */   "updateWeftSystemsAndShuttles": () => (/* binding */ updateWeftSystemsAndShuttles),
/* harmony export */   "warps": () => (/* binding */ warps),
/* harmony export */   "wefts": () => (/* binding */ wefts)
/* harmony export */ });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ 94467);
/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaults */ 45286);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ 75973);



/**
 * generates an empty draft with a unique id
 * @returns
 */
const initDraft = () => {
  const d = {
    id: _util__WEBPACK_IMPORTED_MODULE_2__["default"].generateId(8),
    gen_name: _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.draft_name,
    ud_name: "",
    drawdown: [],
    rowShuttleMapping: [],
    rowSystemMapping: [],
    colShuttleMapping: [],
    colSystemMapping: []
  };
  return d;
};
/**
 * generates a deep copy of the input draft
 * @returns
 */
const copyDraft = d => {
  const copy_draft = initDraftWithParams({
    id: d.id,
    ud_name: d.ud_name,
    gen_name: d.gen_name,
    warps: warps(d.drawdown),
    wefts: wefts(d.drawdown),
    drawdown: d.drawdown,
    rowShuttleMapping: d.rowShuttleMapping,
    rowSystemMapping: d.rowSystemMapping,
    colShuttleMapping: d.colShuttleMapping,
    colSystemMapping: d.colSystemMapping
  });
  return copy_draft;
};
/**
 * creates a draft based on the params provided.
 * @param params allowable params are id, weft, warp, drawdown, pattern, ud_name, gen_name, rowShuttleMapping, rowSystemMapping, colShuttleMapping, colSystemMapping.
 * @returns
 */
const initDraftWithParams = params => {
  const d = {
    id: _util__WEBPACK_IMPORTED_MODULE_2__["default"].generateId(8),
    gen_name: _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.draft_name,
    ud_name: "",
    drawdown: [],
    rowShuttleMapping: [],
    rowSystemMapping: [],
    colShuttleMapping: [],
    colSystemMapping: []
  };
  if (params.id !== undefined) d.id = params.id;
  if (params.gen_name !== undefined) d.gen_name = params.gen_name;
  if (params.ud_name !== undefined) d.ud_name = params.ud_name;
  //handle common error
  if (params.pattern !== undefined) params.drawdown = params.pattern;
  //start with empty draft 
  if (params.wefts === undefined) {
    if (params.drawdown == undefined) params.wefts = 1;else params.wefts = wefts(params.drawdown);
  }
  if (params.warps === undefined) {
    if (params.drawdown == undefined) params.warps = 1;else params.warps = warps(params.drawdown);
  }
  for (let i = 0; i < params.wefts; i++) {
    d.drawdown.push([]);
    d.rowSystemMapping.push(_defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.row_system);
    d.rowShuttleMapping.push(_defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.row_shuttle);
    for (let j = 0; j < params.warps; j++) {
      d.drawdown[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false);
    }
  }
  for (let j = 0; j < params.warps; j++) {
    d.colSystemMapping.push(_defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.col_system);
    d.colShuttleMapping.push(_defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.col_shuttle);
  }
  if (params.drawdown !== undefined) {
    d.drawdown.forEach((row, i) => {
      row.forEach((cell, j) => {
        cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(params.drawdown[i % wefts(params.drawdown)][j % warps(params.drawdown)]));
      });
    });
  }
  if (params.rowShuttleMapping !== undefined) {
    for (let i = 0; i < wefts(d.drawdown); i++) {
      d.rowShuttleMapping[i] = params.rowShuttleMapping[i % params.rowShuttleMapping.length];
    }
  }
  if (params.rowSystemMapping !== undefined) {
    for (let i = 0; i < wefts(d.drawdown); i++) {
      d.rowSystemMapping[i] = params.rowSystemMapping[i % params.rowSystemMapping.length];
    }
  }
  if (params.colShuttleMapping !== undefined) {
    for (let i = 0; i < warps(d.drawdown); i++) {
      d.colShuttleMapping[i] = params.colShuttleMapping[i % params.colShuttleMapping.length];
    }
  }
  if (params.colSystemMapping !== undefined) {
    for (let i = 0; i < warps(d.drawdown); i++) {
      d.colSystemMapping[i] = params.colSystemMapping[i % params.colSystemMapping.length];
    }
  }
  return d;
};
/**
 * creates a draft using only information from a drawdown (no system or column information)
 * @returns
 */
const initDraftFromDrawdown = drawdown => {
  const d = {
    id: _util__WEBPACK_IMPORTED_MODULE_2__["default"].generateId(8),
    gen_name: _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.draft_name,
    ud_name: "",
    drawdown: [],
    rowShuttleMapping: [],
    rowSystemMapping: [],
    colShuttleMapping: [],
    colSystemMapping: []
  };
  drawdown.forEach((row, i) => {
    d.drawdown.push([]);
    row.forEach((cell, j) => {
      d.drawdown[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][j]));
    });
  });
  for (let i = 0; i < wefts(d.drawdown); i++) {
    d.rowShuttleMapping[i] = _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.row_shuttle;
    d.rowSystemMapping[i] = _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.row_system;
  }
  for (let j = 0; j < warps(d.drawdown); j++) {
    d.colShuttleMapping[j] = _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.col_shuttle;
    d.colSystemMapping[j] = _defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.col_system;
  }
  return d;
};
/**
 * generates a new draft from the paramters specified.
 * @param pattern
 * @param gen_name
 * @param ud_name
 * @param rowShuttleMapping
 * @param rowSystemMapping
 * @param colShuttleMapping
 * @param colSystemMapping
 * @returns
 */
const createDraft = (pattern, gen_name, ud_name, rowShuttleMapping, rowSystemMapping, colShuttleMapping, colSystemMapping) => {
  const d = {
    id: _util__WEBPACK_IMPORTED_MODULE_2__["default"].generateId(8),
    drawdown: pattern.slice(),
    gen_name: gen_name,
    ud_name: ud_name,
    rowShuttleMapping: rowShuttleMapping.slice(),
    rowSystemMapping: rowSystemMapping.slice(),
    colShuttleMapping: colShuttleMapping.slice(),
    colSystemMapping: colSystemMapping.slice()
  };
  return d;
};
/**
 * sets up the draft from the information saved in a .ada file
 * @param data
 */
const loadDraftFromFile = (data, flips, version) => {
  const draft = initDraft();
  if (data.id !== undefined) draft.id = data.id;
  draft.gen_name = data.gen_name === undefined ? 'draft' : data.gen_name;
  draft.ud_name = data.ud_name === undefined ? '' : data.ud_name;
  if (version === undefined || version === null || !_util__WEBPACK_IMPORTED_MODULE_2__["default"].sameOrNewerVersion(version, '3.4.5')) {
    draft.drawdown = parseSavedDrawdown(data.pattern);
  } else {
    draft.drawdown = parseSavedDrawdown(data.drawdown);
  }
  draft.rowShuttleMapping = data.rowShuttleMapping === undefined ? [] : data.rowShuttleMapping;
  draft.rowSystemMapping = data.rowSystemMapping === undefined ? [] : data.rowSystemMapping;
  draft.colShuttleMapping = data.colShuttleMapping === undefined ? [] : data.colShuttleMapping;
  ;
  draft.colSystemMapping = data.colSystemMapping === undefined ? [] : data.colSystemMapping;
  ;
  return flipDraft(draft, flips.horiz, flips.vert).then(flipped => {
    return flipped;
  });
};
/**
 * converts the saved structure of a pattern into the format used in memory
 * @param pattern the saved pattern
 * @returns the pattern in the form of a drawdown.
 */
const parseSavedPattern = pattern => {
  const drawdown = [];
  if (pattern === undefined) return [];
  for (var i = 0; i < wefts(pattern); i++) {
    drawdown.push([]);
    for (var j = 0; j < warps(pattern); j++) {
      drawdown[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(pattern[i][j]);
    }
  }
  return drawdown;
};
const parseSavedDrawdown = dd => {
  const drawdown = [];
  if (dd === undefined) return [];
  for (var i = 0; i < wefts(dd); i++) {
    drawdown.push([]);
    for (var j = 0; j < warps(dd); j++) {
      drawdown[i][j] = dd[i][j];
    }
  }
  return drawdown;
};
/**
 * calcualte the number of wefts (rows) in a pattern
 * @param d a drawdown or any 2D array
 * @returns the number of rows of 0 if undefined
 */
const wefts = d => {
  if (d === null || d == undefined) return 0;
  return d.length;
};
/**
 * calcualte the number of warps (cols) in a pattern
 * @param d a drawdown or any 2D array
 * @returns the number of cols of 0 if undefined
 */
const warps = d => {
  if (d === null || d == undefined) return 0;
  if (d[0] === undefined) return 0;
  return d[0].length;
};
/**
 * check if the giver interlacement within the size of the draft
 * @param i the selected weft
 * @param j the selected warp
 * @returns true/false
 */
const hasCell = (d, i, j) => {
  if (i < 0 || i >= wefts(d)) return false;
  if (j < 0 || j >= warps(d)) return false;
  return true;
};
/**
 * checks if the cells in the provided drawdown is up
 * @param d the drawdown
 * @param i weft
 * @param j warp
 * @returns true if set and up, false if set and down or unset
 */
const isUp = (d, i, j) => {
  //console.log("is up", i, j, wefts(d), warps(d), d[i][j]);
  if (i > -1 && i < wefts(d) && j > -1 && j < warps(d)) {
    return d[i][j].is_set && d[i][j].is_up;
  } else {
    return false;
  }
};
/**
 * checks if the cells in the provided drawdown is set or unset
 * @param d the drawdown
 * @param i weft
 * @param j warp
 * @returns true if set and up or down, false if unset
 */
const isSet = (d, i, j) => {
  if (i > -1 && i < wefts(d) && j > -1 && j < warps(d)) {
    return d[i][j].is_set;
  } else {
    return false;
  }
};
/**
 * sets the heddle at the specified location to the value provided
 * @param d drawdown
 * @param i weft
 * @param j warp
 * @param bool the value (true for up, false for down, null for unset)
 * @returns
 */
const setHeddle = (d, i, j, bool) => {
  d[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(d[i][j], bool);
  return d;
};
/**
 * get the value of the heddle at a given location
 * @param d the drawdown
 * @param i the weft row
 * @param j the warp col
 * @returns the heddle value (true, false or null for unset)
 */
const getHeddle = (d, i, j) => {
  if (i > wefts(d) || j > warps(d)) return null;
  return (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(d[i][j]);
};
/**
 * pasts a second drawdown representing a pattern at the specified location and size
 * @param drawdown
 * @param fill_pattern
 * @param start_i
 * @param start_j
 * @param width
 * @param height
 * @returns
 */
const pasteIntoDrawdown = (drawdown, fill_pattern, start_i, start_j, width, height) => {
  let rows = wefts(fill_pattern);
  let cols = warps(fill_pattern);
  //cycle through each visible row/column of the selection
  for (var i = 0; i < height; i++) {
    for (var j = 0; j < width; j++) {
      try {
        drawdown[start_i + i][start_j + j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(fill_pattern[i % rows][j % cols]));
      } catch (e) {
        console.error(e);
      }
    }
  }
  return drawdown;
};
/**
 * creates an empty drawdown of a given size
 * @param wefts
 * @param warps
 * @returns
 */
const createBlankDrawdown = (wefts, warps) => {
  const drawdown = [];
  for (let i = 0; i < wefts; i++) {
    drawdown.push([]);
    for (let j = 0; j < warps; j++) {
      drawdown[i].push((0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false));
    }
  }
  return drawdown;
};
/**
 * applys a pattern only to regions where the input draft has true heddles
 * @param mask the pattern to use as a mask
 * @param pattern the pattern to fill with
 * @returns the result
 */
const applyMask = (mask, pattern) => {
  const res = createBlankDrawdown(wefts(mask), warps(mask));
  for (let i = 0; i < wefts(mask); i++) {
    for (let j = 0; j < warps(mask); j++) {
      if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(mask[i][j])) {
        const set_to = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(pattern[i % wefts(pattern)][j % warps(pattern)]);
        res[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(set_to);
      }
    }
  }
  return res;
};
/**
 * inverts the drawdown (e.g. sets true cells to false and vice versa)
 * @param drawdown the drawdown to invert
 * @returns the inverted drawdown
 */
const invertDrawdown = drawdown => {
  const inverted = drawdown.slice();
  for (let i = 0; i < wefts(drawdown); i++) {
    for (let j = 0; j < warps(drawdown); j++) {
      if (drawdown[i][j].is_set) {
        const set_to = !(0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][j]);
        inverted[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(set_to);
      }
    }
  }
  return inverted;
};
/**
 * shifts the drawdown up or left by the amount specified.
 * @param drawdown the drawdown to shift
 * @param up shift up = true, left = false
 * @param inc the amount to shift by
 * @returns the shfited drawdown
 */
const shiftDrawdown = (drawdown, up, inc) => {
  const shifted = createBlankDrawdown(wefts(drawdown), warps(drawdown));
  for (let i = 0; i < wefts(drawdown); i++) {
    for (let j = 0; j < warps(drawdown); j++) {
      let set_to = false;
      if (up) set_to = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[(i + inc) % wefts(drawdown)][j]);else set_to = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][(j + inc) % warps(drawdown)]);
      shifted[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(set_to);
    }
  }
  return shifted;
};
/**
* flips the drawdown horizontally or vertically. This is different than flip draft because it only
* flippes teh drawdown, not any other associated information
* @param drawdown the drawdown to shift
* @param horiz true for horizontal flip, false for vertical
* @returns the flipped drawdown
*/
const flipDrawdown = (drawdown, horiz) => {
  const flip = createBlankDrawdown(wefts(drawdown), warps(drawdown));
  for (let i = 0; i < wefts(drawdown); i++) {
    for (let j = 0; j < warps(drawdown); j++) {
      let set_to = false;
      if (horiz) set_to = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][warps(drawdown) - 1 - j]);else set_to = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[wefts(drawdown) - 1 - i][j]);
      flip[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(set_to);
    }
  }
  return flip;
};
/**
 * generates a system or shuttle mapping from an input pattern based on the input draft
 * @param drawdown the drawdown for which we are creating this mapping
 * @param pattern the repeating pattern to use when creating the mapping
 * @param type specify if this is a 'row'/weft or 'col'/warp mapping
 * @returns the mapping to use
 */
const generateMappingFromPattern = (drawdown, pattern, type, origin) => {
  const mapping = [];
  if (type == 'row') {
    if (origin == 1 || origin == 2) pattern = pattern.slice().reverse();
    for (let i = 0; i < wefts(drawdown); i++) {
      mapping.push(pattern[i % pattern.length]);
    }
  } else {
    if (origin == 0 || origin == 1) pattern = pattern.slice().reverse();
    for (let j = 0; j < warps(drawdown); j++) {
      mapping.push(pattern[j % pattern.length]);
    }
  }
  return mapping.slice();
};
/**
 * take the system and shuttle and
 * @param to
 * @param from
 */
const updateWeftSystemsAndShuttles = (to, from) => {
  if (from == null || from == undefined) from = initDraftWithParams({
    wefts: 1,
    warps: 1,
    drawdown: [[(0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
  });
  to.rowShuttleMapping = generateMappingFromPattern(to.drawdown, from.rowShuttleMapping, 'row', 3);
  to.rowSystemMapping = generateMappingFromPattern(to.drawdown, from.rowSystemMapping, 'row', 3);
  return to;
};
const updateWarpSystemsAndShuttles = (to, from) => {
  if (from == null || from == undefined) from = initDraftWithParams({
    wefts: 1,
    warps: 1,
    drawdown: [[(0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
  });
  to.colShuttleMapping = generateMappingFromPattern(to.drawdown, from.colShuttleMapping, 'col', 3);
  to.colSystemMapping = generateMappingFromPattern(to.drawdown, from.colSystemMapping, 'col', 3);
  return to;
};
/**
 * I DON"T THINK THIS FUNCTION WORKS OR IS BEING USED
 * removes any boundary rows from the input draft that are unset
 * @return returns the resulting draft
 */
// export const trimUnsetRows = (d: Drawdown) : Drawdown => {
//   const rowmap: Array<number> = [];
//   const to_delete: Array<number> = [];
//   //make a list of rows that contains the number of set cells
//   d.forEach(row => {
//     const active_cells: Array<Cell> = row.filter(cell => (cell.isSet()));
//     rowmap.push(active_cells.length);
//   });
//   let delete_top: number = 0;
//   let top_hasvalue: boolean = false;
//   //scan from top and bottom to see how many rows we shoudl delete
//   for(let ndx = 0; ndx < rowmap.length; ndx++){
//       if(rowmap[ndx] == 0 && !top_hasvalue){
//         delete_top++;
//       }else{
//         top_hasvalue = true;
//       }
//   }
//   if(delete_top == rowmap.length) return []; //this is empty now
//   let delete_bottom: number = 0;
//   let bottom_hasvalue:boolean = false;
//   for(let ndx = rowmap.length -1; ndx >= 0; ndx--){
//     if(rowmap[ndx] == 0 && !bottom_hasvalue){
//       delete_bottom++;
//     }else{
//       bottom_hasvalue = true;
//     }
//   }
//   return d;
// }
/**
 * insert a row into the drawdown at a given location
 * @param d the drawdown
 * @param i the weft location
 * @param row the row to insert, or null if row should be blank.
 * @returns
 */
const insertDrawdownRow = (d, i, row) => {
  i = i + 1;
  if (row === null) {
    row = [];
    for (var j = 0; j < warps(d); j++) {
      row.push((0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false));
    }
  }
  if (row.length !== warps(d)) console.error("inserting row of incorrect length into drawdown");
  try {
    d.splice(i, 0, row);
  } catch (e) {
    console.error(e);
  }
  return d;
};
/**
 * inserts a new value into the row system/shuttle map
 * @param m the map to modify
 * @param i the place at which to add the row
 * @param val the value to insert
 * @returns
 */
const insertMappingRow = (m, i, val) => {
  i = i + 1;
  try {
    m.splice(i, 0, val);
  } catch (e) {
    console.error(e);
  }
  return m;
};
/**
 * deletes a row from the drawdown at the specified weft location
 * @param d drawdown
 * @param i weft location
 * @returns the modified drawdown
 */
const deleteDrawdownRow = (d, i) => {
  try {
    d.splice(i, 1);
  } catch (e) {
    console.error(e);
  }
  return d;
};
/**
 * deletes a row from a row system/shuttle mapping at the specified weft location
 * @param m the mapping
 * @param i the weft location
 * @returns the modified
 */
const deleteMappingRow = (m, i) => {
  try {
    m.splice(i, 1);
  } catch (e) {
    console.error(e);
  }
  return m;
};
/**
 * inserts a column into the drawdown
 * @param d the drawdown
 * @param j the warp location at which to insert
 * @param col - the column to insert or null if it should be a blank column
 * @returns the modified drawdown
 */
const insertDrawdownCol = (d, j, col) => {
  const w = warps(d);
  if (j === null) j = 0;
  if (col == null) {
    col = [];
    for (let i = 0; i < wefts(d); i++) {
      col.push((0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false));
    }
  }
  for (var ndx = 0; ndx < wefts(d); ndx++) {
    d[ndx].splice(j, 0, (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(col[ndx])));
  }
  return d;
};
/**
 * inserts a value into the col system/shuttle mapping at a particular location
 * @param m the map to modify
 * @param j the location at which to add
 * @param col the value to add
 * @returns
 */
const insertMappingCol = (m, j, col) => {
  m.splice(j, 0, col);
  return m;
};
/**
 * delete a column from the drawdown at a given location
 * @param d the drawdown
 * @param j the warp location
 * @returns the modified drawdown
 */
const deleteDrawdownCol = (d, j) => {
  for (var ndx = 0; ndx < wefts(d); ndx++) {
    d[ndx].splice(j, 1);
  }
  return d;
};
/**
* deletes a value into the col system/shuttle mapping at a particular location
* @param m the mapping to modify
* @param j the warp location
* @returns the modified mapping
*/
const deleteMappingCol = (m, j) => {
  m.splice(j, 1);
  return m;
};
const getCol = (d, j) => {
  const col = d.reduce((acc, val, i) => {
    const cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(d[i][j]));
    acc.push(cell);
    return acc;
  }, []);
  return col;
};
/**
 * gets the name of the draft. If it has a user defined name, it returns that, otherwise, it returns the generated name
 * @param draft
 * @returns
 */
const getDraftName = draft => {
  if (draft === null || draft === undefined) return "";
  if (draft.ud_name == undefined) {
    if (draft.gen_name == undefined) return '';else return draft.gen_name;
  }
  if (draft.gen_name == undefined) {
    if (draft.ud_name == undefined) return '';else return draft.ud_name;
  }
  return draft.ud_name === "" ? draft.gen_name : draft.ud_name;
};
/**
* takes a draft as input, and flips the order of the rows
* used to ensure mixer calculations are oriented from bottom left
* @param draft
*/
const flipDraft = (d, horiz, vert) => {
  const draft = initDraftWithParams({
    id: d.id,
    wefts: wefts(d.drawdown),
    warps: warps(d.drawdown),
    gen_name: d.gen_name,
    ud_name: d.ud_name,
    colShuttleMapping: d.colShuttleMapping,
    colSystemMapping: d.colSystemMapping
  });
  draft.drawdown = createBlankDrawdown(wefts(d.drawdown), warps(d.drawdown));
  for (let i = 0; i < wefts(d.drawdown); i++) {
    let flipped_i = i;
    if (vert) flipped_i = wefts(d.drawdown) - 1 - i;
    for (let j = 0; j < warps(d.drawdown); j++) {
      let flipped_j = j;
      if (horiz) flipped_j = warps(d.drawdown) - 1 - j;
      draft.drawdown[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(d.drawdown[flipped_i][flipped_j]));
    }
    draft.rowShuttleMapping[i] = d.rowShuttleMapping[flipped_i];
    draft.rowSystemMapping[i] = d.rowSystemMapping[flipped_i];
  }
  if (horiz) {
    for (let j = 0; j < warps(d.drawdown); j++) {
      let flipped_j = warps(d.drawdown) - 1 - j;
      draft.colShuttleMapping[j] = d.colShuttleMapping[flipped_j];
      draft.colSystemMapping[j] = d.colSystemMapping[flipped_j];
    }
  }
  return Promise.resolve(draft);
};
/**
 * this function generates a list of floats as well as a map of each cell in the draft to its associated float. This is used to compute layers within the draft
 * @param drawdown
 * @returns
 */
// export const createWeftFloatMap = (drawdown: Drawdown) : {float_list: Array<{id: number, float: YarnFloat}>, float_map: Array<Array<number>>} => {
//   const float_list: Array<{id: number, float: YarnFloat}> = [] ;
//   const float_map:Array<Array<number>> = [];
//   drawdown.forEach((row, i) => {
//     let j = 0;
//     while(j < warps(drawdown)){
//       let f:YarnFloat = getFloatLength(row, j, getCellValue(row[j]));
//       let f_id = float_list.length;
//       float_list.push({id: f_id, float: f })
//       for(let x = j; x < j+f.total_length; x++){
//         float_map[i][x] = f_id;
//       }
//       j += f.total_length;
//     }
//   });
//   return {float_list, float_map};
// }

/***/ }),

/***/ 58364:
/*!*************************************!*\
  !*** ./src/app/core/model/looms.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeDrawdown": () => (/* binding */ computeDrawdown),
/* harmony export */   "convertEPItoMM": () => (/* binding */ convertEPItoMM),
/* harmony export */   "copyLoom": () => (/* binding */ copyLoom),
/* harmony export */   "copyLoomSettings": () => (/* binding */ copyLoomSettings),
/* harmony export */   "flipAndComputeDrawdown": () => (/* binding */ flipAndComputeDrawdown),
/* harmony export */   "flipLoom": () => (/* binding */ flipLoom),
/* harmony export */   "flipPattern": () => (/* binding */ flipPattern),
/* harmony export */   "flipThreading": () => (/* binding */ flipThreading),
/* harmony export */   "flipTieUp": () => (/* binding */ flipTieUp),
/* harmony export */   "flipTreadling": () => (/* binding */ flipTreadling),
/* harmony export */   "generateDirectTieup": () => (/* binding */ generateDirectTieup),
/* harmony export */   "generateThreading": () => (/* binding */ generateThreading),
/* harmony export */   "generateTreadlingforFrameLoom": () => (/* binding */ generateTreadlingforFrameLoom),
/* harmony export */   "getLoomUtilByType": () => (/* binding */ getLoomUtilByType),
/* harmony export */   "isFrame": () => (/* binding */ isFrame),
/* harmony export */   "isInThreadingRange": () => (/* binding */ isInThreadingRange),
/* harmony export */   "isInTieupRange": () => (/* binding */ isInTieupRange),
/* harmony export */   "isInTreadlingRange": () => (/* binding */ isInTreadlingRange),
/* harmony export */   "isInUserThreadingRange": () => (/* binding */ isInUserThreadingRange),
/* harmony export */   "isInUserTieupRange": () => (/* binding */ isInUserTieupRange),
/* harmony export */   "isInUserTreadlingRange": () => (/* binding */ isInUserTreadlingRange),
/* harmony export */   "loadLoomFromFile": () => (/* binding */ loadLoomFromFile),
/* harmony export */   "numFrames": () => (/* binding */ numFrames),
/* harmony export */   "numTreadles": () => (/* binding */ numTreadles),
/* harmony export */   "pasteDirectAndFrameThreading": () => (/* binding */ pasteDirectAndFrameThreading),
/* harmony export */   "pasteDirectAndFrameTreadling": () => (/* binding */ pasteDirectAndFrameTreadling)
/* harmony export */ });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ 94467);
/* harmony import */ var _drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drafts */ 1435);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ 75973);



/*********** GENERIC FUNCTIONS RELATING TO LOOMS AND LOOM UTILS ************/
const copyLoom = l => {
  if (l === undefined || l == null) return null;
  const copy_loom = {
    threading: l.threading.slice(),
    treadling: l.treadling.slice(),
    tieup: l.tieup.slice()
  };
  return copy_loom;
};
const copyLoomSettings = ls => {
  const copy_loomsettings = {
    type: ls.type,
    epi: ls.epi,
    units: ls.units,
    frames: ls.frames,
    treadles: ls.treadles
  };
  return copy_loomsettings;
};
const convertEPItoMM = ls => {
  if (ls.units == 'cm') {
    return ls.epi;
  } else {
    return 25.4 / ls.epi;
  }
};
/*********** ESTABLISH SPECIFIC TYPES OF LOOMS and A CORE SET OF FUNCTIONS FOR EACH ************/
const jacquard_utils = {
  type: 'jacquard',
  displayname: 'jacquard loom',
  dx: "draft exclusively from drawdown, disregarding any frame and treadle information",
  computeLoomFromDrawdown: (d, loom_settings, origin) => {
    return Promise.resolve(null);
  },
  computeDrawdownFromLoom: l => {
    return Promise.resolve(null);
  },
  recomputeLoomFromThreadingAndDrawdown: (l, loom_settings, d, origin) => {
    return Promise.resolve(null);
  },
  updateThreading: (loom, ndx) => {
    return loom;
  },
  updateTieup: (loom, ndx) => {
    return loom;
  },
  updateTreadling: (loom, ndx) => {
    return loom;
  },
  insertIntoThreading: (loom, j, val) => {
    return loom;
  },
  insertIntoTreadling: (loom, i, val) => {
    return loom;
  },
  pasteThreading: (loom, drawdown, ndx, width, height) => {
    return loom;
  },
  pasteTreadling: (loom, drawdown, ndx, width, height) => {
    return loom;
  },
  pasteTieup: (loom, drawdown, ndx, width, height) => {
    return loom;
  },
  deleteFromThreading: (loom, j) => {
    return loom;
  },
  deleteFromTreadling: (loom, i) => {
    return loom;
  }
};
/**
 * contains the set of functions to be used when working on a direct tieup or dobby loom
 */
const direct_utils = {
  type: 'direct',
  displayname: 'direct-tie or dobby loom',
  dx: "draft from drawdown or threading/tieup/treadling. Assumes you are using a direct tie and mutiple treadle assignments",
  computeLoomFromDrawdown: (d, loom_settings, origin) => {
    const l = {
      threading: [],
      tieup: [],
      treadling: []
    };
    //now calculate threading 
    return generateThreading(d).then(obj => {
      l.threading = obj.threading.slice();
      //add treadling
      for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(d); i++) {
        let active_ts = [];
        let i_pattern = d[i].slice();
        i_pattern.forEach((cell, j) => {
          if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == true) {
            const frame_assignment = obj.threading[j];
            if (frame_assignment !== -1) {
              active_ts.push(frame_assignment);
            }
          }
        });
        l.treadling[i] = _util__WEBPACK_IMPORTED_MODULE_2__["default"].filterToUniqueValues(active_ts);
      }
      const num_frames = Math.max(numFrames(l), loom_settings.frames);
      const num_treadles = Math.max(numTreadles(l), loom_settings.treadles);
      const dim = Math.max(num_frames, num_treadles);
      l.tieup = generateDirectTieup(dim);
      return l;
    });
  },
  computeDrawdownFromLoom: (l, origin) => {
    return computeDrawdown(l);
  },
  recomputeLoomFromThreadingAndDrawdown: (l, loom_settings, d, origin) => {
    const new_loom = {
      threading: l.threading.slice(),
      tieup: [],
      treadling: []
    };
    //add treadling
    for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(d); i++) {
      let active_ts = [];
      let i_pattern = d[i].slice();
      i_pattern.forEach((cell, j) => {
        if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == true) {
          const frame_assignment = new_loom.threading[j];
          if (frame_assignment !== -1) {
            active_ts.push(frame_assignment);
          }
        }
      });
      new_loom.treadling[i] = _util__WEBPACK_IMPORTED_MODULE_2__["default"].filterToUniqueValues(active_ts);
    }
    const num_frames = Math.max(numFrames(l), loom_settings.frames);
    const num_treadles = Math.max(numTreadles(l), loom_settings.treadles);
    const dim = Math.max(num_frames, num_treadles);
    new_loom.tieup = generateDirectTieup(dim);
    return Promise.resolve(new_loom);
  },
  updateThreading: (loom, ndx) => {
    if (ndx.val) loom.threading[ndx.j] = ndx.i;else loom.threading[ndx.j] = -1;
    return loom;
  },
  updateTieup: (loom, ndx) => {
    return loom;
  },
  updateTreadling: (loom, ndx) => {
    if (ndx.val) {
      if (loom.treadling[ndx.i].find(el => el === ndx.j) === undefined) loom.treadling[ndx.i].push(ndx.j);
    } else {
      loom.treadling[ndx.i] = loom.treadling[ndx.i].filter(el => el !== ndx.j);
    }
    return loom;
  },
  insertIntoThreading: (loom, j, val) => {
    loom.threading.splice(j, 0, val);
    return loom;
  },
  insertIntoTreadling: (loom, i, val) => {
    loom.treadling.splice(i, 0, val);
    return loom;
  },
  pasteThreading: (loom, drawdown, ndx, width, height) => {
    return pasteDirectAndFrameThreading(loom, drawdown, ndx, width, height);
  },
  pasteTreadling: (loom, drawdown, ndx, width, height) => {
    return pasteDirectAndFrameTreadling(loom, drawdown, ndx, width, height);
  },
  pasteTieup: (loom, drawdown, ndx, width, height) => {
    return loom;
  },
  deleteFromThreading: (loom, j) => {
    loom.threading.splice(j, 1);
    return loom;
  },
  deleteFromTreadling: (loom, i) => {
    loom.treadling.splice(i, 1);
    return loom;
  }
};
/**
 * contains the set of functions to be used when working on a frame loom
 */
const frame_utils = {
  type: 'frame',
  displayname: 'shaft/treadle loom',
  dx: "draft from drawdown or threading/tieup/treadling. Assumes you are assigning treadles to specific frame via tieup",
  computeLoomFromDrawdown: (d, loom_settings, origin) => {
    const loom = {
      threading: [],
      tieup: [],
      treadling: []
    };
    return generateThreading(d).then(threading => {
      loom.threading = threading.threading;
      return generateTreadlingforFrameLoom(d);
    }).then(treadling => {
      loom.treadling = treadling.treadling;
      loom.tieup = [];
      const num_frames = Math.max(numFrames(loom), loom_settings.frames);
      const num_treadles = Math.max(numTreadles(loom), loom_settings.treadles);
      for (let frames = 0; frames < num_frames; frames++) {
        loom.tieup.push([]);
        for (let treadles = 0; treadles < num_treadles; treadles++) {
          loom.tieup[frames].push(false);
        }
      }
      for (let i = 0; i < loom.treadling.length; i++) {
        if (loom.treadling[i].length > 0) {
          const active_treadle_id = loom.treadling[i][0];
          const row = d[i];
          row.forEach((cell, j) => {
            if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == true) {
              const active_frame_id = loom.threading[j];
              loom.tieup[active_frame_id][active_treadle_id] = true;
            }
          });
        }
      }
      return loom;
    });
  },
  computeDrawdownFromLoom: (l, origin) => {
    return computeDrawdown(l);
  },
  recomputeLoomFromThreadingAndDrawdown: (l, loom_settings, d, origin) => {
    const new_loom = {
      threading: l.threading.slice(),
      tieup: [],
      treadling: []
    };
    return generateTreadlingforFrameLoom(d).then(treadling => {
      new_loom.treadling = treadling.treadling;
      new_loom.tieup = [];
      const num_frames = Math.max(numFrames(l), loom_settings.frames);
      const num_treadles = Math.max(numTreadles(l), loom_settings.treadles);
      for (let frames = 0; frames < num_frames; frames++) {
        new_loom.tieup.push([]);
        for (let treadles = 0; treadles < num_treadles; treadles++) {
          new_loom.tieup[frames].push(false);
        }
      }
      for (let i = 0; i < new_loom.treadling.length; i++) {
        if (new_loom.treadling[i].length > 0) {
          const active_treadle_id = new_loom.treadling[i][0];
          const row = d[i];
          row.forEach((cell, j) => {
            if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == true) {
              const active_frame_id = new_loom.threading[j];
              new_loom.tieup[active_frame_id][active_treadle_id] = true;
            }
          });
        }
      }
      return Promise.resolve(new_loom);
    });
  },
  updateThreading: (loom, ndx) => {
    if (ndx.val) loom.threading[ndx.j] = ndx.i;else loom.threading[ndx.j] = -1;
    return loom;
  },
  updateTieup: (loom, ndx) => {
    loom.tieup[ndx.i][ndx.j] = ndx.val;
    return loom;
  },
  updateTreadling: (loom, ndx) => {
    if (ndx.val) {
      if (loom.treadling[ndx.i].length > 0) loom.treadling[ndx.i] = [];
      loom.treadling[ndx.i].push(ndx.j);
    } else {
      loom.treadling[ndx.i] = loom.treadling[ndx.i].filter(el => el !== ndx.j);
    }
    return loom;
  },
  insertIntoThreading: (loom, j, val) => {
    loom.threading.splice(j, 0, val);
    return loom;
  },
  insertIntoTreadling: (loom, i, val) => {
    loom.treadling.splice(i, 0, val);
    return loom;
  },
  pasteThreading: (loom, drawdown, ndx, width, height) => {
    return pasteDirectAndFrameThreading(loom, drawdown, ndx, width, height);
  },
  pasteTreadling: (loom, drawdown, ndx, width, height) => {
    return pasteDirectAndFrameTreadling(loom, drawdown, ndx, width, height);
  },
  pasteTieup: (loom, drawdown, ndx, width, height) => {
    return loom;
  },
  deleteFromThreading: (loom, j) => {
    loom.threading.splice(j, 1);
    return loom;
  },
  deleteFromTreadling: (loom, i) => {
    loom.treadling.splice(i, 1);
    return loom;
  }
};
/*** SHARED FUNCTIONS USED WHEN COMPUTING LOOM STATESs ********/
const pasteDirectAndFrameThreading = (loom, drawdown, ndx, width, height) => {
  for (let j = 0; j < width; j++) {
    const pattern_ndx = j % drawdown[0].length;
    const column_vals = drawdown.map(row => row[pattern_ndx]);
    const frame = column_vals.findIndex(cell => (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == true);
    if (frame < numFrames(loom)) loom.threading[ndx.j + j] = frame;
  }
  return loom;
};
const pasteDirectAndFrameTreadling = (loom, drawdown, ndx, width, height) => {
  for (let i = 0; i < height; i++) {
    const pattern_ndx = i % drawdown.length;
    const treadle_list = [];
    for (let j = 0; j < numTreadles(loom); j++) {
      if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[pattern_ndx][j]) == true) treadle_list.push(j);
    }
    loom.treadling[ndx.i + i] = treadle_list.slice();
  }
  return loom;
};
/**
   * flips the loom according to the origin and then calls functions to recalculate drawdown
   * @param l a loom to use when computing
   * @returns the computed draft
   */
const flipAndComputeDrawdown = (l, horiz, vert) => {
  return flipLoom(l, horiz, vert).then(loom => {
    return computeDrawdown(loom);
  }).then(drawdown => {
    return drawdown;
  });
};
/**
 * computes the drawdown based on a given loom configuration
 * @param loom
 * @returns the resulting drawdown
 */
const computeDrawdown = loom => {
  let pattern = (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.createBlankDrawdown)(loom.treadling.length, loom.threading.length);
  for (var i = 0; i < loom.treadling.length; i++) {
    const active_treadles = loom.treadling[i].slice();
    if (active_treadles.length > 0) {
      active_treadles.forEach(treadle => {
        for (var j = 0; j < loom.tieup.length; j++) {
          if (loom.tieup[j][treadle]) {
            for (var k = 0; k < loom.threading.length; k++) {
              if (loom.threading[k] == j) {
                pattern[i][k] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(pattern[i][k], true);
              }
            }
          }
        }
      });
    }
  }
  return Promise.resolve(pattern);
};
/**
* generates a threading based on the provided drawdown
 * @param drawdown the drawdown to use
 * @returns an object containing the threading pattern and the number of frames used
 */
const generateThreading = drawdown => {
  let frame = -1;
  let threading = [];
  //always assign the origin to one
  //threading[] = -1;
  //progressively add new frames in the order they appear
  for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(drawdown); j++) {
    const blank = _util__WEBPACK_IMPORTED_MODULE_2__["default"].colIsBlank(j, drawdown);
    if (blank) threading[j] = -1;else {
      const match = _util__WEBPACK_IMPORTED_MODULE_2__["default"].hasMatchingColumn(j, drawdown);
      if (match === -1 || match > j) {
        frame++;
        threading[j] = frame;
      } else {
        threading[j] = threading[match];
      }
    }
  }
  return Promise.resolve({
    threading: threading,
    num: frame
  });
};
/**
 * This function sets the treadling based on a adjusted pattern (e.g. a pattern that has been flipped based on the users selected origin point)
 * @param pattern the drawdown to use to generate the treadling
 * @returns an object containing the treadling and the total number of treadles used
 */
const generateTreadlingforFrameLoom = pattern => {
  let treadle = -1;
  let treadling = [];
  //always assign the origin to one
  //progressively add new frames in the order they appear
  for (let i = 0; i < pattern.length; i++) {
    const has_up = pattern[i].find(el => (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(el) == true);
    if (has_up === undefined) treadling[i] = [];else {
      const match = _util__WEBPACK_IMPORTED_MODULE_2__["default"].hasMatchingRow(i, pattern);
      if (match === -1 || match > i) {
        treadle++;
        treadling[i] = [treadle];
      } else {
        treadling[i] = treadling[match];
      }
    }
  }
  return Promise.resolve({
    treadling: treadling,
    num: treadle
  });
};
/**
 * generates a direct tieup for the give size
 * @param size the number of frames and treadles
 * @returns a tieup pattern of the specified size
 */
const generateDirectTieup = size => {
  //add tieup
  const tieup = [];
  for (let i = 0; i < size; i++) {
    tieup.push([]);
    for (let j = 0; j < size; j++) {
      if (i == j) tieup[i][j] = true;else tieup[i][j] = false;
    }
  }
  return tieup.slice();
};
/**
 * flips the draft horizontally and/or vertically. Used to flip the draft so that (0,0) is in the top left, no matter which origin point is selected
 * @param d the pattern to flip
 * @param horiz do horizontal flip?
 * @param vert do vertical flip?
 * @returns the flipped pattern
 */
const flipPattern = (d, horiz, vert) => {
  const d_flip = d.slice();
  // for(let i = 0; i < d.length; i++){
  //   d_flip.push([]);
  //   for(let j = 0; j < d[i].length; j++){
  //     if(horiz && vert) d_flip[i][j] = new Cell(d[d.length -1 - i][d[i].length - 1 - j].getHeddle());
  //     if(horiz && !vert) d_flip[i][j] = new Cell(d[i][(d[i].length - 1 - j)].getHeddle());
  //     if(!horiz && vert) d_flip[i][j] = new Cell(d[d.length -1 - i][j].getHeddle());
  //     if(!horiz && !vert) d_flip[i][j] = new Cell(d[i][j].getHeddle());
  //   }
  // }
  return Promise.resolve(d_flip);
};
/**
 * calls the series of functions required to flip the looms to common origin based of user selected origin.
 * @param loom the original loom
 * @returns the flipped loom
 */
const flipLoom = (loom, horiz, vert) => {
  if (loom === null || loom == undefined) return Promise.resolve(null);
  const refs = [];
  let new_loom = {
    threading: loom.threading.slice(),
    tieup: loom.tieup.slice(),
    treadling: loom.treadling.slice()
  };
  let fns = [];
  if (vert) {
    refs.push('treadling');
    fns.push(flipTreadling(loom.treadling));
  }
  if (horiz) {
    refs.push('threading');
    fns.push(flipThreading(loom.threading));
  }
  return Promise.all(fns).then(res => {
    for (let i = 0; i < refs.length; i++) {
      if (refs[i] === 'treadling') new_loom.treadling = res[i];
      if (refs[i] === 'threading') new_loom.threading = res[i];
    }
    return Promise.resolve(new_loom);
  });
};
/**
 * flips the threading order so that what was leftmost becomes rightmost
 * @param threading
 * @returns the flipped threading order
 */
const flipThreading = threading => {
  const t_flip = [];
  for (let i = 0; i < threading.length; i++) {
    t_flip[i] = threading[threading.length - 1 - i];
  }
  return Promise.resolve(t_flip);
};
/**
* flips the threading order so that what was leftmost becomes rightmost
* @param treadling
* @returns the flipped threading order
*/
const flipTreadling = treadling => {
  const t_flip = [];
  for (let i = 0; i < treadling.length; i++) {
    t_flip[i] = treadling[treadling.length - 1 - i].slice();
  }
  return Promise.resolve(t_flip);
};
/**
 * flips the threading order so that what was leftmost becomes rightmost
 * @param treadling
 * @returns the flipped threading order
 */
const flipTieUp = (tieup, horiz, vert) => {
  const t_flip = [];
  for (let i = 0; i < tieup.length; i++) {
    t_flip.push([]);
    for (let j = 0; j < tieup[i].length; j++) {
      if (horiz && vert) t_flip[i][j] = tieup[tieup.length - 1 - i][tieup[i].length - 1 - j];
      if (horiz && !vert) t_flip[i][j] = tieup[i][tieup[i].length - 1 - j];
      if (!horiz && vert) t_flip[i][j] = tieup[tieup.length - 1 - i][j];
      if (!horiz && !vert) t_flip[i][j] = tieup[i][j];
    }
  }
  return Promise.resolve(t_flip);
};
/**
 * returns the correct loom util object by string
 * @param type the type of loom you are using
 * @returns
 */
const getLoomUtilByType = type => {
  switch (type) {
    case 'frame':
      return frame_utils;
    case 'direct':
      return direct_utils;
    case 'jacquard':
      return jacquard_utils;
  }
};
/**
 * calculates the total number of frames used in this loom
 * since its called frequently, keep an eye on this to make sure it isn't hanging page loading
 * and/or call it once per needed function (instead of multiple times in one function)
 * @param loom
 * @returns the highest number found in the array
 */
const numFrames = loom => {
  if (loom === null || loom === undefined) return 0;
  let max = loom.threading.reduce((acc, el) => {
    if (el > acc) {
      acc = el;
    }
    return acc;
  }, 0);
  return max + 1;
};
/**
 * calculates the total number of frames used in this loom
 * since its called frequently, keep an eye on this to make sure it isn't hanging page loading
 * @param loom
 * @returns the highest number found in the array
 */
const numTreadles = loom => {
  if (loom == null) return 0;
  let max = loom.treadling.reduce((acc, el) => {
    let max_in_list = el.reduce((sub_acc, sub_el) => {
      if (sub_el > acc) sub_acc = sub_el;
      return sub_acc;
    }, 0);
    if (max_in_list > acc) {
      acc = max_in_list;
    }
    return acc;
  }, 0);
  return max + 1;
};
/**
 * checks if a given interlacement is within the range of the threading
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInThreadingRange = (loom, ndx) => {
  if (ndx.i < 0) return false;
  if (ndx.i > numFrames(loom)) return false;
  if (ndx.j < 0) return false;
  if (ndx.j >= loom.threading.length) return false;
  return true;
};
/**
 * checks if a given interlacement is within the range of the threading specified by the user
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInUserThreadingRange = (loom, loom_settings, ndx) => {
  const frames = Math.max(loom_settings.frames, numFrames(loom));
  if (ndx.i < 0) return false;
  if (ndx.i > frames) return false;
  if (ndx.j < 0) return false;
  if (ndx.j >= loom.threading.length) return false;
  return true;
};
/**
 * checks if a given interlacement is within the range of the threading
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInTreadlingRange = (loom, ndx) => {
  if (ndx.j < 0) return false;
  if (ndx.j > numTreadles(loom)) return false;
  if (ndx.i < 0) return false;
  if (ndx.i >= loom.treadling.length) return false;
  return true;
};
/**
 * checks if a given interlacement is within the range of the threading
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInUserTreadlingRange = (loom, loom_settings, ndx) => {
  const treadling = Math.max(loom_settings.treadles, numTreadles(loom));
  if (ndx.j < 0) return false;
  if (ndx.j > treadling) return false;
  if (ndx.i < 0) return false;
  if (ndx.i >= loom.treadling.length) return false;
  return true;
};
/**
 * checks if a given interlacement is within the range of the threading
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInTieupRange = (loom, ndx) => {
  if (ndx.i < 0) return false;
  if (ndx.i > loom.tieup.length) return false;
  if (ndx.i < 0) return false;
  if (ndx.i >= loom.tieup[0].length) return false;
  return true;
};
/**
 * checks if a given interlacement is within the range of the threading including the user defined settings
 * @param loom the loom to check with
 * @param ndx the interlacement to check
 * @returns true or false to determine if in or out of range
 */
const isInUserTieupRange = (loom, loom_settings, ndx) => {
  const frames = Math.max(loom_settings.frames, numFrames(loom));
  const treadling = Math.max(loom_settings.treadles, numTreadles(loom));
  if (ndx.i < 0) return false;
  if (ndx.i >= frames) return false;
  if (ndx.i < 0) return false;
  if (ndx.i >= treadling) return false;
  return true;
};
/**
 * returns true if this loom typically requires a view of threading and tieup
 */
const isFrame = loom_settings => {
  if (loom_settings.type !== 'jacquard') return true;
  return false;
};
/**
* sets up the draft from the information saved in a .ada file
* @param data
*/
const loadLoomFromFile = (loom, flips, version) => {
  if (loom == null) return Promise.resolve(null);
  if (!_util__WEBPACK_IMPORTED_MODULE_2__["default"].sameOrNewerVersion(version, '3.4.5')) {
    //tranfer the old treadling style on looms to the new style updated in 3.4.5
    loom.treadling = loom.treadling.map(treadle_id => {
      if (treadle_id == -1) return [];else return [treadle_id];
    });
  } else {
    //handle case where firebase does not save empty treadles
    //console.log("IN LOAD LOOM", loom.treadling);
    for (let i = 0; i < loom.treadling.length; i++) {
      if (loom.treadling[i].length == 1 && loom.treadling[i][0] == -1) loom.treadling[i] = [];
    }
  }
  return flipLoom(loom, flips.horiz, flips.vert).then(flipped => {
    return flipped;
  });
};

/***/ }),

/***/ 90008:
/*!****************************************!*\
  !*** ./src/app/core/model/material.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMaterial": () => (/* binding */ createMaterial),
/* harmony export */   "setMaterialID": () => (/* binding */ setMaterialID),
/* harmony export */   "standardizeMaterialLists": () => (/* binding */ standardizeMaterialLists)
/* harmony export */ });
const createMaterial = (matDict = null) => {
  const m = {
    id: -1,
    name: '',
    insert: true,
    visible: true,
    color: "#666666",
    thickness: 100,
    diameter: 5,
    type: 0,
    notes: ''
  };
  if (matDict) {
    m.id = matDict.id;
    m.name = matDict.name;
    m.insert = matDict.insert;
    m.visible = matDict.visible;
    m.color = matDict.color;
    m.thickness = matDict.thickness;
    m.diameter = matDict.diameter === undefined ? 5 : matDict.diameter;
    m.type = matDict.type;
    if (matDict.type === undefined) m.type = 0;
    // this.image = image;
    // this.startLabel = startLabel;
    // this.endLabel = endLabel;
    m.notes = matDict.notes;
  }
  return m;
};
const setMaterialID = (m, id) => {
  m.id = id;
  if (!m.name) {
    m.name = 'Shuttle ' + (id + 1);
  }
  return m;
};
/**
 * given a list of material mappings, returns a list where they are all the same size,
 * @param systems the material mappings to compare
 */
const standardizeMaterialLists = shuttles => {
  if (shuttles.length === 0) return [];
  const standard = shuttles.map(el => el.slice());
  //standardize teh lengths of all the returned arrays 
  const max_length = standard.reduce((acc, el) => {
    const len = el.length;
    if (len > acc) return len;else return acc;
  }, 0);
  standard.forEach((sys, ndx) => {
    if (sys.length < max_length) {
      for (let i = sys.length; i < max_length; i++) {
        sys.push(sys[0]);
      }
    }
  });
  return standard;
};

/***/ }),

/***/ 41337:
/*!******************************************!*\
  !*** ./src/app/core/model/operations.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllDraftsAtInlet": () => (/* binding */ getAllDraftsAtInlet),
/* harmony export */   "getInputDraft": () => (/* binding */ getInputDraft),
/* harmony export */   "getOpParamValById": () => (/* binding */ getOpParamValById),
/* harmony export */   "getOpParamValByName": () => (/* binding */ getOpParamValByName),
/* harmony export */   "operationHasInputs": () => (/* binding */ operationHasInputs),
/* harmony export */   "parseDraftNames": () => (/* binding */ parseDraftNames),
/* harmony export */   "reduceToStaticInputs": () => (/* binding */ reduceToStaticInputs),
/* harmony export */   "transferSystemsAndShuttles": () => (/* binding */ transferSystemsAndShuttles)
/* harmony export */ });
/* harmony import */ var _drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drafts */ 1435);
/* harmony import */ var _material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material */ 90008);
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./system */ 36305);



const operationHasInputs = op_inputs => {
  return op_inputs.length > 0;
};
const getInputDraft = op_inputs => {
  if (!operationHasInputs(op_inputs)) return null;else return op_inputs[0].drafts[0];
};
const getAllDraftsAtInlet = (op_inputs, inlet_id) => {
  if (!operationHasInputs(op_inputs) || inlet_id < 0) return [];else {
    let req_inputs = op_inputs.filter(el => el.inlet_id == inlet_id);
    let drafts = req_inputs.reduce((acc, el) => {
      return acc.concat(el.drafts);
    }, []);
    return drafts;
  }
};
const returnDefaultValue = p => {
  switch (p.param.type) {
    case 'boolean':
      return false;
    case 'draft':
      return null;
    case 'file':
      return null;
    case 'notation_toggle':
      return false;
    case 'number':
      return 0;
    case 'select':
      return null;
    case 'string':
      return '';
  }
};
const reduceToStaticInputs = (inlets, inlet_vals) => {
  let static_inputs = inlets.filter(el => el.type === 'static');
  inlet_vals = inlet_vals.slice(0, static_inputs.length);
  return inlet_vals;
};
const getOpParamValById = (id, params) => {
  if (params.length == 0) return null;
  if (id < params.length) {
    return params[id].val;
  } else {
    console.error("PARAM ID ", id, " NOT FOUND IN PARAMS ", params);
    return returnDefaultValue(params[0]);
  }
};
const getOpParamValByName = (name, params) => {
  if (params.length == 0) return null;
  const item = params.find(el => el.param.name == 'name');
  if (item == undefined) {
    console.error("CANNOT FIND OPERATION PARAMETER WITH NAME ", name);
    return returnDefaultValue(params[0]);
  }
  return item;
};
const parseDraftNames = drafts => {
  if (drafts.length == 0) return '';
  let flat_names = drafts.reduce((acc, el) => {
    return acc + "+" + (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.getDraftName)(el);
  }, '');
  return flat_names.substring(1);
};
/**
 * transfers data about systems and shuttles from input drafts to output drafts.
 * @param d the output draft
 * @param drafts the input drafts
 * @param type how to handle the transfer (first - use the first input data, interlace, layer)
 * @returns
 */
const transferSystemsAndShuttles = (d, drafts, params, type) => {
  if (drafts.length === 0) return;
  let rowSystems = [];
  let colSystems = [];
  let uniqueSystemRows = [];
  let uniqueSystemCols = [];
  let rowShuttles = [];
  let colShuttles = [];
  let standardShuttleRows = [];
  let standardShuttleCols = [];
  switch (type) {
    case 'first':
      //if there are multipleop_input.drafts, 
      d.colShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].colShuttleMapping, 'col', 3);
      d.rowShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].rowShuttleMapping, 'row', 3);
      d.colSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].colSystemMapping, 'col', 3);
      d.rowSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].rowSystemMapping, 'row', 3);
      break;
    case 'jointop':
      //if there are multipleop_input.drafts, 
      d.colShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].colShuttleMapping, 'col', 3);
      d.colSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].colSystemMapping, 'col', 3);
      break;
    case 'joinleft':
      //if there are multipleop_input.drafts, 
      d.rowShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].rowShuttleMapping, 'row', 3);
      d.rowSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].rowSystemMapping, 'row', 3);
      break;
    case 'second':
      const input_to_use = drafts.length < 2 ? drafts[0] : drafts[1];
      d.colShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, input_to_use.colShuttleMapping, 'col', 3);
      d.rowShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, input_to_use.rowShuttleMapping, 'row', 3);
      d.colSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, input_to_use.colSystemMapping, 'col', 3);
      d.rowSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, input_to_use.rowSystemMapping, 'row', 3);
    case 'materialsonly':
      d.colShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[1].colShuttleMapping, 'col', 3);
      d.rowShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[1].rowShuttleMapping, 'row', 3);
      d.colSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].colSystemMapping, 'col', 3);
      d.rowSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, drafts[0].rowSystemMapping, 'row', 3);
      break;
    case 'interlace':
      rowSystems = drafts.map(el => el.rowSystemMapping);
      uniqueSystemRows = (0,_system__WEBPACK_IMPORTED_MODULE_2__.makeWeftSystemsUnique)(rowSystems);
      rowShuttles = drafts.map(el => el.rowShuttleMapping);
      standardShuttleRows = (0,_material__WEBPACK_IMPORTED_MODULE_1__.standardizeMaterialLists)(rowShuttles);
      d.drawdown.forEach((row, ndx) => {
        const select_array = ndx % drafts.length;
        const select_row = Math.floor(ndx / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(drafts[select_array].drawdown);
        d.rowSystemMapping[ndx] = uniqueSystemRows[select_array][select_row];
        d.rowShuttleMapping[ndx] = standardShuttleRows[select_array][select_row];
      });
      break;
    case 'interlace_warps':
      colSystems = drafts.map(el => el.colSystemMapping);
      uniqueSystemCols = (0,_system__WEBPACK_IMPORTED_MODULE_2__.makeWeftSystemsUnique)(colSystems);
      colShuttles = drafts.map(el => el.colShuttleMapping);
      standardShuttleCols = (0,_material__WEBPACK_IMPORTED_MODULE_1__.standardizeMaterialLists)(colShuttles);
      d.drawdown.forEach((row, ndx) => {
        const select_array = ndx % drafts.length;
        const select_col = Math.floor(ndx / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(drafts[select_array].drawdown);
        d.colSystemMapping[ndx] = uniqueSystemCols[select_array][select_col];
        d.colShuttleMapping[ndx] = standardShuttleCols[select_array][select_col];
      });
      break;
    case 'layer':
      rowSystems = drafts.map(el => el.rowSystemMapping);
      colSystems = drafts.map(el => el.colSystemMapping);
      uniqueSystemRows = (0,_system__WEBPACK_IMPORTED_MODULE_2__.makeWeftSystemsUnique)(rowSystems);
      uniqueSystemCols = (0,_system__WEBPACK_IMPORTED_MODULE_2__.makeWarpSystemsUnique)(colSystems);
      rowShuttles = drafts.map(el => el.rowShuttleMapping);
      colShuttles = drafts.map(el => el.colShuttleMapping);
      standardShuttleRows = (0,_material__WEBPACK_IMPORTED_MODULE_1__.standardizeMaterialLists)(rowShuttles);
      standardShuttleCols = (0,_material__WEBPACK_IMPORTED_MODULE_1__.standardizeMaterialLists)(colShuttles);
      d.drawdown.forEach((row, ndx) => {
        const select_array = ndx % drafts.length;
        const select_row = Math.floor(ndx / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(drafts[select_array].drawdown);
        d.rowSystemMapping[ndx] = uniqueSystemRows[select_array][select_row];
        d.rowShuttleMapping[ndx] = standardShuttleRows[select_array][select_row];
      });
      for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown); i++) {
        const select_array = i % drafts.length;
        const select_col = Math.floor(i / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(drafts[select_array].drawdown);
        d.colSystemMapping[i] = uniqueSystemCols[select_array][select_col];
        d.colShuttleMapping[i] = standardShuttleCols[select_array][select_col];
      }
      break;
    case 'stretch':
      d.colShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(drafts[0].drawdown, drafts[0].colShuttleMapping, 'col', 3);
      d.rowShuttleMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(drafts[0].drawdown, drafts[0].rowShuttleMapping, 'row', 3);
      d.colSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(drafts[0].drawdown, drafts[0].colSystemMapping, 'col', 3);
      d.rowSystemMapping = (0,_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(drafts[0].drawdown, drafts[0].rowSystemMapping, 'row', 3);
      //need to determine how to handle this - should it stretch the existing information or copy it over
      break;
  }
};

/***/ }),

/***/ 62390:
/*!****************************************!*\
  !*** ./src/app/core/model/sequence.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sequence": () => (/* binding */ Sequence)
/* harmony export */ });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ 94467);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ 75973);


var Sequence;
(function (Sequence) {
  class OneD {
    constructor(initSequence = []) {
      this.state = [];
      if (initSequence) {
        this.state = initSequence;
      }
      return this;
    }
    /**
    * adds a new value to the front of current sequence state
    * @param val can accept a number or boolean.
    */
    unshift(val) {
      if (typeof val == 'number') {
        this.state.unshift(val);
      } else {
        switch (val) {
          case null:
            this.state.unshift(2);
            break;
          case false:
            this.state.unshift(0);
            break;
          case true:
            this.state.unshift(1);
            break;
        }
      }
      return this;
    }
    /**
     * pushes a new value to the current sequence state
     * @param val can accept a number or boolean.
     */
    push(val) {
      if (typeof val == 'number') {
        this.state.push(val);
      } else {
        switch (val) {
          case null:
            this.state.push(2);
            break;
          case false:
            this.state.push(0);
            break;
          case true:
            this.state.push(1);
            break;
        }
      }
      return this;
    }
    pushMultiple(push_val, multiple) {
      for (let i = 0; i < multiple; i++) {
        this.push(push_val);
      }
      return this;
    }
    unshiftMultiple(push_val, multiple) {
      for (let i = 0; i < multiple; i++) {
        this.unshift(push_val);
      }
      return this;
    }
    /**
     * repeats or cuts the current sequence so that it is of length n.
     * @param n the length of the sequence
     */
    resize(n) {
      if (this.state.length == 0) return;
      let len = this.state.length;
      if (n < len) {
        this.state = this.state.slice(0, n);
      } else {
        let remainder = n - len;
        for (let j = 0; j < remainder; j++) {
          this.state.push(this.state[j % len]);
        }
        ;
      }
      return this;
    }
    /**
    * adds unset cells so that it is of length n.
    * @param n the length of the sequence
    */
    padTo(n) {
      if (this.state.length == 0) return;
      let len = this.state.length;
      let remainder = n - len;
      for (let j = 0; j < remainder; j++) {
        this.state.push(2);
      }
      ;
      return this;
    }
    /**
     * inverts all of the values of the current state
     * @returns
     */
    invert() {
      this.state = this.state.map(el => {
        if (el == 2) return 2;else return el == 0 ? 1 : 0;
      });
      return this;
    }
    /**
    * slices a portion of the sequence
    * @returns
    */
    slice(start, end) {
      this.state = this.state.slice(start, end);
      return this;
    }
    /**
     * clears the current state and pushes a new row into the state value
     * @param row
     * @returns
     */
    import(row) {
      this.state = [];
      row.forEach(cell => {
        if (typeof cell == 'number') this.push(cell);else this.push((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell));
      });
      return this;
    }
    /**
    *  pushes a new row into the state value without clearing the state
    * @param row
    * @returns
    */
    pushRow(row) {
      row.forEach(cell => {
        if (typeof cell == 'number') this.push(cell);else this.push((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell));
      });
      return this;
    }
    deleteAndDrawIn(val) {
      if (val < 1 || val >= this.state.length) return this;
      let deleted = this.state[val];
      this.state = this.state.filter((el, ndx) => ndx !== val);
      this.state.unshift(deleted);
      // this.state.push(deleted);
      return this;
    }
    /**
     * given a sequence as input. It makes sure the current state and the sequence submitted to the function are modified to be the same length. They are made the same length by appending unset values to the sequence.
     * @param seq
     * @returns
     */
    matchSize(seq) {
      if (this.state.length < seq.length()) {
        let diff = seq.length() - this.state.length;
        this.pushMultiple(2, diff);
      } else if (this.state.length > seq.length()) {
        let diff = seq.length() - this.state.length;
        seq.pushMultiple(2, diff);
      }
      return this;
    }
    computeFilter(filter, seq) {
      this.matchSize(seq);
      for (let i = 0; i < this.length(); i++) {
        let bool_a = null;
        if (this.state[i] == 0) bool_a = false;
        if (this.state[i] == 1) bool_a = true;
        let bool_b = null;
        if (seq.get(i) == 0) bool_b = false;
        if (seq.get(i) == 1) bool_b = true;
        let res = _util__WEBPACK_IMPORTED_MODULE_1__["default"].computeFilter(filter, bool_a, bool_b);
        switch (res) {
          case null:
            this.state[i] = 2;
            break;
          case false:
            this.state[i] = 0;
            break;
          case true:
            this.state[i] = 1;
            break;
        }
      }
      return this;
    }
    /**
     * shifts the sequence in the amount of val
     * @param val a positive or negative number that controls the direction of the shift
     * @returns
     */
    shift(val) {
      this.state = this.state.map((el, ndx) => {
        let shift_ndx = (ndx - val) % this.state.length;
        if (shift_ndx < 0) shift_ndx += this.state.length;
        return this.state[shift_ndx];
      });
      return this;
    }
    /**
     * repeats the sequence val times returning a sequence of size val * original sequence
     * @param val the number of times you would like to repeat. 1 returns itself. 0 returns nothing
     * @returns
     */
    repeat(val) {
      if (val <= 0) return;
      for (let j = 0; j < val - 1; j++) {
        this.state = this.state.concat(this.state);
      }
      return this;
    }
    reverse() {
      this.state = this.state.reverse();
      return this;
    }
    /**
     * provides the value of the state at this given moment of computation.
     * @returns the sequence as a numeric array
     */
    val() {
      return this.state.slice();
    }
    /**
     * gets the value at a specified position
     * @returns the value at this location, or -1 if the location was invalid
     */
    get(i) {
      if (i >= 0 && i < this.length()) return this.state[i];
      return -1;
    }
    /**
    * gets the value at a specified position
    * @returns the value at this location, or -1 if the location was invalid
    */
    set(i, val) {
      if (i < 0 || i > this.length()) return this;
      let insert_val = val;
      if (typeof val != 'number') {
        switch (val) {
          case null:
            insert_val = 2;
            break;
          case false:
            insert_val = 0;
            break;
          case true:
            insert_val = 1;
            break;
        }
      }
      this.state[i] = insert_val;
      return this;
    }
    /**
     * returns the length of the given state
     * @returns a number 0 or above
     */
    length() {
      return this.state.length;
    }
  }
  Sequence.OneD = OneD;
  class TwoD {
    constructor() {
      this.state = [];
      return this;
    }
    deleteWeft(i) {
      this.state = this.state.filter((el, ndx) => ndx != i);
      return this;
    }
    deleteWarp(j) {
      this.state.forEach((row, i) => {
        this.state[i] = row.filter((el, ndx) => ndx != j);
      });
      return this;
    }
    /**
     * uses the current state to populate a new space, but only upon a certain set of warps and wefts.
     * @param weftsys - the weft system upon which to map this draft
     * @param warpsys - the warp system upon which to map this draft
     * @param weft_system_map - the pattern of weft systems along the wefts
     * @param warp_system_draft - the pattern of warp systems along the warps
     */
    mapToSystems(weftsys, warpsys, weft_system_map, warp_system_map) {
      // console.log("MAPPING ", this.state, " to ", weftsys, warpsys)
      let total_wefts = 0;
      total_wefts = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([this.wefts(), weft_system_map.length()]) * weft_system_map.length();
      let total_warps = 0;
      total_warps = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([this.warps(), warp_system_map.length()]) * warp_system_map.length();
      //create a blank draft of the size needed that we'll copy into 
      let mapped_seq = new Sequence.TwoD().setBlank(2).fill(total_warps, total_wefts);
      //now map the new values within that space
      let within_sequence_i = 0;
      let within_sequence_j = 0;
      for (let i = 0; i < total_wefts; i++) {
        let active_weft_system = weft_system_map.get(i % weft_system_map.length());
        if (weftsys.find(el => el == active_weft_system) !== undefined) {
          within_sequence_j = 0;
          for (let j = 0; j < total_warps; j++) {
            let active_warp_system = warp_system_map.get(j % warp_system_map.length());
            if (warpsys.find(el => el == active_warp_system) !== undefined) {
              mapped_seq.set(i, j, this.get(within_sequence_i, within_sequence_j), false);
              within_sequence_j = (within_sequence_j + 1) % this.warps();
            }
          }
          within_sequence_i = (within_sequence_i + 1) % this.wefts();
        }
      }
      this.state = mapped_seq.state.slice();
      return this;
    }
    /**
     * places the non unset values from seq atop any unset values in the current state. It will also make the two sequences compatable sizes by repeating their original values.
     * @param seq
     * @returns
     */
    overlay(seq, consider_heddle_down_as_unset) {
      //first, make the seqences of compatible sizes
      let total_wefts = 0;
      total_wefts = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([this.wefts(), seq.wefts()]);
      let total_warps = 0;
      total_warps = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([this.warps(), seq.warps()]);
      this.fill(total_warps, total_wefts);
      seq.fill(total_warps, total_wefts);
      this.state.forEach((row, i) => {
        row.forEach((cell, j) => {
          if (seq.get(i, j) !== 2 && cell == 2) {
            this.set(i, j, seq.get(i, j), false);
          } else if (seq.get(i, j) !== 2 && cell != 2) {
            if (consider_heddle_down_as_unset) {
              if (seq.get(i, j) == 1) {
                this.set(i, j, 1, true);
              }
            } else {
              console.error("Sequence 2D, overlay is attempting to overwrite a set value");
            }
          }
        });
      });
      return this;
    }
    /**
     * looks at the given weft. Sets any unset value in this weft to the value provided to the function
     * @param i
     * @param val
     */
    setUnsetOnWeft(i, val) {
      let weft = this.getWeft(i);
      weft.forEach((el, j) => {
        if (el == 2) this.set(i, j, val, false);
      });
      return this;
    }
    /**
    * looks at the given warp. Sets any unset value in this warp to the value provided to the function
    * @param j
    * @param val
    */
    setUnsetOnWarp(j, val) {
      let warp = this.getWarp(j);
      warp.forEach((el, i) => {
        if (el == 2) this.set(i, j, val, false);
      });
      return this;
    }
    layerSystems(warp_system_to_layers, warp_system_map) {
      let before_layering = this.copy();
      //get the actual layers we are dealing with
      let layers = _util__WEBPACK_IMPORTED_MODULE_1__["default"].filterToUniqueValues(warp_system_to_layers.map(el => el.layer));
      //might have to make these numbers consequtive?
      for (let l = 0; l < layers.length; l++) {
        //get the warp systems associated with this layer
        let warp_systems = warp_system_to_layers.filter(el => el.layer == l).map(el => el.ws);
        //now go through the wefts, do they interlace on this warp? If yes, 
        //set all the unset values on this weft to down
        before_layering.state.forEach((row, i) => {
          //get the first set value
          let first_set = row.findIndex(el => el !== 2);
          if (first_set !== -1) {
            //is it on this warp system? 
            let interlacing_ws = warp_system_map.get(first_set);
            // console.log("First set value on  ", i, " is ", first_set, "interlacing on ", interlacing_ws, " current warp system is ", warp_systems);
            if (warp_systems.find(el => el == interlacing_ws) !== undefined) {
              //this warp system is interlacing on this layer!
              this.setUnsetOnWeft(i, 0);
            }
          }
        });
        //how, set all the unset values on the warps associated with this 
        for (let j = 0; j < this.warps(); j++) {
          let warp_syst = warp_system_map.get(j % warp_system_map.length());
          if (warp_systems.find(el => el == warp_syst) !== undefined) {
            this.setUnsetOnWarp(j, 1);
          }
        }
      } // end for each layer
      return this;
    }
    /**
     * this sets the value at a given location specified by i and j
     * This function will only succesfully set a value if the current value in that place is "unset", otherwise it returns an error that it is attempting to overwrite a value
     * @param i
     * @param j
     * @param val
     * @returns
     */
    set(i, j, val, can_overwrite_set) {
      if (i < 0 || i >= this.wefts()) {
        console.error("Sequence2D - attempting to set an out of range weft value");
        return this;
      }
      if (j < 0 || j >= this.warps()) {
        console.error("Sequence2D - attempting to set an out of range warp value");
        return this;
      }
      if (this.state[i][j] !== 2 && !can_overwrite_set) {
        console.error("overriding set value at ", i, j, this.state[i][j]);
        return this;
      }
      this.state[i][j] = val;
      return this;
    }
    get(i, j) {
      if (i < 0 || i >= this.wefts()) {
        console.error("Sequence2D - attempting to get an out of range weft value");
        return -1;
      }
      if (j < 0 || j >= this.warps()) {
        console.error("Sequence2D - attempting to get an out of range warp value");
        return -1;
      }
      return this.state[i][j];
    }
    getWeft(i) {
      if (i < 0 || i >= this.wefts()) {
        console.error("Sequence2D - attempting to get an out of range weft value");
        return [];
      }
      return this.state[i];
    }
    getWarp(j) {
      if (j < 0 || j >= this.warps()) {
        console.error("Sequence2D - attempting to get an out of range warp value");
        return [];
      }
      return this.state.reduce((acc, val) => {
        return acc.concat(val[j]);
      }, []);
    }
    /**
     * adds a row to the first (or subsequent row) of the 2D sequence
     * @param seq the 1D sequence value to add
     * @returns
     */
    pushWarpSequence(seq) {
      let height = this.state.length;
      if (height > 0 && height != seq.length) {
        let lcm = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([height, seq.length]);
        let width = this.state[0].length;
        let difference = lcm - height;
        if (difference > 0) {
          for (let i = 0; i < difference; i++) {
            this.state.push([]);
          }
        }
        for (let j = 0; j < width; j++) {
          let col = this.state.map(el => el[j]);
          let col_seq = new OneD(col).resize(lcm).val();
          for (let i = 0; i < lcm; i++) {
            this.state[i][j] = col_seq[i];
          }
        }
      }
      if (this.state.length == 0) {
        seq.forEach((num, ndx) => {
          this.state.push([]);
        });
      }
      seq.forEach((num, ndx) => {
        this.state[ndx].push(num);
      });
      return this;
    }
    /**
    * adds this weft to the front of the pattern
    * @param seq the 1D sequence value to add
    * @returns
    */
    unshiftWarpSequence(seq) {
      let height = this.state.length;
      if (this.state.length > 0 && height != seq.length) {
        let lcm = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([height, seq.length]);
        let width = this.state[0].length;
        for (let j = 0; j < width; j++) {
          let col = this.state.map(el => el[j]);
          let col_seq = new OneD(col).resize(lcm).val();
          for (let i = 0; i < lcm; i++) {
            this.state[i][j] = col_seq[i];
          }
        }
      }
      if (this.state.length == 0) {
        seq.forEach((num, ndx) => {
          this.state.push([]);
        });
      }
      seq.forEach((num, ndx) => {
        this.state[ndx].unshift(num);
      });
      return this;
    }
    /**
    * adds a col to the first (or subsequent col) of the 2D sequence
    * @param seq the 1D sequence value to add
    * @returns
    */
    pushWeftSequence(seq) {
      if (this.state.length > 0 && this.state[0].length !== seq.length) {
        let width = this.state[0].length;
        let lcm = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([width, seq.length]);
        this.state.forEach((row, ndx) => {
          this.state[ndx] = new OneD(row).resize(lcm).val();
        });
      }
      this.state.push(seq);
      return this;
    }
    /**
    * adds this weft to the front of the pattern
    * @param seq the 1D sequence value to add
    * @returns
    */
    unshiftWeftSequence(seq) {
      if (this.state.length > 0 && this.state[0].length !== seq.length) {
        let width = this.state[0].length;
        let lcm = _util__WEBPACK_IMPORTED_MODULE_1__["default"].lcm([width, seq.length]);
        this.state.forEach((row, ndx) => {
          this.state[ndx] = new OneD(row).resize(lcm).val();
        });
      }
      this.state.unshift(seq);
      return this;
    }
    setBlank(val = 2) {
      let res = new OneD().push(val).val();
      this.state = [res];
      return this;
    }
    wefts() {
      return this.state.length;
    }
    warps() {
      if (this.state.length == 0) return 0;
      return this.state[0].length;
    }
    /**
     * fills a rectangle of given size with the current state. If the rectangle specified is smaller than state, it crops the current state
     * @param w the width
     * @param h the hieght
     */
    fill(w, h) {
      if (w < 0 || h < 0) return this;
      if (this.state.length == 0) return;
      let len = this.state.length;
      for (let i = 0; i < h; i++) {
        let row;
        if (w >= len) row = new OneD(this.state[i % len]).resize(w).val();else {
          row = new OneD(this.state[i % len].slice(0, w)).val();
        }
        this.state[i] = row;
      }
      if (h < len) {
        this.state = this.state.slice(0, h);
      }
      return this;
    }
    copy() {
      let dd = this.export();
      let copy = new Sequence.TwoD();
      copy.import(dd);
      return copy;
    }
    /**
     * clears the current state (if any)
     * and creates a new 2D Sequence Object from a DD
     * @param dd
     */
    import(dd) {
      this.state = [];
      dd.forEach((row, i) => {
        this.state.push([]);
        row.forEach((cell, j) => {
          switch ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell)) {
            case null:
              this.state[i][j] = 2;
              break;
            case false:
              this.state[i][j] = 0;
              break;
            case true:
              this.state[i][j] = 1;
              break;
          }
        });
      });
      return this;
    }
    /**
     * converts the current state to a drawdown format
     * @returns
     */
    export() {
      const dd = [];
      this.state.forEach((row, i) => {
        dd.push([]);
        row.forEach((cell_val, j) => {
          dd[i][j] = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.createCellFromSequenceVal)(cell_val);
        });
      });
      return dd;
    }
  }
  Sequence.TwoD = TwoD;
})(Sequence || (Sequence = {}));

/***/ }),

/***/ 36305:
/*!**************************************!*\
  !*** ./src/app/core/model/system.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSystem": () => (/* binding */ createSystem),
/* harmony export */   "getSystemChar": () => (/* binding */ getSystemChar),
/* harmony export */   "getSystemCharFromId": () => (/* binding */ getSystemCharFromId),
/* harmony export */   "makeSystemsUnique": () => (/* binding */ makeSystemsUnique),
/* harmony export */   "makeWarpSystemsUnique": () => (/* binding */ makeWarpSystemsUnique),
/* harmony export */   "makeWeftSystemsUnique": () => (/* binding */ makeWeftSystemsUnique),
/* harmony export */   "setSystemId": () => (/* binding */ setSystemId)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ 75973);

const createSystem = (systemDict = null) => {
  const sys = {
    id: 0,
    name: 'system',
    notes: '',
    visible: true,
    in_use: true
  };
  if (systemDict) {
    sys.id = systemDict.id;
    sys.id = systemDict.name;
    sys.id = systemDict.notes;
    sys.id = systemDict.visible;
  }
  return sys;
};
const setSystemId = (sys, id) => {
  sys.id = id;
  if (!sys.name) {
    sys.name = 'System ' + (id + 1);
  }
  return sys;
};
const getSystemChar = sys => {
  return String.fromCharCode(97 + sys.id);
};
const getSystemCharFromId = id => {
  return String.fromCharCode(97 + id);
};
/**
  * takes system maps and makes them all unique by adding a base value to the n+1th map. This helps when interlacing
  * drafts that have different system mappings, and making sure they are each unique.
  * This function will also return standard sized arrays = to the maximum sized input
  * @param systems the system mappings to compare
  */
const makeSystemsUnique = systems => {
  if (systems.length === 0) return [];
  const max_in_systems = systems.map(el => _util__WEBPACK_IMPORTED_MODULE_0__["default"].getArrayMax(el));
  let last_max = 0;
  const unique_systems = systems.map((sys, ndx) => {
    if (ndx > 0) {
      last_max += max_in_systems[ndx - 1] + 1;
      return sys.map(el => el + last_max);
    } else {
      return sys;
    }
  });
  //standardize teh lengths of all the returned arrays 
  const max_length = unique_systems.reduce((acc, el) => {
    const len = el.length;
    if (len > acc) return len;else return acc;
  }, 0);
  unique_systems.forEach((sys, ndx) => {
    if (sys.length < max_length) {
      for (let i = sys.length; i < max_length; i++) {
        sys.push(sys[0]);
      }
    }
  });
  return unique_systems;
};
const makeWeftSystemsUnique = systems => {
  const unique = makeSystemsUnique(systems);
  return unique;
};
const makeWarpSystemsUnique = systems => {
  const unique = makeSystemsUnique(systems);
  //  unique.forEach(system => {
  //    system.forEach(el => {
  //      if(this.getWarpSystem(el) === undefined) this.addWarpSystemFromId(el);
  //    })
  //  })
  return unique;
};

/***/ }),

/***/ 75973:
/*!************************************!*\
  !*** ./src/app/core/model/util.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ 94467);
/* harmony import */ var _drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drafts */ 1435);
/* harmony import */ var _material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./material */ 90008);
/**
 * A collection of functions that are heplful within many areas of the tool
 * @class
 */



class Util {
  constructor() {
    // generateId :: Integer -> String                                                                                                  
    this.generateId = len => {
      const arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return parseInt(arr.join(''));
    };
  }
  /*Input: two arrays
  Result: a boolean value for if they are equal or not
  */
  equals(array1, array2) {
    if (array1.length != array2.length) {
      return false;
    } else {
      for (var i = 0; i < array1.length; i++) {
        if (array1[i] != array2[i]) {
          return false;
        }
      }
      return true;
    }
  }
  /**
   * given a drawdown and a column index, return the column number of the first matching column
   * @param j
   * @param drawdown
   * @returns the col id of the match or -1;
   */
  hasMatchingColumn(j, drawdown) {
    let unmatch = false;
    for (let j_comp = 0; j_comp < drawdown[0].length; j_comp++) {
      unmatch = false;
      if (j_comp != j) {
        for (let i = 0; i < drawdown.length && !unmatch; i++) {
          if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][j]) !== (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][j_comp])) {
            unmatch = true;
          }
        }
        if (!unmatch) {
          return j_comp;
        }
      }
    }
    return -1;
  }
  /**
  * given a drawdown and a column index, return if the column is blank
  * @param j
  * @param drawdown
  * @returns true or false;
  */
  colIsBlank(j, drawdown) {
    let blank = true;
    drawdown.forEach((row, i) => {
      if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(row[j]) == true) blank = false;
    });
    return blank;
  }
  /**
  * given a drawdown and a row index, return the row number of the first matching row
  * @param j
  * @param drawdown
  * @returns the row id of the match or -1;
  */
  hasMatchingRow(i, drawdown) {
    let unmatch = false;
    for (let i_comp = 0; i_comp < drawdown.length; i_comp++) {
      unmatch = false;
      if (i_comp != i) {
        for (let j = 0; j < drawdown[i_comp].length && !unmatch; j++) {
          if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i][j]) !== (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(drawdown[i_comp][j])) {
            unmatch = true;
          }
        }
        if (!unmatch) {
          return i_comp;
        }
      }
    }
    return -1;
  }
  /**
   * A function to count the number of occurances of a give value within an array
   * @param arr the 1D array to search
   * @param val the value we are seeking
   * @returns number of occurances
   */
  countOccurrences(arr, val) {
    return arr.reduce((a, v) => v === val ? a + 1 : a, 0);
  }
  /*Input: an array of booleans
  Result: the number of "ones" in the "bitstring" (in this context, returns the number of true valued booleans in the array of booleans)
  */
  countOnes(array) {
    var counter = 0;
    for (var i = 0; i < array.length; i++) {
      if (array[i] == true) {
        counter += 1;
      }
    }
    return counter;
  }
  /*Input: two arrays of booleans
  Result: a new array of length equal to the length of array1 that has combined array1 with array2 under the "exclusive or" operation
  */
  xor(array1, array2) {
    var returnedList = [];
    for (var i = 0; i < array1.length; i++) {
      if (array1[i] && array2[i]) {
        returnedList.push(false);
      } else if (array1[i] || array2[i]) {
        returnedList.push(true);
      } else {
        returnedList.push(false);
      }
    }
    return returnedList;
  }
  maxOfPositiveList(array) {
    var max = -1;
    for (var i = 0; i < array.length; i++) {
      if (array[i] > max) {
        max = array[i];
      }
    }
    return max;
  }
  minOfList(array) {
    var min = array[0];
    for (var i = 0; i < array.length; i++) {
      if (array[i] < min) {
        min = array[i];
      }
    }
    return min;
  }
  findSmallestElmtBiggerThan(n, array) {
    var minElmtBiggerThanN = this.maxOfPositiveList(array) + 1;
    for (var i = 0; i < array.length; i++) {
      if (array[i] > n && minElmtBiggerThanN[i] > array[i]) {
        minElmtBiggerThanN = array[i];
      }
    }
    return minElmtBiggerThanN;
  }
  findSmallestGap(array) {
    var min = this.minOfList(array);
    var smallestElmtBiggerThan = this.findSmallestElmtBiggerThan(min, array);
    var max = this.maxOfPositiveList(array);
    while (smallestElmtBiggerThan - min < 2 && smallestElmtBiggerThan != max + 1) {
      min = min + 1;
      smallestElmtBiggerThan = this.findSmallestElmtBiggerThan(min, array);
    }
    return smallestElmtBiggerThan;
  }
  /**
   * finds the left-most component, used to create bounding box
   * @param main the component we are comparing to
   * @param isects all intersecting components
   * @returns the leftmost component
   */
  getLeftMost(main, isects) {
    return isects.reduce((acc, isect) => {
      if (isect.getTopleft().x < acc.getTopleft().x) {
        acc = isect;
      }
      return acc;
    }, main);
  }
  /**
   * finds the top-most component, used to create bounding box
   * @param main the component we are comparing to
   * @param isects all intersecting components
   * @returns the top component
   */
  getTopMost(main, isects) {
    return isects.reduce((acc, isect) => {
      if (isect.getTopleft().y < acc.getTopleft().y) {
        acc = isect;
      }
      return acc;
    }, main);
  }
  /**
   * finds the right-most component, used to create bounding box
   * @param main the component we are comparing to
   * @param isects all intersecting components
   * @returns the rightmost component
   */
  // getRightMost(main:SubdraftComponent,  isects:Array<SubdraftComponent>):SubdraftComponent{
  //   return isects.reduce((acc, isect) => {
  //     if((isect.getTopleft().x + isect.bounds.width) > (acc.getTopleft().x + acc.bounds.width)) {
  //       acc = isect;
  //     }
  //     return acc;
  //   }, main);    
  // }
  /**
   * finds the bottom-most component, used to create bounding box
   * @param main the component we are comparing to
   * @param isects all intersecting components
   * @returns the bottom-most component
   */
  // getBottomMost(main:SubdraftComponent,  isects:Array<SubdraftComponent>):SubdraftComponent{
  //   return isects.reduce((acc, isect) => {
  //     if((isect.getTopleft().y + isect.bounds.height)> (acc.getTopleft().y + acc.bounds.height)) {
  //       acc = isect;
  //     }
  //     return acc;
  //   }, main);    
  // }
  /**
   * takes absolute screen coordinates and returns the i, j position if a cell were to exist at that point
   * considers the top banner of 62 pixels to offset
   * @param p the point
   * @param scale the scale of the view we are using
   * @returns an Interlacement
   */
  resolveCoordsToNdx(p, scale) {
    const i = Math.floor(p.y / scale);
    const j = Math.floor(p.x / scale);
    return {
      i: i,
      j: j,
      si: i
    };
  }
  /**
   * takes two interlacements and sees if they are the same
   * @param p1 the point
   * @param p2 the point
   */
  isSameNdx(p1, p2) {
    if (p1.i != p2.i) return false;
    if (p1.j != p2.j) return false;
    return true;
  }
  /**
  * takes two booleans and returns their result based on the ink assigned
  * @param ink the name of the ink in question
  * @param a the first (top) value
  * @param b the second (under) value
  * @returns boolean result
  */
  computeFilter(ink, a, b) {
    switch (ink) {
      case 'neq':
        return a !== b;
        break;
      case 'up':
        if (a === null) return b;
        if (a === true) return true;
        return false;
        break;
      case 'down':
        if (a === null) return b;
        if (b === null) return a;
        if (a === false) return false;
        return b;
        break;
      case 'unset':
        if (a === null) return b;
        if (b === null) return a;
        if (a === true) return null;else return b;
        break;
      case 'and':
        if (a === null || b === null) return null;
        return a && b;
        break;
      case 'cut':
        if (a == null) return a;
        if (b === null) return a;
        if (a == true && b == true) return false;
        return a;
        break;
      case 'or':
        if (a === null) return b;
        if (b === null) return a;
        return a || b;
        break;
    }
  }
  /**
   * check if the rectangles defined by the points overlap
   * @param l1 top left point of rectangle 1
   * @param r1 bottom right point of rectangle 1
   * @param l2 top left point of rectangle 2
   * @param r2 bottom right point of rectanble 2
   * @returns true or false in accordance to whether or not they overlap
   */
  doOverlap(l1, r1, l2, r2) {
    if (l1.x == r1.x || l1.y == r2.y || l2.x == r2.x || l2.y == r2.y) {
      // the line cannot have positive overlap
      return false;
    }
    // If one rectangle is on left side of other
    if (l1.x >= r2.x || l2.x >= r1.x) {
      return false;
    }
    // If one rectangle is above other
    if (l1.y >= r2.y || l2.y >= r1.y) {
      return false;
    }
    return true;
  }
  /**
  * returns a Bounds type that represents the intersection between primary and one intersecting subdraft
  * @param primary the rectangular area we are checking for intersections
  * @param isect an array of all the components that intersect
  * @returns the array of bounds of all intersections
  */
  // getIntersectionBounds(primary: SubdraftComponent, isect: SubdraftComponent):Bounds{
  //   const left: number = Math.max(primary.bounds.topleft.x, isect.bounds.topleft.x);
  //   const top: number = Math.max(primary.bounds.topleft.y, isect.bounds.topleft.y);
  //   const right: number = Math.min((primary.bounds.topleft.x + primary.bounds.width), (isect.bounds.topleft.x + isect.bounds.width));
  //   const bottom: number = Math.min((primary.bounds.topleft.y + primary.bounds.height), (isect.bounds.topleft.y + isect.bounds.height));
  //   return {
  //     topleft: {x: left, y: top},
  //     width: right - left,
  //     height: bottom - top
  //   };
  // }
  /**
   * gets the combined boundary of a Subdraft and any of its intersections
   * @param moving A SubdraftComponent that is our primary subdraft
   * @param isect  Any subdrafts that intersect with this component
   * @returns the bounds of a rectangle that holds both components
  //  */
  // getCombinedBounds(moving: SubdraftComponent, isect: Array<SubdraftComponent>):Bounds{
  //   const bounds: Bounds = {
  //     topleft: {x: 0, y:0},
  //     width: 0,
  //     height: 0
  //   }
  //   bounds.topleft.x = utilInstance.getLeftMost(moving, isect).getTopleft().x;
  //   bounds.topleft.y = utilInstance.getTopMost(moving, isect).getTopleft().y;
  //   const rm =  utilInstance.getRightMost(moving, isect);
  //   const bm =  utilInstance.getBottomMost(moving, isect);
  //   bounds.width = (rm.getTopleft().x + rm.bounds.width) - bounds.topleft.x;
  //   bounds.height =(bm.getTopleft().y + bm.bounds.height) - bounds.topleft.y;
  //   return bounds;
  // }
  /**
   * computes the value of a heddle given overlapping drafts
   * @param p the point we are interested in
   * @param main the top draft
   * @param isect the intersecting drafts
   * @returns
   */
  computeHeddleValue(p, main, isect) {
    const a = main.resolveToValue(p);
    //this may return an empty array, because the intersection might not have the point
    const b_array = isect.filter(el => el.hasPoint(p));
    //should never have more than one value in barray
    // if(b_array.length > 1) console.log("WARNING: Intersecting with Two Elements");
    const val = b_array.reduce((acc, arr) => arr.resolveToValue(p), null);
    return utilInstance.computeFilter(main.ink, a, val);
  }
  getAdjustedPointerPosition(p, viewport) {
    return {
      x: p.x + viewport.topleft.x,
      y: p.y + viewport.topleft.y
    };
  }
  /**
  * takes an absolute point and returns the "cell" boundary that is closest.
  * @param p the absolute point
  * @returns the snapped point
  */
  snapToGrid(p, scale) {
    p.x = Math.floor(p.x / scale) * scale;
    p.y = Math.floor(p.y / scale) * scale;
    return p;
  }
  /**
   * Takes an absolute coordinate and translates to a number that would represent its grid position on screen
   * used only for testing if a new move calculation should be called
   * @param p the screen coordinate
   * @returns the row and column within the draft (i = row, j=col), returns -1 if out of bounds
   */
  resolvePointToAbsoluteNdx(p, scale) {
    let i = Math.floor(p.y / scale);
    let j = Math.floor(p.x / scale);
    return {
      i: i,
      j: j,
      si: i
    };
  }
  /**
   * returns the number of wefts that is greatest out of all the input drafts
   *
   */
  getMaxWefts(inputs) {
    const max_wefts = inputs.filter(el => el !== null).reduce((acc, draft) => {
      if ((0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown) > acc) return (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown);
      return acc;
    }, 0);
    return max_wefts;
  }
  /**
  * returns the number of warps that is greatest out of all the input drafts
  */
  getMaxWarps(inputs) {
    const max_warps = inputs.filter(el => el !== null).reduce((acc, draft) => {
      if ((0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown) > acc) return (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown);
      return acc;
    }, 0);
    return max_warps;
  }
  /**
   * given a list of values, return the value that occurs the most
   * @param vals
   */
  getMostCommon(vals) {
    const freq = vals.reduce((acc, el) => {
      const ndx = acc.findIndex(acc_el => acc_el.i === el);
      if (ndx === -1) {
        acc.push({
          i: el,
          count: 1
        });
      } else {
        acc[ndx].count++;
      }
      return acc;
    }, []);
    const common = freq.reduce((acc, el) => {
      if (el.count > acc.count) return el;else return acc;
    }, {
      i: null,
      count: 0
    });
    return common.i;
  }
  getInt(val, e) {
    var index = e.search(val);
    if (index != -1) {
      var substring = e.substring(index, e.length);
      var endOfLineChar = '\n';
      var endIndex = substring.indexOf(endOfLineChar);
      if (endIndex != -1) {
        return +substring.substring(val.length + 1, endIndex); //string is converted to int with unary + operator
      } else {
        return -1;
      }
    } else {
      return -1;
    }
  }
  getBool(val, e) {
    var index = e.search(val);
    if (index != -1) {
      var substring = e.substring(index, e.length);
      var endOfLineChar = '\n';
      var endIndex = substring.indexOf(endOfLineChar);
      if (endIndex != -1 && substring.substring(val.length + 1, endIndex) === "yes") {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  getString(val, e) {
    var index = e.search(val);
    if (index != -1) {
      var substring = e.substring(index, e.length);
      var endOfLineChar = '\n';
      var endIndex = substring.indexOf(endOfLineChar);
      if (endIndex != -1) {
        return substring.substring(val.length + 1, endIndex);
      } else {
        return "";
      }
    } else {
      return "";
    }
  }
  getSubstringAfter(val, e) {
    var index = e.search(val);
    if (index != -1) {
      return e.substring(index + val.length);
    } else {
      return e;
    }
  }
  getTreadling(e, draft) {
    var treadling = [];
    var treadles = this.getInt("Treadles", e);
    for (var i = 0; i < draft.wefts; i++) {
      treadling.push(-1);
    }
    var indexOfLabel = e.search("TREADLING]");
    var startIndex = indexOfLabel + "TREADLING]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    while (line.match(/[0-9]*=[0-9]*/) != null) {
      var weft = +line.match(/[0-9]*/);
      var treadle = +line.match(/=[0-9]*/)[0].substring(1);
      treadling[weft - 1] = treadle - 1;
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    return treadling;
  }
  getThreading(e, draft) {
    var threading = [];
    for (var i = 0; i < draft.warps; i++) {
      threading.push(-1);
    }
    var indexOfLabel = e.search("THREADING]");
    var startIndex = indexOfLabel + "THREADING]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    while (line.match(/[0-9]*=[0-9]*/) != null) {
      var warp = +line.match(/[0-9]*/);
      var frame = +line.match(/=[0-9]*/)[0].substring(1);
      threading[draft.warps - warp] = frame - 1;
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    return threading;
  }
  getTieups(e, draft) {
    var tieups = [];
    var frames = this.getInt("Shafts", e);
    var treadles = this.getInt("Treadles", e);
    for (var i = 0; i < frames; i++) {
      tieups.push([]);
      for (var j = 0; j < treadles; j++) {
        tieups[i].push(false);
      }
    }
    var indexOfLabel = e.search("TIEUP]");
    var startIndex = indexOfLabel + "TIEUP]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    while (line.match(/[0-9]*=[0-9]*/) != null) {
      var treadle = +line.match(/[0-9]*/);
      var firstFrame = +line.match(/=[0-9]*/)[0].substring(1);
      tieups[firstFrame - 1][treadle - 1] = true;
      var restOfFrames = line.match(/,[0-9]/g);
      if (restOfFrames != null) {
        for (var i = 0; i < restOfFrames.length; i++) {
          var currentFrame = +restOfFrames[i].substring(1);
          tieups[currentFrame - 1][treadle - 1] = true;
        }
      }
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    return tieups;
  }
  //can likely simplify this as it is mostlyy like the function above but with different variable names for the respective applications
  getColorTable(e) {
    var color_table = [];
    var originalShuttle = (0,_material__WEBPACK_IMPORTED_MODULE_2__.createMaterial)();
    originalShuttle.color = "#3d3d3d";
    (0,_material__WEBPACK_IMPORTED_MODULE_2__.setMaterialID)(originalShuttle, 0);
    color_table.push(originalShuttle);
    var indexOfLabel = e.search("COLOR TABLE]");
    var startIndex = indexOfLabel + "COLOR TABLE]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    var id = 1;
    while (line.match(/[0-9]*=[0-9]*,[0-9]*,[0-9]*/) != null) {
      // var index = +(line.match(/[0-9]*/));
      var redNum = +line.match(/=[0-9]*/)[0].substring(1);
      var greenAndBlue = line.match(/,[0-9]*/g);
      var greenNum = +greenAndBlue[0].substring(1);
      var blueNum = +greenAndBlue[1].substring(1);
      var hex = "#";
      var hexr = redNum.toString(16);
      if (hexr.length == 1) {
        hex += "0" + hexr;
      } else {
        hex += hexr;
      }
      var hexg = greenNum.toString(16);
      if (hexg.length == 1) {
        hex += "0" + hexg;
      } else {
        hex += hexg;
      }
      var hexb = blueNum.toString(16);
      if (hexb.length == 1) {
        hex += "0" + hexb;
      } else {
        hex += hexb;
      }
      var shuttle = (0,_material__WEBPACK_IMPORTED_MODULE_2__.createMaterial)();
      shuttle.color = hex;
      (0,_material__WEBPACK_IMPORTED_MODULE_2__.setMaterialID)(shuttle, id);
      id++;
      color_table.push(shuttle);
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    return color_table;
  }
  getColToShuttleMapping(e, draft) {
    var colToShuttleMapping = [];
    for (var i = 0; i < draft.warps; i++) {
      colToShuttleMapping.push(0);
    }
    var indexOfLabel = e.search("WARP COLORS]");
    var startIndex = indexOfLabel + "WARP COLORS]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    while (line.match(/[0-9]*=[0-9]*/) != null) {
      var warp = +line.match(/[0-9]*/);
      var color = +line.match(/=[0-9]*/)[0].substring(1);
      colToShuttleMapping[warp - 1] = color;
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    var reversedMapping = [];
    for (var i = colToShuttleMapping.length - 1; i >= 0; i--) {
      reversedMapping.push(colToShuttleMapping[i]);
    }
    return reversedMapping;
  }
  getRowToShuttleMapping(e, draft) {
    var rowToShuttleMapping = [];
    for (var i = 0; i < draft.wefts; i++) {
      rowToShuttleMapping.push(0);
    }
    var indexOfLabel = e.search("WEFT COLORS]");
    var startIndex = indexOfLabel + "WEFT COLORS]".length + 1;
    var endOfLineChar = '\n';
    var endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
    var line = e.substring(startIndex, endIndex);
    while (line.match(/[0-9]*=[0-9]*/) != null) {
      var weft = +line.match(/[0-9]*/);
      var color = +line.match(/=[0-9]*/)[0].substring(1);
      rowToShuttleMapping[weft - 1] = color;
      startIndex = endIndex + 1;
      endIndex = e.substring(startIndex).indexOf(endOfLineChar) + startIndex;
      line = e.substring(startIndex, endIndex);
    }
    return rowToShuttleMapping;
  }
  /**
   * this takes a map of material ideas and updates
   * @param material_mapping - the mapping of rows of cols to a material
   * @param index_map - a map from old to new material ids
   * @param replacement_ndx - anything not found in the map will be replaced by this value
   */
  updateMaterialIds(material_mapping, index_map, replacement_ndx) {
    if (material_mapping === undefined) material_mapping = [];
    //update the existing drafts given the new ids
    const new_map = material_mapping.map(index => {
      const mapping = index_map.find(el => el.old_id === index);
      if (mapping !== undefined) {
        return mapping.new_id;
      } else {
        return replacement_ndx;
      }
    });
    return new_map;
  }
  /**
   * takes an array of numbers and returns the highest number
   * @param arr
   * @returns
   */
  getArrayMax(arr) {
    const max = arr.reduce((acc, el, ndx) => {
      if (el > acc) return el;else return acc;
    }, 0);
    return max;
  }
  hasOnlyUnset(cells) {
    const hasValue = cells.find(el => (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(el) !== null);
    if (hasValue === undefined) return true;else return false;
  }
  patternToSize(pattern, warpSize, weftSize) {
    if (pattern[0].length > warpSize) {
      for (var i = 0; i < pattern.length; i++) {
        while (pattern[i].length > warpSize) {
          pattern[i].splice(pattern[i].length - 1, 1);
        }
      }
    }
    if (pattern.length > weftSize) {
      while (pattern.length > weftSize) {
        pattern.splice(pattern.length - 1, 1);
      }
    }
    var idx = 0;
    while (pattern[0].length < warpSize) {
      for (var j = 0; j < pattern.length; j++) {
        if (idx < pattern[j].length) {
          pattern[j].push(pattern[j][idx]);
        }
      }
      idx += 1;
      if (idx >= pattern[0].length) {
        idx = 0;
      }
    }
    idx = 0;
    while (pattern.length < weftSize) {
      pattern.push(pattern[idx]);
      idx += 1;
      if (idx >= pattern.length) {
        idx = 0;
      }
    }
    return pattern;
  }
  /**
   * checks two looms settings objects
   * @param ls1
   * @param ls2
   * @returns  true if they have the same value
   */
  areLoomSettingsTheSame(ls1, ls2) {
    if (ls1.epi !== ls2.epi) return false;
    if (ls1.frames !== ls2.frames) return false;
    if (ls1.treadles !== ls2.treadles) return false;
    if (ls1.type !== ls2.type) return false;
    if (ls1.units !== ls2.units) return false;
    return true;
  }
  /**
   * checks two loom objects
   * @param loom1
   * @param loom2
   * @returns  true if they have the same value
   */
  areLoomsTheSame(loom1, loom2) {
    if (loom1 === null && loom2 === null) return true;
    for (let ndx = 0; ndx < loom1.threading.length; ndx++) {
      if (loom1.threading[ndx] !== loom2.threading[ndx]) return false;
    }
    for (let p = 0; p < loom1.treadling.length; p++) {
      for (let q = 0; q < loom1.treadling[p].length; q++) {
        if (loom1.treadling[p][q] !== loom2.treadling[p][q]) return false;
      }
    }
    for (let p = 0; p < loom1.tieup.length; p++) {
      for (let q = 0; q < loom1.tieup[p].length; q++) {
        if (loom1.tieup[p][q] !== loom2.tieup[p][q]) return false;
      }
    }
    return true;
  }
  /**
   * compares the states of two drafts
   * @param d1
   * @param d2
   * @returns true if they are the exact same in terms of the draft data (ignores names and ids)
   */
  areDraftsTheSame(d1, d2) {
    if (d1 === null && d2 === null) return true;
    for (let ndx = 0; ndx < d1.colShuttleMapping.length; ndx++) {
      if (d1.colShuttleMapping[ndx] !== d2.colShuttleMapping[ndx]) return false;
    }
    for (let ndx = 0; ndx < d1.colSystemMapping.length; ndx++) {
      if (d1.colSystemMapping[ndx] !== d2.colSystemMapping[ndx]) return false;
    }
    for (let ndx = 0; ndx < d1.rowShuttleMapping.length; ndx++) {
      if (d1.rowShuttleMapping[ndx] !== d2.rowShuttleMapping[ndx]) return false;
    }
    for (let ndx = 0; ndx < d1.rowSystemMapping.length; ndx++) {
      if (d1.rowSystemMapping[ndx] !== d2.rowSystemMapping[ndx]) return false;
    }
    for (let p = 0; p < d1.drawdown.length; p++) {
      for (let q = 0; q < d1.drawdown[p].length; q++) {
        if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(d1.drawdown[p][q]) !== (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(d2.drawdown[p][q])) return false;
      }
    }
    return true;
  }
  /**
   * take an array of drafts and interlace them weft wise, in the order in which they appear in the array
   * this will also interlace weft systems and materials, but will use the first draft as the indication for the warp materials
   * @param drafts the drafts whose wefts we will be interlacing
   * @param factor_in_repeats should we calculate the size such that the pattern repeats in even intervals?
   * @param warp_patterns a draft to use to represent the warp systems.
   */
  interlace(drafts, factor_in_repeats, warp_patterns) {
    let total_wefts = 0;
    const all_wefts = drafts.map(el => (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(el.drawdown)).filter(el => el > 0);
    if (factor_in_repeats === 1) total_wefts = utilInstance.lcm(all_wefts);else total_wefts = utilInstance.getMaxWefts(drafts);
    let total_warps = 0;
    const all_warps = drafts.map(el => (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(el.drawdown)).filter(el => el > 0);
    if (factor_in_repeats === 1) total_warps = utilInstance.lcm(all_warps);else total_warps = utilInstance.getMaxWarps(drafts);
    //create a draft to hold the merged values
    const d = (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      warps: total_warps,
      wefts: total_wefts * drafts.length,
      colShuttleMapping: warp_patterns.colShuttleMapping,
      colSystemMapping: warp_patterns.colSystemMapping
    });
    d.drawdown.forEach((row, ndx) => {
      const select_array = ndx % drafts.length;
      const select_row = factor_in_repeats === 1 ? Math.floor(ndx / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(drafts[select_array].drawdown) : Math.floor(ndx / drafts.length);
      row.forEach((cell, j) => {
        const select_col = factor_in_repeats === 1 ? j % (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(drafts[select_array].drawdown) : j;
        if ((0,_drafts__WEBPACK_IMPORTED_MODULE_1__.hasCell)(drafts[select_array].drawdown, select_row, select_col)) {
          const pattern = drafts[select_array].drawdown;
          cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(pattern[select_row][select_col]));
        } else {
          cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, null);
        }
      });
    });
    return d;
  }
  /**
   * take an array of drafts and interlace them warp-wise, in the order in which they appear in the array
   * @param drafts the drafts whose wefts we will be interlacing
   * @param factor_in_repeats should we calculate the size such that the pattern repeats in even intervals?
   * @param weft_patterns a draft to use to represent the warp systems.
   */
  interlace_warps(drafts, factor_in_repeats, weft_patterns) {
    let total_warps = 0;
    const all_warps = drafts.map(el => (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(el.drawdown)).filter(el => el > 0);
    if (factor_in_repeats === 1) total_warps = utilInstance.lcm(all_warps);else total_warps = utilInstance.getMaxWefts(drafts);
    let total_wefts = 0;
    const all_wefts = drafts.map(el => (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(el.drawdown)).filter(el => el > 0);
    if (factor_in_repeats === 1) total_wefts = utilInstance.lcm(all_wefts);else total_wefts = utilInstance.getMaxWarps(drafts);
    //create a draft to hold the merged values
    const d = (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      warps: total_warps * drafts.length,
      wefts: total_wefts,
      rowShuttleMapping: weft_patterns.rowShuttleMapping,
      rowSystemMapping: weft_patterns.rowSystemMapping
    });
    d.drawdown.forEach((col, ndx) => {
      const select_array = ndx % drafts.length;
      const select_col = factor_in_repeats === 1 ? Math.floor(ndx / drafts.length) % (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(drafts[select_array].drawdown) : Math.floor(ndx / drafts.length);
      col.forEach((cell, i) => {
        const select_row = factor_in_repeats === 1 ? i % (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(drafts[select_array].drawdown) : i;
        if ((0,_drafts__WEBPACK_IMPORTED_MODULE_1__.hasCell)(drafts[select_array].drawdown, select_row, select_col)) {
          const pattern = drafts[select_array].drawdown;
          cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(pattern[select_row][select_col]));
        } else {
          cell = (0,_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, null);
        }
      });
    });
    return d;
  }
  /**
   * in connection with lcm, the gcd (greatest common divisor) determines the largest number that can divide into both inputs
   * I used Eulers algorithm with Euclidan Divison for determining this.
   * assumes non-zero inputs
   */
  gcd(a, b) {
    if (b === 0) return a;
    const max = a > b ? a : b;
    const min = a <= b ? a : b;
    return this.gcd(min, max % min);
  }
  /**
   * this is an algorithm for finding the least common multiple of a give set of input numbers
   * it works based on the formulat lcd (a,b) = a*b / gcd(a,b), and then caculates in a pairwise fashion.
   * this has the risk of breaking with very large sets of inputs and/or prime numbers of a large size
   */
  lcm(original) {
    const set = original.slice();
    if (set.length === 0) return 0;
    if (set.length === 1) return set[0];
    const a = set.shift();
    const b = set.shift();
    let mult = a * b;
    let gcd = this.gcd(a, b);
    let lcd = mult / gcd;
    while (set.length > 0) {
      const c = set.shift();
      mult = c * lcd;
      gcd = this.gcd(c, lcd);
      lcd = mult / gcd;
    }
    return lcd;
  }
  /**
   * take any input array and return an array of only the unique elements
   * @param arr
   * @returns
   */
  filterToUniqueValues(arr) {
    const unique = [];
    arr.forEach(el => {
      const ndx = unique.findIndex(uel => uel === el);
      if (ndx === -1) unique.push(el);
    });
    return unique;
  }
  /**
   * takes an input string and a regex and returns each match as an array
   * @param input
   */
  parseRegex(input, regex) {
    if (input == undefined || regex == undefined) return [];
    input = input.toString();
    const global_regex = new RegExp(regex, 'g');
    const matches = input.match(global_regex);
    return matches;
  }
  /**
   * compares two lists of values and returns a list of the elements from newInlets that need to be added to the current list,
   * as well as the elements in currentInlets that no longer need to exist.
   * @param newInlets
   * @returns the list of elements that needed to be added to or removed from current Inlets to make it match the list in newInlets
   */
  getInletsToUpdate(newInlets, currentInlets) {
    const toadd = newInlets.reduce((acc, inlet) => {
      if (currentInlets.find(el => el == inlet) === undefined) acc.push(inlet);
      return acc;
    }, []);
    const toremove = currentInlets.reduce((acc, inlet) => {
      if (newInlets.find(el => el == inlet) === undefined) acc.push(inlet);
      return acc;
    }, []);
    return {
      toadd,
      toremove
    };
  }
  /**
   * takes two versions and compares them
   * returns true if versions are same or version a is greater than b, returns false if a older than b
   * @param compare
   */
  sameOrNewerVersion(a, b) {
    if (a === undefined || b === undefined) {
      console.error("checking undefined version", a, b);
      return false;
    }
    const a_spl = a.split('.');
    const b_spl = b.split('.');
    let flag_end = false;
    let return_val = true;
    for (let i = 0; i < a_spl.length && !flag_end; i++) {
      if (i < b_spl.length) {
        if (parseInt(a_spl[i]) < parseInt(b_spl[i])) {
          return_val = false;
          flag_end = true;
        } else if (parseInt(a_spl[i]) > parseInt(b_spl[i])) {
          return_val = true;
          flag_end = true;
        }
      }
    }
    if (flag_end) return return_val;
    return true;
  }
  //print the draft to console
  printDraft(d) {
    console.log('draft ', d.id);
    for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(d.drawdown); i++) {
      const row = d.drawdown[i].reduce((acc, el) => {
        if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(el) === true) acc = acc.concat('x');else acc = acc.concat('o');
        return acc;
      }, '');
      console.log(row);
    }
  }
  /**
   * this function determines how one can flip the draft between two origin states
   * @param draft
   * @param loom
   * @param from
   * @param to
   */
  getFlips(from, to) {
    // console.log("flipping from/to", from, to);
    let horiz = false;
    let vert = false;
    if (from === to) return {
      horiz,
      vert
    };
    if (from === 0 && to === 1 || from === 1 && to === 0) {
      vert = true;
    } else if (from === 0 && to === 2 || from === 2 && to === 0) {
      vert = true;
      horiz = true;
    } else if (from === 0 && to === 3 || from === 3 && to === 0) {
      horiz = true;
    } else if (from === 1 && to == 2 || from === 2 && to === 1) {
      horiz = true;
    } else if (from === 1 && to == 3 || from === 3 && to === 1) {
      vert = true;
      horiz = true;
    } else if (from === 2 && to == 3 || from === 3 && to === 2) {
      vert = true;
    } else {
      console.error("to/from origin flip options not found", to, from);
    }
    // console.log("horiz/vert", horiz, vert);
    return {
      horiz,
      vert
    };
  }
}
//makes it so that we are using this util class as a singleton (referenced: https://www.digitalocean.com/community/tutorials/js-js-singletons)
const utilInstance = new Util();
Object.freeze(utilInstance);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (utilInstance);

/***/ }),

/***/ 61350:
/*!**********************************************!*\
  !*** ./src/app/core/model/yarnsimulation.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addWarpInterlacement": () => (/* binding */ addWarpInterlacement),
/* harmony export */   "addWarpLayerInterlacementsToMap": () => (/* binding */ addWarpLayerInterlacementsToMap),
/* harmony export */   "addWeftInterlacement": () => (/* binding */ addWeftInterlacement),
/* harmony export */   "addWeftLayerInterlacementsToMap": () => (/* binding */ addWeftLayerInterlacementsToMap),
/* harmony export */   "areInterlacement": () => (/* binding */ areInterlacement),
/* harmony export */   "calcClothHeightOffsetFactor": () => (/* binding */ calcClothHeightOffsetFactor),
/* harmony export */   "calcFloatDistance": () => (/* binding */ calcFloatDistance),
/* harmony export */   "calcMaxDisplacement": () => (/* binding */ calcMaxDisplacement),
/* harmony export */   "calcStrength": () => (/* binding */ calcStrength),
/* harmony export */   "containsWeftEdge": () => (/* binding */ containsWeftEdge),
/* harmony export */   "correctInterlacementLayers": () => (/* binding */ correctInterlacementLayers),
/* harmony export */   "createLayerMaps": () => (/* binding */ createLayerMaps),
/* harmony export */   "createWarpLayerMap": () => (/* binding */ createWarpLayerMap),
/* harmony export */   "createWeftLayerMap": () => (/* binding */ createWeftLayerMap),
/* harmony export */   "extractInterlacementsFromTuples": () => (/* binding */ extractInterlacementsFromTuples),
/* harmony export */   "getClosestWarpValue": () => (/* binding */ getClosestWarpValue),
/* harmony export */   "getDraftTopology": () => (/* binding */ getDraftTopology),
/* harmony export */   "getFirstWarpAssociatedWithLayer": () => (/* binding */ getFirstWarpAssociatedWithLayer),
/* harmony export */   "getFloatRanges": () => (/* binding */ getFloatRanges),
/* harmony export */   "getInterlacements": () => (/* binding */ getInterlacements),
/* harmony export */   "getInterlacementsBetweenWarps": () => (/* binding */ getInterlacementsBetweenWarps),
/* harmony export */   "getInterlacementsBetweenWefts": () => (/* binding */ getInterlacementsBetweenWefts),
/* harmony export */   "getMidpoint": () => (/* binding */ getMidpoint),
/* harmony export */   "getNextWarpOnLayer": () => (/* binding */ getNextWarpOnLayer),
/* harmony export */   "getNonInterlacingWarpSegment": () => (/* binding */ getNonInterlacingWarpSegment),
/* harmony export */   "getNonInterlacingWeftSegment": () => (/* binding */ getNonInterlacingWeftSegment),
/* harmony export */   "getOrientation": () => (/* binding */ getOrientation),
/* harmony export */   "getPrevWarpOnLayer": () => (/* binding */ getPrevWarpOnLayer),
/* harmony export */   "getTuplesWithinRange": () => (/* binding */ getTuplesWithinRange),
/* harmony export */   "getWarpInterlacementTuples": () => (/* binding */ getWarpInterlacementTuples),
/* harmony export */   "getWeftAsFloat": () => (/* binding */ getWeftAsFloat),
/* harmony export */   "getWeftInterlacementTuples": () => (/* binding */ getWeftInterlacementTuples),
/* harmony export */   "getWeftOffsetFromWarp": () => (/* binding */ getWeftOffsetFromWarp),
/* harmony export */   "getWeftOrientationVector": () => (/* binding */ getWeftOrientationVector),
/* harmony export */   "hasBarrier": () => (/* binding */ hasBarrier),
/* harmony export */   "hasWarpBarrierInRange": () => (/* binding */ hasWarpBarrierInRange),
/* harmony export */   "hasWeftBarrierInRange": () => (/* binding */ hasWeftBarrierInRange),
/* harmony export */   "insertWarp": () => (/* binding */ insertWarp),
/* harmony export */   "insertWeft": () => (/* binding */ insertWeft),
/* harmony export */   "layerWarpsInZBetweenInterlacements": () => (/* binding */ layerWarpsInZBetweenInterlacements),
/* harmony export */   "packWeft": () => (/* binding */ packWeft),
/* harmony export */   "positionFloatingWefts": () => (/* binding */ positionFloatingWefts),
/* harmony export */   "processWarpInterlacement": () => (/* binding */ processWarpInterlacement),
/* harmony export */   "processWeftInterlacements": () => (/* binding */ processWeftInterlacements),
/* harmony export */   "radiateInterlacementForce": () => (/* binding */ radiateInterlacementForce),
/* harmony export */   "reduceInterlacement": () => (/* binding */ reduceInterlacement),
/* harmony export */   "setBaselineYForWeft": () => (/* binding */ setBaselineYForWeft),
/* harmony export */   "setLayerZ": () => (/* binding */ setLayerZ),
/* harmony export */   "sortInterlacementsOnWarp": () => (/* binding */ sortInterlacementsOnWarp),
/* harmony export */   "sortInterlacementsOnWeft": () => (/* binding */ sortInterlacementsOnWeft),
/* harmony export */   "splitRangeByVerticies": () => (/* binding */ splitRangeByVerticies),
/* harmony export */   "translateTopologyToPoints": () => (/* binding */ translateTopologyToPoints),
/* harmony export */   "updateY": () => (/* binding */ updateY),
/* harmony export */   "warpLayerValueInRange": () => (/* binding */ warpLayerValueInRange),
/* harmony export */   "weftLayerValueInRange": () => (/* binding */ weftLayerValueInRange)
/* harmony export */ });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ 94467);
/* harmony import */ var _drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drafts */ 1435);


const areInterlacement = (a, b) => {
  if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(a) == null || (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(b) == null) return false;
  if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(a) != (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(b)) return true;
  return false;
};
const getOrientation = (a, b) => {
  if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(a) == true && (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(b) == false) return true;
  return false;
};
/**
 * analyzes the relationship between neighboring wefts to figure out where the warp travels from front to back
 * used to determine layering
 * @param dd drawdown
 * @returns an array of interlacements
 */
const getWarpInterlacementTuples = dd => {
  const ilace_list = [];
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(dd); i++) {
    let i_top = i + 1;
    let i_bot = i;
    for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(dd); j++) {
      if (i_top !== (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(dd)) {
        const ilace = areInterlacement(dd[i_top][j], dd[i_bot][j]);
        if (ilace) {
          ilace_list.push({
            i_bot: i_bot,
            i_top: i_top,
            j: j,
            orientation: getOrientation(dd[i_top][j], dd[i_bot][j])
          });
        }
      }
    }
  }
  return ilace_list;
};
const getWeftInterlacementTuples = dd => {
  const ilace_list = [];
  for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(dd); j++) {
    for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(dd); i++) {
      let j_left = j;
      let j_right = j + 1;
      if (j_right !== (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(dd)) {
        const ilace = areInterlacement(dd[i][j_left], dd[i][j_right]);
        if (ilace) {
          ilace_list.push({
            j_left: j_left,
            j_right: j_right,
            i: i,
            orientation: getOrientation(dd[i][j_left], dd[i][j_right])
          });
        }
      }
    }
  }
  return ilace_list;
};
/**
 * given a list of interlacments, see if there are interlacements with opposite orientation within the list that would indicate that these two yarns cross eachother at some point.
 * @param ilaces
 * @returns
 */
const hasBarrier = ilaces => {
  let last = null;
  let barrier_found = false;
  ilaces.forEach(ilace => {
    if (last == null) last = ilace.orientation;
    if (last !== ilace.orientation) barrier_found = true;
  });
  return barrier_found;
};
/**
 * checks to see if either of the wefts we are comparing against is on the edge.
 * @param draft
 * @param ilaces
 * @returns
 */
const containsWeftEdge = (draft, ilaces) => {
  ilaces.forEach(ilace => {
    if (ilace.i_top == (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown) - 1) return true;
    if (ilace.i_bot == 0) return true;
  });
  return false;
};
/**
* given a list of interlacments, see if there are interlacements with opposite orientation within the list that would indicate that these two yarns cross eachother at some point.
* @param ilaces
* @returns
*/
const hasWeftBarrierInRange = (ilaces, start, end, size, draft) => {
  let adj_start = Math.max(start - size, 0);
  let adj_end = Math.min(end + size, (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown));
  let all_relevant_interlacements = ilaces.filter(el => el.j > adj_start && el.j < adj_end);
  return hasBarrier(all_relevant_interlacements);
};
const hasWarpBarrierInRange = (ilaces, start, end, size, draft) => {
  let adj_start = Math.max(start - size, 0);
  let adj_end = Math.min(end + size, (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown));
  let all_relevant_interlacements = ilaces.filter(el => el.i > adj_start && el.i < adj_end);
  return hasBarrier(all_relevant_interlacements);
};
const positionFloatingWefts = (i_active, i_check, j_start, j_end, ms, draft, weft_vtxs) => {
  let check_mat = ms.getDiameter(draft.rowShuttleMapping[i_check]);
  let active_mat = ms.getDiameter(draft.rowShuttleMapping[i_active]);
  for (let j = j_start; j <= j_end; j++) {
    weft_vtxs[i_active][j].y = weft_vtxs[i_check][j].y + (check_mat / 2 + active_mat / 2);
  }
  return weft_vtxs;
};
/**
 * given two rows (i) generate a list of all interlacments (between jstart and end) that exist between these two rows
 * @param i_active
 * @param i_check
 * @param j_start
 * @param j_end
 * @param draft
 * @returns
 */
const getInterlacementsBetweenWefts = (i_active, i_check, j_start, j_end, draft) => {
  let ilace_list = [];
  if (i_check < 0) {
    return ilace_list;
  }
  for (let j = j_start; j <= j_end; j++) {
    const are_interlacements = areInterlacement(draft.drawdown[i_active][j], draft.drawdown[i_check][j]);
    if (are_interlacements) ilace_list.push({
      i_top: i_active,
      i_bot: i_check,
      j: j,
      orientation: getOrientation(draft.drawdown[i_active][j], draft.drawdown[i_check][j])
    });
  }
  return ilace_list;
};
/**
 * given two columsn/warps (j) generate a list of all interlacments (between istart and iend) that exist between these two warps
 * @param j_active
 * @param j_check
 * @param i_start
 * @param i_end
 * @param draft
 * @returns
 */
const getInterlacementsBetweenWarps = (j_active, j_check, i_start, i_end, draft) => {
  let ilace_list = [];
  for (let i = i_start; i <= i_end; i++) {
    const are_interlacements = areInterlacement(draft.drawdown[i][j_active], draft.drawdown[i][j_check]);
    if (are_interlacements) ilace_list.push({
      j_left: j_check,
      j_right: j_active,
      i: i,
      orientation: getOrientation(draft.drawdown[i][j_active], draft.drawdown[i][j_check])
    });
  }
  return ilace_list;
};
const setLayerZ = (ilace_list, count, layer_spacing, warp_vtxs) => {
  // if(count == 0) console.log("------COUNT 0 ", ilace_list);
  ilace_list.forEach(ilace => {
    //warp_vtxs[ilace.i_top][ilace.j].y = warp_vtxs[ilace.i_bot][ilace.j].y + 1;
    for (let i = ilace.i_bot; i <= ilace.i_top; i++) {
      // console.log("writing to ", i, ilace.j, count);
      warp_vtxs[i][ilace.j].z = count * layer_spacing;
    }
  });
  return warp_vtxs;
};
/**
 * a segment with no varience in interlacemetn orientations often signifies a layer. In this snippit, you continue comparing the active row with each subsequent row underneith to identify if it has a barrier. When it finds a barrier, it sets all the warps associated with teh interlacements on the barrier row to the associated layer position.
 * @param count how many rows have been explored so far
 * @param i_active the row we are attempting to move down
 * @param i_check the row we are checking against
 * @param j_start the j position we are starting to look
 * @param j_end the j position we are ending on
 * @param draft the current draft
 * @param range the distance required from an interlacement to form a layer
 * @param warp_vtxs the warp positions
 * @returns
 */
const layerWarpsInZBetweenInterlacements = (count, i_active, i_check, j_start, j_end, draft, range, layer_spacing, warp_vtxs) => {
  let ilace_list = getInterlacementsBetweenWefts(i_active, i_check, j_start, j_end, draft);
  //if check is 0 there are no more rows to check and we should just return where we are. 
  if (i_check < 0) {
    // console.log("we are at the end of the range, sending count ", count, ilace_list)
    return setLayerZ(ilace_list, count, layer_spacing, warp_vtxs);
  }
  // console.log("i lace list comparing", i_active, i_check, j_start, j_end, ilace_list)
  //if there are no interlacements on this row, it was a duplicate of the previous row, and so we couls just move
  if (ilace_list.length == 0) return layerWarpsInZBetweenInterlacements(count, i_active, i_check - 1, j_start, j_end, draft, range, layer_spacing, warp_vtxs);
  const has_barrier = hasWeftBarrierInRange(ilace_list, j_start, j_end, range, draft);
  // console.log("has barrier ", has_barrier);
  if (has_barrier) {
    //set the warp positions here
    //each mark each of the barriers as a place that needs to move 
    console.log("we are at a barrier, sending count ", count, ilace_list);
    return setLayerZ(ilace_list, count, layer_spacing, warp_vtxs);
  } else {
    let orientation = ilace_list[0].orientation;
    if (orientation) {
      count = count - 1;
    } else {
      count = count + 1;
    }
    return layerWarpsInZBetweenInterlacements(count, i_active, i_check - 1, j_start, j_end, draft, range, layer_spacing, warp_vtxs);
  }
};
/**
 * gets the first instance of an interlacement with a different orientation to the start, returns the index at which it was found and the distance
 * @param start the first weft tuple
 * @param remaining the remaining list
 * @returns the ndx at which the segment ends (before the interlacement) or -1 if no interlacement is ever found.
 */
const getNonInterlacingWarpSegment = (start, remaining) => {
  let ref_orientation = start.orientation;
  let barrier_cell = remaining.findIndex(el => el.orientation !== ref_orientation);
  if (barrier_cell !== -1) {
    let distance = Math.abs(start.j - remaining[barrier_cell].j - 1);
    return {
      ndx: barrier_cell,
      dist: distance
    };
  } else {
    return {
      ndx: -1,
      dist: -1
    };
  }
};
const getNonInterlacingWeftSegment = (start, all) => {
  let ref_orientation = start.orientation;
  let barrier_cell = all.findIndex(el => el.i > start.i && el.orientation !== ref_orientation);
  if (barrier_cell !== -1) {
    let distance = Math.abs(start.i - all[barrier_cell].i - 1);
    return {
      ndx: barrier_cell,
      dist: distance
    };
  } else {
    return {
      ndx: -1,
      dist: -1
    };
  }
};
/**
 * when positioning warps in layers, warps close to the ends of the draft will never get a position set. For this reason, we set an unreasinable z value to flag a process after the warps are positioned to update the ends.
 * @param i
 * @param j
 * @param warp_vtx
 * @returns
 */
const getClosestWarpValue = (i, j, warp_vtx) => {
  for (let x = 1; x < warp_vtx.length; x++) {
    let bot = i - x;
    let top = i + x;
    if (bot >= 0 && bot <= warp_vtx.length - 1 && warp_vtx[bot][j].z !== -10000000) return warp_vtx[bot][j].z;
    if (top >= 0 && top <= warp_vtx.length - 1 && warp_vtx[top][j].z !== -10000000) return warp_vtx[top][j].z;
  }
  return 0;
};
const getWeftOffsetFromWarp = (draft, i, j, ms) => {
  let warp_diam = ms.getDiameter(draft.colShuttleMapping[j]);
  let weft_diam = ms.getDiameter(draft.rowShuttleMapping[i]);
  return warp_diam / 2 + weft_diam / 2;
};
const getMidpoint = (a, b) => {
  let max = Math.max(a, b);
  let min = Math.min(a, b);
  let float = max - min;
  return min + float / 2;
};
const getTuplesWithinRange = (tuples, range) => {
  return tuples.filter(tuple => tuple.j >= range.j_left && tuple.j <= range.j_right);
};
/**
 * given a list of weft-oriented tuples (comapring wefts at each warp) find all the relevant interlacements
 * @param tuples
 * @param count
 * @returns
 */
const extractInterlacementsFromTuples = (tuples, count, simvars) => {
  const topo = [];
  //look left to right
  for (let x = 1; x < tuples.length; x++) {
    let last = x - 1;
    if (tuples[last].orientation !== tuples[x].orientation && tuples[x].j - tuples[last].j <= simvars.max_interlacement_width) {
      topo.push({
        id: tuples[last].i_bot + "." + tuples[last].i_top + "." + tuples[last].j + "." + tuples[x].j + "." + count,
        i_top: tuples[last].i_top,
        i_bot: tuples[last].i_bot,
        j_left: tuples[last].j,
        j_right: tuples[x].j,
        orientation: !tuples[last].orientation,
        z_pos: count
      });
    }
  }
  let optimal_topo = [];
  topo.forEach(vtx => {
    let reduced = reduceInterlacement(vtx, tuples, count);
    if (reduced === null) optimal_topo.push(vtx);else optimal_topo.push(reduced);
  });
  return optimal_topo;
};
const reduceInterlacement = (vtx, tuples, count) => {
  if (vtx.j_right - vtx.j_left <= 1) return null;
  let inner_tuples = getTuplesWithinRange(tuples, {
    j_left: vtx.j_left,
    j_right: vtx.j_right
  });
  let right_side_orientation = !vtx.orientation;
  //get the closest interlacment ot the right side
  let closest = inner_tuples.reduce((acc, val, ndx) => {
    if (val.orientation !== right_side_orientation && vtx.j_right - val.j < acc.dist) return {
      ndx,
      dist: vtx.j_right - val.j
    };
    return acc;
  }, {
    ndx: -1,
    dist: vtx.j_right - vtx.j_left
  });
  //this was irreducible
  if (closest.dist == vtx.j_right - vtx.j_left || closest.dist == 0) return null;
  let new_vtx = {
    id: vtx.i_bot + "." + vtx.i_top + "." + vtx.j_left + "." + vtx.j_right + "." + vtx.z_pos,
    i_bot: vtx.i_bot,
    i_top: vtx.i_top,
    j_left: inner_tuples[closest.ndx].j,
    j_right: vtx.j_right,
    z_pos: count,
    orientation: vtx.orientation
  };
  return new_vtx;
};
/**
 * a recursive function that finds interlacments, returns them, and then searches remaining floating sections to see if they should push to a new layer
 * @param tuples the list of tuples to search
 * @param count  the current layer id
 * @param draft the draft in question
 * @returns
 */
const getInterlacements = (tuples, range, count, draft, simvars) => {
  let closeness_to_edge = Math.ceil((0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown) / 8);
  if (tuples.length < 1) return [];
  if (tuples[0].i_bot < 0) return [];
  // if(tuples[0].i_top == wefts(draft.drawdown)-1) return [];
  tuples = getTuplesWithinRange(tuples, range);
  const topo = extractInterlacementsFromTuples(tuples, count, simvars);
  let i_bot = tuples[0].i_bot;
  let i_top = tuples[0].i_top;
  let orientation = tuples[0].orientation;
  let ilaces = [];
  let float_groups = splitRangeByVerticies(range, topo);
  float_groups = float_groups.filter(el => el.j_left !== el.j_right);
  //filter out groups where the last warp is included because they tend to be noisy  
  float_groups = float_groups.filter(el => !(el.j_right != (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown) - 1 && el.j_right - el.j_left < closeness_to_edge));
  // console.log("FLOAT GROUPS AT ", i_top, i_bot, range, topo, float_groups);
  float_groups.forEach((range, x) => {
    // console.log("LOOKING AT FLOAT GROUP ", x)
    count = orientation ? count + 1 : count - 1;
    let next_row_tuple = getInterlacementsBetweenWefts(i_top, i_bot - 1, range.j_left, range.j_right, draft);
    ilaces = ilaces.concat(getInterlacements(next_row_tuple.slice(), range, count, draft, simvars));
  });
  return topo.concat(ilaces);
};
const getFloatRanges = (draft, i) => {
  const ranges = [];
  let last_ndx = -1;
  let last_value,
    cur_value = false;
  draft.drawdown[i].forEach((cell, j) => {
    if (j == 0) {
      last_ndx = 0;
      last_value = cell.is_set && cell.is_up;
    } else {
      cur_value = cell.is_set && cell.is_up;
      if (cur_value != last_value) {
        ranges.push({
          j_left: last_ndx,
          j_right: j
        });
      }
      last_value = cur_value;
      last_ndx = j;
    }
  });
  ranges.push({
    j_left: last_ndx,
    j_right: (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown) - 1
  });
  return ranges;
};
/**
 * after you find a list of verticies between the two rows, you split the semgents of the row between the verticies
 * @param range
 * @param verticies
 * @returns
 */
const splitRangeByVerticies = (range, verticies) => {
  let groups = [];
  verticies = sortInterlacementsOnWeft(verticies);
  //this would happen if the row just checked didn't have any interlacements, 
  if (verticies.length == 0) return [range];
  for (let v = 0; v < verticies.length; v++) {
    if (v == 0) {
      groups.push({
        j_left: range.j_left,
        j_right: verticies[v].j_left
      });
    }
    if (v > 0 && v < verticies.length - 1) {
      groups.push({
        j_left: verticies[v - 1].j_right,
        j_right: verticies[v].j_left
      });
    }
    if (v == verticies.length - 1) {
      groups.push({
        j_left: verticies[v].j_right,
        j_right: range.j_right
      });
    }
  }
  return groups;
};
const correctInterlacementLayers = (all, weft, layer_threshold) => {
  //this is a list of every possible interlacement between wefts but also includes sometimes more interlacements than we need. For instance, with satin, it might detect layers within float spaces. We can identify those as interlacements that share a corner. 
  let hard_overlaps = [];
  let to_check = weft.slice();
  all.forEach(topo => {
    to_check = to_check.filter(el => el.id != topo.id);
    to_check.forEach(check => {
      if (topo.i_bot == check.i_bot && topo.j_left == check.j_left) hard_overlaps.push({
        a: topo.id,
        b: check.id
      });
      if (topo.i_bot == check.i_bot && topo.j_right == check.j_right) hard_overlaps.push({
        a: topo.id,
        b: check.id
      });
      if (topo.i_top == check.i_top && topo.j_left == check.j_left) hard_overlaps.push({
        a: topo.id,
        b: check.id
      });
      if (topo.i_top == check.i_top && topo.j_right == check.j_right) hard_overlaps.push({
        a: topo.id,
        b: check.id
      });
    });
  });
  hard_overlaps.forEach(topo => {
    weft = weft.filter(el => el.id !== topo.b);
    // let a:TopologyVtx = all.find(el => el.id == topo.a);
    // let b:TopologyVtx = weft.find(el => el.id == topo.b);
    // if(a !== undefined && b!== undefined){
    // if(Math.abs(a.z_pos) < Math.abs(b.z_pos)) weft = weft.filter(el => el.id !== b.id);
    // else all = all.filter(el => el.id !== a.id);
    // }
  });

  all = weft.slice();
  let compressed_weft = [];
  let last = null;
  //check weft from left to right and strip out anything that seems to be an outlier
  weft.forEach(vtx => {
    if (vtx.z_pos == last) {
      compressed_weft[compressed_weft.length - 1].count++;
      compressed_weft[compressed_weft.length - 1].els.push(vtx);
    } else {
      compressed_weft.push({
        id: vtx.z_pos,
        count: 1,
        els: [vtx]
      });
    }
    last = vtx.z_pos;
  });
  let mark_for_removal = [];
  compressed_weft.forEach((item, ndx) => {
    if (item.count < layer_threshold) {
      //check left 
      // console.log("Removing below threshold elements")
      item.els.forEach(el => {
        mark_for_removal.push(el.id);
      });
      //let left_mag = (ndx -1 >= 0) ? compressed_weft[ndx-1].count : -1;
      //let right_mag = (ndx +1 < compressed_weft.length) ? compressed_weft[ndx+1].count : -1;
      // if(left_mag !== -1 && right_mag != -1){
      //   let new_pos = -1;
      //   if(left_mag >= right_mag){
      //     new_pos = compressed_weft[ndx-1].id;
      //   }else{
      //     new_pos = compressed_weft[ndx+1].id;
      //   }
      // }
    }
  });

  weft = weft.filter(el => mark_for_removal.find(item => item == el.id) == undefined);
  all = weft.slice();
  //check weft from top to bottom
  //this has the problem that if there is an error somewhere, it will no ripple out through the cloth. 
  weft.forEach(vtx => {
    let shares_layer = all.filter(el => el.j_left == vtx.j_right && el.i_top == vtx.i_bot || el.j_right == vtx.j_left && el.i_top == vtx.i_bot);
    shares_layer.forEach(topo_vtx => {
      vtx.z_pos = topo_vtx.z_pos;
    });
  });
  return weft;
};
/**
 * this function takes a draft and input variables and uses those to generate a list of vertexes between which yarns will cross on the z plane. These points are used to determine how layers are formed and how yarns will stack relative to eacother.
 */
const getDraftTopology = (draft, sim) => {
  let dd = draft.drawdown;
  //extend the drawdown by boundary in all directions so that we can eliminate strange data that emerges from drafts that don't have enough interlacements because they are small. This artifically tiles the draft to get more fidelity. 
  const warp_tuples = getWarpInterlacementTuples(dd);
  // console.log("WARP TUPLES ", warp_tuples);
  let topology = [];
  //look at each weft
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(dd); i++) {
    //get the interlacements associated with this row
    let a = warp_tuples.filter(el => el.i_top == i);
    let range = {
      j_left: 0,
      j_right: (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown) - 1
    };
    // console.log("LOOKING AT ", i, " ", a)
    let verticies = getInterlacements(a, range, 0, draft, sim);
    topology = topology.concat(verticies);
    let corrected = correctInterlacementLayers(topology, verticies, sim.layer_threshold);
    topology = topology.concat(corrected);
  }
  return Promise.resolve(topology);
};
/**
 * checks if there is the indiciated value found along a warp within the specified range
 * @param layer_map
 * @param val
 * @param i_min
 * @param i_max
 * @param j
 * @returns
 */
const warpLayerValueInRange = (layer_map, val, i_min, i_max, j) => {
  let warp = layer_map.reduce((acc, val) => {
    return acc.concat(val[j]);
  }, []);
  let range = warp.filter((el, ndx) => ndx > Math.max(0, i_min) && ndx < i_max);
  let has_value = range.findIndex(el => el == val);
  if (has_value !== -1) return has_value;
  if (i_min == 0) return 0;
  if (i_max == layer_map.length - 1) return layer_map.length - 1;
  return -1;
};
/**
 * checks if there is the indiciated value found along a warp within the specified range
 * @param layer_map
 * @param val
 * @param i_min
 * @param i_max
 * @param j
 * @returns
 */
const weftLayerValueInRange = (layer_map, val, j_min, j_max, i) => {
  let range = layer_map[i].filter((el, ndx) => ndx > Math.max(0, j_min) && ndx < j_max);
  let has_value = range.findIndex(el => el == val);
  if (has_value !== -1) return has_value;
  if (j_min == 0) return 0;
  if (j_max == layer_map[0].length - 1) return layer_map[0].length - 1;
  return -1;
};
/**
 * takes interlacements associted with a layer and organizes them to associate each warp location with a given location
 * @param layer_map
 * @param interlacements
 * @param max_ilace_width how close do warps need to be in an interlacement to consider these two warps being on the same layer
 * @param max_ilace_height how close do wefts need to be in an interlacement to consider these wefts as being on the same layer
 * @returns
 */
const addWarpLayerInterlacementsToMap = (layer_map, interlacements, max_ilace_width, max_ilace_height) => {
  interlacements.forEach(ilace => {
    let width = ilace.j_right - ilace.j_left;
    if (width <= max_ilace_width) {
      //span the interlaced warps onto the same layer
      for (let i = ilace.i_bot; i <= ilace.i_top; i++) {
        if (layer_map[i][ilace.j_left] == null) layer_map[i][ilace.j_left] = ilace.z_pos;
        if (layer_map[i][ilace.j_right] == null) layer_map[i][ilace.j_right] = ilace.z_pos;
      }
    }
  });
  return layer_map;
};
const addWeftLayerInterlacementsToMap = (layer_map, interlacements, max_ilace_width) => {
  interlacements.forEach(ilace => {
    let width = ilace.j_right - ilace.j_left;
    if (width <= max_ilace_width) {
      //span the interlaced wefts onto the same layer
      for (let j = ilace.j_left; j <= ilace.j_right; j++) {
        if (layer_map[ilace.i_bot][j] == null) layer_map[ilace.i_bot][j] = ilace.z_pos;
        if (layer_map[ilace.i_top][j] == null) layer_map[ilace.i_top][j] = ilace.z_pos;
      }
      let j_min = Math.max(0, ilace.j_left - max_ilace_width);
      let j_max = Math.min(ilace.j_right + max_ilace_width, layer_map[0].length - 1);
      //reach out from all four corners and see if there is an interlacement with the same layer val in range
      let bottom_left = weftLayerValueInRange(layer_map, ilace.z_pos, j_min, ilace.j_left, ilace.i_bot);
      if (bottom_left !== -1) {
        for (let j = bottom_left; j < ilace.j_left; j++) {
          if (layer_map[ilace.i_bot][j] == null) layer_map[ilace.i_bot][j] = ilace.z_pos;
        }
      }
      let top_left = weftLayerValueInRange(layer_map, ilace.z_pos, j_min, ilace.j_left, ilace.i_top);
      if (top_left !== -1) {
        for (let j = top_left; j < ilace.j_left; j++) {
          if (layer_map[ilace.i_top][j] == null) layer_map[ilace.i_top][j] = ilace.z_pos;
        }
      }
      let bottom_right = weftLayerValueInRange(layer_map, ilace.z_pos, ilace.j_right, j_max, ilace.i_bot);
      if (bottom_right !== -1) {
        for (let j = ilace.j_right; j <= bottom_right; j++) {
          if (layer_map[ilace.i_bot][j] == null) layer_map[ilace.i_bot][j] = ilace.z_pos;
        }
      }
      let top_right = weftLayerValueInRange(layer_map, ilace.z_pos, ilace.j_right, j_max, ilace.i_top);
      if (top_right !== -1) {
        for (let j = ilace.j_right; j <= top_right; j++) {
          if (layer_map[ilace.i_top][j] == null) layer_map[ilace.i_top][j] = ilace.z_pos;
        }
      }
    }
  });
  return layer_map;
};
/**
 * to create the rendering of the draft, we need to understand what is happening layer wise with the warps and wefts
 */
const createLayerMaps = (draft, topo, sim) => {
  const layer_maps = {
    weft: [],
    warp: []
  };
  //let a list of all the active layers in this toplogy (as absolute vals)
  let active_layers = topo.reduce((acc, val) => {
    let has_elem = acc.find(el => el == Math.abs(val.z_pos));
    if (has_elem === undefined) {
      return acc.concat(Math.abs(val.z_pos));
    }
    return acc;
  }, []);
  //get the largest magnitude layer (e.g. farthest from zero)
  const max_layer = active_layers.reduce((acc, val) => {
    if (val > acc) return val;
    return acc;
  }, 0);
  return createWarpLayerMap(draft, topo, sim, active_layers, max_layer).then(warps => {
    layer_maps.warp = warps;
    return createWeftLayerMap(draft, topo, sim, active_layers, max_layer);
  }).then(wefts => {
    layer_maps.weft = wefts;
    return layer_maps;
  });
};
/**
 * use the topology generated to create a map describing the relationship between warp and weft layers. assign each position along a warp with an associated layer. If a weft interlaces with that warp, it must do so on the warps associated layer
 */
const createWarpLayerMap = (draft, topo, sim, active_layers, max_layer) => {
  //get the closest weft interlacements 
  const max_height = topo.reduce((acc, val) => {
    if (val.i_top - val.i_bot > acc) return val.i_top - val.i_bot;
    return acc;
  }, 0);
  //start from the smallest width to the largest  
  //push interlacements to the map in this order, not adding any additional. 
  //add a "strength, field that extends out from interlacement in "
  // //default all layers to null
  let layer_map = [];
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
    layer_map.push([]);
    for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
      layer_map[i][j] = null;
    }
  }
  //go through layers 0 -> max and push interlacements to the layer map 
  for (let i = 1; i <= max_height; i++) {
    let layer_ilace = topo.filter(ilace => ilace.i_top - ilace.i_bot == i);
    layer_map = addWarpLayerInterlacementsToMap(layer_map, layer_ilace, sim.max_interlacement_width, sim.max_interlacement_height);
  }
  //now scan through the layer map. Count the number of consecutive layer values on a warp. 
  //if it is larger than the layer threshold, keep them
  //if not, 
  for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
    let col = layer_map.reduce((acc, el) => {
      return acc.concat(el[j]);
    }, []);
    //find all of the non null vals
    let vals = [];
    col.forEach((el, ndx) => {
      if (el !== null) vals.push(ndx);
    });
    if (vals.length == 0) {
      //find the first non-zero val to the columns to the right 
      //fill this with those columns 
    } else {
      vals.forEach(val => {
        //fill downwards
        let found = false;
        for (let i = val - 1; i >= 0 && !found; i--) {
          if (layer_map[i][j] == null) layer_map[i][j] = layer_map[val][j];else found = true;
        }
        ;
        //fill upwards
        found = false;
        for (let i = val + 1; i < col.length && !found; i++) {
          if (layer_map[i][j] == null) layer_map[i][j] = layer_map[val][j];else found = true;
        }
        ;
      });
    }
    // }
  }
  /**
   * look through rows, if you hit a null value in a row, look to the preview
   * values it had just saw, and replace this value with those values.
   */
  let prior_pattern = [];
  let count_null = 0;
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
    for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
      if (layer_map[i][j] !== null) {
        if (count_null > 0) prior_pattern = [];
        prior_pattern.push(layer_map[i][j]);
        count_null = 0;
      } else {
        //   console.log("FOUND NULL AT ", i, j, "PRIOR IS ", prior_pattern, " ", count_null);
        if (prior_pattern.length == 0) layer_map[i][j] = 0;else layer_map[i][j] = prior_pattern[count_null % prior_pattern.length];
        count_null++;
      }
    }
  }
  //now clean up 
  console.log("WARP LAYER MAP", layer_map);
  return Promise.resolve(layer_map);
};
/**
 * use the topology generated to create a map describing the relationship between warp and weft layers. assign each position along a warp with an associated layer. If a weft interlaces with that warp, it must do so on the warps associated layer
 * @param draft the draft to draw
 * @param topo the generated topography
 * @param  power if you see an interlacement at i, j, how far should its "power" extend to neighbors.
 * @param layer_threshold how many consecutive layer assignments need to be seen in order to call it a layer
 * @returns
 */
const createWeftLayerMap = (draft, topo, sim, active_layers, max_layer) => {
  //default all layers to null
  let layer_map = [];
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
    layer_map.push([]);
    for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
      layer_map[i][j] = null;
    }
  }
  //go through layers 0 -> max and push interlacements to the layer map 
  for (let i = 0; i <= max_layer; i++) {
    let layers_to_check = [];
    if (i !== 0) {
      layers_to_check = [i, -i];
    } else {
      layers_to_check = [0];
    }
    layers_to_check.forEach(layer_id => {
      let layer_ilace = topo.filter(ilace => ilace.z_pos == layer_id);
      layer_map = addWeftLayerInterlacementsToMap(layer_map, layer_ilace, sim.max_interlacement_width);
    });
  }
  /**
  * look through rows, if you hit a null value in a row, look to the preview
  * values it had just saw, and replace this value with those values.
  */
  let prior_pattern = [];
  let count_null = 0;
  for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
    for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
      if (layer_map[i][j] !== null) {
        if (count_null > 0) prior_pattern = [];
        prior_pattern.push(layer_map[i][j]);
        count_null = 0;
      } else {
        //   console.log("FOUND NULL AT ", i, j, "PRIOR IS ", prior_pattern, " ", count_null);
        if (prior_pattern.length == 0) layer_map[i][j] = 0;else layer_map[i][j] = prior_pattern[count_null % prior_pattern.length];
        count_null++;
      }
    }
  }
  //  console.log("WEFT LAYER MAP", layer_map)
  return Promise.resolve(layer_map);
};
/**
 * this function calculates proximity to the place in which the interlacement crosses and then attracts the other interlacements towards it position as a function of their distance.
 * @param inlacement_j
 * @param interlacement_y
 * @param cur
 * @param mm_per_warp
 */
const updateY = (interlacement_j, interlacement_y, cur, mm_per_warp) => {
  //calc distance in mm. the closer to the interlacement, the stronger this vertex will be pulled twoards ilace_y
  let dist = (interlacement_j - cur.j) * mm_per_warp;
  //use the function 1 / 2^x/2 to calucate the force. 
  // let displacement_factor = 1 / Math.pow(2, dist/10);
  let displacement_factor = 1;
  let y_dist = interlacement_y - cur.y;
  let new_y = cur.y + y_dist * displacement_factor;
  // console.log("DIST, DISP, YDIST, NEWY", dist, displacement_factor, y_dist, cur.y, new_y, interlacement_y);
  return new_y;
};
// /**
//  * given an distance range in mm, returns all the vtxs in that range. 
//  * @param weft 
//  * @param x_min 
//  * @param x_max 
//  * @returns 
//  */
// export const getVtxsInRange = (weft: Array<YarnVertex>, x_min: number, x_max:number) => {
//     let range = [];
//    for(let x = 0; x < weft.length; x++){
//       let vtx = weft[x]; 
//       if(vtx.x >= x_min) range.push(vtx);
//       if(vtx.x >= x_max) return range;
//    }
// }
const setBaselineYForWeft = (i, weft, layer_maps, draft, prior_wefts, sim) => {
  let updated_weft = [];
  let weft_diam = sim.ms.getDiameter(draft.rowShuttleMapping[i]);
  //find the y value of the same layer
  weft.forEach(vtx => {
    let this_layer = layer_maps.weft[vtx.i][vtx.j];
    let layer_ndx_map = layer_maps.weft.filter((el, ndx) => ndx < i).map(el => el[vtx.j]).map((el, ndx) => {
      return {
        layer: el,
        i: ndx,
        j: vtx.j
      };
    });
    let prev_wefts_on_layer = layer_ndx_map.filter(el => el.layer == this_layer);
    let prev_weft = null;
    let layer_y = {
      y: 0,
      i: -1
    };
    if (prev_wefts_on_layer.length > 0) {
      prev_weft = prev_wefts_on_layer.slice().pop();
      let prev_weft_vtx = prior_wefts[prev_weft.i].find(el => el.j == vtx.j);
      if (prev_weft_vtx !== undefined) layer_y = {
        y: prev_weft_vtx.y,
        i: prev_weft.i
      };
    }
    //compare the last layer y to the highest y in the set
    // let non_layer_map = layer_ndx_map.filter(el => el.layer !== this_layer);
    let non_layer_map = layer_ndx_map;
    let max_y = non_layer_map.reduce((acc, el) => {
      let max_in_weft = prior_wefts[el.i].reduce((subacc, vtx) => {
        if (vtx.y > subacc) return vtx.y;
        return subacc;
      }, 0);
      if (max_in_weft >= acc.y) return {
        y: max_in_weft,
        i: el.i
      };
      return acc;
    }, {
      y: 0,
      i: -1
    });
    let use_y = 0;
    if (max_y.i !== -1 || max_y.i == -1 && non_layer_map.length == 0) {
      //if the layer_y is within acceptable distance from max
      let diff = max_y.y + sim.ms.getDiameter(draft.rowShuttleMapping[max_y.i]) / 2 - (layer_y.y + weft_diam / 2);
      if (layer_y.i == -1 || diff > weft_diam) {
        use_y = max_y.y + sim.ms.getDiameter(draft.rowShuttleMapping[max_y.i]) / 2 - weft_diam;
      } else {
        //make sure the new y isn't too far away
        if (Math.ceil(max_y.y - layer_y.y) >= weft_diam) {
          console.log("DETECTED DIFFERENCE ");
          layer_y.y = max_y.y - weft_diam;
        }
        use_y = layer_y.y + sim.ms.getDiameter(draft.rowShuttleMapping[layer_y.i]) / 2 + weft_diam / 2;
      }
    }
    //TECHNICALLY - WE SHOULD UPDATE WARP VTXS TOO!
    updated_weft.push({
      x: vtx.x,
      y: use_y,
      z: vtx.z,
      i: vtx.i,
      j: vtx.j
    });
  });
  return updated_weft;
};
/**
 * an interlacement pushes two wefts away from eachother by an amount that depends on the sett, yarn thickness, and strength of the interlacement. This funciton radiates, and dissapates that force along the weft to ensure a smooth gradual change in position that is never out of range
 * @param weft the weft vertexes
 * @param deflections a copy of vertexes, but storing the already occured deflections
 * @param x the position of the interlacement
 * @param i the weft id
 * @param strength the strength of the interlacement (closer interlacements are stronger)
 * @param max_displacement the maximum amont of distance, in y, that this weft can be displaced
 * @param simvars the simulation variables.
 * @returns
 */
const radiateInterlacementForce = (weft, deflections, x, i, strength, max_displacement, simvars) => {
  let in_range = weft.map((el, ndx) => {
    if (el.x >= x - simvars.radius && el.x <= x + simvars.radius) return ndx;else return -1;
  });
  in_range.filter(el => el !== -1).forEach(ndx => {
    deflections[ndx].dy += strength * max_displacement;
    if (deflections[ndx].dy > max_displacement) deflections[ndx].dy = max_displacement;
  });
  return deflections;
};
/**
 * given the distance of this interlacement in mm, this function figures out the strength factor. Which will determine how much to push up this warp as  function of distance. Smaller widths get pushed up harder than farther widths. Max is 1 - min is very close to zero.
 * @param dist
 */
const calcStrength = dist => {
  return 1 / dist;
};
/**
 * how far can a strong interlacement push a weft upward in the cloth. This depends on the sett of the cloth and density of the yarns. How much distance is between these yarns? Returns the displacement in mm.
 * @param sett_width - how many mm between the two yarns in question
 * @param max_warp_thickness - how thick is the warp at this interlacement.
 * @returns
 */
const calcMaxDisplacement = (sett_width, max_warp_thickness) => {
  return max_warp_thickness / sett_width;
};
const getPrevWarpOnLayer = (i, j, layermaps) => {
  for (let ndx = j; ndx >= 0; ndx--) {
    if (layermaps.weft[i][j] == layermaps.weft[i][ndx]) return ndx;
  }
  return -1;
};
const getNextWarpOnLayer = (i, j, layermaps) => {
  for (let ndx = j; ndx < layermaps.weft[0].length; ndx++) {
    if (layermaps.weft[i][j] == layermaps.weft[i][ndx]) return ndx;
  }
  return -1;
};
/**
* how far can a strong interlacement push a weft upward in the cloth. This depends on the sett of the cloth and density of the yarns. How much distance is between these yarns? Returns the displacement in mm.
* @param sett_width - how many mm between the two yarns in question
* @param max_warp_thickness - how thick is the warp at this interlacement.
* @returns
*/
const calcFloatDistance = (i, j, float, weft, layer_maps, draft, sim) => {
  let left_warp_id = getPrevWarpOnLayer(i, float.start, layer_maps);
  let right_warp_id = float.end;
  if (j == left_warp_id || j == right_warp_id) return 0;
  let start_x = sim.warp_spacing * left_warp_id;
  let end_x = sim.warp_spacing * right_warp_id;
  let width = end_x - start_x;
  let half_width = width / 2;
  let jx = j * sim.warp_spacing - start_x;
  let distance_from_center = jx <= half_width ? half_width - jx : jx - half_width;
  if (half_width == 0) return 0;
  let closeness_ratio = 1 - distance_from_center / half_width;
  // console.log("WIDTH / DISTANCE ", distance_from_center, half_width, closeness_ratio)
  //should be 1 when the distance is 0;
  //less x_distance, stonger repel. 
  // repel depends on length; 
  let max_dx = Math.min(8, width / 10);
  let pcent = Math.sin(Math.PI / 2 * closeness_ratio);
  //let positioned_dx = (float.heddle) ? max_dx*pcent : -max_dx*pcent; 
  let positioned_dx = float.heddle ? pcent * max_dx : -pcent * max_dx;
  // console.log("POSITINED DX ", positioned_dx)
  return positioned_dx;
};
const getFirstWarpAssociatedWithLayer = (i, layerid, layermaps) => {
  for (let j = 0; j < layermaps.weft[i].length; j++) {
    if (layermaps.warp[i][j] == layerid) return j;
  }
  return -1;
};
/**
 * convert a draft row into an array of floats. This is an alternate representation of the same data that focuses on how long the float values are and where they start, rather than each cell individually. Teh structure stores teh start of the float - the first cell that reresents the value across the float. The end value represents the cell upon which the value changes.
 * @param i
 * @param draft
 * @param layer_maps
 * @returns
 */
const getWeftAsFloat = (i, draft, layer_maps) => {
  if (draft.drawdown[i].length == 0) return [];
  let start_id = getFirstWarpAssociatedWithLayer(i, layer_maps.weft[i][0], layer_maps);
  let floats = [{
    heddle: (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(draft.drawdown[i][start_id]),
    end: start_id,
    start: 0,
    layer: layer_maps.weft[i][start_id]
  }];
  let last_float = floats[0];
  for (let j = 1; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
    if (layer_maps.warp[i][j] == layer_maps.weft[i][j]) {
      last_float.end = j;
      if ((0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(draft.drawdown[i][j]) != last_float.heddle || layer_maps.weft[i][j] != last_float.layer) {
        last_float = {
          heddle: (0,_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(draft.drawdown[i][j]),
          start: j,
          end: j,
          layer: layer_maps.weft[i][j]
        };
        floats.push(last_float);
      }
    }
  }
  return floats;
};
/**
 * position the weft on top of the previous weft (on the corresponding layers) and then repositing to account for the physics of an interlacement htat pushes in different directions.
 * @param i
 * @param weft
 * @param topo
 * @param layer_maps
 * @param draft
 * @param prior_wefts
 * @param sim
 * @returns
 */
const packWeft = (i, weft, topo, layer_maps, draft, prior_wefts, sim) => {
  //get the interlacements that have the current weft as the top value
  let ilaces = topo.filter(el => el.i_top === i);
  let ilace_coords = [];
  weft = setBaselineYForWeft(i, weft, layer_maps, draft, prior_wefts, sim);
  let floats = getWeftAsFloat(i, draft, layer_maps);
  let deflections = weft.map(vtx => {
    return {
      i: vtx.i,
      j: vtx.j,
      dx: 0,
      dy: 0,
      dz: 0
    };
  });
  // console.log("FLOATS ON ", i, floats, warps(draft.drawdown))
  ilaces.forEach(ilace => {
    let width = (ilace.j_right - ilace.j_left) * sim.warp_spacing;
    let strength = calcStrength(width);
    let current_left_ndx = weft.findIndex(el => el.j == ilace.j_left);
    if (current_left_ndx == -1) return;
    let current_left = weft[current_left_ndx];
    let current_right_ndx = weft.findIndex(el => el.j == ilace.j_right);
    if (current_right_ndx == -1) return;
    let current_right = weft[current_right_ndx];
    let center_x = current_right.x + (current_right.x - current_left.x) / 2;
    ilace_coords.push(center_x);
    let left_warp_diam = sim.ms.getDiameter(draft.colShuttleMapping[ilace.j_left]);
    let right_warp_diam = sim.ms.getDiameter(draft.colShuttleMapping[ilace.j_right]);
    let between_yarns_width = width - (left_warp_diam / 2 + right_warp_diam / 2);
    if (between_yarns_width < 0) between_yarns_width = 0.1;
    let max_displacement = calcMaxDisplacement(between_yarns_width, Math.max(left_warp_diam, right_warp_diam));
    deflections = radiateInterlacementForce(weft, deflections, center_x, i, strength, max_displacement, sim);
  });
  floats.forEach(float => {
    for (let f = float.start; f <= float.end; f++) {
      let deflection_id = deflections.findIndex(el => el.j == f);
      if (deflection_id !== -1) deflections[deflection_id].dz = calcFloatDistance(i, f, float, weft, layer_maps, draft, sim);
    }
  });
  weft.forEach((vtx, ndx) => {
    vtx.y += deflections[ndx].dy;
    vtx.z += deflections[ndx].dz;
  });
  return weft;
};
/**
 * converts a topology diagram to a list of vertexes to draw. It only draws key interlacements to the list
 * @param draft
 * @param topo
 * @param layer_map
 * @param sim
 * @returns
 */
const translateTopologyToPoints = (draft, topo, layer_maps, sim) => {
  let weft_vtx = [];
  let warp_vtx = [];
  for (let i = 0; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
    weft_vtx.push([]);
    let weft = insertWeft(draft, [], i, sim, layer_maps);
    let res = packWeft(i, weft.slice(), topo, layer_maps, draft, weft_vtx, sim);
    weft_vtx[i] = res.slice();
  }
  for (let j = 0; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
    warp_vtx.push([]);
    //get every interlacement involving this weft
    const ilaces = topo.filter(el => el.j_left == j || el.j_right == j);
    warp_vtx = insertWarp(draft, ilaces, warp_vtx, j, sim, layer_maps.warp).slice();
  }
  return Promise.resolve({
    warps: warp_vtx,
    wefts: weft_vtx
  });
};
const sortInterlacementsOnWarp = ilaces => {
  let unsorted = ilaces.slice();
  let sorted = [];
  while (unsorted.length > 1) {
    let bottommost = unsorted.reduce((acc, ilace, ndx) => {
      if (ilace.i_bot < acc.val) return {
        ndx: ndx,
        val: ilace.i_bot
      };
      return acc;
    }, {
      ndx: -1,
      val: 100000000
    });
    let arr_removed = unsorted.splice(bottommost.ndx, 1);
    sorted.push(arr_removed[0]);
  }
  sorted = sorted.concat(unsorted);
  return sorted;
};
const sortInterlacementsOnWeft = ilaces => {
  let unsorted = ilaces.slice();
  let sorted = [];
  while (unsorted.length > 1) {
    let leftmost = unsorted.reduce((acc, ilace, ndx) => {
      if (ilace.j_left < acc.val) return {
        ndx: ndx,
        val: ilace.j_left
      };
      return acc;
    }, {
      ndx: -1,
      val: 100000000
    });
    let arr_removed = unsorted.splice(leftmost.ndx, 1);
    sorted.push(arr_removed[0]);
  }
  sorted = sorted.concat(unsorted);
  return sorted;
};
// export const calcFloatHeightAtPosition = (pos: number, total_float_len: number, max_float: number) : number => {
//   let radians = pos/total_float_len * Math.PI;
//   return max_float * Math.sin(radians);
// }
const getWeftOrientationVector = (draft, i, j) => {
  return draft.drawdown[i][j].is_set && draft.drawdown[i][j].is_up ? 1 : -1;
};
const insertWarp = (draft, unsorted_ilaces, warp_vtxs, j, sim, layer_map) => {
  let ilaces = sortInterlacementsOnWarp(unsorted_ilaces);
  let diam = sim.ms.getDiameter(draft.colShuttleMapping[j]);
  let res = processWarpInterlacement(draft, j, diam, ilaces.slice(), warp_vtxs, [], sim, layer_map);
  return res;
};
/**
 * given all the interlacements involving this weft, this function returns the list of vertecies that will be uused to draw that weft on screen.
 * @param draft
 * @param unsorted_ilaces
 * @param weft_vtx
 * @param i
 * @param sim
 * @param layer_map
 * @returns
 */
const insertWeft = (draft, weft_vtx, i, sim, layer_maps) => {
  let diam = sim.ms.getDiameter(draft.rowShuttleMapping[i]);
  return processWeftInterlacements(draft, i, diam, weft_vtx, sim, layer_maps);
};
const calcClothHeightOffsetFactor = (diam, radius, offset) => {
  return diam * (radius - offset) / radius;
};
const addWeftInterlacement = (draft, i, j, z_pos, diam, sim, weft_vtxs) => {
  let offset = getWeftOffsetFromWarp(draft, i, j, sim.ms);
  let orient = getWeftOrientationVector(draft, i, j);
  weft_vtxs.push({
    x: j * sim.warp_spacing,
    y: i * diam,
    z: z_pos * sim.layer_spacing + offset * orient,
    i: i,
    j: j
  });
  return weft_vtxs;
};
const addWarpInterlacement = (draft, i, j, z_pos, diam, sim, warp_vtxs) => {
  warp_vtxs[j].push({
    x: j * sim.warp_spacing,
    y: i * diam,
    z: z_pos * sim.layer_spacing,
    i: i,
    j: j
  });
  return warp_vtxs;
};
// export const areDuplicateWarps = (j: number, j_next: number, draft: Draft) : boolean => {
//   for(let i = 0; i < wefts(draft.drawdown); i++){
//     if(draft.drawdown[i][j].getHeddle() != draft.drawdown[i][j_next].getHeddle()) return false;
//   }
//   return true;
// }
/**
 * given a list of weft interlacements it converts
 * @param draft
 * @param i
 * @param ilace_last
 * @param diam
 * @param ilaces
 * @param weft_vtxs
 * @param drawn_positions
 * @param sim
 * @param layer_map
 * @returns
 */
const processWeftInterlacements = (draft, i, diam, weft_vtxs, sim, layer_maps) => {
  let indexs_added = [];
  //look across the row and make new interlacements
  let last_layer = layer_maps.weft[i][0];
  weft_vtxs = addWeftInterlacement(draft, i, 0, last_layer, diam, sim, weft_vtxs).slice();
  indexs_added.push(0);
  for (let j = 1; j < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown); j++) {
    if (layer_maps.warp[i][j] == layer_maps.weft[i][j]) {
      let layer_id = layer_maps.weft[i][j];
      weft_vtxs = addWeftInterlacement(draft, i, j, layer_id, diam, sim, weft_vtxs).slice();
    }
  }
  return weft_vtxs;
};
const processWarpInterlacement = (draft, j, diam, ilaces, warp_vtxs, drawn_positions, sim, layer_map) => {
  //ilaces is all the interlacements on this warp
  let last_id = layer_map[0][j];
  let just_added = false;
  warp_vtxs = addWarpInterlacement(draft, -1, j, last_id, diam, sim, warp_vtxs);
  for (let i = 1; i < (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
    if (last_id !== layer_map[i][j]) {
      //add the top-size of the interlacement
      if (!just_added) warp_vtxs = addWarpInterlacement(draft, i - 1, j, layer_map[i - 1][j], diam, sim, warp_vtxs);
      warp_vtxs = addWarpInterlacement(draft, i, j, layer_map[i][j], diam, sim, warp_vtxs);
      just_added = true;
    } else {
      just_added = false;
    }
    last_id = layer_map[i][j];
  }
  warp_vtxs = addWarpInterlacement(draft, (0,_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown), j, last_id, diam, sim, warp_vtxs);
  return warp_vtxs;
};

/***/ }),

/***/ 30823:
/*!**************************************************************************************!*\
  !*** ./src/app/core/operations/applymaterialsandsystems/applymaterialsandsystems.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "apply_mats": () => (/* binding */ apply_mats)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "apply materials";
const old_names = [];
//PARAMS
//PARAMS
const shift_warp_mat = {
  name: 'warp colors shift',
  min: 0,
  max: 10000,
  value: 0,
  type: 'number',
  dx: 'number of ends by which to shift the warp color pattern'
};
const shift_weft_mats = {
  name: 'warp colors shift',
  min: 0,
  max: 10000,
  value: 0,
  type: 'number',
  dx: 'number of pics by which to shift the weft color pattern'
};
const shift_warp_systems = {
  name: 'warp system shift',
  min: 0,
  max: 10000,
  value: 0,
  type: 'number',
  dx: 'number of ends by which to shift the warp system order'
};
const shift_weft_systems = {
  name: 'weft system shift',
  min: 0,
  max: 10000,
  value: 0,
  type: 'number',
  dx: 'number of pics by which to shift the weft system order'
};
const params = [shift_warp_mat, shift_weft_mats, shift_warp_systems, shift_weft_systems];
//INLETS
const draft = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: 'draft',
  dx: 'the draft to which you would like to apply materials',
  num_drafts: 1
};
const materials = {
  name: 'systems & materials',
  type: 'static',
  value: null,
  uses: 'warp-and-weft-data',
  dx: 'a draft which has the materials and systems you would like to repeat across the pics and ends of the resulting draft',
  num_drafts: 1
};
const inlets = [draft, materials];
const perform = (op_params, op_inputs) => {
  const base_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const materials_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  const weft_mat_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const warp_mat_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const warp_sys_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  const weft_sys_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, op_params);
  if (base_drafts.length == 0 && materials_drafts.length == 0) return Promise.resolve([]);
  let active_draft = base_drafts.length > 0 ? base_drafts[0] : (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
    warps: 1,
    wefts: 1
  });
  let materials_draft = materials_drafts.length > 0 ? materials_drafts[0] : (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
    warps: 1,
    wefts: 1
  });
  let width = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(active_draft.drawdown);
  let height = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(active_draft.drawdown);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(materials_draft.colSystemMapping).resize(width).shift(warp_sys_shift);
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(materials_draft.colShuttleMapping).resize(width).shift(warp_mat_shift);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(materials_draft.rowSystemMapping).resize(height).shift(weft_sys_shift);
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(materials_draft.rowShuttleMapping).resize(height).shift(weft_mat_shift);
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.copyDraft)(active_draft);
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r);
  return name_list;
};
const apply_mats = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 77509:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/assignsystems/assignsystems.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assignsystems": () => (/* binding */ assignsystems)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "assign systems";
const old_names = [];
//PARAMS
const weft_pattern = {
  name: 'weft system pattern',
  type: 'string',
  value: 'a b c d e f g',
  regex: /\S+/,
  error: 'invalid entry, must use single lower-case letters separated by a space',
  dx: 'all entries must be single lower-case letters separated by a space'
};
const warp_system = {
  name: 'weft system pattern',
  type: 'string',
  value: '1 2 3',
  regex: /\S+/,
  error: 'invalid entry, must use single lower-case letters separated by a space',
  dx: 'all entries must be single lower-case letters separated by a space'
};
const assign_to_weft = {
  name: 'assign to weft',
  type: 'string',
  value: 'a',
  regex: /\S+/,
  error: 'invalid entry, must use one lower case letter',
  dx: 'all entries must be one single lower-case letter'
};
const assign_to_warp = {
  name: 'assign to warp',
  type: 'string',
  value: '1',
  regex: /\S+/,
  error: 'invalid entry, must use one number',
  dx: 'all entries must be one number'
};
const params = [weft_pattern, warp_system, assign_to_weft, assign_to_warp];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: 'draft',
  dx: "the draft that will be assigned to a given system",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  const weft_system_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  const warp_system_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  const weft_assignment_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(2, op_params);
  const warp_assignment_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(3, op_params);
  const weft_system_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(weft_system_string, op_params[0].param.regex);
  const warp_system_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(warp_system_string, op_params[0].param.regex);
  const weft_assignment_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(weft_assignment_string, op_params[0].param.regex);
  const warp_assignment_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(warp_assignment_string, op_params[0].param.regex);
  if (weft_system_string_split.length == 0 || warp_system_string_split.length == 0) {
    return Promise.resolve([]);
  }
  let weft_sys_seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  weft_system_string_split.forEach(id => {
    weft_sys_seq.push(id.charCodeAt(0) - 97);
  });
  let warp_sys_seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  warp_system_string_split.forEach(id => {
    warp_sys_seq.push(id.charCodeAt(0) - 49);
  });
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  if (drafts.length == 0 || weft_assignment_string_split.length == 0 || warp_assignment_string_split.length == 0) {
    let draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      wefts: weft_sys_seq.length(),
      warps: warp_sys_seq.length(),
      drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]
    });
    seq.import(draft.drawdown);
  } else {
    let weft_assn = weft_assignment_string_split.length == 0 ? 0 : weft_assignment_string_split[0].charCodeAt(0) - 97;
    let warp_assn = warp_assignment_string_split.length == 0 ? 0 : warp_assignment_string_split[0].charCodeAt(0) - 49;
    let draft = drafts[0];
    seq.import(draft.drawdown).mapToSystems([weft_assn], [warp_assn], weft_sys_seq, warp_sys_seq);
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(seq.export());
  d.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, warp_sys_seq.val(), 'col', 3);
  d.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, weft_sys_seq.val(), 'row', 3);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
  return "assign systems(" + name_list + ")";
};
const assignsystems = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 78878:
/*!**********************************************!*\
  !*** ./src/app/core/operations/atop/atop.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atop": () => (/* binding */ atop)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "atop";
const old_names = ['set atop', 'set atop, (a, b) => a'];
//PARAMS
const shift_ends = {
  name: 'shift ends',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const shift_pics = {
  name: 'shift pics',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const params = [shift_ends, shift_pics];
//INLETS
const draft_a = {
  name: 'a',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to overlay another onto',
  num_drafts: 1
};
const draft_b = {
  name: 'b',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to overlay onto the base',
  num_drafts: 1
};
const inlets = [draft_a, draft_b];
const perform = (op_params, op_inputs) => {
  let input_draft_a = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let input_draft_b = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let shift_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let shift_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (input_draft_a.length == 0 && input_draft_b.length == 0) return Promise.resolve([]);
  let draft_a = input_draft_a.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_a[0];
  let draft_b = input_draft_b.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_b[0];
  let height = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown) + shift_pics, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown));
  let width = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_a.drawdown));
  //offset draft b:
  let pattern_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < shift_pics) {
      seq.pushMultiple(2, width);
    } else if (i < shift_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown)) {
      seq.pushMultiple(2, shift_ends).pushRow(draft_b.drawdown[i - shift_pics]);
      let remaining = width - ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends);
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_b.pushWeftSequence(seq.val());
  }
  //make sure pattern a is the same size
  let pattern_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown)) {
      seq.pushRow(draft_a.drawdown[i]);
      let remaining = width - draft_a.drawdown[i].length;
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_a.pushWeftSequence(seq.val());
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_a.getWeft(i));
    let seq_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_b.getWeft(i));
    seq_a.computeFilter('up', seq_b);
    pattern.pushWeftSequence(seq_a.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, draft_a);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, draft_a);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'atop' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const atop = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 60160:
/*!******************************************************************!*\
  !*** ./src/app/core/operations/bindwarpfloats/bindwarpfloats.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindwarpfloats": () => (/* binding */ bindwarpfloats)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "bind warp floats";
const old_names = [];
//PARAMS
const max_float = {
  name: 'length',
  type: 'number',
  min: 1,
  max: 100,
  value: 10,
  dx: 'the maximum length of a warp float'
};
const params = [max_float];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to bind',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let max_float = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  if (input_draft == null) return Promise.resolve([]);
  let float_len = 0;
  let last = false;
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(input_draft.drawdown); j++) {
    float_len = 1;
    last = null;
    for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(input_draft.drawdown); i++) {
      if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) === null) {
        float_len = 1;
        last = null;
      } else if (last === null) {
        float_len = 1;
        last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
      } else if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) === last) {
        float_len++;
        if (float_len > max_float) {
          input_draft.drawdown[i][j] = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.toggleHeddle)(input_draft.drawdown[i][j]);
          last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
          float_len = 1;
        }
      } else if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) !== last) {
        float_len = 1;
        last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
      }
    }
  }
  return Promise.resolve([input_draft]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'bound warps(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const bindwarpfloats = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 79572:
/*!******************************************************************!*\
  !*** ./src/app/core/operations/bindweftfloats/bindweftfloats.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindweftfloats": () => (/* binding */ bindweftfloats)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "bind weft floats";
const old_names = [];
//PARAMS
const max_float = {
  name: 'max float length',
  type: 'number',
  min: 1,
  max: 1000000,
  value: 10,
  dx: 'the maximum length of a weft float'
};
const params = [max_float];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to bind',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let max_float = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  if (input_draft == null) return Promise.resolve([]);
  let float_len = 0;
  let last = false;
  for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(input_draft.drawdown); i++) {
    float_len = 1;
    last = null;
    for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(input_draft.drawdown); j++) {
      if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) === null) {
        float_len = 1;
        last = null;
      } else if (last === null) {
        float_len = 1;
        last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
      } else if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) === last) {
        float_len++;
        if (float_len > max_float) {
          input_draft.drawdown[i][j] = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.toggleHeddle)(input_draft.drawdown[i][j]);
          last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
          float_len = 1;
        }
      } else if ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j) !== last) {
        float_len = 1;
        last = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(input_draft.drawdown, i, j);
      }
    }
  }
  return Promise.resolve([input_draft]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'bound wefts(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const bindweftfloats = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 4599:
/*!**********************************************************!*\
  !*** ./src/app/core/operations/bwimagemap/bwimagemap.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bwimagemap": () => (/* binding */ bwimagemap)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "bwimagemap";
const old_names = [];
const dynamic_param_id = 0;
const dynamic_param_type = 'color';
//PARAMS
//the value on this param needs to hold all the image data
const file = {
  name: 'image file (.jpg or .png)',
  type: 'file',
  value: {
    id: '',
    data: null
  },
  dx: 'the file to upload'
};
const width = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 10000,
  value: 30,
  dx: 'resize the input image to the width specified'
};
const height = {
  name: 'pics',
  type: 'number',
  min: 1,
  max: 10000,
  value: 20,
  dx: 'resize the input image to the height specified'
};
const params = [file, width, height];
//INLETS
const inlets = [];
const perform = (op_params, op_inputs) => {
  const file_param = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  const res_w = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  const res_h = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(2, op_params);
  if (file_param.id == '' || file_param.data == null) {
    const d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      wefts: res_w,
      warps: res_h,
      drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
    });
    return Promise.resolve([d]);
  }
  const data = file_param.data;
  const color_to_drafts = data.colors_to_bw.map((color, ndx) => {
    if (color.black) {
      if (op_inputs.findIndex(input => input.inlet_id == 0) !== -1) return {
        color: color.hex,
        draft: op_inputs[0].drafts[0]
      };else return {
        color: color.hex,
        draft: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
          warps: 1,
          wefts: 1,
          drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true)]]
        })
      };
    } else {
      if (op_inputs.findIndex(input => input.inlet_id == 1) !== -1) return {
        color: color.hex,
        draft: op_inputs[1].drafts[0]
      };else return {
        color: color.hex,
        draft: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
          warps: 1,
          wefts: 1,
          drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
        })
      };
    }
  });
  const pattern = [];
  for (let i = 0; i < res_h; i++) {
    pattern.push([]);
    for (let j = 0; j < res_w; j++) {
      const i_ratio = data.height / res_h;
      const j_ratio = data.width / res_w;
      const map_i = Math.floor(i * i_ratio);
      const map_j = Math.floor(j * j_ratio);
      const color_ndx = data.image_map[map_i][map_j]; //
      const color_draft = color_to_drafts[color_ndx].draft;
      if (color_draft === null) pattern[i].push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false));else {
        const draft_i = i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(color_draft.drawdown);
        const draft_j = j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(color_draft.drawdown);
        pattern[i].push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(color_draft.drawdown, draft_i, draft_j)));
      }
    }
  }
  const draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern);
  return Promise.resolve([draft]);
};
const generateName = (param_vals, op_inputs) => {
  const file_param = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  if (file_param.id == '' || file_param.data == null) {
    return 'bwimage';
  } else {
    return file_param.data.name;
  }
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  const new_inlets = ['#000000', '#ffffff'];
  return new_inlets;
};
const bwimagemap = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 9525:
/*!************************************************!*\
  !*** ./src/app/core/operations/chaos/chaos.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "chaos": () => (/* binding */ chaos)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "chaos";
const old_names = [];
//PARAMS
const warp_repeats = {
  name: 'warp-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the number of times to repeat this time across the width'
};
const weft_repeats = {
  name: 'weft-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the number of times to repeat this time across the length'
};
const params = [warp_repeats, weft_repeats];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to tile in the chaos sequence',
  uses: 'draft',
  num_drafts: -1
};
const inlets = [draft_inlet];
const perform = /*#__PURE__*/function () {
  var _ref = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (op_params, op_inputs) {
    let input_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
    let warp_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
    let weft_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
    if (input_drafts.length == 0) return Promise.resolve([]);
    const all_warps = input_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(el.drawdown)).filter(el => el > 0);
    const total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(all_warps);
    const all_wefts = input_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(el.drawdown)).filter(el => el > 0);
    const total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(all_wefts);
    const num_inputs = input_drafts.length;
    const draft_indexing_fns = [];
    //randomly grab one of the inputs
    let ndx = Math.floor(Math.random() * num_inputs);
    for (let i = 0; i < weft_rep; i++) {
      for (let j = 0; j < warp_rep; j++) {
        const x_flip = Math.random() < 0.5 ? false : true;
        const y_flip = Math.random() < 0.5 ? false : true;
        draft_indexing_fns.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.flipDraft)(input_drafts[ndx], x_flip, y_flip));
        ndx = Math.floor(Math.random() * num_inputs);
      }
    }
    return Promise.all(draft_indexing_fns).then(all_flips => {
      const pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
      for (let di = 0; di < weft_rep; di++) {
        const drafts_on_row = all_flips.filter((el, ndx) => ndx >= warp_rep * di && ndx < warp_rep * di + warp_rep);
        for (let i = 0; i < total_wefts; i++) {
          let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
          drafts_on_row.forEach(draft_on_row => {
            let expanded = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(draft_on_row.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_on_row.drawdown)]).resize(total_warps);
            seq.pushRow(expanded.val());
          });
          pattern.pushWeftSequence(seq.val());
        }
      }
      let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
      d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, input_drafts[0]);
      d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, input_drafts[0]);
      return Promise.resolve([d]);
    });
  });
  return function perform(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'chaos(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const chaos = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 52669:
/*!************************************************!*\
  !*** ./src/app/core/operations/clear/clear.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clear": () => (/* binding */ clear)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "clear";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const draft_inlet = {
  name: 'input draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to clear',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
    wefts: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(input_draft.drawdown),
    warps: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(input_draft.drawdown),
    drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]
  });
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'clear(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const clear = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 19942:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/combinatorics/combinatorics.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combinatorics": () => (/* binding */ combinatorics)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "combos";
const old_names = [];
//PARAMS
const ends = {
  name: 'size',
  type: 'number',
  min: 2,
  max: 4,
  value: 3,
  dx: 'the size of the structure'
};
const selection = {
  name: 'selection',
  type: 'number',
  min: 1,
  max: 22874,
  value: 1,
  dx: 'the id of the generated structure you would like to view'
};
const download = {
  name: 'download all',
  type: 'boolean',
  falsestate: '',
  truestate: 'downloading',
  value: 0,
  dx: "when this is set to true, it will trigger download of an image of the whole set everytime it recomputes, this may result in multiple downloads"
};
const params = [ends, selection, download];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const size = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let selection = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, param_vals);
  const download = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(2, param_vals);
  //adjust by one to convert user input to the array index of the structure
  selection -= 1;
  //for larger set sizes, you must split up the download into multiple files
  const divisor = size - 3 > 0 ? Math.pow(2, size - 3) : 1;
  return getSet(size, size).then(alldrafts => {
    if (download) {
      for (let set_id = 0; set_id < divisor; set_id++) {
        const cc = 10;
        const set_data = getDrafts(set_id, divisor);
        let b = document.createElement('canvas');
        let context = b.getContext('2d');
        b.width = cc * (size + 5) * 20;
        b.height = Math.ceil(set_data.length / 20) * ((5 + size) * cc);
        context.fillStyle = "white";
        context.fillRect(0, 0, b.width, b.height);
        set_data.forEach((set, ndx) => {
          const top = Math.floor(ndx / 20) * ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(set.draft.drawdown) + 5) * cc + 10;
          const left = ndx % 20 * ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(set.draft.drawdown) + 5) * cc + 10;
          context.font = "8px Arial";
          context.fillStyle = "#000000";
          context.fillText((set.id + 1).toString(), left, top - 2, size * cc);
          context.strokeRect(left, top, size * cc, size * cc);
          for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(set.draft.drawdown); i++) {
            for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(set.draft.drawdown); j++) {
              drawCell(context, set.draft, cc, i, j, top, left);
            }
          }
        });
        // console.log("b", b);
        const a = document.createElement('a');
        a.href = b.toDataURL("image/jpg");
        a.download = "allvalid_" + size + "x" + size + "_drafts_" + set_id + ".jpg";
        a.click();
      }
    }
    return Promise.resolve([getDraft(selection).draft]);
  });
};
const generateName = (param_vals, op_inputs) => {
  const selection = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, param_vals);
  const size = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  return size + 'x' + size + '-' + selection;
};
const combinatorics = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};
let cur_set = {
  warps: 0,
  wefts: 0
};
let all_possible_drafts = [];
let min_interlacements = 1;
function drawCell(cx, draft, cell_size, i, j, top, left) {
  let is_up = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.isUp)(draft.drawdown, i, j);
  let color = "#ffffff";
  if (is_up) {
    color = '#000000';
  } else {
    color = '#ffffff';
  }
  cx.fillStyle = color;
  cx.strokeStyle = '#000000';
  //hack, draw upside down to account for later flip
  i = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown) - 1 - i;
  cx.strokeRect(left + j * cell_size, top + i * cell_size, cell_size, cell_size);
  cx.fillRect(left + j * cell_size, top + i * cell_size, cell_size, cell_size);
}
/**
 * returns all the values from the valid set that match the sequence
 * @param seq
 * @param valid
 */
function filterForSeq(seq, valid) {
  let filtered = valid.slice();
  seq.forEach((val, ndx) => {
    filtered = filtered.filter(set => set[ndx] == val);
  });
  return filtered;
}
/**
 * prints the tree for verification
 * @param tree
 */
function printTree(tree) {
  console.log("***PRINT TREE***");
  printNodes([tree.top]);
}
function printNodes(nodes) {
  nodes.forEach(node => {
    // console.log("Node: ", this.traceSequenceViaParents(node), node.set);
    printNodes(node.children);
  });
}
/**
 * given a node, it creates the sequence (e.g. 0110) that it represnts by calling each parent
 * @param node a tree node from which to start
 * @returns the sequence reprsented by this node.
 */
function traceSequenceViaParents(node) {
  let seq = [];
  while (node.parent !== null) {
    seq = [node.value].concat(seq);
    node = node.parent;
  }
  return seq;
}
/**
 * converts the valid set into a tree, where the root/top node branches between 0, 1 at each child.
 * therefore, every valid set traverses the tree. Each treenode stores the valid sets at its location
 * allowing for each row add to be a lookup operation
 * @param valid the valid set of combinations
 * @returns a Combination Tree accounting for every valid set
 */
function createTreeFromValidSet(valid) {
  let tree = {
    set: valid.slice(),
    top: {
      parent: null,
      value: -1,
      set: valid.slice(),
      children: []
    }
  };
  valid.forEach(valid_set => {
    let node = tree.top;
    valid_set.forEach(val => {
      const found = node.children.filter(el => el.value === val);
      if (found.length == 0) {
        const combo_node = {
          parent: node,
          value: val,
          set: [valid_set],
          children: []
        };
        node.children.push(combo_node);
        node = combo_node;
      } else {
        node = found[0];
        node.set.push(valid_set);
      }
    });
  });
  return Promise.resolve(tree);
}
/**
 * initializes a set of all possible valid drafts of a given dimension
 * Right now must be square and have a minimum of 1 interlacement
 * @param wefts the number of wefts of the structure
 * @param warps the number of warps in the structure
 * @returns a promise containing the array of all drafts generated
 */
function initSet(wefts, warps) {
  cur_set = {
    warps: 0,
    wefts: 0
  };
  all_possible_drafts = [];
  return getAllPossible(warps - 1).then(possible => {
    return makeValid(possible);
  }).then(valid => {
    return createTreeFromValidSet(valid);
  }).then(tree => {
    printTree(tree);
    let drafts = [];
    let opts = getOptions([], tree);
    opts.forEach(opt => {
      const draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
        warps: warps,
        wefts: wefts
      });
      for (let i = 0; i < wefts; i++) {
        for (let j = 0; j < warps; j++) {
          if (i == 0) draft.drawdown[i][j] = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(draft.drawdown[i][j], opt[j] == 0 ? false : true);
        }
      }
      drafts = drafts.concat([draft]);
    });
    //drafts.forEach(el => utilInstance.printDraft(el));
    const its = wefts * 2 - 1;
    for (let i = 1; i <= its; i++) {
      drafts = expandDrafts(drafts, tree, i, wefts);
      //drafts.forEach(el => utilInstance.printDraft(el));
    }
    //drafts.forEach(el => utilInstance.printDraft(el));
    all_possible_drafts = drafts.map((el, ndx) => {
      return {
        draft: el,
        id: ndx
      };
    });
    cur_set.wefts = wefts;
    cur_set.warps = warps;
    return Promise.resolve(all_possible_drafts);
  });
}
/**
 * gets the set of a defined size. If that set is already in memory, it returns it. If not, it generates it.
 * @param warps the warps to check
 * @param wefts the wefts to check
 * @returns a boolean
 */
function getSet(warps, wefts) {
  if (warps === cur_set.warps && wefts === cur_set.wefts) return Promise.resolve(all_possible_drafts);else return initSet(warps, wefts);
}
/**
 * gets the draft at location NDX from the current set of generated drafts
 * @param ndx the index to return
 * @returns returns the draft at the index, or an empty draft if so
 */
function getDraft(ndx) {
  const found = all_possible_drafts.find(el => el.id == ndx);
  if (found == undefined) return {
    draft: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      wefts: 1,
      warps: 1
    }),
    id: -1
  };else return found;
}
/**
 * gets the draft at location NDX from the current set of generated drafts
 * @param ndx the index to return
 * @returns returns the draft at the index, or an empty draft if so
 */
function getDrafts(ndx, divisor) {
  const set_size = Math.floor(all_possible_drafts.length / divisor);
  const begin = ndx * set_size;
  const stop = begin + set_size;
  const drafts = all_possible_drafts.filter(el => el.id >= begin && el.id <= stop);
  return drafts;
}
/**
 * gets a list of possible drafts by adding a single row or column
 * @param vsd an array of drafts and associated valid sets
 * @param ndx the index in the adding of row columns
 * @param wefts the size of the structure
 * @returns an (expanded)array of drafts and associated valid sets
 */
function expandDrafts(drafts, tree, ndx, wefts) {
  let all_drafts = [];
  drafts.forEach(draft => {
    if (ndx % 2 == 0) all_drafts = all_drafts.concat(addRow(draft, tree, Math.floor(ndx / 2), wefts));
    if (ndx % 2 == 1) all_drafts = all_drafts.concat(addCol(draft, tree, Math.floor(ndx / 2), wefts));
  });
  //console.log("returning from all drafts", all_drafts.length);
  return all_drafts;
}
/**
 * adds a row to the set of drafts added
 * @param vsd
 * @param i
 * @param n
 * @returns
 */
function addRow(draft, tree, i, n) {
  let expanded_drafts = [];
  //console.log("adding rows to ", vsd);
  let set = [];
  for (let j = 0; j < i; j++) {
    set.push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(draft.drawdown[i][j]) ? 1 : 0);
  }
  //console.log("Generated set ", set, );
  let opts = getOptions(set, tree);
  //console.log("generated options", opts);
  opts.forEach(opt => {
    let pattern = [];
    pattern = draft.drawdown.slice();
    //add to the draft and push
    for (let j = 0; j < n; j++) {
      pattern[i][j] = opt[j] == 0 ? (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false) : (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true);
    }
    expanded_drafts.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      warps: n,
      wefts: n,
      pattern: pattern.slice()
    }));
  });
  return expanded_drafts;
}
function addCol(draft, tree, j, n) {
  //console.log("adding cols to ", vsd);
  let expanded_drafts = [];
  let set = [];
  for (let i = 0; i < j + 1; i++) {
    set.push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(draft.drawdown[i][j]) ? 1 : 0);
  }
  let opts = getOptions(set, tree);
  //console.log("generated options for set", set, opts);
  opts.forEach(opt => {
    let pattern = [];
    pattern = draft.drawdown.slice();
    //add to the draft and push
    for (let i = 0; i < n; i++) {
      pattern[i][j] = opt[i] == 0 ? (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false) : (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true);
    }
    expanded_drafts.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      warps: n,
      wefts: n,
      pattern: pattern.slice()
    }));
  });
  //console.log("****returning ****");
  // expanded_drafts.forEach(el => utilInstance.printDraft(el.draft))
  return expanded_drafts;
}
/**
 * uses the input sequence to identify the node of possible children
 * @param seq the input sequence to locate
 * @param tree the tree to search
 * @returns
 */
function getOptions(seq, tree) {
  let children = tree.top.children.slice();
  if (seq.length == 0) return tree.set.slice();
  //get to the node we need
  let node = null;
  seq.forEach(val => {
    node = children.find(el => el.value == val);
    if (node === undefined) children = [];else children = node.children.slice();
  });
  if (node === undefined) return [];else return node.set.slice();
}
/**
 * if there is all zeros or all ones, it adds a contrasting bit at the end, or both bits
 * @param all_possible
 * @returns
 */
function makeValid(all_possible) {
  const all_valid = [];
  for (let i = 0; i < all_possible.length; i++) {
    if (all_possible[i].find(el => el == 0) === undefined) {
      all_valid.push(all_possible[i].concat([0]));
    } else if (all_possible[i].find(el => el == 1) === undefined) {
      all_valid.push(all_possible[i].concat([1]));
    } else {
      all_valid.push(all_possible[i].concat([0]));
      all_valid.push(all_possible[i].concat([1]));
    }
  }
  return Promise.resolve(all_valid);
}
/**
 * generates a list of all valid sums with n factors that total t.
 * all elements > 0
 * @param n
 */
function getAllPossible(n) {
  let all_combos = [];
  for (let i = 0; i < n; i++) {
    all_combos = addBit(all_combos);
  }
  return Promise.resolve(all_combos);
}
function addBit(set) {
  const expanded_set = [];
  if (set.length == 0) {
    expanded_set.push([0]);
    expanded_set.push([1]);
  } else {
    for (let i = 0; i < set.length; i++) {
      expanded_set.push(set[i].concat([0]));
      expanded_set.push(set[i].concat([1]));
    }
  }
  return expanded_set;
}

/***/ }),

/***/ 37457:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/complex_twill/complex_twill.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complextwill": () => (/* binding */ complextwill)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "complextwill";
const old_names = [];
//PARAMS
const string_input = {
  name: 'pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '2 2 3 3',
  error: '',
  dx: 'the under over pattern of this twill'
};
const sz = {
  name: 'S/Z',
  type: 'boolean',
  falsestate: 'S',
  truestate: 'Z',
  value: 0,
  dx: ''
};
const params = [string_input, sz];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const input_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const sz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const input_array = input_string.split(' ').map(el => parseInt(el));
  let size = input_array.reduce((acc, val) => {
    return val + acc;
  }, 0);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let under = true;
  input_array.forEach(input => {
    first_row.pushMultiple(under, input);
    under = !under;
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let shift_dir = sz ? -1 : 1;
  for (let i = 0; i < size; i++) {
    pattern.pushWeftSequence(first_row.shift(shift_dir).val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'complex twill';
};
const complextwill = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 55421:
/*!**********************************************!*\
  !*** ./src/app/core/operations/crop/crop.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crop": () => (/* binding */ crop)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "crop";
const old_names = [];
//PARAMS
const starting_ends = {
  name: 'ends from start',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: 'number of pics from the origin to start the cut'
};
const staring_pics = {
  name: 'pics from start',
  min: 0,
  max: 10000,
  value: 0,
  type: 'number',
  dx: 'number of ends from the origin to start the cut'
};
const width = {
  name: 'width',
  type: 'number',
  min: 1,
  max: 10000,
  value: 10,
  dx: 'total width of cutting box'
};
const height = {
  name: 'height',
  type: 'number',
  min: 1,
  max: 10000,
  value: 10,
  dx: 'height of the cutting box'
};
const params = [starting_ends, staring_pics, width, height];
//INLETS
const draft = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to crop',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft];
const perform = (op_params, op_inputs) => {
  const draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  const left = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const top = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const width = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  const height = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, op_params);
  if (draft == null) return Promise.resolve([]);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(draft.colSystemMapping).shift(left).resize(width);
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(draft.colShuttleMapping).shift(left).resize(width);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(draft.rowSystemMapping).shift(top).resize(height);
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(draft.rowShuttleMapping).shift(top).resize(height);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  //start with starting pics
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    let adj_i = i + top;
    if (adj_i >= (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown)) {
      seq.pushMultiple(2, width);
    } else {
      let row = draft.drawdown[adj_i].length > left ? draft.drawdown[adj_i].slice(left) : [];
      seq.pushRow(row);
      let diff = width - row.length;
      if (diff > 0) seq.pushMultiple(2, diff);
      if (diff < 0) {
        seq.resize(width);
      }
    }
    pattern.pushWeftSequence(seq.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r);
  return 'crop(' + name_list + ")";
};
const crop = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 30715:
/*!**************************************************!*\
  !*** ./src/app/core/operations/cutout/cutout.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cutout": () => (/* binding */ cutout)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "cutout";
const old_names = [];
//PARAMS
const shift_ends = {
  name: 'shift ends',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const shift_pics = {
  name: 'shift pics',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const params = [shift_ends, shift_pics];
//INLETS
const draft_a = {
  name: 'a',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to cut out',
  num_drafts: 1
};
const draft_b = {
  name: 'b',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the pattern you would like to use to describe the cutting',
  num_drafts: 1
};
const inlets = [draft_a, draft_b];
const perform = (op_params, op_inputs) => {
  let input_draft_a = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let input_draft_b = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let shift_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let shift_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (input_draft_a.length == 0 && input_draft_b.length == 0) return Promise.resolve([]);
  let draft_a = input_draft_a.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_a[0];
  let draft_b = input_draft_b.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_b[0];
  let height = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown) + shift_pics, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown));
  let width = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_a.drawdown));
  //offset draft b:
  let pattern_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < shift_pics) {
      seq.pushMultiple(2, width);
    } else if (i < shift_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown)) {
      seq.pushMultiple(2, shift_ends).pushRow(draft_b.drawdown[i - shift_pics]);
      let remaining = width - ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends);
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_b.pushWeftSequence(seq.val());
  }
  //make sure pattern a is the same size
  let pattern_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown)) {
      seq.pushRow(draft_a.drawdown[i]);
      let remaining = width - draft_a.drawdown[i].length;
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_a.pushWeftSequence(seq.val());
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_a.getWeft(i));
    let seq_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_b.getWeft(i));
    seq_a.computeFilter('cut', seq_b);
    pattern.pushWeftSequence(seq_a.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, draft_a);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, draft_a);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'cut' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const cutout = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 69950:
/*!************************************************************!*\
  !*** ./src/app/core/operations/deinterlace/deinterlace.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deinterlace": () => (/* binding */ deinterlace)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "deinterlace";
const old_names = [];
//PARAMS
const split_by = {
  name: 'factor',
  type: 'number',
  min: 2,
  max: 500,
  value: 2,
  dx: "this number determines how many times the input draft will be divided"
};
const params = [split_by];
//INLETS
const draft_inlet = {
  name: 'drafts',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to split apart',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let factor = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let patterns = [];
  let drafts = [];
  let row_shuttle = [];
  let row_system = [];
  for (let i = 0; i < factor; i++) {
    patterns.push(new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD());
    row_shuttle.push([]);
    row_system.push([]);
  }
  for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(input_draft.drawdown); i++) {
    let selected_draft_id = i % factor;
    let row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD([]).import(input_draft.drawdown[i]);
    patterns[selected_draft_id].pushWeftSequence(row.val());
    row_shuttle[selected_draft_id].push(input_draft.rowShuttleMapping[i]);
    row_system[selected_draft_id].push(input_draft.rowSystemMapping[i]);
  }
  for (let i = 0; i < factor; i++) {
    let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(patterns[i].export());
    d.rowShuttleMapping = row_shuttle[i].slice();
    d.rowSystemMapping = row_system[i].slice();
    d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
    drafts.push(d);
  }
  return Promise.resolve(drafts);
};
const generateName = (param_vals, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  return "deinterlaced(" + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getDraftName)(input_draft) + ")";
};
const deinterlace = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 3064:
/*!**********************************************!*\
  !*** ./src/app/core/operations/diff/diff.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diff": () => (/* binding */ diff)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "diff";
const old_names = ['knockout'];
//PARAMS
const shift_ends = {
  name: 'shift ends',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const shift_pics = {
  name: 'shift pics',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const params = [shift_ends, shift_pics];
//INLETS
const draft_a = {
  name: 'a',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'one draft you would like to compare',
  num_drafts: 1
};
const draft_b = {
  name: 'b',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'one draft you would like to compare',
  num_drafts: 1
};
const inlets = [draft_a, draft_b];
const perform = (op_params, op_inputs) => {
  let input_draft_a = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let input_draft_b = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let shift_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let shift_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (input_draft_a.length == 0 && input_draft_b.length == 0) return Promise.resolve([]);
  let draft_a = input_draft_a.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_a[0];
  let draft_b = input_draft_b.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_b[0];
  let height = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown) + shift_pics, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown));
  let width = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_a.drawdown));
  //offset draft b:
  let pattern_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < shift_pics) {
      seq.pushMultiple(2, width);
    } else if (i < shift_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown)) {
      seq.pushMultiple(2, shift_ends).pushRow(draft_b.drawdown[i - shift_pics]);
      let remaining = width - ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends);
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_b.pushWeftSequence(seq.val());
  }
  //make sure pattern a is the same size
  let pattern_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown)) {
      seq.pushRow(draft_a.drawdown[i]);
      let remaining = width - draft_a.drawdown[i].length;
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_a.pushWeftSequence(seq.val());
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_a.getWeft(i));
    let seq_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_b.getWeft(i));
    seq_a.computeFilter('neq', seq_b);
    pattern.pushWeftSequence(seq_a.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, draft_a);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, draft_a);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'diff' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const diff = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 59332:
/*!******************************************************************!*\
  !*** ./src/app/core/operations/directdrawdown/directdrawdown.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "directdrawdown": () => (/* binding */ directdrawdown)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/looms */ 58364);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/operations */ 41337);




const name = "directdrawdown";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const threading = {
  name: 'threading',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to use as threading',
  num_drafts: 1
};
const liftplan = {
  name: 'lift plan',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to use as tieup',
  num_drafts: 1
};
const inlets = [threading, liftplan];
const perform = (op_params, op_inputs) => {
  let threading = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 0);
  let lift_plan = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 1);
  if (threading.length == 0 || lift_plan.length == 0) return Promise.resolve([]);
  const threading_draft = threading[0];
  const lift_draft = lift_plan[0];
  const threading_list = [];
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(threading_draft.drawdown); j++) {
    const col = threading_draft.drawdown.reduce((acc, row, ndx) => {
      acc[ndx] = row[j];
      return acc;
    }, []);
    threading_list[j] = col.findIndex(cell => (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell));
  }
  const treadling_list = lift_draft.drawdown.map(row => {
    let edited_row = row.reduce((acc, cell, ndx) => {
      if ((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) === true) acc.push(ndx);
      return acc;
    }, []);
    return edited_row;
  });
  let tieup = [];
  for (let i = 0; i < 100; i++) {
    tieup.push([]);
    for (let j = 0; j < 100; j++) {
      if (i == j) tieup[i].push(true);else tieup[i].push(false);
    }
  }
  let draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
    warps: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(threading_draft.drawdown),
    wefts: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(lift_draft.drawdown)
  });
  const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.getLoomUtilByType)('direct');
  const loom = {
    threading: threading_list,
    tieup: tieup,
    treadling: treadling_list
  };
  return utils.computeDrawdownFromLoom(loom, 0).then(drawdown => {
    draft.drawdown = drawdown;
    draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(draft, threading_draft);
    draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(draft, lift_draft);
    return Promise.resolve([draft]);
  });
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'drawdown(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.parseDraftNames)(drafts) + ")";
};
const directdrawdown = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 96987:
/*!******************************************************!*\
  !*** ./src/app/core/operations/drawdown/drawdown.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "drawdown": () => (/* binding */ drawdown)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/looms */ 58364);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/operations */ 41337);




const name = "drawdown";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const threading = {
  name: 'threading',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to use as threading',
  num_drafts: 1
};
const tieup = {
  name: 'tieup',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to use as tieup',
  num_drafts: 1
};
const treadling = {
  name: 'treadling',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to use as treadling',
  num_drafts: 1
};
const inlets = [threading, tieup, treadling];
const perform = (op_params, op_inputs) => {
  let threading = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 0);
  let tieup = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 1);
  let treadling = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 2);
  if (threading.length == 0 || tieup.length == 0 || treadling.length == 0) return Promise.resolve([]);
  const threading_draft = threading[0];
  const tieup_draft = tieup[0];
  const treadling_draft = treadling[0];
  const threading_list = [];
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(threading_draft.drawdown); j++) {
    const col = threading_draft.drawdown.reduce((acc, row, ndx) => {
      acc[ndx] = row[j];
      return acc;
    }, []);
    threading_list[j] = col.findIndex(cell => (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell));
  }
  const treadling_list = treadling_draft.drawdown.map(row => [row.findIndex(cell => (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell))]);
  const tieup_list = tieup_draft.drawdown.map(row => {
    return row.map(cell => (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell));
  });
  let draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
    warps: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(threading_draft.drawdown),
    wefts: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(treadling_draft.drawdown)
  });
  const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.getLoomUtilByType)('frame');
  const loom = {
    threading: threading_list,
    tieup: tieup_list,
    treadling: treadling_list
  };
  return utils.computeDrawdownFromLoom(loom, 0).then(drawdown => {
    draft.drawdown = drawdown;
    draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(draft, threading_draft);
    draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(draft, treadling_draft);
    return Promise.resolve([draft]);
  });
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'drawdown(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_3__.parseDraftNames)(drafts) + ")";
};
const drawdown = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 91843:
/*!************************************************************!*\
  !*** ./src/app/core/operations/erase_blank/erase_blank.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erase_blank": () => (/* binding */ erase_blank)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "erase blank rows";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to erase blank rows from',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let weft_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  input_draft.drawdown.forEach((row, i) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row);
    if (!_model_util__WEBPACK_IMPORTED_MODULE_3__["default"].hasOnlyUnset(row)) {
      pattern.pushWeftSequence(seq.val());
      weft_sys.push(input_draft.rowSystemMapping[i]);
      weft_mats.push(input_draft.rowShuttleMapping[i]);
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.rowShuttleMapping = weft_mats.val();
  d.rowSystemMapping = weft_sys.val();
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'eraseblank(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const erase_blank = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 52066:
/*!**********************************************!*\
  !*** ./src/app/core/operations/fill/fill.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "fill";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const pattern = {
  name: 'pattern',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'a draft you would like to fill',
  num_drafts: 1
};
const black_cells = {
  name: 'black cell structure',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the structure you would like to repeat in in the black regions of the base draft',
  num_drafts: 1
};
const white_cells = {
  name: 'white cell structure',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the structure you would like to repeat in in the white regions of the base draft',
  num_drafts: 1
};
const inlets = [pattern, black_cells, white_cells];
const perform = (op_params, op_inputs) => {
  let to_fills = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let black_cells = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let white_cells = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 2);
  if (to_fills.length == 0) return Promise.resolve([]);
  let black_cell = black_cells.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true)]]) : black_cells[0];
  let white_cell = white_cells.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]) : white_cells[0];
  let to_fill = to_fills[0];
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  to_fill.drawdown.forEach((row, i) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    row.forEach((cell, j) => {
      if (cell.is_set) {
        if (cell.is_up) {
          seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(black_cell.drawdown, i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(black_cell.drawdown), j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(black_cell.drawdown)));
        } else {
          seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(white_cell.drawdown, i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(white_cell.drawdown), j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(white_cell.drawdown)));
        }
      } else {
        seq.push(2);
      }
    });
    pattern.pushWeftSequence(seq.val());
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, to_fill);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, to_fill);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'fill(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const fill = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 12670:
/*!**********************************************!*\
  !*** ./src/app/core/operations/flip/flip.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flip": () => (/* binding */ flip)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "flip";
const old_names = [];
//PARAMS
const horiz = {
  name: 'horiz',
  type: 'boolean',
  falsestate: 'no',
  truestate: 'yes',
  value: 0,
  dx: ''
};
const vert = {
  name: 'vert',
  type: 'boolean',
  falsestate: "no",
  truestate: "yes",
  value: 0,
  dx: ''
};
const params = [horiz, vert];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to flip horizontally',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.rowSystemMapping);
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.rowShuttleMapping);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.colSystemMapping);
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.colShuttleMapping);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let horiz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let vert = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  if (horiz) {
    warp_systems.reverse();
    warp_mats.reverse();
    input_draft.drawdown.forEach(row => {
      let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse().val();
      pattern.pushWeftSequence(seq);
    });
  } else {
    pattern.import(input_draft.drawdown);
  }
  let next_pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  if (vert) {
    weft_systems.reverse();
    weft_materials.reverse();
    for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input_draft.drawdown); j++) {
      let col = pattern.getWarp(j);
      let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).reverse();
      next_pattern.pushWarpSequence(seq.val());
    }
  } else {
    next_pattern.import(pattern.export());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(next_pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'flip(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const flip = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 45733:
/*!************************************************!*\
  !*** ./src/app/core/operations/flipx/flipx.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipx": () => (/* binding */ flipx)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "flip horiz";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to flip horizontally',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse().val();
    pattern.pushWeftSequence(seq);
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'flipx(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const flipx = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 76817:
/*!************************************************!*\
  !*** ./src/app/core/operations/flipy/flipy.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipy": () => (/* binding */ flipy)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "flip vert";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to flip vertically',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input_draft.drawdown); j++) {
    const col = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(input_draft.drawdown, j);
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).reverse().val();
    pattern.pushWarpSequence(seq);
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'flipy(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const flipy = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 48893:
/*!******************************************************!*\
  !*** ./src/app/core/operations/imagemap/imagemap.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imagemap": () => (/* binding */ imagemap)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "imagemap";
const old_names = [];
const dynamic_param_id = 0;
const dynamic_param_type = 'color';
//PARAMS
//the value on this param needs to hold all the image data
const file = {
  name: 'image file (.jpg or .png)',
  type: 'file',
  value: {
    id: '',
    data: null
  },
  dx: 'the file to upload'
};
const width = {
  name: 'draft width',
  type: 'number',
  min: 1,
  max: 10000,
  value: 30,
  dx: 'resize the input image to the width specified'
};
const height = {
  name: 'draft height',
  type: 'number',
  min: 1,
  max: 10000,
  value: 20,
  dx: 'resize the input image to the height specified'
};
const params = [file, width, height];
//INLETS
const inlets = [];
const perform = (op_params, op_inputs) => {
  const file_param = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  const res_w = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  const res_h = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(2, op_params);
  if (file_param.id == '' || file_param.data == null) {
    const d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
      wefts: res_w,
      warps: res_h,
      drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
    });
    return Promise.resolve([d]);
  }
  const data = file_param.data;
  const color_to_drafts = data.colors.map((color, ndx) => {
    const child_of_color = op_inputs.find(input => input.params.findIndex(param => param === color) !== -1);
    if (child_of_color === undefined) return {
      color: color,
      draft: null
    };else return {
      color: color,
      draft: child_of_color.drafts[0]
    };
  });
  const pattern = [];
  for (let i = 0; i < res_h; i++) {
    pattern.push([]);
    for (let j = 0; j < res_w; j++) {
      const i_ratio = data.height / res_h;
      const j_ratio = data.width / res_w;
      const map_i = Math.floor(i * i_ratio);
      const map_j = Math.floor(j * j_ratio);
      const color_ndx = data.image_map[map_i][map_j]; //
      const color_draft = color_to_drafts[color_ndx].draft;
      if (color_draft === null) pattern[i].push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false));else {
        const draft_i = i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(color_draft.drawdown);
        const draft_j = j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(color_draft.drawdown);
        pattern[i].push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getHeddle)(color_draft.drawdown, draft_i, draft_j)));
      }
    }
  }
  const draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern);
  return Promise.resolve([draft]);
};
const generateName = (param_vals, op_inputs) => {
  // const image_data = getImageData(getOpParamValById(0, param_vals));
  const file_param = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  if (file_param.id == '' || file_param.data == null) {
    return 'image';
  } else {
    return file_param.data.name;
  }
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  if (changed_param_id == 0) {
    const id_and_data = param_val;
    if (id_and_data.id !== '') {
      inlets = [];
      id_and_data.data.colors.forEach(hex => {
        inlets.push(hex);
      });
    }
    return inlets;
  }
};
const imagemap = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 34220:
/*!********************************************************!*\
  !*** ./src/app/core/operations/interlace/interlace.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interlace": () => (/* binding */ interlace)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "interlace";
const old_names = [];
//PARAMS
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: "controls if the inputs are intelaced in the exact format sumitted or repeated to fill evenly"
};
const params = [repeats];
//INLETS
const draft_inlet = {
  name: 'drafts',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to interlace',
  num_drafts: -1
};
const warp_systems = {
  name: 'warp system map',
  type: 'static',
  value: null,
  uses: "warp-data",
  dx: 'if you would like to specify the warp system or materials, you can do so by adding a draft here',
  num_drafts: 1
};
const inlets = [draft_inlet, warp_systems];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let systems = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (drafts.length == 0) return Promise.resolve([]);
  let total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(el.drawdown))) * drafts.length;
  let total_warps;
  if (repeat) {
    total_warps = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)));
  } else {
    total_warps = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].getMaxWarps(drafts);
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let weft_systems = [];
  let weft_shuttles = [];
  for (let i = 0; i < total_wefts; i++) {
    let selected_draft_id = i % drafts.length;
    let within_draft_i = Math.floor(i / drafts.length);
    let selected_draft = drafts[selected_draft_id];
    if (repeat || within_draft_i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(selected_draft.drawdown)) {
      let selected_draft = drafts[selected_draft_id];
      let modulated_id = within_draft_i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(selected_draft.drawdown);
      let row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(selected_draft.drawdown[modulated_id]);
      if (repeat) row.resize(total_warps);else row.padTo(total_warps);
      pattern.pushWeftSequence(row.val());
      weft_systems.push(selected_draft.rowSystemMapping[modulated_id]);
      weft_shuttles.push(selected_draft.rowShuttleMapping[modulated_id]);
    }
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.rowShuttleMapping = weft_shuttles;
  d.rowSystemMapping = weft_systems;
  if (systems.length > 0) d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, systems[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts);
  return "interlace(" + name_list + ")";
};
const interlace = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 78196:
/*!********************************************************************!*\
  !*** ./src/app/core/operations/interlace_warps/interlace_warps.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interlacewarps": () => (/* binding */ interlacewarps)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "interlacewarps";
const old_names = ['interlace_warps'];
//PARAMS
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: "controls if the inputs are intelaced in the exact format sumitted or repeated to fill evenly"
};
const params = [repeats];
//INLETS
const draft_inlet = {
  name: 'drafts',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to interlace',
  num_drafts: -1
};
const weft_systems = {
  name: 'weft system map',
  type: 'static',
  value: null,
  uses: "weft-data",
  dx: 'if you would like to specify the weft system or materials, you can do so by adding a draft here',
  num_drafts: 1
};
const inlets = [draft_inlet, weft_systems];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let systems = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (drafts.length == 0) return Promise.resolve([]);
  let total_warps = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown))) * drafts.length;
  let total_wefts;
  if (repeat) {
    total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(el.drawdown)));
  } else {
    total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].getMaxWefts(drafts);
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = [];
  let warp_shuttles = [];
  for (let j = 0; j < total_warps; j++) {
    let selected_draft_id = j % drafts.length;
    let within_draft_j = Math.floor(j / drafts.length);
    let selected_draft = drafts[selected_draft_id];
    if (repeat || within_draft_j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(selected_draft.drawdown)) {
      let selected_draft = drafts[selected_draft_id];
      let modulated_id = within_draft_j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(selected_draft.drawdown);
      let col = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(selected_draft.drawdown, modulated_id));
      if (repeat) col.resize(total_wefts);else col.padTo(total_wefts);
      pattern.pushWarpSequence(col.val());
      warp_systems.push(selected_draft.colSystemMapping[modulated_id]);
      warp_shuttles.push(selected_draft.colShuttleMapping[modulated_id]);
    }
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_shuttles;
  d.colSystemMapping = warp_systems;
  if (systems.length > 0) d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, systems[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts);
  return "interlace warps(" + name_list + ")";
};
const interlacewarps = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 52763:
/*!**************************************************!*\
  !*** ./src/app/core/operations/invert/invert.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invert": () => (/* binding */ invert)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "invert";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const input = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to invert',
  num_drafts: 1
};
const inlets = [input];
const perform = (param_vals, op_inputs) => {
  const input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    const r = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).invert().val();
    pattern.pushWeftSequence(r);
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'invert(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const invert = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 60588:
/*!******************************************************!*\
  !*** ./src/app/core/operations/joinleft/joinleft.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "joinleft": () => (/* binding */ joinleft)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "join left";
const old_names = [];
//PARAMS
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: "controls if the inputs are repeated along the height so they repeat in even intervals"
};
const params = [repeats];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to join horizontally',
  num_drafts: -1
};
const weft_data = {
  name: 'weft pattern',
  type: 'static',
  value: null,
  uses: "weft-data",
  dx: 'optional, define a custom weft material or system pattern here',
  num_drafts: 1
};
const inlets = [draft_inlet, weft_data];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let weftdata = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let factor_in_repeats = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (drafts.length == 0) return Promise.resolve([]);
  let total_wefts = 0;
  const all_wefts = drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(el.drawdown)).filter(el => el > 0);
  if (factor_in_repeats === 1) total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(all_wefts);else total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].getMaxWefts(drafts);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < total_wefts; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    drafts.forEach(draft => {
      for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown); j++) {
        seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(draft.drawdown, i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown), j));
      }
    });
    pattern.pushWeftSequence(seq.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  drafts.forEach(draft => {
    for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown); j++) {
      warp_mats.push(draft.colShuttleMapping[j]);
      warp_sys.push(draft.colSystemMapping[j]);
    }
  });
  d.colShuttleMapping = warp_mats.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(d.drawdown)).val();
  d.colSystemMapping = warp_sys.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(d.drawdown)).val();
  if (weftdata.length > 0) {
    d.rowShuttleMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(weftdata[0].rowShuttleMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
    d.rowSystemMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(weftdata[0].rowSystemMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
  } else {
    d.rowShuttleMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(drafts[0].rowShuttleMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
    d.rowSystemMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(drafts[0].rowSystemMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
  }
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts);
  return "join left(" + name_list + ")";
};
const joinleft = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 73655:
/*!****************************************************!*\
  !*** ./src/app/core/operations/jointop/jointop.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jointop": () => (/* binding */ jointop)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "join top";
const old_names = [];
//PARAMS
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: "controls if the inputs are repeated along the width so they repeat in even intervals"
};
const params = [repeats];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to join horizontally',
  num_drafts: -1
};
const warp_data = {
  name: 'warp pattern',
  type: 'static',
  value: null,
  uses: "warp-data",
  dx: 'optional, define a custom warp material or system pattern here',
  num_drafts: 1
};
const inlets = [draft_inlet, warp_data];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let warpdata = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let factor_in_repeats = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  if (drafts.length == 0) return Promise.resolve([]);
  let total_warps = 0;
  const all_warps = drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(el.drawdown)).filter(el => el > 0);
  if (factor_in_repeats === 1) total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(all_warps);else total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getMaxWarps(drafts);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let j = 0; j < total_warps; j++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    drafts.forEach(draft => {
      let col = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.getCol)(draft.drawdown, j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft.drawdown));
      for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
        seq.push((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(col[i]));
      }
    });
    pattern.pushWarpSequence(seq.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  let weft_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  let weft_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  drafts.forEach(draft => {
    for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
      weft_mats.push(draft.rowShuttleMapping[i]);
      weft_sys.push(draft.rowSystemMapping[i]);
    }
  });
  d.rowShuttleMapping = weft_mats.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(d.drawdown)).val();
  d.rowSystemMapping = weft_sys.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(d.drawdown)).val();
  if (warpdata.length > 0) {
    d.colShuttleMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(warpdata[0].colShuttleMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(d.drawdown)).val();
    d.colSystemMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(warpdata[0].colSystemMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(d.drawdown)).val();
  } else {
    d.colShuttleMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(drafts[0].colShuttleMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(d.drawdown)).val();
    d.colSystemMapping = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(drafts[0].colSystemMapping).resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(d.drawdown)).val();
  }
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
  return "join top(" + name_list + ")";
};
const jointop = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 85005:
/*!************************************************!*\
  !*** ./src/app/core/operations/layer/layer.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "layer": () => (/* binding */ layer)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "layer";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const draft_inlet = {
  name: 'drafts',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the drafts to layer (from top to bottom)',
  num_drafts: -1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  if (drafts.length == 0) return Promise.resolve([]);
  //create a default system mapping that assumes alternating weft and warp systems associated with each layer
  let sys_seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  for (let i = 0; i < drafts.length; i++) {
    sys_seq.push(i);
  }
  let composite = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD().setBlank(2);
  drafts.forEach((draft, ndx) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD().import(draft.drawdown);
    seq.mapToSystems([ndx], [ndx], sys_seq, sys_seq);
    composite.overlay(seq, false);
  });
  let system_layer_map = sys_seq.val().map(el => {
    return {
      ws: el,
      layer: el
    };
  });
  composite.layerSystems(system_layer_map, sys_seq);
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(composite.export());
  d.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, sys_seq.val(), 'col', 3);
  d.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.generateMappingFromPattern)(d.drawdown, sys_seq.val(), 'row', 3);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts);
  return "layer(" + name_list + ")";
};
const layer = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 29048:
/*!******************************************************************!*\
  !*** ./src/app/core/operations/layer_notation/layer_notation.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notation": () => (/* binding */ notation)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "notation";
const old_names = ["assignlayers"];
const dynamic_param_id = 0;
const dynamic_param_type = 'notation';
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: '(a1)(b2)',
  regex: /.*?\((.*?[a-xA-Z]*[\d]*.*?)\).*?/i,
  error: 'invalid entry',
  dx: 'all system pairs must be listed as letters followed by numbers, layers are created by enclosing those system lists in pararenthesis. For example, the following are valid: (a1b2)(c3) or (c1)(a2). The following are invalid: (1a)(2b) or (2b'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'systems draft',
  type: 'static',
  value: null,
  uses: "warp-and-weft-data",
  dx: 'the draft that describes the system ordering we will add input structures within',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(original_string, /.*?\((.*?[a-xA-Z]*[\d]*.*?)\).*?/i);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  const system_map = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  if (op_inputs.length == 0) return Promise.resolve([]);
  if (system_map.length == 0) return Promise.resolve([]);
  ;
  let weft_system_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].rowSystemMapping);
  let warp_system_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].colSystemMapping);
  let weft_shuttle_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].rowShuttleMapping);
  let warp_shuttle_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].colShuttleMapping);
  //make sure the system draft map has a representation for every layer, even if the draft at that layer is null.
  const layer_draft_map = original_string_split.map((unit, layer) => {
    let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, layer + 1);
    return {
      wesy: parseWeftSystem(unit),
      wasy: parseWarpSystem(unit),
      layer: layer,
      draft: drafts.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
        wefts: 1,
        warps: 1,
        drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
      }) : drafts[0]
    };
  });
  let composite = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD().setBlank(2);
  layer_draft_map.forEach((sdm, ndx) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD().import(sdm.draft.drawdown);
    seq.mapToSystems(sdm.wesy, sdm.wasy, weft_system_map, warp_system_map);
    composite.overlay(seq, false);
  });
  let system_layer_map = [];
  layer_draft_map.forEach(el => {
    el.wasy.forEach(wasy => {
      system_layer_map.push({
        ws: wasy,
        layer: el.layer
      });
    });
  });
  composite.layerSystems(system_layer_map, warp_system_map);
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(composite.export());
  d.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, warp_system_map.val(), 'col', 3);
  d.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, weft_system_map.val(), 'row', 3);
  d.colShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, warp_shuttle_map.val(), 'col', 3);
  d.rowShuttleMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, weft_shuttle_map.val(), 'row', 3);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return '' + param_vals[0] + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(param_val, param_regex);
  matches = matches.map(el => el.slice(1, -1));
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
//pull out all the nubmers from a notation element into warp systems
const parseWarpSystem = val => {
  let matches = val.match(/\d+/g);
  if (matches == null || matches.length == 0) {
    console.error("in Layer Notation, no warp system");
    return [];
  }
  return matches.map(el => parseInt(el) - 1);
};
//pull out all the letters from a notation element into weft systems
const parseWeftSystem = val => {
  let matches = val.match(/[a-zA-Z]+/g);
  if (matches == null || matches.length == 0) {
    console.error("in Layer Notation, no weft system");
    return [];
  }
  return matches.map(match => match.charCodeAt(0) - 97);
};
const notation = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 27178:
/*!******************************************************************!*\
  !*** ./src/app/core/operations/makedirectloom/makedirectloom.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makedirectloom": () => (/* binding */ makedirectloom)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/looms */ 58364);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "direct loom";
const old_names = [];
//PARAMS
const frames = {
  name: 'frames',
  min: 2,
  max: 10000,
  value: 8,
  type: 'number',
  dx: 'number of frames to use. If the drawdown requires more, it will generate more'
};
const params = [frames];
//INLETS
const drawdown = {
  name: 'drawdown',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the drawdown from which to create threading and lift plan from',
  num_drafts: 1
};
const inlets = [drawdown];
const perform = (op_params, op_inputs) => {
  let draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let frames = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  if (draft == null) return Promise.resolve([]);
  const loom_settings = {
    type: 'direct',
    epi: 10,
    units: 'in',
    frames: frames,
    treadles: frames
  };
  const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.getLoomUtilByType)(loom_settings.type);
  return utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, 3).then(l => {
    const frames = Math.max((0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.numFrames)(l), loom_settings.frames);
    const treadles = Math.max((0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.numTreadles)(l), loom_settings.treadles);
    let threading = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      warps: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown),
      wefts: frames
    });
    l.threading.forEach((frame, j) => {
      if (frame !== -1) (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.setHeddle)(threading.drawdown, frame, j, true);
    });
    threading = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(threading, draft);
    let treadling = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      warps: treadles,
      wefts: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown)
    });
    l.treadling.forEach((treadle_row, i) => {
      treadle_row.forEach(treadle_num => {
        (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.setHeddle)(treadling.drawdown, i, treadle_num, true);
      });
    });
    treadling = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(treadling, draft);
    return Promise.resolve([threading, treadling]);
  });
};
const generateName = (param_vals, op_inputs, ndx) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  switch (ndx) {
    case 0:
      return "threading_" + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
    case 1:
      return "lift plan_" + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
  }
  return 'makedirectloom(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const makedirectloom = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 59299:
/*!******************************************************!*\
  !*** ./src/app/core/operations/makeloom/makeloom.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeloom": () => (/* binding */ makeloom)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/looms */ 58364);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "floor loom";
const old_names = [];
//PARAMS
const frames = {
  name: 'frames',
  min: 2,
  max: 10000,
  value: 8,
  type: 'number',
  dx: 'number of frames to use. If the drawdown requires more, it will generate more'
};
const treadles = {
  name: 'treadles',
  min: 1,
  max: 10000,
  value: 12,
  type: 'number',
  dx: 'number of treadles to use. If the drawdown requires more, it will generate more'
};
const params = [frames, treadles];
//INLETS
const drawdown = {
  name: 'drawdown',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the drawdown from which to create threading, tieup and treadling data from',
  num_drafts: 1
};
const inlets = [drawdown];
const perform = (op_params, op_inputs) => {
  let draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let frames = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let treadles = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (draft == null) return Promise.resolve([]);
  const loom_settings = {
    type: 'frame',
    epi: 10,
    units: 'in',
    frames: frames,
    treadles: treadles
  };
  const utils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.getLoomUtilByType)(loom_settings.type);
  return utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, 3).then(l => {
    const frames = Math.max((0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.numFrames)(l), loom_settings.frames);
    const treadles = Math.max((0,_model_looms__WEBPACK_IMPORTED_MODULE_1__.numTreadles)(l), loom_settings.treadles);
    let threading = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      warps: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown),
      wefts: frames
    });
    l.threading.forEach((frame, j) => {
      if (frame !== -1) (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.setHeddle)(threading.drawdown, frame, j, true);
    });
    threading = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(threading, draft);
    let treadling = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      warps: treadles,
      wefts: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown)
    });
    l.treadling.forEach((treadle_row, i) => {
      treadle_row.forEach(treadle_num => {
        (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.setHeddle)(treadling.drawdown, i, treadle_num, true);
      });
    });
    treadling = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(treadling, draft);
    let tieup = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      warps: treadles,
      wefts: frames
    });
    l.tieup.forEach((row, i) => {
      row.forEach((val, j) => {
        (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.setHeddle)(tieup.drawdown, i, j, val);
      });
    });
    tieup = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(tieup, draft);
    tieup = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(tieup, draft);
    return Promise.resolve([threading, tieup, treadling]);
  });
};
const generateName = (param_vals, op_inputs, ndx) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  switch (ndx) {
    case 0:
      return "threading_" + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
    case 1:
      return "tie_up_" + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
    case 2:
      return "treadling_" + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts);
  }
  return '';
};
const makeloom = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 66551:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/makesymmetric/makesymmetric.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makesymmetric": () => (/* binding */ makesymmetric)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "makesymmetric";
const old_names = [''];
//PARAMS
const corner = {
  name: 'options',
  type: 'select',
  selectlist: [{
    name: '4-way around top left corner',
    value: 0
  }, {
    name: '4-way around top right corner',
    value: 1
  }, {
    name: '4-way around bottom right corner',
    value: 2
  }, {
    name: '4-way around bottom left corner',
    value: 3
  }, {
    name: '2-way top axis',
    value: 4
  }, {
    name: '2-way right axis',
    value: 5
  }, {
    name: '2-way bottom axis',
    value: 6
  }, {
    name: '2-way left axis',
    value: 7
  }],
  value: 0,
  dx: 'select 4-way or 2-way symmetric. If 4-way, select the corner to which this draft is rotated around 0 is top left, 1 top right, 2 bottom right, 3 bottom left. If 2-way, select the access it is mirror around'
};
const remove_center = {
  name: 'remove center repeat',
  type: 'boolean',
  falsestate: "center repeat kept",
  truestate: "center repeat removed",
  value: 0,
  dx: 'rotating drafts creates a repeated set of columns or rows extending from the center. Use this toggle to alternative the structure by either keeping or erasing those repeated cells'
};
const params = [corner, remove_center];
//INLETS
const draft_inlet = {
  name: 'input draft',
  type: 'static',
  value: null,
  dx: 'the draft you would like to modify',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
/**TODO - make this support systems as well */
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let sym_mode = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let remove_center = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  switch (sym_mode) {
    //4-way, top left - 2-way left
    case 0:
    case 7:
      input_draft.drawdown.forEach((row, i) => {
        let rev = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        let rev_warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colSystemMapping).reverse();
        let rev_warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colShuttleMapping).reverse();
        if (remove_center == 1) {
          rev.slice(0, row.length - 1);
          rev_warp_mats.slice(0, row.length - 1);
          rev_warp_sys.slice(0, row.length - 1);
        }
        rev.pushRow(row);
        if (i == 0) {
          warp_mats = rev_warp_mats.pushRow(input_draft.colShuttleMapping);
          warp_systems = rev_warp_sys.pushRow(input_draft.colSystemMapping);
        }
        if (remove_center == 1 && i == 0) {
          pattern.pushWeftSequence(rev.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
        } else {
          pattern.pushWeftSequence(rev.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
          if (sym_mode == 0) {
            pattern.unshiftWeftSequence(rev.val());
            weft_materials.unshift(input_draft.rowShuttleMapping[i]);
            weft_systems.unshift(input_draft.rowSystemMapping[i]);
          }
        }
      });
      break;
    //4-way top right // 2-way - right
    case 1:
    case 4:
    case 5:
      input_draft.drawdown.forEach((row, i) => {
        let rev = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        let rev_warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colSystemMapping).reverse();
        let rev_warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colShuttleMapping).reverse();
        if (remove_center == 1 && (sym_mode == 1 || sym_mode == 5)) {
          rev.slice(1, row.length);
          rev_warp_mats.slice(1, row.length);
          rev_warp_sys.slice(1, row.length);
        }
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row);
        if (i == 0) {
          warp_mats.import(input_draft.colShuttleMapping).pushRow(rev_warp_mats.val());
          warp_systems.import(input_draft.colSystemMapping).pushRow(rev_warp_sys.val());
        }
        if (sym_mode !== 4) {
          seq.pushRow(rev.val());
          warp_mats.pushRow(rev_warp_mats.val());
          warp_systems.pushRow(rev_warp_sys.val());
        }
        if (remove_center == 1 && i == 0) {
          pattern.pushWeftSequence(seq.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
        } else {
          pattern.pushWeftSequence(seq.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
          if (sym_mode == 1 || sym_mode == 4) {
            pattern.unshiftWeftSequence(seq.val());
            weft_materials.unshift(input_draft.rowShuttleMapping[i]);
            weft_systems.unshift(input_draft.rowSystemMapping[i]);
          }
        }
      });
      break;
    //4-way bottom right, 2-way bottom 
    case 2:
    case 6:
      for (let i = input_draft.drawdown.length - 1; i >= 0; i--) {
        let row = input_draft.drawdown[i];
        let rev = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        let rev_warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colSystemMapping).reverse();
        let rev_warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colShuttleMapping).reverse();
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row);
        if (remove_center == 1 && sym_mode == 2) {
          rev.slice(1, row.length);
          rev_warp_mats.slice(1, row.length);
          rev_warp_sys.slice(1, row.length);
        }
        if (sym_mode == 2) {
          warp_mats.import(input_draft.colShuttleMapping).pushRow(rev_warp_mats.val());
          warp_systems.import(input_draft.colSystemMapping).pushRow(rev_warp_sys.val());
        } else if (i == 0) {
          warp_mats.import(input_draft.colShuttleMapping);
          warp_systems.import(input_draft.colSystemMapping);
        }
        if (remove_center == 1 && i == input_draft.drawdown.length - 1) {
          pattern.pushWeftSequence(seq.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
        } else {
          pattern.pushWeftSequence(seq.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
          pattern.unshiftWeftSequence(seq.val());
          weft_materials.unshift(input_draft.rowShuttleMapping[i]);
          weft_systems.unshift(input_draft.rowSystemMapping[i]);
        }
      }
      break;
    //4-way bottom left
    case 3:
      for (let i = input_draft.drawdown.length - 1; i >= 0; i--) {
        let row = input_draft.drawdown[i];
        let rev = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        let rev_warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colSystemMapping).reverse();
        let rev_warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(input_draft.colShuttleMapping).reverse();
        if (remove_center == 1) {
          rev.slice(0, rev.length() - 1);
          rev_warp_mats.slice(0, rev.length() - 1);
          rev_warp_sys.slice(0, rev.length() - 1);
        }
        console.log("IN MS", row);
        rev.pushRow(row);
        if (i == 0) {
          rev_warp_mats.pushRow(input_draft.colShuttleMapping);
          rev_warp_sys.pushRow(input_draft.colSystemMapping);
        }
        if (remove_center == 1 && i == input_draft.drawdown.length - 1) {
          pattern.pushWeftSequence(rev.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
        } else {
          pattern.pushWeftSequence(rev.val());
          weft_materials.push(input_draft.rowShuttleMapping[i]);
          weft_systems.push(input_draft.rowSystemMapping[i]);
          pattern.unshiftWeftSequence(rev.val());
          weft_materials.unshift(input_draft.rowShuttleMapping[i]);
          weft_systems.unshift(input_draft.rowSystemMapping[i]);
        }
      }
      break;
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'symmetric(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const makesymmetric = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 14887:
/*!**************************************************!*\
  !*** ./src/app/core/operations/margin/margin.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "margin": () => (/* binding */ margin)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "margin";
const old_names = [];
//PARAMS
const starting_pics = {
  name: 'starting pics',
  min: 0,
  max: 10000,
  value: 12,
  type: 'number',
  dx: 'number of pics to add to the bottom of the draft'
};
const ending_pics = {
  name: 'ending pics',
  min: 0,
  max: 10000,
  value: 12,
  type: 'number',
  dx: 'number of pics to add to the end of the draft'
};
const starting_ends = {
  name: 'starting ends',
  min: 0,
  max: 10000,
  value: 12,
  type: 'number',
  dx: 'number of ends to add to the start of the draft'
};
const ending_ends = {
  name: 'ending ends',
  min: 0,
  max: 10000,
  value: 12,
  type: 'number',
  dx: 'number of ends to add to the end of the draft'
};
const params = [starting_pics, ending_pics, starting_ends, ending_ends];
//INLETS
const draft = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to add margins to',
  num_drafts: 1
};
const selvedge_draft = {
  name: 'margin',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to repeat within the margins',
  num_drafts: 1
};
const inlets = [draft, selvedge_draft];
const perform = (op_params, op_inputs) => {
  const base_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const margin_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  const starting_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const ending_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const starting_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  const ending_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, op_params);
  if (base_drafts.length == 0 && margin_drafts.length == 0) return Promise.resolve([]);
  let complete = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let active_draft = base_drafts.length > 0 ? base_drafts[0] : (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
    warps: 1,
    wefts: 1
  });
  let margin_draft = margin_drafts.length > 0 ? margin_drafts[0] : (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
    warps: 1,
    wefts: 1
  });
  let width = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(active_draft.drawdown) + starting_ends + ending_ends;
  let height = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(active_draft.drawdown) + ending_pics + starting_pics;
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(active_draft.colSystemMapping).resize(width).shift(starting_ends);
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(active_draft.colShuttleMapping).resize(width).shift(starting_ends);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(active_draft.rowSystemMapping).resize(height).shift(starting_pics);
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(active_draft.rowShuttleMapping).resize(height).shift(starting_pics);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  //start with starting pics
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    if (i < starting_pics) {
      seq.import(margin_draft.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(margin_draft.drawdown)]).resize(width);
    } else if (i < starting_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(active_draft.drawdown)) {
      //adjust the start of the margin draft so it starts at the same index as the original
      let adj_i = i - starting_pics;
      const left_margin = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().pushRow(margin_draft.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(margin_draft.drawdown)]).resize(starting_ends);
      const center = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().pushRow(active_draft.drawdown[adj_i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(active_draft.drawdown)]);
      //shift this so it sequences at the same rate as the other margin rows
      let shift_i = (starting_ends + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(active_draft.drawdown)) % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(margin_draft.drawdown);
      shift_i = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(margin_draft.drawdown) - shift_i;
      const right_margin = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().pushRow(margin_draft.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(margin_draft.drawdown)]).resize(ending_ends).shift(shift_i);
      seq.pushRow(left_margin.val()).pushRow(center.val()).pushRow(right_margin.val());
    } else {
      seq.import(margin_draft.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(margin_draft.drawdown)]).resize(width);
    }
    pattern.pushWeftSequence(seq.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r);
  return name_list + "+margin";
};
const margin = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 6134:
/*!**********************************************!*\
  !*** ./src/app/core/operations/mask/mask.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mask": () => (/* binding */ mask)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "mask";
const old_names = ['mask', 'mask, (a,b) => (a AND b)'];
//PARAMS
const shift_ends = {
  name: 'shift ends',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const shift_pics = {
  name: 'shift pics',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const params = [shift_ends, shift_pics];
//INLETS
const draft_a = {
  name: 'a',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to like to mask',
  num_drafts: 1
};
const draft_b = {
  name: 'b',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the mask you are applying to this draft',
  num_drafts: 1
};
const inlets = [draft_a, draft_b];
const perform = (op_params, op_inputs) => {
  let input_draft_a = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let input_draft_b = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let shift_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let shift_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (input_draft_a.length == 0 && input_draft_b.length == 0) return Promise.resolve([]);
  let draft_a = input_draft_a.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_a[0];
  let draft_b = input_draft_b.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_b[0];
  let height = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown) + shift_pics, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown));
  let width = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_a.drawdown));
  //offset draft b:
  let pattern_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < shift_pics) {
      seq.pushMultiple(2, width);
    } else if (i < shift_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown)) {
      seq.pushMultiple(2, shift_ends).pushRow(draft_b.drawdown[i - shift_pics]);
      let remaining = width - ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends);
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_b.pushWeftSequence(seq.val());
  }
  //make sure pattern a is the same size
  let pattern_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown)) {
      seq.pushRow(draft_a.drawdown[i]);
      let remaining = width - draft_a.drawdown[i].length;
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_a.pushWeftSequence(seq.val());
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_a.getWeft(i));
    let seq_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_b.getWeft(i));
    seq_a.computeFilter('and', seq_b);
    pattern.pushWeftSequence(seq_a.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, draft_a);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, draft_a);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'mask' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const mask = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 47948:
/*!****************************************************!*\
  !*** ./src/app/core/operations/overlay/overlay.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "overlay": () => (/* binding */ overlay)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "overlay";
const old_names = ['overlay', 'overlay, (a,b) => (a OR b)'];
//PARAMS
const shift_ends = {
  name: 'shift ends',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const shift_pics = {
  name: 'shift pics',
  type: 'number',
  min: 0,
  max: 10000,
  value: 0,
  dx: ''
};
const params = [shift_ends, shift_pics];
//INLETS
const draft_a = {
  name: 'a',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to overlay another onto',
  num_drafts: 1
};
const draft_b = {
  name: 'b',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to overlay onto the base',
  num_drafts: 1
};
const inlets = [draft_a, draft_b];
const perform = (op_params, op_inputs) => {
  let input_draft_a = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  let input_draft_b = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 1);
  let shift_ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let shift_pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  if (input_draft_a.length == 0 && input_draft_b.length == 0) return Promise.resolve([]);
  let draft_a = input_draft_a.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_a[0];
  let draft_b = input_draft_b.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)([[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null)]]) : input_draft_b[0];
  let height = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown) + shift_pics, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown));
  let width = Math.max((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends, (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_a.drawdown));
  //offset draft b:
  let pattern_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < shift_pics) {
      seq.pushMultiple(2, width);
    } else if (i < shift_pics + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_b.drawdown)) {
      seq.pushMultiple(2, shift_ends).pushRow(draft_b.drawdown[i - shift_pics]);
      let remaining = width - ((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.warps)(draft_b.drawdown) + shift_ends);
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_b.pushWeftSequence(seq.val());
  }
  //make sure pattern a is the same size
  let pattern_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    if (i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft_a.drawdown)) {
      seq.pushRow(draft_a.drawdown[i]);
      let remaining = width - draft_a.drawdown[i].length;
      if (remaining > 0) seq.pushMultiple(2, remaining);
    } else {
      seq.pushMultiple(2, width);
    }
    pattern_a.pushWeftSequence(seq.val());
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  for (let i = 0; i < height; i++) {
    let seq_a = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_a.getWeft(i));
    let seq_b = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(pattern_b.getWeft(i));
    seq_a.computeFilter('or', seq_b);
    pattern.pushWeftSequence(seq_a.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, draft_a);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, draft_a);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'overlay' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const overlay = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 37923:
/*!**********************************************************************!*\
  !*** ./src/app/core/operations/overlay_multiple/overlay_multiple.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "overlay_multi": () => (/* binding */ overlay_multi)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "overlay_multiple";
const old_names = [];
//PARAMS
const params = [];
//INLETS
const drafts = {
  name: 'input_drafts',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to overlay another onto',
  num_drafts: -1
};
const inlets = [drafts];
const perform = (op_params, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  if (drafts.length == 0) return Promise.resolve([]);
  let sys_seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD([0]);
  let composite = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD().setBlank(2);
  drafts.forEach((draft, ndx) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD().import(draft.drawdown);
    seq.mapToSystems([0], [0], sys_seq, sys_seq);
    composite.overlay(seq, true);
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(composite.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, drafts[0]);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, drafts[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'overlay_multi' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const overlay_multi = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 85133:
/*!**************************************************!*\
  !*** ./src/app/core/operations/random/random.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "random": () => (/* binding */ random)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "random";
const old_names = [];
//PARAMS
const ends = {
  name: 'ends',
  type: 'number',
  min: 0,
  max: 100,
  value: 6,
  dx: ""
};
const pics = {
  name: 'pics',
  type: 'number',
  min: 0,
  max: 100,
  value: 6,
  dx: ""
};
const pcent = {
  name: 'percent warp raised',
  type: 'number',
  min: 1,
  max: 100,
  value: 50,
  dx: 'percentage of warps raised to be used'
};
const params = [ends, pics, pcent];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  ;
  const pcent = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < pics; i++) {
    let row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    for (let j = 0; j < ends; j++) {
      const rand = Math.random() * 100;
      if (rand > pcent) row.push(0);else row.push(1);
    }
    pattern.pushWeftSequence(row.val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  const pcent = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  return 'random' + pcent;
};
const random = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 15328:
/*!**********************************************!*\
  !*** ./src/app/core/operations/rect/rect.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rect": () => (/* binding */ rect)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "rectangle";
const old_names = [];
//PARAMS
const ends = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 500,
  value: 10,
  dx: ""
};
const pics = {
  name: 'pics',
  type: 'number',
  min: 1,
  max: 500,
  value: 10,
  dx: ""
};
const params = [ends, pics];
//INLETS
const draft_inlet = {
  name: 'input draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft with which you would like to fill this rectangle',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let w = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let h = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  if (input_draft !== null) seq.import(input_draft.drawdown);else seq.setBlank();
  let dd = seq.fill(w, h).export();
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(dd);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'rect(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const rect = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 97802:
/*!**************************************************!*\
  !*** ./src/app/core/operations/resize/resize.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resize": () => (/* binding */ resize)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "resize";
const old_names = [];
//PARAMS
const ends = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 10000,
  value: 100,
  dx: ''
};
const pics = {
  name: 'pics',
  type: 'number',
  min: 1,
  max: 10000,
  value: 100,
  dx: 'number of wefts to resize to'
};
const params = [ends, pics];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to resize',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input == null) return Promise.resolve([]);
  let ends = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const weft_factor = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(input.drawdown) / pics;
  const warp_factor = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input.drawdown) / ends;
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let weft_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  for (let i = 0; i < pics; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    let adj_i = Math.floor(i * weft_factor);
    weft_mats.push(input.rowShuttleMapping[adj_i]);
    weft_sys.push(input.rowSystemMapping[adj_i]);
    for (let j = 0; j < ends; j++) {
      let adj_j = Math.floor(j * warp_factor);
      seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(input.drawdown, adj_i, adj_j));
    }
    pattern.pushWeftSequence(seq.val());
  }
  for (let j = 0; j < ends; j++) {
    let adj_j = Math.floor(j * warp_factor);
    warp_mats.push(input.colShuttleMapping[adj_j]);
    warp_sys.push(input.colSystemMapping[adj_j]);
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_sys.val();
  d.rowShuttleMapping = weft_mats.val();
  d.rowSystemMapping = weft_sys.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'resize(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const resize = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 66475:
/*!**************************************************!*\
  !*** ./src/app/core/operations/rotate/rotate.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotate": () => (/* binding */ rotate)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "rotate";
const old_names = [];
//PARAMS
const amt = {
  name: 'amount',
  type: 'select',
  selectlist: [{
    name: '90',
    value: 0
  }, {
    name: '180',
    value: 1
  }, {
    name: '270',
    value: 2
  }],
  value: 0,
  dx: 'corner to which this draft is rotated around 0 is top left, 1 top right, 2 bottom right, 3 bottom left'
};
const rotate_materials = {
  name: 'materials?',
  type: 'boolean',
  falsestate: 'no, don\'t rotate materials',
  truestate: 'yes, rotate materials',
  value: 1,
  dx: 'if your draft has materials assigned, you can choose wether you want to rotate the draft or the materials only'
};
const params = [amt, rotate_materials];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to rotate',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  const num_rots = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const rotate_mats = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params) === 0 ? false : true;
  if (draft == null) return Promise.resolve([]);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  switch (num_rots) {
    case 0:
      draft.drawdown.forEach((row, i) => {
        let r = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        seq.pushWarpSequence(r.val());
      });
      break;
    case 1:
      draft.drawdown.forEach((row, i) => {
        let r = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).reverse();
        seq.unshiftWeftSequence(r.val());
      });
      break;
    case 2:
      draft.drawdown.forEach((row, i) => {
        let r = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row);
        seq.unshiftWarpSequence(r.val());
      });
      break;
  }
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(draft.rowShuttleMapping);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(draft.rowSystemMapping);
  let warp_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(draft.colShuttleMapping);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(draft.colSystemMapping);
  const d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(seq.export());
  if (rotate_mats) {
    switch (num_rots) {
      case 0:
        d.rowShuttleMapping = warp_materials.reverse().val();
        d.rowSystemMapping = warp_systems.reverse().val();
        d.colShuttleMapping = weft_materials.val();
        d.colSystemMapping = weft_systems.val();
        break;
      case 1:
        d.rowShuttleMapping = weft_materials.reverse().val();
        d.rowSystemMapping = weft_systems.reverse().val();
        d.colShuttleMapping = warp_materials.reverse().val();
        d.colSystemMapping = warp_systems.reverse().val();
        break;
      case 2:
        d.rowShuttleMapping = warp_materials.val();
        d.rowSystemMapping = warp_systems.val();
        d.colShuttleMapping = weft_materials.reverse().val();
        d.colSystemMapping = weft_systems.reverse().val();
        break;
    }
  } else {
    d.rowShuttleMapping = weft_materials.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
    d.rowSystemMapping = weft_systems.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(d.drawdown)).val();
    d.colShuttleMapping = warp_materials.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(d.drawdown)).val();
    d.colSystemMapping = warp_systems.resize((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(d.drawdown)).val();
  }
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'rotate(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const rotate = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 94642:
/*!**************************************************************!*\
  !*** ./src/app/core/operations/samplelength/samplelength.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sample_length": () => (/* binding */ sample_length)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "sample_length";
const old_names = [""];
const dynamic_param_id = 0;
const dynamic_param_type = 'profile';
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: 'a20 b20 a40 b40',
  regex: /(?:[a-xA-Z][\d]*[\ ]*).*?/,
  error: 'invalid entry',
  dx: 'all entries must be a single letter followed by a number, which each letter-number unit separated by a space'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'warp pattern',
  type: 'static',
  value: null,
  uses: "warp-data",
  dx: 'optional, define a custom weft material or system pattern here',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const system_data = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(original_string, op_params[0].param.regex);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  if (op_inputs.length == 0) return Promise.resolve([]);
  //now just get all the drafts
  const all_drafts = op_inputs.filter(el => el.inlet_id > 0).reduce((acc, el) => {
    el.drafts.forEach(draft => {
      acc.push(draft);
    });
    return acc;
  }, []);
  let total_warps = 0;
  const all_warps = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)).filter(el => el > 0);
  total_warps = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(all_warps);
  const profile_draft_map = op_inputs.map(el => {
    return {
      id: el.inlet_id,
      val: el.params[0].toString(),
      draft: el.drafts[0]
    };
  });
  console.log("profile draft map", profile_draft_map);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  if (system_data.length == 0) {
    warp_systems.import(all_drafts[0].colSystemMapping).resize(total_warps);
    warp_mats.import(all_drafts[0].colShuttleMapping).resize(total_warps);
  } else {
    warp_systems.import(system_data[0].colSystemMapping).resize(total_warps);
    warp_mats.import(system_data[0].colShuttleMapping).resize(total_warps);
  }
  original_string_split.forEach(string_id => {
    const label = string_id.charAt(0);
    const qty = parseInt(string_id.substring(1));
    let pdm_item = profile_draft_map.find(el => el.val == label.toString());
    if (pdm_item !== undefined) {
      let draft = pdm_item.draft;
      for (let i = 0; i < qty; i++) {
        let row = draft.drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown)];
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).resize(total_warps);
        pattern.pushWeftSequence(seq.val());
        weft_materials.push(draft.rowShuttleMapping[i % draft.rowShuttleMapping.length]);
        weft_systems.push(draft.rowSystemMapping[i % draft.rowSystemMapping.length]);
      }
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'sample across length:' + param_vals[0].val + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(param_val, param_regex);
  matches = matches.map(el => el.charAt(0));
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].filterToUniqueValues(matches);
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
const sample_length = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 12714:
/*!************************************************************!*\
  !*** ./src/app/core/operations/samplewidth/samplewidth.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sample_width": () => (/* binding */ sample_width)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "sample_width";
const old_names = [""];
const dynamic_param_id = 0;
const dynamic_param_type = 'profile';
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: 'a20 b20 a40 b40',
  regex: /(?:[a-xA-Z][\d]*[\ ]*).*?/,
  error: 'invalid entry',
  dx: 'all entries must be a single letter followed by a number, which each letter-number unit separated by a space'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'warp pattern',
  type: 'static',
  value: null,
  uses: "warp-data",
  dx: 'optional, define a custom warp material or system pattern here',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const system_data = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(original_string, op_params[0].param.regex);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  if (op_inputs.length == 0) return Promise.resolve([]);
  //now just get all the drafts
  const all_drafts = op_inputs.filter(el => el.inlet_id > 0).reduce((acc, el) => {
    el.drafts.forEach(draft => {
      acc.push(draft);
    });
    return acc;
  }, []);
  let total_wefts = 0;
  const all_wefts = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)).filter(el => el > 0);
  total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(all_wefts);
  const profile_draft_map = op_inputs.map(el => {
    return {
      id: el.inlet_id,
      val: el.params[0].toString(),
      draft: el.drafts[0]
    };
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  if (system_data.length == 0) {
    weft_systems.import(all_drafts[0].rowSystemMapping).resize(total_wefts);
    weft_materials.import(all_drafts[0].rowShuttleMapping).resize(total_wefts);
  } else {
    weft_systems.import(system_data[0].rowSystemMapping).resize(total_wefts);
    weft_materials.import(system_data[0].rowShuttleMapping).resize(total_wefts);
  }
  original_string_split.forEach(string_id => {
    const label = string_id.charAt(0);
    const qty = parseInt(string_id.substring(1));
    let pdm_item = profile_draft_map.find(el => el.val == label.toString());
    if (pdm_item !== undefined) {
      let draft = pdm_item.draft;
      for (let j = 0; j < qty; j++) {
        let col = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(draft.drawdown, j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown));
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).resize(total_wefts);
        pattern.pushWarpSequence(seq.val());
        warp_mats.push(draft.colShuttleMapping[j % draft.colShuttleMapping.length]);
        warp_systems.push(draft.colSystemMapping[j % draft.colSystemMapping.length]);
      }
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'pattern width:' + param_vals[0].val + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(param_val, param_regex);
  matches = matches.map(el => el.charAt(0));
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].filterToUniqueValues(matches);
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
const sample_width = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 76441:
/*!************************************************!*\
  !*** ./src/app/core/operations/satin/satin.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "satin": () => (/* binding */ satin)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "satin";
const old_names = [];
//PARAMS
const repeat = {
  name: 'repeat',
  type: 'number',
  min: 5,
  max: 100,
  value: 5,
  dx: 'the width and height of the pattern'
};
const shift = {
  name: 'shift',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the move number on each row'
};
const facing = {
  name: 'facing',
  type: 'boolean',
  falsestate: "weft facing",
  truestate: "warp facing",
  value: 0,
  dx: ''
};
const params = [repeat, shift, facing];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const facing = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  first_row.push(1);
  for (let j = 0; j < repeat - 1; j++) {
    first_row.push(0);
  }
  if (facing) first_row.invert();
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < repeat; i++) {
    pattern.pushWeftSequence(first_row.shift(shift).val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  const repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const facing = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const dir = facing ? "Warp Faced" : "Weft Faced";
  return repeat + "/" + shift + dir + ' Satin';
};
const satin = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 75708:
/*!******************************************************!*\
  !*** ./src/app/core/operations/satinish/satinish.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "satinish": () => (/* binding */ satinish)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "satinish";
const old_names = [];
//PARAMS
const string_input = {
  name: 'pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '2 2 3 3',
  error: '',
  dx: 'the under over pattern of this twill'
};
const shift = {
  name: 'shift',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the move number on each row'
};
const sz = {
  name: 'S/Z',
  type: 'boolean',
  falsestate: 'S',
  truestate: 'Z',
  value: 0,
  dx: ''
};
const params = [string_input, shift, sz];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const input_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const sz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const input_array = input_string.split(' ').map(el => parseInt(el));
  let size = input_array.reduce((acc, val) => {
    return val + acc;
  }, 0);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let under = true;
  input_array.forEach(input => {
    first_row.pushMultiple(under, input);
    under = !under;
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let shift_dir = sz ? -1 * shift : 1 * shift;
  for (let i = 0; i < size; i++) {
    pattern.pushWeftSequence(first_row.shift(shift_dir).val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'shifty';
};
const satinish = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 4475:
/*!******************************************************!*\
  !*** ./src/app/core/operations/sawtooth/sawtooth.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sawtooth": () => (/* binding */ sawtooth)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "sawtooth";
const old_names = [];
//PARAMS
const width = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 10000,
  value: 100,
  dx: "the total ends of the draft"
};
const amplitude = {
  name: 'pics',
  type: 'number',
  min: 1,
  max: 10000,
  value: 20,
  dx: "the total number of pics for the saw path to move through"
};
const segments = {
  name: 'segments',
  type: 'number',
  min: 1,
  max: 10000,
  value: 1,
  dx: "the total number of segments, each segment represents one half of the saw tooth's path "
};
const params = [width, amplitude, segments];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const warpnum = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const pics = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const peaks = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const run = warpnum / peaks;
  const slope = pics / run;
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let j = 0; j < warpnum; j++) {
    let x = j % Math.floor(run * 2);
    let i = Math.floor(slope * x);
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().pushMultiple(0, pics);
    if (i < pics) seq.set(i, 1);else seq.set(pics - 1 - (i - pics), 1);
    pattern.pushWarpSequence(seq.val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'sawtooth';
};
const sawtooth = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 32908:
/*!******************************************************!*\
  !*** ./src/app/core/operations/selvedge/selvedge.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selvedge": () => (/* binding */ selvedge)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "selvedge";
const old_names = [];
//PARAMS
const ends = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 100,
  value: 12,
  dx: "the number of ends of selvedge on each side of the cloth"
};
const right_shift = {
  name: 'right shift',
  type: 'number',
  min: 0,
  max: 100,
  value: 0,
  dx: "the number of pics to shift the right side by to ensure the ends catch"
};
const params = [ends, right_shift];
//INLETS
const draft = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: "the draft that will have a selvedge added",
  num_drafts: 1
};
const selvedge_draft = {
  name: 'selvedge',
  type: 'static',
  value: null,
  dx: "the pattern to use for the selvedge",
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft, selvedge_draft];
const perform = (op_params, op_inputs) => {
  const draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const sel = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  const w = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  if (draft.length == 0 && sel.length == 0) return Promise.resolve([]);
  if (draft.length == 0) return Promise.resolve(sel);
  if (sel.length == 0) return Promise.resolve(draft);
  let complete = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let active_draft = draft[0];
  let sel_draft = sel[0];
  let sel_draft_warps = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(sel_draft.drawdown);
  let sel_draft_wefts = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(sel_draft.drawdown);
  let warp_systems = [];
  let warp_materials = [];
  active_draft.drawdown.forEach((row, i) => {
    let row_seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    for (let j = 0; j < w; j++) {
      row_seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(sel_draft.drawdown, i % sel_draft_wefts, j % sel_draft_warps));
      warp_materials.push(sel_draft.colShuttleMapping[j % sel_draft_warps]);
      warp_systems.push(sel_draft.colSystemMapping[j % sel_draft_warps]);
    }
    for (let j = 0; j < row.length; j++) {
      row_seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(active_draft.drawdown, i, j));
      warp_materials.push(active_draft.colShuttleMapping[j]);
      warp_systems.push(active_draft.colSystemMapping[j]);
    }
    for (let j = 0; j < w; j++) {
      row_seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(sel_draft.drawdown, (i + shift) % sel_draft_wefts, j % sel_draft_warps));
      warp_materials.push(sel_draft.colShuttleMapping[j % sel_draft_warps]);
      warp_systems.push(sel_draft.colSystemMapping[j % sel_draft_warps]);
    }
    complete.pushWeftSequence(row_seq.val());
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(complete.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, active_draft);
  d.colShuttleMapping = warp_materials.slice();
  d.colSystemMapping = warp_systems.slice();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r);
  return name_list + "+selvedge";
};
const selvedge = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 17435:
/*!********************************************!*\
  !*** ./src/app/core/operations/set/set.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "set": () => (/* binding */ set)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "set unset";
const old_names = ['unset'];
//PARAMS
const liftlower = {
  name: 'lift/lower',
  type: 'boolean',
  falsestate: 'unset to warp lift',
  truestate: 'unset to warp lower',
  value: 1,
  dx: ''
};
const params = [liftlower];
//INLETS
const draft_inlet = {
  name: 'input draft',
  type: 'static',
  value: null,
  dx: 'the draft you would like to modify',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let set_up = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    let set = row.map(el => {
      if (!el.is_set) {
        if (set_up == 1) return (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false);else return (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true);
      }
      return el;
    });
    pattern.pushWeftSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(set).val());
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'set unset interlacements(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const set = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 72023:
/*!**************************************************************!*\
  !*** ./src/app/core/operations/shaded_satin/shaded_satin.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shaded_satin": () => (/* binding */ shaded_satin)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "shaded_satin";
const old_names = [];
//PARAMS
const warps_raised = {
  name: 'warps raised',
  type: 'number',
  min: 0,
  max: 100,
  value: 2,
  dx: 'the number of warps to raise on the first pic'
};
const warps_lowered = {
  name: 'warps lowered',
  type: 'number',
  min: 0,
  max: 100,
  value: 5,
  dx: "the number of warps to keep lowered on the first pic"
};
const shift = {
  name: 'shift',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'amount to offset the interlacements on each row'
};
const facing = {
  name: 'facing',
  type: 'boolean',
  falsestate: "weft facing",
  truestate: "warp facing",
  value: 0,
  dx: ''
};
const params = [warps_raised, warps_lowered, shift, facing];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const raised = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const lowered = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const facing = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, param_vals);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  first_row.pushMultiple(1, raised).pushMultiple(0, lowered);
  if (facing) first_row.invert();
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < raised + lowered; i++) {
    pattern.pushWeftSequence(first_row.shift(shift).val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  const raised = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const lowered = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  return raised + "/" + lowered + ' Satin';
};
const shaded_satin = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 78856:
/*!************************************************!*\
  !*** ./src/app/core/operations/shift/shift.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shift": () => (/* binding */ shift)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



/**
 * this will be the default function going forward, as the others will be removed.
 */
const name = "shift";
const old_names = [];
//PARAMS
const amt_x = {
  name: 'warps',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: 'the amount of warps to shift by'
};
const amt_y = {
  name: 'wefts',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: 'the amount of wefts to shift by'
};
const params = [amt_x, amt_y];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to shift',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let amt_x = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let amt_y = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.colSystemMapping).shift(-amt_x);
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.colShuttleMapping).shift(-amt_x);
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.rowSystemMapping).shift(-amt_y);
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(input_draft.rowShuttleMapping).shift(-amt_y);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).shift(-amt_x).val();
    pattern.pushWeftSequence(seq);
  });
  let next_pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input_draft.drawdown); j++) {
    let col = pattern.getWarp(j);
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).shift(-amt_y);
    next_pattern.pushWarpSequence(seq.val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(next_pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt_x = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  let amt_y = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'shift' + amt_x + '/' + amt_y + '(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const shift = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 93838:
/*!**************************************************!*\
  !*** ./src/app/core/operations/shiftx/shiftx.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shiftx": () => (/* binding */ shiftx)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "shift left";
const old_names = [];
//PARAMS
const amt = {
  name: 'amount',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: 'the amount of warps to shift by'
};
const params = [amt];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  dx: 'the draft to shift',
  uses: "draft",
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).shift(-amt).val();
    pattern.pushWeftSequence(seq);
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'shift' + amt + '(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const shiftx = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 42454:
/*!**************************************************!*\
  !*** ./src/app/core/operations/shifty/shifty.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shifty": () => (/* binding */ shifty)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "shift up";
const old_names = [];
//PARAMS
const amt = {
  name: 'amount',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: 'the amount of wefts to shift by'
};
const params = [amt];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to shift',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input_draft.drawdown); j++) {
    const col = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(input_draft.drawdown, j);
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).shift(-amt).val();
    pattern.pushWarpSequence(seq);
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let amt = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'shifty' + amt + '(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const shifty = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 95680:
/*!*******************************************************!*\
  !*** ./src/app/core/operations/sinewave/sineweave.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinewave": () => (/* binding */ sinewave)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "sine";
const old_names = [];
//PARAMS
const width = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 10000,
  value: 100,
  dx: "the total ends of the draft"
};
const amplitude = {
  name: 'amplitude',
  type: 'number',
  min: 1,
  max: 10000,
  value: 20,
  dx: "the total number of pics for the sin wave to move through"
};
const freq = {
  name: 'frequency',
  type: 'number',
  min: 1,
  max: 10000,
  value: 50,
  dx: "controls number of waves to include "
};
const params = [width, amplitude, freq];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const width = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const amp = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const freq = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let j = 0; j < width; j++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().pushMultiple(0, amp);
    let i = Math.floor(amp / 2 * Math.sin(j * freq) + amp / 2);
    seq.set(i, 1);
    pattern.pushWarpSequence(seq.val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  const amp = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const freq = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  return amp + "/" + freq + 'sin';
};
const sinewave = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 6758:
/*!************************************************!*\
  !*** ./src/app/core/operations/slope/slope.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slope": () => (/* binding */ slope)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "slope";
const old_names = [];
//PARAMS
const end_shift = {
  name: 'end shift',
  type: 'number',
  min: -100,
  max: 100,
  value: 1,
  dx: 'the amount to shift rows by'
};
const pic_shift = {
  name: 'pic shift (n)',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: 'describes how many rows we should apply the shift to'
};
const params = [end_shift, pic_shift];
//INLETS
const draft_input = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to slope',
  num_drafts: 1
};
const inlets = [draft_input];
const perform = (param_vals, op_inputs) => {
  const end_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const pic_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  if (drafts.length == 0) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  drafts[0].drawdown.forEach((row, i) => {
    let row_shift = 0;
    if (pic_shift > 0) row_shift = Math.floor(i / pic_shift) * end_shift;
    pattern.pushWeftSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).shift(row_shift).val());
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, drafts[0]);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, drafts[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  const end_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const pic_shift = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  return 'slope' + pic_shift + "/" + end_shift;
};
const slope = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 77683:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/spliceinwarps/spliceinwarps.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spliceinwarps": () => (/* binding */ spliceinwarps)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_system__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/system */ 36305);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "splice in warps";
const old_names = [];
//PARAMS
const ends_btwn = {
  name: 'ends between insertions',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: "the number of ends to keep between each splice"
};
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: ""
};
const style = {
  name: 'splice style',
  type: 'boolean',
  falsestate: 'line by line',
  truestate: 'whole draft',
  value: 0,
  dx: "controls if the whole draft is spliced in every nth weft or just the next pic in the draft"
};
const params = [ends_btwn, repeats, style];
//INLETS
const receiving = {
  name: 'receiving draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to interlace',
  num_drafts: 1
};
const splicing = {
  name: 'splicing draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to splice into the recieving draft',
  num_drafts: 1
};
const inlets = [receiving, splicing];
const perform = (op_params, op_inputs) => {
  let receiving_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let splicing_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let ends_btwn = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  let style = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  let receiving_draft = receiving_drafts.length == 0 ? null : receiving_drafts[0];
  let splicing_draft = splicing_drafts.length == 0 ? null : splicing_drafts[0];
  const all_drafts = [receiving_draft, splicing_draft];
  if (all_drafts.length == 0) return Promise.resolve([]);
  if (receiving_draft == null || splicing_draft == null) return Promise.resolve([]);
  let total_warps = 0;
  let factors = [];
  if (repeat === 1) {
    if (style) {
      factors = [(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(receiving_draft.drawdown), (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(splicing_draft.drawdown) * (ends_btwn + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(splicing_draft.drawdown))];
    } else {
      factors = [(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(receiving_draft.drawdown), (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(splicing_draft.drawdown) * (ends_btwn + 1)];
    }
    total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(factors);
  } else {
    //sums the warps from all the drafts
    total_warps = all_drafts.reduce((acc, el) => {
      return acc + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown);
    }, 0);
  }
  let total_wefts = 0;
  const all_wefts = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(el.drawdown)).filter(el => el > 0);
  if (repeat === 1) total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(all_wefts);else total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getMaxWefts(all_drafts);
  const uniqueSystemCols = (0,_model_system__WEBPACK_IMPORTED_MODULE_3__.makeWarpSystemsUnique)(all_drafts.map(el => el.colSystemMapping));
  let array_a_ndx = 0;
  let array_b_ndx = 0;
  //create a draft to hold the merged values
  // const d:Draft = initDraftWithParams({warps: total_warps, wefts:total_wefts, rowShuttleMapping:static_input.rowShuttleMapping, rowSystemMapping:static_input.rowSystemMapping});
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let col_shuttle = [];
  let col_system = [];
  for (let j = 0; j < total_warps; j++) {
    let select_array;
    if (style) {
      const cycle = ends_btwn + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(splicing_draft.drawdown);
      select_array = j % cycle >= ends_btwn ? 1 : 0;
    } else {
      select_array = j % (ends_btwn + 1) === ends_btwn ? 1 : 0;
    }
    if (!repeat) {
      if (array_b_ndx >= (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(splicing_draft.drawdown)) select_array = 0;
      if (array_a_ndx >= (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(receiving_draft.drawdown)) select_array = 1;
    }
    let cur_warp_num = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(all_drafts[select_array].drawdown);
    let ndx = select_array === 0 ? array_a_ndx % cur_warp_num : array_b_ndx % cur_warp_num;
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    for (let i = 0; i < total_wefts; i++) {
      let cur_weft_num = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(all_drafts[select_array].drawdown);
      if (i >= cur_weft_num && !repeat) seq.push(2);
      seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(all_drafts[select_array].drawdown, i % cur_weft_num, ndx));
    }
    pattern.pushWarpSequence(seq.val());
    // const col:Array<Cell> = d.drawdown.reduce((acc, el) => {
    //   acc.push(el[j]);
    //   return acc;
    // }, [])
    col_system.push(uniqueSystemCols[select_array][ndx]);
    col_shuttle.push(all_drafts[select_array].colShuttleMapping[ndx]);
    if (select_array === 0) {
      array_a_ndx++;
    } else {
      array_b_ndx++;
    }
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = col_shuttle.slice();
  d.colSystemMapping = col_system.slice();
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, receiving_draft);
  // this.transferSystemsAndShuttles(d,op_input.drafts,op_input.params, 'interlace');
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let s = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r.concat(s));
  return "spliced(" + name_list + ")";
};
const spliceinwarps = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 53979:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/spliceinwefts/spliceinwefts.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splicein": () => (/* binding */ splicein)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_system__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/system */ 36305);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "splice in wefts";
const old_names = [];
//PARAMS
const pics_btwn = {
  name: 'pics between insertions',
  type: 'number',
  min: 1,
  max: 100,
  value: 1,
  dx: "the number of pics to keep between each splice row"
};
const repeats = {
  name: 'calculate repeats',
  type: 'boolean',
  falsestate: 'do not repeat inputs to match size',
  truestate: 'repeat inputs to match size',
  value: 1,
  dx: ""
};
const style = {
  name: 'splice style',
  type: 'boolean',
  falsestate: 'line by line',
  truestate: 'whole draft',
  value: 0,
  dx: "controls if the whole draft is spliced in every nth weft or just the next pic in the draft"
};
const params = [pics_btwn, repeats, style];
//INLETS
const receiving = {
  name: 'receiving draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'all the drafts you would like to interlace',
  num_drafts: 1
};
const splicing = {
  name: 'splicing draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to splice into the recieving draft',
  num_drafts: 1
};
const inlets = [receiving, splicing];
const perform = (op_params, op_inputs) => {
  let receiving_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let splicing_drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let pics_btwn = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let repeat = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  let style = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  let receiving_draft = receiving_drafts.length == 0 ? null : receiving_drafts[0];
  let splicing_draft = splicing_drafts.length == 0 ? null : splicing_drafts[0];
  const all_drafts = [receiving_draft, splicing_draft];
  if (all_drafts.length == 0) return Promise.resolve([]);
  if (receiving_draft == null || splicing_draft == null) return Promise.resolve([]);
  let total_wefts = 0;
  if (repeat === 1) {
    let factors = [];
    if (style) {
      factors = [(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown), (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown) * (pics_btwn + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown))];
    } else {
      factors = [(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(receiving_draft.drawdown), (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown) * (pics_btwn + 1)];
    }
    total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(factors);
  } else {
    //sums the wefts from all the drafts
    total_wefts = all_drafts.reduce((acc, el) => {
      return acc + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(el.drawdown);
    }, 0);
  }
  let total_warps = 0;
  const all_warps = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)).filter(el => el > 0);
  if (repeat === 1) total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].lcm(all_warps);else total_warps = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getMaxWarps(all_drafts);
  const uniqueSystemRows = (0,_model_system__WEBPACK_IMPORTED_MODULE_3__.makeWeftSystemsUnique)(all_drafts.map(el => el.rowSystemMapping));
  let array_a_ndx = 0;
  let array_b_ndx = 0;
  let row_shuttle = [];
  let row_system = [];
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < total_wefts; i++) {
    let select_array = 0;
    if (style) {
      const cycle = pics_btwn + (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown);
      select_array = i % cycle >= pics_btwn ? 1 : 0;
    } else {
      select_array = i % (pics_btwn + 1) === pics_btwn ? 1 : 0;
    }
    if (!repeat) {
      if (array_b_ndx >= (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(splicing_draft.drawdown)) select_array = 0;
      if (array_a_ndx >= (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(receiving_draft.drawdown)) select_array = 1;
    }
    let cur_weft_num = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(all_drafts[select_array].drawdown);
    let ndx = select_array === 0 ? array_a_ndx % cur_weft_num : array_b_ndx % cur_weft_num;
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    for (let j = 0; j < total_warps; j++) {
      let cur_warp_num = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(all_drafts[select_array].drawdown);
      if (j >= cur_warp_num && !repeat) seq.push(2);else seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(all_drafts[select_array].drawdown, ndx, j % cur_warp_num));
    }
    row_system.push(uniqueSystemRows[select_array][ndx]);
    row_shuttle.push(all_drafts[select_array].rowShuttleMapping[ndx]);
    pattern.pushWeftSequence(seq.val());
    if (select_array === 0) {
      array_a_ndx++;
    } else {
      array_b_ndx++;
    }
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.rowShuttleMapping = row_shuttle;
  d.rowSystemMapping = row_system.slice();
  if (receiving_draft !== null) d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, receiving_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let s = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 1);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r.concat(s));
  return "spliced(" + name_list + ")";
};
const splicein = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 39660:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/square_waffle/square_waffle.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "square_waffle": () => (/* binding */ square_waffle)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "waffle";
const old_names = [];
//PARAMS
const max_float = {
  name: 'float length',
  type: 'number',
  min: 3,
  max: 100,
  value: 7,
  dx: "the length of the longest float in the waffle structure. This number must be odd. If an even number is entered, the draft will make the longest float one less than the entered value."
};
const bindings = {
  name: 'number of binding rows',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: ""
};
const packing_factor = {
  name: 'packing',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: "controls how much each waffle will overlap. A higher number will lead to a tighter packing of waffles, where a lower number will lead to more spacing between waffles"
};
const params = [max_float, bindings, packing_factor];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  let float = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const bindings = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const packing_factor = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  //always make it an odd number 
  if (float % 2 == 0) float -= 1;
  let max_binding = 1 + bindings * 2;
  const size = float + max_binding * 2;
  const center_point = Math.floor(size / 2);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < center_point; i++) {
    let float_len = float - i * 2;
    let row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    if (float_len >= 0) {
      let pad = Math.floor((size - float_len) / 2);
      //push the float
      row.pushMultiple(1, float_len);
      for (let p = 0; p < pad; p++) {
        if (p < max_binding) {
          let val = p % 2 == 0 ? 0 : 1;
          row.unshift(val);
          row.push(val);
        } else {
          row.unshift(0);
          row.push(0);
        }
      }
    } else {
      max_binding -= 1;
      let pad = Math.floor((size - max_binding * 2) / 2);
      row.pushMultiple(0, pad);
      for (let b = 0; b < max_binding * 2; b++) {
        if (b == 0) row.push(0);
        if (b % 2 == 0) row.push(1);else row.push(0);
      }
      row.pushMultiple(0, pad);
    }
    pattern.pushWeftSequence(row.val());
    //if we're not in the center, push to both size
    if (i > 0) {
      pattern.unshiftWeftSequence(row.val());
    }
  }
  //now delete the rows that would for duplicates when tiling
  pattern.deleteWarp(0);
  pattern.deleteWarp(0);
  for (let p = 0; p < packing_factor; p++) {
    pattern.deleteWarp(pattern.warps() - 1);
    pattern.deleteWeft(pattern.wefts() - 1);
    if (p > 0) {
      pattern.deleteWeft(0);
      pattern.deleteWarp(0);
    }
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'waffle';
};
const square_waffle = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 99414:
/*!****************************************************!*\
  !*** ./src/app/core/operations/stretch/stretch.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stretch": () => (/* binding */ stretch)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "stretch";
const old_names = [];
//PARAMS
const warp_repeats = {
  name: 'warp-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'number of times to repeat each warp end'
};
const weft_repeats = {
  name: 'weft-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'number of times to repeat each weft pic'
};
const params = [warp_repeats, weft_repeats];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to stretch',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let warp_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  let weft_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, op_params);
  let weft_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  let weft_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  let warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  input_draft.drawdown.forEach((row, i) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD();
    row.forEach((cell, j) => {
      seq.pushMultiple((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell), warp_rep);
      if (i == 0) {
        warp_mats.push(input_draft.colShuttleMapping[j]);
        warp_sys.push(input_draft.colSystemMapping[j]);
      }
    });
    for (let r = 0; r < weft_rep; r++) {
      weft_mats.push(input_draft.rowShuttleMapping[i]);
      weft_sys.push(input_draft.rowSystemMapping[i]);
      pattern.pushWeftSequence(seq.val());
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_sys.val();
  d.rowShuttleMapping = weft_mats.val();
  d.rowSystemMapping = weft_sys.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'stretch(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const stretch = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 94485:
/*!********************************************************************!*\
  !*** ./src/app/core/operations/system_notation/system_notation.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notation_system": () => (/* binding */ notation_system)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/util */ 75973);





const name = "notation_system";
const old_names = [];
const dynamic_param_id = 0;
const dynamic_param_type = 'notation';
const layer_parsing_regex = /.*?\((.*?[a-xA-Z]*[\d]*.*?)\).*?/i;
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: '(a1b2c3)',
  regex: /.*?(.*?[a-xA-Z]+[\d]+).*?/i,
  error: 'invalid entry',
  dx: 'all system pairs must be listed as letters followed by numbers, layers are created by enclosing those system lists in pararenthesis. For example, the following are valid: (a1b2)(c3) or (c1)(a2). The following are invalid: (1a)(2b) or (2b'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'systems draft',
  type: 'static',
  value: null,
  uses: "warp-and-weft-data",
  dx: 'the draft that describes the system ordering we will add input structures within',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(original_string, /.*?(.*?[a-xA-Z]+[\d]+).*?/i);
  const layer_units = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(original_string, layer_parsing_regex);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  const system_map = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  if (op_inputs.length == 0) return Promise.resolve([]);
  if (system_map.length == 0) return Promise.resolve([]);
  ;
  let weft_system_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].rowSystemMapping);
  let warp_system_map = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD(system_map[0].colSystemMapping);
  //make sure the system draft map has a representation for every layer, even if the draft at that layer is null.
  const layer_draft_map = original_string_split.map((unit, ndx) => {
    let layer_id = layer_units.findIndex(el => el.includes(unit));
    let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, ndx + 1);
    return {
      wesy: parseWeftSystem(unit),
      wasy: parseWarpSystem(unit),
      layer: layer_id,
      draft: drafts.length == 0 ? (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
        wefts: 1,
        warps: 1,
        drawdown: [[(0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false)]]
      }) : drafts[0]
    };
  });
  let composite = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD().setBlank(2);
  layer_draft_map.forEach((sdm, ndx) => {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD().import(sdm.draft.drawdown);
    seq.mapToSystems(sdm.wesy, sdm.wasy, weft_system_map, warp_system_map);
    composite.overlay(seq, false);
  });
  let system_layer_map = [];
  layer_draft_map.forEach(el => {
    el.wasy.forEach(wasy => {
      system_layer_map.push({
        ws: wasy,
        layer: el.layer
      });
    });
  });
  composite.layerSystems(system_layer_map, warp_system_map);
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(composite.export());
  d.colSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, warp_system_map.val(), 'col', 3);
  d.rowSystemMapping = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(d.drawdown, weft_system_map.val(), 'row', 3);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return '' + param_vals[0] + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(param_val, layer_parsing_regex);
  console.log(matches);
  matches = matches.map(el => el.slice(1, -1));
  matches = matches.reduce((acc, val) => {
    const sub_match = _model_util__WEBPACK_IMPORTED_MODULE_4__["default"].parseRegex(val, param_regex);
    return acc.concat(sub_match);
  }, []);
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
//pull out all the nubmers from a notation element into warp systems
const parseWarpSystem = val => {
  let matches = val.match(/\d+/g);
  if (matches == null || matches.length == 0) {
    console.error("in Layer Notation, no warp system");
    return [];
  }
  return matches.map(el => parseInt(el) - 1);
};
//pull out all the letters from a notation element into weft systems
const parseWeftSystem = val => {
  let matches = val.match(/[a-zA-Z]+/g);
  if (matches == null || matches.length == 0) {
    console.error("in Layer Notation, no weft system");
    return [];
  }
  return matches.map(match => match.charCodeAt(0) - 97);
};
const notation_system = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 89029:
/*!************************************************!*\
  !*** ./src/app/core/operations/tabby/tabby.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tabby_der": () => (/* binding */ tabby_der)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "tabbyder";
const old_names = ['tabby'];
//PARAMS
const warps_raised = {
  name: 'warps raised',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: ""
};
const warps_lowered = {
  name: 'warps lowered',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: ""
};
const base_pics = {
  name: 'base pics',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: 'the number of pics upon which the first tabby pic will be repeated'
};
const alt_pics = {
  name: 'alt pics',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: 'the number of pics upon which the repeat the alteranting pattern'
};
const params = [warps_raised, warps_lowered, base_pics, alt_pics];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const raised = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const lowered = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  ;
  const rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const alt_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, param_vals);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  for (let j = 0; j < raised; j++) {
    first_row.push(1);
  }
  for (let j = 0; j < lowered; j++) {
    first_row.push(0);
  }
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  for (let i = 0; i < rep; i++) {
    pattern.pushWeftSequence(first_row.val());
  }
  let inverted = first_row.invert().val();
  for (let i = 0; i < alt_rep; i++) {
    pattern.pushWeftSequence(inverted);
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'tabby';
};
const tabby_der = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 49815:
/*!**********************************************!*\
  !*** ./src/app/core/operations/tile/tile.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tile": () => (/* binding */ tile)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "tile";
const old_names = [];
//PARAMS
const warp_repeats = {
  name: 'warp-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the number of times to repeat this time across the width'
};
const weft_repeats = {
  name: 'weft-repeats',
  type: 'number',
  min: 1,
  max: 100,
  value: 2,
  dx: 'the number of times to repeat this time across the length'
};
const params = [warp_repeats, weft_repeats];
//INLETS
const draft_inlet = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to tile',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  if (input_draft == null) return Promise.resolve([]);
  let warp_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  let weft_rep = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const w = warp_rep * (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(input_draft.drawdown);
  const h = weft_rep * (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(input_draft.drawdown);
  let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  seq.import(input_draft.drawdown);
  let dd = seq.fill(w, h).export();
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(dd);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'tile(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(drafts) + ")";
};
const tile = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 89469:
/*!**********************************************!*\
  !*** ./src/app/core/operations/trim/trim.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trim": () => (/* binding */ trim)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "trim";
const old_names = [];
//PARAMS
const starting_ends = {
  name: 'ends from start',
  type: 'number',
  min: 0,
  max: 10000,
  value: 1,
  dx: 'number of pics from the origin to start to remove'
};
const staring_pics = {
  name: 'pics from start',
  min: 0,
  max: 10000,
  value: 1,
  type: 'number',
  dx: 'number of ends from the origin to start to remove'
};
const ending_ends = {
  name: 'ends from the end',
  type: 'number',
  min: 1,
  max: 10000,
  value: 1,
  dx: 'number of ends from the opposite edge of the origin to remove'
};
const ending_pics = {
  name: 'pics from the end',
  type: 'number',
  min: 1,
  max: 10000,
  value: 1,
  dx: 'number of pics from the opposite edge of the origin to remove'
};
const params = [starting_ends, staring_pics, ending_ends, ending_pics];
//INLETS
const draft = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to trim',
  num_drafts: 1
};
const inlets = [draft];
const perform = (op_params, op_inputs) => {
  const draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getInputDraft)(op_inputs);
  const left = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const top = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, op_params);
  const right = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, op_params);
  const bottom = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, op_params);
  if (draft == null) return Promise.resolve([]);
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  //start with starting pics
  for (let i = top; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(draft.drawdown) - bottom; i++) {
    let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
    for (let j = left; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown) - right; j++) {
      seq.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getHeddle)(draft.drawdown, i, j));
    }
    pattern.pushWeftSequence(seq.val());
    weft_materials.push(draft.rowShuttleMapping[i]);
    weft_systems.push(draft.rowSystemMapping[i]);
  }
  for (let j = left; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown) - right; j++) {
    warp_mats.push(draft.colShuttleMapping[j]);
    warp_systems.push(draft.colSystemMapping[j]);
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let r = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  let name_list = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.parseDraftNames)(r);
  return 'trim(' + name_list + ")";
};
const trim = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 30961:
/*!************************************************!*\
  !*** ./src/app/core/operations/twill/twill.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "twill": () => (/* binding */ twill)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);



const name = "twill";
const old_names = [];
//PARAMS
const warps_raised = {
  name: 'warps raised',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: ""
};
const warps_lowered = {
  name: 'warps lowered',
  type: 'number',
  min: 0,
  max: 100,
  value: 3,
  dx: ""
};
const sz = {
  name: 'S/Z',
  type: 'boolean',
  falsestate: 'S',
  truestate: 'Z',
  value: 0,
  dx: ''
};
const facing = {
  name: 'facing',
  type: 'boolean',
  falsestate: "weft facing",
  truestate: "warp facing",
  value: 0,
  dx: ''
};
const params = [warps_raised, warps_lowered, sz, facing];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const raised = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const lowered = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const sz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const facing = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(3, param_vals);
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  first_row.pushMultiple(1, raised).pushMultiple(0, lowered);
  if (facing) first_row.invert();
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let shift_dir = sz ? -1 : 1;
  for (let i = 0; i < raised + lowered; i++) {
    pattern.pushWeftSequence(first_row.shift(shift_dir).val());
  }
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  const raised = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const lowered = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const sz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  const dir = sz ? "S" : "Z";
  return raised + "/" + lowered + dir + 'twill';
};
const twill = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 37571:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/undulatewarps/undulatewarps.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "undulatewarps": () => (/* binding */ undulatewarps)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "undulatewarps";
const old_names = [];
//PARAMS
const shift_pattern = {
  name: 'undulation pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '1 1 1 2 2 3',
  error: '',
  dx: 'shifts each end of the input draft according to the number sequence specified.'
};
const force_fit = {
  name: 'fit to input',
  type: 'boolean',
  falsestate: 'do not force the fit',
  truestate: 'force the draft to match the input size',
  value: 0,
  dx: 'controls if the output draft wefts should match the number of inputs to the undulation pattern or if the undulation pattern should repeat over the draft wefts'
};
const params = [shift_pattern, force_fit];
//INLETS
const draft_input = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to undulate',
  num_drafts: 1
};
const inlets = [draft_input];
const perform = (param_vals, op_inputs) => {
  const undulating_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const forcefit = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  if (drafts.length == 0) return Promise.resolve([]);
  let regex_matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(undulating_string, shift_pattern.regex);
  let undulating_array = regex_matches.map(el => parseInt(el));
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let max_wefts = 0;
  let max_warps = 0;
  if (forcefit) {
    max_warps = undulating_array.length;
    max_wefts = undulating_array.reduce((acc, val) => {
      if (Math.abs(val) > acc) return Math.abs(val);
      return acc;
    }, -1);
  } else {
    max_wefts = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(drafts[0].drawdown);
    max_warps = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(drafts[0].drawdown);
  }
  for (let j = 0; j < max_warps; j++) {
    let und_val = undulating_array[j % undulating_array.length];
    pattern.pushWarpSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import((0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(drafts[0].drawdown, j % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(drafts[0].drawdown))).resize(max_wefts).shift(und_val).val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, drafts[0]);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, drafts[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'undulate warps';
};
const undulatewarps = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 95397:
/*!****************************************************************!*\
  !*** ./src/app/core/operations/undulatewefts/undulatewefts.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "undulatewefts": () => (/* binding */ undulatewefts)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "undulatewefts";
const old_names = [];
//PARAMS
const shift_pattern = {
  name: 'undulation pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '1 1 1 2 2 3',
  error: '',
  dx: 'shifts each pic of the input draft according to the number sequence specified.'
};
const force_fit = {
  name: 'fit to input',
  type: 'boolean',
  falsestate: 'do not force the fit',
  truestate: 'force the draft to match the input size',
  value: 0,
  dx: 'controls if the output draft wefts should match the number of inputs to the undulation pattern or if the undulation pattern should repeat over the draft wefts'
};
const params = [shift_pattern, force_fit];
//INLETS
const draft_input = {
  name: 'draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft to undulate',
  num_drafts: 1
};
const inlets = [draft_input];
const perform = (param_vals, op_inputs) => {
  const undulating_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const forcefit = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  if (drafts.length == 0) return Promise.resolve([]);
  let regex_matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(undulating_string, shift_pattern.regex);
  let undulating_array = regex_matches.map(el => parseInt(el));
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let max_wefts = 0;
  let max_warps = 0;
  if (forcefit) {
    max_wefts = undulating_array.length;
    max_warps = undulating_array.reduce((acc, val) => {
      if (Math.abs(val) > acc) return Math.abs(val);
      return acc;
    }, -1);
  } else {
    max_wefts = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(drafts[0].drawdown);
    max_warps = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(drafts[0].drawdown);
  }
  for (let i = 0; i < max_wefts; i++) {
    let und_val = undulating_array[i % undulating_array.length];
    pattern.pushWeftSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(drafts[0].drawdown[i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.wefts)(drafts[0].drawdown)]).resize(max_warps).shift(und_val).val());
  }
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWarpSystemsAndShuttles)(d, drafts[0]);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.updateWeftSystemsAndShuttles)(d, drafts[0]);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'undulate wefts';
};
const undulatewefts = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 97758:
/*!**********************************************************************!*\
  !*** ./src/app/core/operations/undulating_twill/undulating_twill.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "undulatingtwill": () => (/* binding */ undulatingtwill)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "undulatingtwill";
const old_names = [];
//PARAMS
const string_input = {
  name: 'first pic pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '1 3 1 3',
  error: '',
  dx: 'the under over pattern of this twill'
};
const shift_pattern = {
  name: 'first pic pattern',
  type: 'string',
  regex: /(\d+)/,
  value: '1 1 1 2 2 3',
  error: '',
  dx: 'shifts the starting row by the amount spefied on each subsequent pic to create undulating patterns'
};
const sz = {
  name: 'S/Z',
  type: 'boolean',
  falsestate: 'S',
  truestate: 'Z',
  value: 0,
  dx: ''
};
const params = [string_input, shift_pattern, sz];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  const input_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, param_vals);
  const undulating_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(1, param_vals);
  const sz = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(2, param_vals);
  let regex_matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(input_string, shift_pattern.regex);
  let input_array = regex_matches.map(el => parseInt(el));
  regex_matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(undulating_string, shift_pattern.regex);
  let undulating_array = regex_matches.map(el => parseInt(el));
  let first_row = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let under = true;
  input_array.forEach(input => {
    first_row.pushMultiple(under, input);
    under = !under;
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  undulating_array.forEach(shiftval => {
    let shift_dir = sz ? -1 * shiftval : 1 * shiftval;
    pattern.pushWeftSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD(first_row.val()).shift(shift_dir).val());
  });
  return Promise.resolve([(0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export())]);
};
const generateName = (param_vals, op_inputs) => {
  return 'shifty';
};
const undulatingtwill = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 27605:
/*!************************************************!*\
  !*** ./src/app/core/operations/unset/unset.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unset": () => (/* binding */ unset)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/sequence */ 62390);




const name = "set down to unset";
const old_names = ['set'];
//PARAMS
const liftlower = {
  name: 'raised/lowered',
  type: 'boolean',
  falsestate: 'warp raised to unset',
  truestate: 'warp lowered to unset',
  value: 1,
  dx: ""
};
const params = [liftlower];
//INLETS
const draft_inlet = {
  name: 'input draft',
  type: 'static',
  value: null,
  uses: "draft",
  dx: 'the draft you would like to modify',
  num_drafts: 1
};
const inlets = [draft_inlet];
const perform = (op_params, op_inputs) => {
  let input_draft = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getInputDraft)(op_inputs);
  let set_up = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, op_params);
  if (input_draft == null) return Promise.resolve([]);
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.TwoD();
  input_draft.drawdown.forEach(row => {
    let set = row.map(el => {
      if (el.is_set) {
        if (el.is_up && set_up == 0) return (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null);else if (!el.is_up && set_up == 1) return (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(null);
      }
      return el;
    });
    pattern.pushWeftSequence(new _model_sequence__WEBPACK_IMPORTED_MODULE_3__.Sequence.OneD().import(set).val());
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftFromDrawdown)(pattern.export());
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWeftSystemsAndShuttles)(d, input_draft);
  d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.updateWarpSystemsAndShuttles)(d, input_draft);
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  let drafts = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getAllDraftsAtInlet)(op_inputs, 0);
  return 'set interlacements to unset(' + (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.parseDraftNames)(drafts) + ")";
};
const unset = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 70449:
/*!********************************************************!*\
  !*** ./src/app/core/operations/waffleish/waffleish.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waffleish": () => (/* binding */ waffleish)
/* harmony export */ });
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/cell */ 94467);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/operations */ 41337);



const name = "waffleish";
const old_names = [];
//PARAMS
const ends = {
  name: 'ends',
  type: 'number',
  min: 1,
  max: 100,
  value: 8,
  dx: ""
};
const pics = {
  name: 'pics',
  type: 'number',
  min: 1,
  max: 100,
  value: 8,
  dx: ''
};
const border = {
  name: 'interlacement borders',
  type: 'number',
  min: 0,
  max: 100,
  value: 1,
  dx: 'builds tabby around the edges of the central diamond, creating some strange patterns'
};
const params = [ends, pics, border];
//INLETS
const inlets = [];
const perform = (param_vals, op_inputs) => {
  let width = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(0, param_vals);
  const height = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(1, param_vals);
  const bindings = (0,_model_operations__WEBPACK_IMPORTED_MODULE_2__.getOpParamValById)(2, param_vals);
  let outputs = [];
  const pattern = [];
  const mid_warp = Math.floor(width / 2); //for 5 this is 2
  const mid_weft = Math.floor(height / 2); //for 5 this is 2
  const warps_to_wefts_ratio = mid_warp / mid_weft;
  //first create the diamond
  for (let i = 0; i < height; i++) {
    pattern.push([]);
    const row_offset = i > mid_weft ? height - i : i;
    for (let j = 0; j < width; j++) {
      if (j >= mid_warp - row_offset * warps_to_wefts_ratio && j <= mid_warp + row_offset * warps_to_wefts_ratio) pattern[i][j] = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(true);else pattern[i][j] = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.createCell)(false);
    }
  }
  //carve out the tabby
  if (bindings > 0) {
    const tabby_range_size = bindings * 2 + 1;
    for (let i = 0; i < height; i++) {
      const row_offset = i > mid_weft ? height - i : i;
      const range_size = Math.floor(mid_warp + row_offset * warps_to_wefts_ratio - (mid_warp - row_offset * warps_to_wefts_ratio)) + 1;
      //figure out how many bindings we're dealing with here - alterlate to the inside and outside of the diamong
      for (let b = 1; b <= bindings; b++) {
        const inside = b % 2 == 1 ? true : false;
        if (inside) {
          const increment = Math.floor(b + 1 / 2);
          const diff = Math.ceil((range_size - tabby_range_size) / 2);
          const left_j = mid_warp - diff * increment;
          const right_j = mid_warp + diff * increment;
          if (left_j > 0 && left_j < width) pattern[i][left_j].is_set = false;
          if (right_j > 0 && right_j < width) pattern[i][right_j].is_set = false;
        } else {
          const increment = Math.floor(b / 2);
          const left_j = mid_warp - Math.floor((range_size - 1) / 2) - increment * 2;
          const right_j = mid_warp + Math.floor((range_size - 1) / 2) + increment * 2;
          if (left_j > 0 && left_j < width) pattern[i][left_j].is_set = true;
          if (right_j > 0 && right_j < width) pattern[i][right_j].is_set = true;
        }
      }
    }
  }
  pattern.forEach(row => {
    row.forEach(cell => {
      if ((0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.getCellValue)(cell) == null) cell = (0,_model_cell__WEBPACK_IMPORTED_MODULE_0__.setCellValue)(cell, false);
    });
  });
  const d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
    warps: width,
    wefts: height,
    pattern: pattern
  });
  outputs.push(d);
  return Promise.resolve(outputs);
};
const generateName = (param_vals, op_inputs) => {
  return 'waffleish';
};
const waffleish = {
  name,
  old_names,
  params,
  inlets,
  perform,
  generateName
};

/***/ }),

/***/ 60233:
/*!**************************************************************!*\
  !*** ./src/app/core/operations/warp_profile/warp_profile.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "warp_profile": () => (/* binding */ warp_profile)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "warp_profile";
const old_names = ["dynamicjoinleft"];
const dynamic_param_id = 0;
const dynamic_param_type = 'profile';
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: 'a b c a b c',
  regex: /\S+/,
  error: 'invalid entry',
  dx: 'all entries must be letters separated by a space'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'weft pattern',
  type: 'static',
  value: null,
  uses: "weft-data",
  dx: 'optional, define a custom weft material or system pattern here',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const system_data = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(original_string, op_params[0].param.regex);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  if (op_inputs.length == 0) return Promise.resolve([]);
  //now just get all the drafts
  const all_drafts = op_inputs.filter(el => el.inlet_id > 0).reduce((acc, el) => {
    el.drafts.forEach(draft => {
      acc.push(draft);
    });
    return acc;
  }, []);
  let total_wefts = 0;
  const all_wefts = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)).filter(el => el > 0);
  total_wefts = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(all_wefts);
  const profile_draft_map = op_inputs.map(el => {
    console.log("EL is ", el);
    return {
      id: el.inlet_id,
      val: el.params == undefined || el.params[0] == undefined ? '' : el.params[0].toString(),
      draft: el.drafts[0]
    };
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  if (system_data.length == 0) {
    weft_systems.import(all_drafts[0].rowSystemMapping).resize(total_wefts);
    weft_materials.import(all_drafts[0].rowShuttleMapping).resize(total_wefts);
  } else {
    weft_systems.import(system_data[0].rowSystemMapping).resize(total_wefts);
    weft_materials.import(system_data[0].rowShuttleMapping).resize(total_wefts);
  }
  original_string_split.forEach(string_id => {
    let pdm_item = profile_draft_map.find(el => el.val == string_id);
    if (pdm_item !== undefined) {
      let draft = pdm_item.draft;
      for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(draft.drawdown); j++) {
        let col = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getCol)(draft.drawdown, j);
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(col).resize(total_wefts);
        pattern.pushWarpSequence(seq.val());
        warp_mats.push(draft.colShuttleMapping[j % draft.colShuttleMapping.length]);
        warp_systems.push(draft.colSystemMapping[j % draft.colSystemMapping.length]);
      }
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'pattern across width:' + param_vals[0].val + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(param_val, param_regex);
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].filterToUniqueValues(matches);
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
const warp_profile = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 42131:
/*!**************************************************************!*\
  !*** ./src/app/core/operations/weft_profile/weft_profile.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "weft_profile": () => (/* binding */ weft_profile)
/* harmony export */ });
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _model_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/operations */ 41337);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model/util */ 75973);




const name = "weft_profile";
const old_names = ["dynamicjointop"];
const dynamic_param_id = 0;
const dynamic_param_type = 'profile';
//PARAMS
const pattern = {
  name: 'pattern',
  type: 'string',
  value: 'a b c a b c',
  regex: /\S+/,
  error: 'invalid entry',
  dx: 'all entries must be letters separated by a space'
};
const params = [pattern];
//INLETS
const systems = {
  name: 'warp pattern',
  type: 'static',
  value: null,
  uses: "warp-data",
  dx: 'optional, define a custom weft material or system pattern here',
  num_drafts: 1
};
const inlets = [systems];
const perform = (op_params, op_inputs) => {
  const original_string = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getOpParamValById)(0, op_params);
  const system_data = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.getAllDraftsAtInlet)(op_inputs, 0);
  const original_string_split = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(original_string, op_params[0].param.regex);
  if (original_string_split == null || original_string_split.length == 0) return Promise.resolve([]);
  if (op_inputs.length == 0) return Promise.resolve([]);
  //now just get all the drafts
  const all_drafts = op_inputs.filter(el => el.inlet_id > 0).reduce((acc, el) => {
    el.drafts.forEach(draft => {
      acc.push(draft);
    });
    return acc;
  }, []);
  let total_warps = 0;
  const all_warps = all_drafts.map(el => (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.warps)(el.drawdown)).filter(el => el > 0);
  total_warps = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].lcm(all_warps);
  const profile_draft_map = op_inputs.map(el => {
    return {
      id: el.inlet_id,
      val: el.params[0].toString(),
      draft: el.drafts[0]
    };
  });
  let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.TwoD();
  let warp_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_systems = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  let weft_materials = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD();
  if (system_data.length == 0) {
    warp_systems.import(all_drafts[0].colSystemMapping).resize(total_warps);
    warp_mats.import(all_drafts[0].colShuttleMapping).resize(total_warps);
  } else {
    warp_systems.import(system_data[0].colSystemMapping).resize(total_warps);
    warp_mats.import(system_data[0].colShuttleMapping).resize(total_warps);
  }
  original_string_split.forEach(string_id => {
    let pdm_item = profile_draft_map.find(el => el.val == string_id);
    if (pdm_item !== undefined) {
      let draft = pdm_item.draft;
      draft.drawdown.forEach((row, i) => {
        let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_2__.Sequence.OneD().import(row).resize(total_warps);
        pattern.pushWeftSequence(seq.val());
        weft_materials.push(draft.rowShuttleMapping[i % draft.rowShuttleMapping.length]);
        weft_systems.push(draft.rowSystemMapping[i % draft.rowSystemMapping.length]);
      });
    }
  });
  let d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftFromDrawdown)(pattern.export());
  d.colShuttleMapping = warp_mats.val();
  d.colSystemMapping = warp_systems.val();
  d.rowShuttleMapping = weft_materials.val();
  d.rowSystemMapping = weft_systems.val();
  return Promise.resolve([d]);
};
const generateName = (param_vals, op_inputs) => {
  return 'pattern across length:' + param_vals[0].val + "";
};
const onParamChange = (param_vals, inlets, inlet_vals, changed_param_id, param_val) => {
  inlet_vals = (0,_model_operations__WEBPACK_IMPORTED_MODULE_1__.reduceToStaticInputs)(inlets, inlet_vals);
  const param_regex = param_vals[0].param.regex;
  let matches = [];
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].parseRegex(param_val, param_regex);
  matches = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].filterToUniqueValues(matches);
  matches.forEach(el => {
    inlet_vals.push(el);
  });
  return inlet_vals;
};
const weft_profile = {
  name,
  old_names,
  params,
  inlets,
  dynamic_param_id,
  dynamic_param_type,
  perform,
  generateName,
  onParamChange
};

/***/ }),

/***/ 14328:
/*!***************************************************!*\
  !*** ./src/app/core/profile/profile.component.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfileComponent": () => (/* binding */ ProfileComponent)
/* harmony export */ });
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);



class ProfileComponent {
  constructor(authService) {
    // console.log("getting name", authService.getUid())
    // this.uid = authService.getUid();
    this.authService = authService;
  }
  ngOnInit() {}
  signOut() {
    this.authService.logout();
  }
}
ProfileComponent.ɵfac = function ProfileComponent_Factory(t) {
  return new (t || ProfileComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_0__.AuthService));
};
ProfileComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: ProfileComponent,
  selectors: [["app-profile"]],
  decls: 4,
  vars: 1,
  consts: [[3, "click"]],
  template: function ProfileComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "button", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ProfileComponent_Template_button_click_2_listener() {
        return ctx.signOut();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "Sign Out");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" Welcome to your secret profile token: ", ctx.uid, "!\n");
    }
  },
  styles: ["\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 46866:
/*!***********************************************!*\
  !*** ./src/app/core/provider/auth.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthService": () => (/* binding */ AuthService)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 26439);
/* harmony import */ var _angular_fire_database__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/fire/database */ 36139);
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/fire/auth */ 61577);
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/fire/auth */ 23628);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 22560);






class AuthService {
  constructor(auth) {
    this.auth = auth;
    this.user = rxjs__WEBPACK_IMPORTED_MODULE_1__.EMPTY;
    this.showLoginButton = false;
    this.showLogoutButton = false;
    this.isLoggedIn = false;
    this.firstLoad = true;
    this.username = "";
    if (auth) {
      this.userDisposable = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.authState)(this.auth).subscribe(user => {
        this.showLoginButton = user === null;
        this.showLogoutButton = user !== null;
        this.isLoggedIn = user !== null;
        this.uid = user === null ? "" : user.uid;
        this.firstLoad = false;
        if (user !== null) this.username = user.displayName === null ? user.email : user.displayName;
        //udpate the file system based on the files existing in the database
        // if(user !== null){
        //   const db = getDatabase();
        //   const userFiles = query(ref(db, 'filemeta'), orderByChild('timestamp'));
        //   onValue(userFiles, (snapshot) => {
        //     snapshot.forEach((childSnapshot) => {
        //       const childKey = childSnapshot.key;
        //       const childData = childSnapshot.val();
        //       if(childData.owner === user.uid) this.filesystem.addToTree(parseInt(childKey), childData)
        //     });
        //   }, {
        //     onlyOnce: true
        //   });
        // }
      });
    }
  }

  emailSignUp(email, password) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.createUserWithEmailAndPassword)(_this.auth, email, password).then(userCredential => {
        // Signed in 
        return "";
        // ...
      }).catch(error => {
        const errorCode = error.code;
        const errorMessage = error.message;
        return errorCode;
      });
    })();
  }
  emailSignIn(email, password) {
    var _this2 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.signInWithEmailAndPassword)(_this2.auth, email, password).then(userCredential => {
        // Signed in 
        const user = userCredential.user;
        return "";
        // ...
      }).catch(error => {
        const errorCode = error.code;
        const errorMessage = error.message;
        return error.code;
      });
    })();
  }
  login() {
    var _this3 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.signInWithPopup)(_this3.auth, new _angular_fire_auth__WEBPACK_IMPORTED_MODULE_3__.GoogleAuthProvider());
    })();
  }
  loginAnonymously() {
    var _this4 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.signInAnonymously)(_this4.auth);
    })();
  }
  logout() {
    var _this5 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.signOut)(_this5.auth);
    })();
  }
  /**
   * Used to determine when login is taking place, at very first load or mid use?
   * @returns true if this is the first time the page is being loaded, false if it has already been active
   */
  isFirstSession() {
    console.log("this.firstload", this.firstLoad);
    return this.firstLoad;
  }
  /**
   * pings the users database to see if this user has an account already
   * if it does, returns the account info
   * if not, it returns null
   */
  getAccount(uid) {
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_4__.getDatabase)();
    return (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_4__.get)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_4__.ref)(db, `users/${uid}`)).then(userdata => {
      if (userdata.exists()) {
        return Promise.resolve(userdata.val());
      } else {
        return Promise.resolve(null);
      }
    });
  }
  /**
   * checks to see if this user has an id already saved for their last used file
   * @param user
   */
  getMostRecentFileIdFromUser(user) {
    return this.getAccount(user.uid).then(data => {
      if (data.last_opened === undefined) return Promise.resolve(null);else return Promise.resolve(data.last_opened);
    }).catch(console.error);
  }
  /**
   * checks to see if this user has an ada file already saved for their last used file
   * @param user
   */
  getMostRecentAdaFromUser(user) {
    return this.getAccount(user.uid).then(data => {
      if (data.ada === undefined) return Promise.resolve(null);else return Promise.resolve(data.ada);
    });
  }
  ngOnDestroy() {
    if (this.userDisposable) {
      this.userDisposable.unsubscribe();
    }
    if (this.userData) {
      this.userData.unsubscribe();
    }
  }
}
AuthService.ɵfac = function AuthService_Factory(t) {
  return new (t || AuthService)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.Auth, 8));
};
AuthService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjectable"]({
  token: AuthService,
  factory: AuthService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 73169:
/*!******************************************************!*\
  !*** ./src/app/core/provider/designmodes.service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DesignmodesService": () => (/* binding */ DesignmodesService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class DesignmodesService {
  /**
   * Creates the objects that track which design mode (draw, select, etc) the user is currently working in.
   */
  constructor() {
    this.loom_types = [
    //{value: 'rigid', viewValue: 'Ridid Heddle Loom',icon: "fas fa-slash", children: [], selected: false},
    {
      value: 'direct',
      viewValue: 'Direct Tieup Loom',
      icon: "fas fa-slash",
      children: [],
      selected: true
    }, {
      value: 'frame',
      viewValue: 'Shaft/Treadle Loom',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }, {
      value: 'jacquard',
      viewValue: 'Jacquard',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }];
    this.material_types = [{
      value: '0',
      viewValue: 'Non-Conductive',
      icon: "fas fa-slash",
      children: [],
      selected: true
    }, {
      value: '1',
      viewValue: 'Conductive',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }, {
      value: '2',
      viewValue: 'Resistive',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }];
    this.view_modes = [{
      value: 'visual',
      viewValue: 'Visual',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }, {
      value: 'pattern',
      viewValue: 'Draft',
      icon: "fas fa-slash",
      children: [],
      selected: true
    }, {
      value: 'yarn',
      viewValue: 'Circuit',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }, {
      value: 'crossings',
      viewValue: 'Crossings',
      icon: "fas fa-times",
      children: [],
      selected: false
    }
    // {value: 'mask', viewValue: 'Masks'}
    ];

    this.density_units = [{
      value: 'in',
      viewValue: 'Ends per Inch',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }, {
      value: 'cm',
      viewValue: 'Ends per 10cm ',
      icon: "fas fa-slash",
      children: [],
      selected: false
    }];
    this.shapes = [{
      value: 'line',
      viewValue: 'Line',
      icon: "fas fa-slash",
      children: [],
      selected: true
    }, {
      value: 'fill_circle',
      viewValue: 'Filled Circle',
      icon: "fas fa-circle",
      children: [],
      selected: false
    }, {
      value: 'stroke_circle',
      viewValue: 'Circle Outline',
      icon: "far fa-circle",
      children: [],
      selected: false
    }, {
      value: 'fill_rect',
      viewValue: 'Filled Rectangle',
      icon: "fas fa-square",
      children: [],
      selected: false
    }, {
      value: 'stroke_rect',
      viewValue: 'Rectangle Outline',
      icon: "far fa-square",
      children: [],
      selected: false
    }, {
      value: 'free',
      viewValue: 'Freehand',
      icon: "fas fa-draw-polygon",
      children: [],
      selected: false
    }];
    this.draw_modes = [{
      value: 'toggle',
      viewValue: 'Toggle Heddle',
      icon: "fas fa-adjust",
      children: [],
      selected: true
    }, {
      value: 'up',
      viewValue: 'Set Heddle Up',
      icon: "fas fa-square",
      children: [],
      selected: false
    }, {
      value: 'down',
      viewValue: 'Set Heddle Down',
      icon: "far fa-square",
      children: [],
      selected: false
    }, {
      value: 'unset',
      viewValue: 'Unset Heddle',
      icon: "far fa-times",
      children: [],
      selected: false
    }, {
      value: 'material',
      viewValue: 'Draw Material',
      icon: "fas fa-pen",
      children: [],
      selected: false
    }];
    this.drawdown_editing_style = [{
      value: 'drawdown',
      viewValue: 'Edit Drawdown (and Auto-Generate Loom Configuration)',
      icon: "fas fa-pen",
      children: [],
      selected: true
    }, {
      value: 'loom',
      viewValue: 'Edit Loom Configuration (and Auto-Generate Drawdown)',
      icon: "fas fa-shapes",
      children: [],
      selected: false
    }];
    this.design_modes = [{
      value: 'draw',
      viewValue: 'Draw Heddle',
      icon: "fas fa-pen",
      children: this.draw_modes,
      selected: false
    }, {
      value: 'pan',
      viewValue: 'Pan',
      icon: "fas fa-hand",
      children: [],
      selected: false
    },
    // {value: 'shape', viewValue: 'Shape', icon: "fas fa-shapes", children: this.shapes,selected: false},
    {
      value: 'select',
      viewValue: 'Select',
      icon: "fas fa-expand",
      children: [],
      selected: false
    }, {
      value: 'marquee',
      viewValue: 'Cut/Create',
      icon: "fas fa-expand",
      children: [],
      selected: false
    }, {
      value: 'move',
      viewValue: 'Move',
      icon: "fas fa-arrows-alt",
      children: [],
      selected: true
    }
    // {value: 'operation', viewValue: 'Operations', icon: "fas fa-project-diagram", children: [],selected:false},
    // {value: 'zoom_in', viewValue: 'Zoom In', icon: "fas fa-search-plus", children: [], selected:false},
    // {value: 'zoom_out', viewValue: 'Zoom Out', icon: "fas fa-search-minus", children: [],selected:false},
    // {value: 'comment', viewValue: 'Comment', icon: "fas fa-comment", children: [],selected:false},
    ];

    this.design_actions = [{
      value: 'toggle',
      viewValue: 'Invert Region',
      icon: "fas fa-adjust",
      children: [],
      selected: false
    }, {
      value: 'up',
      viewValue: 'Set Region Heddles Up',
      icon: "fas fa-square",
      children: [],
      selected: false
    }, {
      value: 'down',
      viewValue: 'Set Region Heddles Down',
      icon: "far fa-square",
      children: [],
      selected: false
    }, {
      value: 'flip_x',
      viewValue: 'Vertical Flip',
      icon: "fas fa-arrows-alt-v",
      children: [],
      selected: false
    }, {
      value: 'flip_y',
      viewValue: 'Horizontal Flip',
      icon: "fas fa-arrows-alt-h",
      children: [],
      selected: false
    }, {
      value: 'shift_left',
      viewValue: 'Shift 1 Warp Left',
      icon: "fas fa-arrow-left",
      children: [],
      selected: false
    }, {
      value: 'shift_up',
      viewValue: 'Shift 1 Pic Up',
      icon: "fas fa-arrow-up",
      children: [],
      selected: false
    }, {
      value: 'copy',
      viewValue: 'Copy Selected Region',
      icon: "fa fa-clone",
      children: [],
      selected: false
    }, {
      value: 'paste',
      viewValue: 'Paste Copyed Pattern to Selected Region',
      icon: "fa fa-paste",
      children: [],
      selected: false
    }];
  }
  getOptionSet(name) {
    let modes = [];
    switch (name) {
      case 'design_modes':
        modes = this.design_modes;
        break;
      case 'view_modes':
        modes = this.view_modes;
        break;
      case 'density_units':
        modes = this.density_units;
        break;
      case 'loom_types':
        modes = this.loom_types;
        break;
      case 'shapes':
        modes = this.shapes;
        break;
      case 'draw_modes':
        modes = this.draw_modes;
        break;
      case 'material_types':
        modes = this.material_types;
        break;
      case 'design_actions':
        modes = this.design_actions;
        break;
      case 'drawdown_editing_style':
        modes = this.drawdown_editing_style;
        break;
    }
    return modes;
  }
  /**
   * A function to selects one mode and deselect others from a set of options given by the string "from"
   * @param value of the component we're looking to set as selected
   * @param name of the option set we are selecting from
   */
  selectDesignMode(value, from) {
    switch (from) {
      case 'shapes':
        this.selectDesignMode('shape', 'design_modes');
        break;
      case 'draw_modes':
        this.selectDesignMode('draw', 'design_modes');
        break;
    }
    const modes = this.getOptionSet(from);
    modes.forEach(mode => {
      if (mode.value === value) {
        mode.selected = true;
      } else {
        mode.selected = false;
      }
    });
  }
  /**
   * A function to retreive a mode by name.
   * @param name the name of the component we're looking to retreive
   * @returns the DeisgnMode associated with that name, or null if nothing was found
   */
  getDesignMode(value, from) {
    const modes = this.getOptionSet(from);
    let found = null;
    modes.forEach(mode => {
      if (mode.value === value) found = mode;
    });
    return found;
  }
  /**
   * A function to retreive a mode by name.
   * Possible modes to select from are:
   * design_modes
   * draw_modes
   * shapes
   * design_actions
   * drawdown_editing_style
   * view_modes
   * density_units
   * material_types
   * loom_types
   * @returns the DeisgnMode associated with that name, or null if nothing was found
   *
   */
  getSelectedDesignMode(from) {
    const modes = this.getOptionSet(from);
    let found = null;
    modes.forEach(mode => {
      if (mode.selected === true) found = mode;
    });
    //if null, return the first in the list
    if (found === null) {
      const opts = this.getOptionSet(from);
      this.selectDesignMode(opts[0].value, from);
      return opts[0];
    }
    return found;
  }
  /**
   * checks if a user specified mode is selected
   * @param name the name of the mode we are asking about
   * @returns boolean describing if it was selected or not
   */
  isSelected(value, from) {
    const mode = this.getDesignMode(value, from);
    if (mode == null) {
      console.error("mode ", value, " in ", from, " is null ");
      return false;
    }
    return mode.selected;
  }
}
DesignmodesService.ɵfac = function DesignmodesService_Factory(t) {
  return new (t || DesignmodesService)();
};
DesignmodesService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: DesignmodesService,
  factory: DesignmodesService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 22031:
/*!*********************************************************!*\
  !*** ./src/app/core/provider/exampleservice.service.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExampleserviceService": () => (/* binding */ ExampleserviceService)
/* harmony export */ });
/* harmony import */ var _assets_json_examples_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../assets/json/examples.json */ 18639);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


class ExampleserviceService {
  constructor() {
    this.example_set = [];
    _assets_json_examples_json__WEBPACK_IMPORTED_MODULE_0__.examples.forEach(e => {
      this.example_set.push({
        id: e.id,
        ext: e.ext,
        desc: e.desc,
        title: e.title
      });
    });
  }
  getExamples() {
    return this.example_set;
  }
}
ExampleserviceService.ɵfac = function ExampleserviceService_Factory(t) {
  return new (t || ExampleserviceService)();
};
ExampleserviceService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ExampleserviceService,
  factory: ExampleserviceService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 96374:
/*!***********************************************!*\
  !*** ./src/app/core/provider/file.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileService": () => (/* binding */ FileService)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/drafts */ 1435);
/* harmony import */ var _model_looms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/looms */ 58364);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/util */ 75973);
/* harmony import */ var _filesystem_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filesystem.service */ 65130);
/* harmony import */ var _materials_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./materials.service */ 2940);
/* harmony import */ var _notes_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./notes.service */ 31326);
/* harmony import */ var _systems_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./systems.service */ 14711);
/* harmony import */ var _tree_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tree.service */ 6177);
/* harmony import */ var _version_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./version.service */ 20911);
/* harmony import */ var _workspace_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./workspace.service */ 80828);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 22560);



















/**
 * this service handles the processing of data from an uplaoded file.
 * It is called from the InitModal when the user uploads data.
 * The principle sholud be that you can load any .ada file into
 * mixer or weaver, no matter what.
 */
class FileService {
  constructor(tree, ns, ms, ss, vs, ws, files) {
    var _this = this;
    this.tree = tree;
    this.ns = ns;
    this.ms = ms;
    this.ss = ss;
    this.vs = vs;
    this.ws = ws;
    this.files = files;
    this.status = [];
    this.loader = null;
    this.saver = null;
    this.status = [{
      id: 0,
      message: 'success',
      success: true
    }, {
      id: 1,
      message: 'incompatable type',
      success: false
    }];
    /**
     * file loader loads files of different types,
     * for .adaFiles, it gets the data listed in SaveObj and begins to process it
     */
    const dloader = {
      ada: function () {
        var _ref = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (filename, id, desc, data) {
          if (desc === undefined) desc = "";
          if (filename == undefined) filename = 'draft';
          if (id === -1) id = _this.files.generateFileId();
          let draft_nodes = [];
          //let looms: Array<Loom> = [];
          let ops = [];
          let version = "0.0.0";
          _this.clearAll();
          if (data == undefined) return Promise.reject(" there is no data");
          if (data.version !== undefined) version = data.version;
          if (data.workspace !== undefined) {
            _this.ws.loadWorkspace(data.workspace);
          } else {
            _this.ws.initDefaultWorkspace();
          }
          if (data.shuttles !== undefined) {
            _this.ms.overloadShuttles(data.shuttles);
          } else {
            if (data.materials !== undefined) {
              _this.ms.overloadShuttles(data.materials);
            }
          }
          const flips_required = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].getFlips(3, _this.ws.selected_origin_option);
          const loom_elements = [];
          const loom_fns = [];
          const draft_elements = [];
          const draft_fns = [];
          if (!_model_util__WEBPACK_IMPORTED_MODULE_3__["default"].sameOrNewerVersion(version, '3.4.9')) {
            data.nodes.forEach(node => {
              if (node.bounds !== undefined) node.topleft = node.bounds.topleft;
            });
          }
          if (_model_util__WEBPACK_IMPORTED_MODULE_3__["default"].sameOrNewerVersion(version, '3.4.5')) {
            draft_nodes = data.draft_nodes;
            if (draft_nodes == undefined) draft_nodes = [];
            if (draft_nodes !== undefined) {
              draft_nodes.forEach(el => {
                if (el.draft !== null && el.draft !== undefined) {
                  draft_fns.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.loadDraftFromFile)(el.draft, flips_required, version));
                  draft_elements.push(el);
                }
                if (el.loom !== null && el.loom !== undefined) {
                  loom_fns.push((0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.loadLoomFromFile)(el.loom, flips_required, version));
                  loom_elements.push(el);
                }
              });
            }
          } else {
            //handle old file types that didn't separate out drafts
            if (data.drafts === undefined) data.drafts = [data];
            data.nodes.filter(el => el.type === 'draft').forEach( /*#__PURE__*/function () {
              var _ref2 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (node) {
                const loom = data.looms.find(loom => loom.draft_id === node.node_id);
                const draft = data.drafts.find(draft => draft.id === node.node_id);
                const dn = {
                  node_id: node === undefined ? -1 : node.node_id,
                  draft_id: node.node_id,
                  draft_name: node.draft_name,
                  draft: draft,
                  draft_visible: node === undefined ? true : node.draft_visible,
                  loom: null,
                  loom_settings: loom === undefined ? {
                    type: _this.ws.type,
                    epi: _this.ws.epi,
                    units: _this.ws.units,
                    frames: _this.ws.min_frames,
                    treadles: _this.ws.min_treadles
                  } : {
                    type: loom.type,
                    epi: loom.epi,
                    units: loom.units,
                    frames: loom.min_frames,
                    treadles: loom.min_treadles
                  },
                  render_colors: node === undefined || node.render_colors === undefined ? true : node.render_colors
                };
                draft_nodes.push(dn);
                if (draft !== null && draft !== undefined) {
                  draft_fns.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.loadDraftFromFile)(draft, flips_required, version));
                  draft_elements.push(dn);
                }
                if (loom !== null && loom !== undefined) {
                  loom_fns.push((0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.loadLoomFromFile)(loom, flips_required, version));
                  loom_elements.push(dn);
                }
              });
              return function (_x5) {
                return _ref2.apply(this, arguments);
              };
            }());
            //in previous versions drafts and looms were loaded separately
          }

          return Promise.all(draft_fns).then(res => {
            for (let i = 0; i < draft_elements.length; i++) {
              draft_elements[i].draft = res[i];
            }
            return Promise.all(loom_fns);
          }).then(res => {
            for (let i = 0; i < loom_elements.length; i++) {
              draft_elements[i].loom = res[i];
            }
            draft_nodes.filter(el => el.draft !== null).forEach(el => {
              //scan the systems and add any that need to be added
              if (el.draft !== null && el.draft !== undefined && el.draft.rowSystemMapping !== undefined) {
                el.draft.rowSystemMapping.forEach(el => {
                  if (_this.ss.getWeftSystem(el) === undefined) _this.ss.addWeftSystemFromId(el);
                });
              }
              //scan the systems and add any that need to be added
              if (el.draft !== null && el.draft !== undefined && el.draft.colSystemMapping !== undefined) {
                el.draft.colSystemMapping.forEach(el => {
                  if (_this.ss.getWarpSystem(el) === undefined) _this.ss.addWarpSystemFromId(el);
                });
              }
            });
            if (data.ops !== undefined) {
              ops = data.ops.map(data => {
                const op = {
                  node_id: data.node_id,
                  name: data.name,
                  params: data.params,
                  inlets: data.inlets === undefined ? [0] : data.inlets
                };
                return op;
              });
            }
            const envt = {
              version: data.version,
              workspace: data.workspace,
              filename: filename,
              nodes: data.nodes === undefined ? [] : data.nodes,
              treenodes: data.tree === undefined ? [] : data.tree,
              draft_nodes: draft_nodes,
              notes: data.notes === undefined ? [] : data.notes,
              ops: ops,
              scale: data.scale === undefined ? 5 : data.scale
            };
            return Promise.resolve({
              data: envt,
              name: filename,
              desc: desc,
              status: 0,
              id: id
            });
          });
        });
        return function ada(_x, _x2, _x3, _x4) {
          return _ref.apply(this, arguments);
        };
      }(),
      paste: function () {
        var _ref3 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (data) {
          let draft_nodes = [];
          let ops = [];
          let version = "0.0.0";
          // this.clearAll();
          if (data.shuttles !== undefined) {
            //handle shuttles here
          }
          const flips_required = _model_util__WEBPACK_IMPORTED_MODULE_3__["default"].getFlips(_this.ws.selected_origin_option, 3);
          const loom_elements = [];
          const loom_fns = [];
          const draft_elements = [];
          const draft_fns = [];
          draft_nodes = data.draft_nodes;
          draft_nodes.forEach(el => {
            if (el.draft !== null && el.draft !== undefined) {
              draft_fns.push((0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.loadDraftFromFile)(el.draft, flips_required, version));
              draft_elements.push(el);
            }
            if (el.loom !== null && el.loom !== undefined) {
              loom_fns.push((0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.loadLoomFromFile)(el.loom, flips_required, version));
              loom_elements.push(el);
            }
          });
          return Promise.all(draft_fns).then(res => {
            for (let i = 0; i < draft_elements.length; i++) {
              draft_elements[i].draft = res[i];
            }
            return Promise.all(loom_fns);
          }).then(res => {
            for (let i = 0; i < loom_elements.length; i++) {
              draft_elements[i].loom = res[i];
            }
            draft_nodes.filter(el => el.draft !== null).forEach(el => {
              //scan the systems and add any that need to be added
              if (el.draft !== null && el.draft !== undefined && el.draft.rowSystemMapping !== undefined) {
                el.draft.rowSystemMapping.forEach(el => {
                  if (_this.ss.getWeftSystem(el) === undefined) _this.ss.addWeftSystemFromId(el);
                });
              }
              //scan the systems and add any that need to be added
              if (el.draft !== null && el.draft !== undefined && el.draft.colSystemMapping !== undefined) {
                el.draft.colSystemMapping.forEach(el => {
                  if (_this.ss.getWarpSystem(el) === undefined) _this.ss.addWarpSystemFromId(el);
                });
              }
            });
            if (data.ops !== undefined) {
              ops = data.ops.map(data => {
                const op = {
                  node_id: data.node_id,
                  name: data.name,
                  params: data.params,
                  inlets: data.inlets === undefined ? [0] : data.inlets
                };
                return op;
              });
            }
            const envt = {
              version: '0.0.0',
              workspace: null,
              filename: 'paste',
              nodes: data.nodes === undefined ? [] : data.nodes,
              treenodes: data.tree === undefined ? [] : data.tree,
              draft_nodes: draft_nodes,
              notes: [],
              ops: ops,
              scale: 5
            };
            return Promise.resolve({
              data: envt,
              name: 'paste',
              desc: 'a file represeting copied information',
              status: 0,
              id: -1
            });
          });
        });
        return function paste(_x6) {
          return _ref3.apply(this, arguments);
        };
      }(),
      // wif: async (filename: string, data: any) : Promise<LoadResponse> => {
      //   this.clearAll();
      //   let drafts: Array<Draft> = [];
      //   let looms: Array<Loom> = [];
      //   let version = '0.0.0';
      //   var stringWithoutMetadata = utilInstance.getSubstringAfter("CONTENTS", data);
      //   const warps:number = utilInstance.getInt("Threads",utilInstance.getSubstringAfter("WARP]",stringWithoutMetadata));
      //   const wefts:number = utilInstance.getInt("Threads",utilInstance.getSubstringAfter("WEFT]",stringWithoutMetadata));
      //   const pattern: Array<Array<Cell>> = [];
      //   this.ns.resetNotes(); 
      //   for (var i = 0; i < wefts; i++) {
      //     pattern.push([]);
      //     for (var j = 0; j < warps; j++) {
      //       pattern[i].push(new Cell(null));
      //       pattern[i][j].setHeddle(false);
      //     }
      //   }
      //   const draft = initDraft();
      //   draft.drawdown = generateDrawdownWithPattern(pattern, warps, wefts);
      //   drafts.push(draft);
      //   draft.gen_name = data.name;
      // let frames = utilInstance.getInt("Shafts", data);
      // let treadles = utilInstance.getInt("Treadles", data);
      // const loom:Loom = new Loom(draft, 'frame', frames, treadles);
      // looms.push(loom);
      // // draft.loom.tieup = []
      // // for (var i = 0; i < frames; i++) {
      // //   draft.loom.tieup.push([]);
      // //   for (var j = 0; j < treadles; j++) {
      // //     draft.loom.tieup[i].push(false);
      // //   }
      // // }
      // if (utilInstance.getBool("TREADLING", stringWithoutMetadata)) {
      //   var treadling = utilInstance.getTreadling(stringWithoutMetadata, draft);
      //   loom.overloadTreadling(treadling, version, pattern.length);
      // }
      // if (utilInstance.getBool("THREADING", stringWithoutMetadata)) {
      //   var threading = utilInstance.getThreading(stringWithoutMetadata, draft);
      //   loom.overloadThreading(threading);
      // }
      // if (utilInstance.getBool("TIEUP", data)) {
      //   var tieups = utilInstance.getTieups(stringWithoutMetadata, draft);
      //   loom.overloadTieup(tieups);
      // }
      // if (utilInstance.getBool("COLOR TABLE",data)) {
      //   if (utilInstance.getString("Form", data) === "RGB") {
      //     let color_table: Array<Shuttle>  = utilInstance.getColorTable(data);
      //     var shuttles = color_table;
      //     /** TODO: Update this to add, not overwrite, shuttles */
      //     this.ms.overloadShuttles(shuttles);
      //     draft.overloadRowShuttleMapping(utilInstance.getRowToShuttleMapping(data, draft));
      //     draft.overloadColShuttleMapping(utilInstance.getColToShuttleMapping(data, draft));
      //   }
      // }
      // draft.recalculateDraft(tieups, treadling, threading);
      // const proxies = this.tree.getNewDraftProxies(draft, []);
      // const f: FileObj = {
      //   version: 'na',
      //   filename: filename,
      //   drafts: drafts,
      //   looms: looms,
      //   nodes: [proxies.node], 
      //   treenodes: [proxies.treenode],
      //   ops: [],
      //   scale: 5
      // }
      // return Promise.resolve({data: f ,status: 0});
      // },
      /**
       * takes in a jpg, creates as many drafts as there are unique colors in the image.
       * @param data
       * @returns
       */
      // jpg: async (filename: string, data: any) : Promise<LoadResponse> => {
      //   this.clearAll();
      //   let drafts: Array<Draft> = [];
      //   let looms: Array<Loom> = [];
      //   this.ns.resetNotes(); 
      //   let e = data;
      //   const warps = e.width;
      //   const wefts = e.height;
      //   var img = e.data;
      //   let hex_string: string = "";
      //   const img_as_hex: Array<string> = [];
      //   img.forEach((el, ndx) => {
      //     hex_string = hex_string + el.toString(16);
      //     if(ndx % 4 === 3){
      //       img_as_hex.push(hex_string);
      //       hex_string = "";
      //     }
      //   });
      //   //the color table is a unique list of all the colors in this image
      //   const seen: Array<string> = [];
      //   const color_table: Array<string> = img_as_hex.filter((el, ndx) => {
      //     if(seen.find(seen => seen === el) === undefined){
      //       seen.push(el);
      //       return true;
      //     }
      //   });
      //   console.log("color table", color_table);
      //   //create a draft for each color table
      //   color_table.forEach(color => {
      //     const draft = initDraft();
      //     draft.drawdown = generateDrawdownWithPattern([[new Cell(false)]], warps, wefts);
      //     console.log(draft);
      //     img_as_hex.forEach((el, ndx)=>{
      //       const r: number = Math.floor(ndx/warps);
      //       const c: number = ndx % warps;
      //       if(el === color) draft.drawdown[r][c].setHeddleUp();
      //       else draft.drawdown[r][c].unsetHeddle();
      //     });
      //     drafts.push(draft);
      //     const loom:Loom = new Loom(draft, 'jacquard', 8, 10);
      //     looms.push(loom);
      //   })
      //   // for (var i=0; i< e.height; i++) {
      //   //   pattern.push([]);
      //   //   for (var j=0; j< e.width; j++) {
      //   //     var idx = (i * 4 * warps) + (j * 4);
      //   //     var threshold = (img[idx] + img[idx+1] + img[idx+2]);
      //   //     var alpha = img[idx + 3];
      //   //     if (threshold < 750 && alpha != 0) {
      //   //       pattern[i].push(new Cell(true));
      //   //     } else {
      //   //       pattern[i].push(new Cell(false));
      //   //     }
      //   //   }
      //   // }
      //   // const draft: Draft = new Draft({warps: warps, wefts: wefts, pattern: pattern});
      //   // drafts.push(draft);
      //   // //create a blank loom to accompany this
      //   // const loom:Loom = new Loom(draft, 8, 10);
      //   // loom.overloadType('jacquard');
      //   // looms.push(loom);
      //   const f: FileObj = {
      //     filename: filename,
      //     version: 'na',
      //     drafts: drafts,
      //     looms: looms,
      //     nodes: [], 
      //     treenodes: [],
      //     ops: [],
      //     scale: 5
      //   }
      //   return Promise.resolve({data: f ,status: 0});  
      // },
      // bmp: async (filename: string, data: any) : Promise<LoadResponse> => {
      //   this.clearAll();
      //   let drafts: Array<Draft> = [];
      //   let looms: Array<Loom> = [];
      //   let e = data;
      //   const warps = e.width;
      //   const wefts = e.height;
      //   var img = e.data;
      //   var pattern = [];
      //   for (var i=0; i< e.height; i++) {
      //     pattern.push([]);
      //     for (var j=0; j< e.width; j++) {
      //       var idx = (i * 4 * warps) + (j * 4);
      //       var threshold = (img[idx] + img[idx+1] + img[idx+2]);
      //       var alpha = img[idx + 3];
      //       if (threshold < 750 && alpha != 0) {
      //         pattern[i].push(new Cell(true));
      //       } else {
      //         pattern[i].push(new Cell(false));
      //       }
      //     }
      //   }
      //   const draft: Draft = new Draft({warps: warps, wefts: wefts, pattern: pattern});
      //   drafts= [ draft];
      //   //create a blank loom to accompany this
      //   const loom:Loom = new Loom(draft, 'jacquard', 8, 10);
      //   looms.push(loom);
      //   const proxies = this.tree.getNewDraftProxies(draft, []);
      //   const f: FileObj = {
      //     filename: filename,
      //     version: 'na',
      //     drafts: drafts,
      //     looms: looms,
      //     nodes: [proxies.node], 
      //     treenodes: [proxies.treenode],
      //     ops: [],
      //     scale: 5
      //   }
      //   return Promise.resolve({data: f ,status: 0});  
      // },
      form: function () {
        var _ref4 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (f) {
          _this.clearAll();
          let drafts = [];
          let looms = [];
          var warps = 20;
          if (f.value.warps !== undefined) warps = f.value.warps;
          var wefts = 20;
          if (f.value.wefts !== undefined) wefts = f.value.wefts;
          const draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_1__.initDraftWithParams)({
            warps: warps,
            wefts: wefts
          });
          var frame_num = f.value.frame_num === undefined ? 8 : f.value.frame_num;
          var treadle_num = f.value.treadle_num === undefined ? 10 : f.value.treadle_num;
          var loomtype = f.value.loomtype === undefined ? 'frame' : f.value.loomtype;
          var frame_num = f.value.frame_num === undefined ? 2 : f.value.frame_num;
          var treadle_num = f.value.treadle_num === undefined ? 2 : f.value.treadle_num;
          if (f.value.loomtype == 'direct') treadle_num = frame_num;
          var epi = f.value.epi === undefined ? 10 : f.value.epi;
          var units = f.value.units === undefined || !f.value.units ? "in" : f.value.units;
          const loom_settings = {
            type: loomtype,
            epi: epi,
            units: units,
            frames: frame_num,
            treadles: treadle_num
          };
          _this.ws.inferData([loom_settings]);
          const loomutils = (0,_model_looms__WEBPACK_IMPORTED_MODULE_2__.getLoomUtilByType)(loomtype);
          return loomutils.computeLoomFromDrawdown(draft.drawdown, loom_settings, 0).then(loom => {
            looms.push(loom);
            const proxies = _this.tree.getNewDraftProxies(draft, []);
            draft.id = proxies.node.node_id;
            proxies.draft_node.draft = draft;
            proxies.draft_node.draft_id = draft.id;
            proxies.draft_node.loom = loom;
            proxies.draft_node.loom_settings = loom_settings;
            const envt = {
              version: _this.vs.currentVersion(),
              workspace: _this.ws.exportWorkspace(),
              filename: "adacad mixer",
              nodes: [proxies.node],
              treenodes: [proxies.treenode],
              draft_nodes: [proxies.draft_node],
              notes: [],
              ops: [],
              scale: 5
            };
            return Promise.resolve({
              data: envt,
              name: "new draft",
              desc: "created via form",
              status: 0,
              id: _this.files.generateFileId()
            });
          });
        });
        return function form(_x7) {
          return _ref4.apply(this, arguments);
        };
      }()
    };
    // interface FileSaver{
    //   ada: (drafts: Array<Draft>, looms: Array<Loom>, pattern: Array<Pattern>, palette:PaletteComponent) => void,
    //   wif: (drafts: Array<Draft>, looms: Array<Loom>) => void,
    //   bmp: (drafts: Array<Draft>) => LoadResponse,
    //   jpg: (drafts: Array<Draft>, looms: Array<Loom>, pattern: Array<Pattern>, palette:PaletteComponent) => void
    // }
    const dsaver = {
      copy: function () {
        var _ref5 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (include, current_scale) {
          const out = {
            type: 'partial',
            version: _this.vs.currentVersion(),
            workspace: null,
            nodes: _this.tree.exportNodesForSaving(current_scale),
            tree: _this.tree.exportTreeForSaving(),
            draft_nodes: yield _this.tree.exportDraftNodeProxiesForSaving(),
            ops: _this.tree.exportOpMetaForSaving(),
            notes: [],
            materials: _this.ms.exportForSaving(),
            scale: 5
          };
          //now filter out things that aren't relevant
          out.nodes = out.nodes.filter(node => include.find(el => el == node.node_id) !== undefined);
          out.nodes.forEach(node => {
            node.topleft = {
              x: node.topleft.x + 50,
              y: node.topleft.y + 50
            };
          });
          out.tree = out.tree.filter(tn => include.find(el => el == tn.node) !== undefined);
          out.draft_nodes = out.draft_nodes.filter(dn => include.find(el => el == dn.node_id) !== undefined);
          out.ops = out.ops.filter(op => include.find(el => el == op.node_id) !== undefined);
          return Promise.resolve(out);
        });
        return function copy(_x8, _x9) {
          return _ref5.apply(this, arguments);
        };
      }(),
      ada: function () {
        var _ref6 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (type, for_timeline, current_scale) {
          const out = {
            version: _this.vs.currentVersion(),
            workspace: _this.ws.exportWorkspace(),
            type: type,
            nodes: _this.tree.exportNodesForSaving(current_scale),
            tree: _this.tree.exportTreeForSaving(),
            draft_nodes: yield _this.tree.exportDraftNodeProxiesForSaving(),
            ops: _this.tree.exportOpMetaForSaving(),
            notes: _this.ns.exportForSaving(),
            materials: _this.ms.exportForSaving(),
            scale: current_scale
          };
          //update this to return the object and see how it writes
          var theJSON = JSON.stringify(out);
          return Promise.resolve({
            json: theJSON,
            file: out
          });
        });
        return function ada(_x10, _x11, _x12) {
          return _ref6.apply(this, arguments);
        };
      }(),
      // wif: async (draft: Draft, loom: Loom) : Promise<string> => {
      // const shuttles: Array<Shuttle> = this.ms.getShuttles();
      //   //will need to import the obj for draft2wif.ts and then use it and pass this.weave for fileContents
      // var fileContents = "[WIF]\nVersion=1.1\nDate=November 6, 2020\nDevelopers=Unstable Design Lab at the University of Colorado Boulder\nSource Program=AdaCAD\nSource Version=3.0\n[CONTENTS]";
      // var fileType = "text/plain";
      // fileContents += "\nCOLOR PALETTE=yes\nWEAVING=yes\nWARP=yes\nWEFT=yes\nTIEUP=yes\nCOLOR TABLE=yes\nTHREADING=yes\nWARP COLORS=yes\nTREADLING=yes\nWEFT COLORS=yes\n";
      // fileContents += "[COLOR PALETTE]\n";
      // fileContents += "Entries=" + (shuttles.length).toString() +"\n";
      // fileContents += "Form=RGB\nRange=0,255\n";
      // fileContents += "[WEAVING]\nShafts=";
      // fileContents += loom.min_frames.toString();
      // fileContents += "\nTreadles=";
      // fileContents += loom.min_treadles.toString();
      // fileContents += "\nRising Shed=yes\n";
      // fileContents += "[WARP]\nThreads=";
      // fileContents += draft.warps.toString();
      // var warpColors = [];
      // for (var i = 0; i < draft.colShuttleMapping.length; i++) {
      //   if (!warpColors.includes(draft.colShuttleMapping[i])) {
      //     warpColors.push(draft.colShuttleMapping[i]);
      //   }
      // }
      // fileContents += "\nColors=" + warpColors.length.toString();
      // fileContents += "\n[WEFT]\nThreads=";
      // fileContents += draft.wefts.toString();
      // var weftColors = [];
      // for (var i = 0; i < draft.colShuttleMapping.length; i++) {
      //   if (!weftColors.includes(draft.colShuttleMapping[i])) {
      //     weftColors.push(draft.colShuttleMapping[i]);
      //   }
      // }
      // fileContents += "\nColors=" + weftColors.length.toString();
      // fileContents += "\n[TIEUP]\n";
      // var treadles = [];
      // for (var i =0; i < loom.tieup.length;i++) {
      //   for (var j = 0; j < loom.tieup[i].length;j++) {
      //     if (loom.tieup[i][j] && !treadles.includes(j)) {
      //       treadles.push(j);
      //     }
      //   }
      // }
      // for (var i =0; i < treadles.length; i++) {
      //   fileContents += (treadles[i]+1).toString() + "=";
      //   var lineMarked = false;
      //   for (var j = 0; j < loom.tieup.length; j++){
      //     if (loom.tieup[j][treadles[i]]) { 
      //       if (lineMarked) {
      //         fileContents += ",";
      //       }
      //       fileContents += (j+1).toString();
      //       lineMarked=true;
      //     }
      //   }
      //   fileContents += "\n";
      // }
      // fileContents+= "[COLOR TABLE]\n";
      // //Reference: https://css-tricks.com/converting-color-spaces-in-javascript/ for conversion for hex to RGB
      // var counter = 1;
      // for (var i = 0; i < shuttles.length; i++) {
      //   fileContents+= (counter).toString();
      //   counter = counter + 1;
      //   fileContents+= "=";
      //   var hex = shuttles[i].color;
      //   if (hex.length == 7) {
      //     var r = "0x" + hex[1] + hex[2];
      //     var g = "0x" + hex[3] + hex[4];
      //     var b = "0x" + hex[5] + hex[6];
      //     fileContents += (+r).toString() + "," + (+g).toString() + "," + (+b).toString() + "\n";
      //   }
      // }
      // fileContents += "[THREADING]\n";
      // for (var i=0; i <loom.threading.length; i++) {
      //   var frame = loom.threading[i];
      //   if (frame != -1) {
      //     fileContents += (loom.threading.length-i).toString() + "=" + (frame+1).toString() + "\n";
      //   }
      // }
      // fileContents += "[WARP COLORS]\n";
      // for (var i = 0; i < draft.colShuttleMapping.length; i++) {
      //   fileContents += (i+1).toString() + "=" + (draft.colShuttleMapping[(draft.colShuttleMapping.length)-(i+1)]+1).toString() + "\n";
      // }
      // //THIS WILL ONLY WORK WTIH FRAME LOOM DRAFT STYLE
      // fileContents += "[TREADLING]\n";
      // for (var i = 0; i < loom.treadling.length; i++) {
      //   if (loom.treadling[i].length != 0 && loom.treadling[i][0] != -1){
      //     fileContents += (i+1).toString() + "=" + (loom.treadling[i][0]+1).toString() + "\n";
      //   }
      // }
      // fileContents += "[WEFT COLORS]\n";
      // for (var i = 0; i < draft.rowShuttleMapping.length; i++) { // will likely have to change the way I import too
      //   fileContents += (i+1).toString() + "=" + (draft.rowShuttleMapping[i]+1).toString() + "\n";
      // }
      //   const href:string = "data:" + fileType +";base64," + btoa(fileContents);
      //   return Promise.resolve(href);
      // },
      bmp: function () {
        var _ref7 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (canvas) {
          return Promise.resolve(canvas.toDataURL("image/jpg"));
        });
        return function bmp(_x13) {
          return _ref7.apply(this, arguments);
        };
      }(),
      jpg: function () {
        var _ref8 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (canvas) {
          return Promise.resolve(canvas.toDataURL("image/jpg"));
        });
        return function jpg(_x14) {
          return _ref8.apply(this, arguments);
        };
      }()
    };
    this.loader = dloader;
    this.saver = dsaver;
  }
  clearAll() {
    console.log("Clearing all in FS");
    this.tree.clear();
    this.ms.reset();
    this.ss.reset(), this.ns.clear();
  }
}
FileService.ɵfac = function FileService_Factory(t) {
  return new (t || FileService)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_tree_service__WEBPACK_IMPORTED_MODULE_8__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_notes_service__WEBPACK_IMPORTED_MODULE_6__.NotesService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_materials_service__WEBPACK_IMPORTED_MODULE_5__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_systems_service__WEBPACK_IMPORTED_MODULE_7__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_version_service__WEBPACK_IMPORTED_MODULE_9__.VersionService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_workspace_service__WEBPACK_IMPORTED_MODULE_10__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_filesystem_service__WEBPACK_IMPORTED_MODULE_4__.FilesystemService));
};
FileService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  token: FileService,
  factory: FileService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 65130:
/*!*****************************************************!*\
  !*** ./src/app/core/provider/filesystem.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FilesystemService": () => (/* binding */ FilesystemService)
/* harmony export */ });
/* harmony import */ var _angular_fire_database__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/fire/database */ 36139);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/util */ 75973);
/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/database */ 89187);
/* harmony import */ var _file_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file.service */ 96374);
/* harmony import */ var _mixer_provider_zoom_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../mixer/provider/zoom.service */ 75817);
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/fire/auth */ 61577);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 12378);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 22560);











/**
 * users{
 *  uid:
 *    ada:
 *    timestamp:
 *    last_opened:
 *     files : {
        *  file_id:
        *  name:
        *  timestamp:
        *  desc:
  }
 *
 *  }
 *
 *

 * filedata{
 *  file_id:
 *  data:
 * }
 *
 */
class FilesystemService {
  constructor(auth, fs, zs) {
    this.auth = auth;
    this.fs = fs;
    this.zs = zs;
    this.file_tree_change$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
    this.file_saved_change$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
    this.file_tree = [];
    this.current_file_id = -1;
    this.current_file_name = "draft";
    this.current_file_desc = "";
    this.connected = false;
    this.last_saved_time = 0;
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    const presenceRef = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, "disconnectmessage");
    // Write a string when this client loses connection
    (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.onDisconnect)(presenceRef).set("I disconnected!");
    const connectedRef = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, ".info/connected");
    (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.onValue)(connectedRef, snap => {
      if (snap.val() === true) {
        console.log("connected");
        this.connected = true;
      } else {
        console.log("not connected");
        this.connected = false;
      }
    });
    this.file_tree = [];
    (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.authState)(this.auth).subscribe(user => {
      console.log('user', user);
      if (user == null) {
        this.file_tree = [];
        return;
      }
      //update the tree based on the state of the DB
      const userFiles = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.query)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files'));
      //called once per item, then on subsequent changes
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.onChildAdded)(userFiles, childsnapshot => {
        //only add values that haven't already been added
        if (this.file_tree.find(el => el.id === parseInt(childsnapshot.key)) === undefined) {
          this.addToTree(parseInt(childsnapshot.key), childsnapshot.val());
          this.file_tree_change$.next(this.file_tree.slice());
        }
      });
      //called when anything in meta changes
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.onChildChanged)(userFiles, data => {
        const ndx = this.file_tree.findIndex(el => parseInt(el.id) === parseInt(data.key));
        if (ndx !== -1) {
          this.file_tree[ndx].meta.name = data.val().name;
          this.file_tree_change$.next(this.file_tree.slice());
        }
      });
      //needs to redraw the files list 
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.onChildRemoved)(userFiles, removedItem => {
        const removedId = removedItem.key;
        this.file_tree = this.file_tree.filter(el => parseInt(el.id) !== parseInt(removedId));
        this.file_tree_change$.next(this.file_tree.slice());
      });
    });
  }
  changeObserver(target) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_7__.Observable(observer => {
      const handler = observer.next(this.file_tree);
    });
  }
  clearTree() {
    this.file_tree = [];
  }
  /**
   * adds to the local tree for the UI
   */
  addToTree(fileid, meta) {
    var dateFormat = new Date(meta.timestamp);
    meta.date = dateFormat.toLocaleDateString();
    this.file_tree.push({
      id: fileid,
      meta: meta
    });
  }
  /**
   * sets the current data and updates the metadeta
   * @param fileid
   * @param name
   * @param desc
   */
  setCurrentFileInfo(fileid, name, desc) {
    if (fileid === null || fileid == undefined) return;
    if (desc === null || desc === undefined) desc = '';
    if (name === null || name === undefined) name = 'no name';
    this.current_file_id = fileid;
    this.current_file_name = name;
    this.current_file_desc = desc;
    const stamp = Date.now();
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.getAuth)();
    const user = auth.currentUser;
    if (user) {
      const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
      console.log(name, desc, stamp);
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, `users/${user.uid}`), {
        last_opened: fileid
      });
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files/' + fileid), {
        name: name,
        desc: desc,
        timestamp: stamp
      });
    }
  }
  renameFile(fileid, newname) {
    if (fileid === null || fileid == undefined) return;
    if (newname === null || newname === undefined) newname = 'no name';
    this.current_file_name = newname;
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.getAuth)();
    const user = auth.currentUser;
    if (user) {
      const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files/' + fileid), {
        name: newname
      });
    }
  }
  updateDescription(fileid, desc) {
    if (fileid === null || fileid == undefined) return;
    if (desc === null || desc === undefined) desc = '';
    this.current_file_desc = desc;
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.getAuth)();
    const user = auth.currentUser;
    if (user) {
      const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
      (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files/' + fileid), {
        desc: desc
      });
    }
  }
  generateFileId() {
    return _model_util__WEBPACK_IMPORTED_MODULE_0__["default"].generateId(8);
  }
  /**
   * if a user only has an ada file on their user id, this converts it to a file that is stored in teh filesystem
   * @param ada
   * @returns the id of the file
   */
  convertAdaToFile(uid, ada) {
    const fileid = this.generateFileId();
    this.writeFileData(uid, fileid, ada);
    this.writeNewFileMetaData(uid, fileid, 'recovered draft', '');
    return Promise.resolve(fileid);
  }
  /**
   * gets the file at a given id
   * @returns the file data
   */
  getFile(fileid) {
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    return (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.get)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, `filedata/${fileid}`)).then(filedata => {
      if (filedata.exists()) {
        return Promise.resolve(filedata.val().ada);
      } else {
        return Promise.reject("User found but file id not found");
      }
    }).catch(e => {
      console.error(e);
    });
  }
  /**
   * calls when a file is selected to be deleted from the files list
   * deletes all references to the file and then deletes from the users file list
   * @param fileid
   * @returns
   */
  removeFile(fileid) {
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.getAuth)();
    const user = auth.currentUser;
    if (user == null) return;
    (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.remove)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, `filedata/${fileid}`));
    (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.remove)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files/' + fileid));
  }
  /**
   * gets the file meta for a given id.
   * @param fileid
   * @returns the meta data
   */
  getFileMeta(fileid) {
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.getAuth)();
    const user = auth.currentUser;
    if (user == null) return;
    return (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.get)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + user.uid + '/files/' + fileid)).then(meta => {
      if (meta.exists()) {
        return Promise.resolve(meta.val());
      } else {
        return Promise.reject("No meta data found for file id " + fileid);
      }
    });
  }
  /**
   * writes the data for the currently open file to the database
   * @param cur_state
   * @returns
   */
  writeFileData(uid, fileid, cur_state) {
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    const ref = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'filedata/' + fileid);
    (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)(ref, {
      ada: cur_state
    }).then(success => {
      this.last_saved_time = Date.now();
      this.file_saved_change$.next(this.last_saved_time);
    }).catch(err => {
      console.error(err);
    });
  }
  writeNewFileMetaData(uid, fileid, name, desc) {
    const stamp = Date.now();
    const db = (0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.getDatabase)();
    (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.update)((0,_angular_fire_database__WEBPACK_IMPORTED_MODULE_5__.ref)(db, 'users/' + uid + '/files/' + fileid), {
      name: name,
      desc: desc,
      timestamp: stamp,
      last_opened: fileid
    });
  }
  renameFolder(old_loc, new_name) {
    //all folders
    return Promise.resolve(true);
  }
  deleteFile(path) {}
}
FilesystemService.ɵfac = function FilesystemService_Factory(t) {
  return new (t || FilesystemService)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_fire_auth__WEBPACK_IMPORTED_MODULE_6__.Auth, 8), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_file_service__WEBPACK_IMPORTED_MODULE_2__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_mixer_provider_zoom_service__WEBPACK_IMPORTED_MODULE_3__.ZoomService));
};
FilesystemService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: FilesystemService,
  factory: FilesystemService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 53398:
/*!************************************************!*\
  !*** ./src/app/core/provider/image.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageService": () => (/* binding */ ImageService)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/util */ 75973);
/* harmony import */ var _provider_upload_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../provider/upload.service */ 5794);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ 58987);







class ImageService {
  constructor(upSvc, httpClient) {
    this.upSvc = upSvc;
    this.httpClient = httpClient;
    this.images = [];
  }
  loadFiles(ids) {
    const fns = ids.filter(id => id !== '').map(id => this.loadFile(id));
    return Promise.all(fns);
  }
  loadFile(id) {
    let url = "";
    this.images.push({
      id: id,
      data: null
    });
    return this.upSvc.getDownloadData(id).then(obj => {
      console.log("GOT DOWNLOAD DATA ", obj);
      if (obj === undefined) return null;
      url = obj;
      return this.processImage(obj);
    }).then(data => {
      if (data == null) {
        var obj = {
          id: id,
          name: 'placeholder',
          data: null,
          colors: [],
          colors_to_bw: [],
          image: null,
          image_map: [],
          width: 0,
          height: 0,
          type: 'image',
          warning: 'image not found'
        };
        return obj;
      }
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var image = new Image();
      image.src = url;
      image.crossOrigin = "Anonymous";
      return image.decode().then(() => {
        canvas.width = image.naturalWidth;
        canvas.height = image.naturalHeight;
        if (image.naturalWidth > 10000) Promise.reject('width error');
        if (image.naturalHeight > 10000) Promise.reject('height error');
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
        var imgdata = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const pixels = imgdata.data;
        //process the pixels into meaningful values;
        const all_colors = [];
        for (let i = 0; i < pixels.length; i += 4) {
          let r = pixels[i].toString(16);
          let r_val = pixels[i];
          if (r.length == 1) r = '0' + r;
          let g = pixels[i + 1].toString(16);
          let g_val = pixels[i + 1];
          if (g.length == 1) g = '0' + g;
          let b = pixels[i + 2].toString(16);
          let b_val = pixels[i + 2];
          if (b.length == 1) b = '0' + b;
          const is_black = r_val + g_val + b_val / 3 < 255 / 2;
          const o = pixels[i + 3].toString(16);
          all_colors.push({
            hex: '#' + r + '' + g + '' + b,
            black: is_black
          });
        }
        const just_hex = all_colors.map(el => el.hex);
        let filewarning = "";
        let seen_vals = [];
        let unique_count = 0;
        for (let i = 0; i < just_hex.length && unique_count < 100; i++) {
          if (seen_vals.find(el => el == just_hex[i]) == undefined) {
            unique_count++;
            seen_vals.push(just_hex[i]);
          }
        }
        if (unique_count >= 100) {
          filewarning = "this image contains more than 100 colors and will take too much time to process, consider indexing to a smaller color space";
          return Promise.reject(filewarning);
        }
        /**this is expensive, so just do a fast run to make sure the size is okay before we go into this */
        const unique = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].filterToUniqueValues(just_hex);
        const color_to_bw = unique.map(el => {
          const item = all_colors.find(ell => ell.hex == el);
          if (item !== undefined) return item;
        });
        let image_map = [];
        if (unique.length > 100) {
          filewarning = "this image contains " + unique.length + " color and will take too much time to process, consider indexing to a smaller color space";
          return Promise.reject(filewarning);
        } else {
          const image_map_flat = all_colors.map(item => unique.findIndex(el => el === item.hex));
          let cur_i = 0;
          let cur_j = 0;
          image_map_flat.forEach((id, ndx) => {
            cur_i = Math.floor(ndx / imgdata.width);
            cur_j = ndx % imgdata.width;
            if (cur_i >= image_map.length) image_map.push([]);
            image_map[cur_i][cur_j] = id;
          });
        }
        var obj = {
          id: id,
          name: 'placeholder',
          data: imgdata,
          colors: unique,
          colors_to_bw: color_to_bw,
          image: image,
          image_map: image_map,
          width: imgdata.width,
          height: imgdata.height,
          type: 'image',
          warning: filewarning
        };
        return obj;
      }).then(imageobj => {
        if (imageobj.data == null) {
          return Promise.resolve(imageobj);
        }
        return this.upSvc.getDownloadMetaData(id).then(metadata => {
          if (metadata.customMetadata.filename !== undefined) imageobj.name = metadata.customMetadata.filename;
          this.setImageData(id, imageobj);
          return Promise.resolve(imageobj);
        });
      });
    });
  }
  getImageData(id) {
    return this.images.find(el => el.id === id);
  }
  setImageData(id, data) {
    const entry = this.getImageData(id);
    entry.data = data;
  }
  processImage(url) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield _this.httpClient.get(url, {
        responseType: 'blob'
      }).toPromise();
    })();
  }
}
ImageService.ɵfac = function ImageService_Factory(t) {
  return new (t || ImageService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_provider_upload_service__WEBPACK_IMPORTED_MODULE_2__.UploadService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_4__.HttpClient));
};
ImageService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: ImageService,
  factory: ImageService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 2940:
/*!****************************************************!*\
  !*** ./src/app/core/provider/materials.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MaterialsService": () => (/* binding */ MaterialsService)
/* harmony export */ });
/* harmony import */ var _model_material__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/material */ 90008);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


class MaterialsService {
  constructor() {
    //this.materials = [new Shuttle({id: 0, name: 'autogenerated', insert: true, visible: true, color: "#333333", thickness: 100, type: 0, notes: ""})];
    /** array ndx should be the same as shuttle id */
    this.materials = [];
    this.materials = [(0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 0,
      name: 'shuttle 0',
      insert: true,
      visible: true,
      color: "#333333",
      thickness: 100,
      diameter: 5,
      type: 0,
      notes: ""
    }), (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 1,
      name: 'shuttle 1',
      insert: true,
      visible: true,
      color: "#ffffff",
      thickness: 100,
      diameter: 5,
      type: 0,
      notes: ""
    }), (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 2,
      name: 'conductive',
      insert: true,
      visible: true,
      color: "#ff4081",
      thickness: 100,
      diameter: 5,
      type: 1,
      notes: ""
    })];
  }
  reset() {
    this.materials = [(0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 0,
      name: 'shuttle 0',
      insert: true,
      visible: true,
      color: "#333333",
      thickness: 100,
      diameter: 5,
      type: 0,
      notes: ""
    }), (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 1,
      name: 'shuttle 1',
      insert: true,
      visible: true,
      color: "#ffffff",
      thickness: 100,
      diameter: 5,
      type: 0,
      notes: ""
    }), (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)({
      id: 2,
      name: 'conductive',
      insert: true,
      visible: true,
      color: "#ff4081",
      thickness: 100,
      diameter: 5,
      type: 1,
      notes: ""
    })];
  }
  /**
   * overload shuttles with uploaded data.
   * check to ensure that ids match array index and return a draft mapping
   * @param shuttles
   */
  overloadShuttles(shuttles) {
    const map = [];
    if (shuttles === undefined) return map;
    this.materials = [];
    return this.addShuttles(shuttles);
  }
  /**
   * adds a set of shuttles from a file import
   * @param shuttles
   * @returns the offset of the new ids to the old ones
   */
  addShuttles(shuttles) {
    const map = [];
    const offset = this.materials.length;
    shuttles.forEach(s => {
      const shuttle = (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)(s);
      map.push({
        old_id: shuttle.id,
        new_id: this.materials.length
      });
      (0,_model_material__WEBPACK_IMPORTED_MODULE_0__.setMaterialID)(shuttle, this.materials.length);
      this.materials.push((0,_model_material__WEBPACK_IMPORTED_MODULE_0__.createMaterial)(shuttle));
    });
    return map;
  }
  /**
   * returns the color of the shuttle at this index
   * @param index  the id of the shuttly to get
   * @returns the color or white if null
   */
  getColor(index) {
    const s = this.getShuttle(index);
    if (s === null) return "#ffffff";
    return s.color;
  }
  getDiameter(index) {
    const s = this.getShuttle(index);
    if (s === null) return 1;
    return s.diameter;
  }
  /**
   * adds a new material to the end of the list and updates the id.
   * @param s
   */
  addShuttle(s) {
    s.id = this.materials.length;
    this.materials.push(s);
  }
  /**
   * deletes a shuttle and readjustes the id
   * @param id
   */
  deleteShuttle(id) {
    const new_list = this.materials.filter(el => el.id != id);
    return this.overloadShuttles(new_list);
  }
  getShuttle(id) {
    const ndx = this.materials.findIndex(el => el.id === id);
    if (ndx != -1) return this.materials[ndx];
    return null;
  }
  getNextShuttle(id) {
    let ndx = 0;
    if (id === undefined || id === null) ndx = this.getFirstShuttle().id;else ndx = this.materials.findIndex(el => el.id === id);
    if (ndx === -1) {
      console.error("material with id", id, "not found");
      return this.getFirstShuttle();
    } else {
      return this.materials[(ndx + 1) % this.materials.length];
    }
  }
  getShuttles() {
    return this.materials;
  }
  exportForSaving() {
    return this.materials;
  }
  getFirstShuttle() {
    if (this.materials.length === 0) {
      console.error("no materials loaded");
      return null;
    }
    return this.materials[0];
  }
  /**
   * given a list of material mappings, returns a list where they are all teh same size,
   * @param systems the system mappings to compare
   */
  standardizeLists(shuttles) {
    if (shuttles.length === 0) return [];
    const standard = shuttles.map(el => el.slice());
    //standardize teh lengths of all the returned arrays 
    const max_length = standard.reduce((acc, el) => {
      const len = el.length;
      if (len > acc) return len;else return acc;
    }, 0);
    standard.forEach((sys, ndx) => {
      if (sys.length < max_length) {
        for (let i = sys.length; i < max_length; i++) {
          sys.push(sys[0]);
        }
      }
    });
    return standard;
  }
}
MaterialsService.ɵfac = function MaterialsService_Factory(t) {
  return new (t || MaterialsService)();
};
MaterialsService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: MaterialsService,
  factory: MaterialsService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 31326:
/*!************************************************!*\
  !*** ./src/app/core/provider/notes.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotesService": () => (/* binding */ NotesService)
/* harmony export */ });
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/util */ 75973);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);



class NotesService {
  constructor() {
    this.notes = [];
  }
  clear() {
    this.notes = [];
  }
  createNote(i, component, ref, note) {
    let gennote = null;
    if (note == null) {
      gennote = {
        id: _model_util__WEBPACK_IMPORTED_MODULE_0__["default"].generateId(8),
        interlacement: i,
        title: "",
        text: "",
        ref: ref,
        color: "#FFFF00",
        component: component,
        imageurl: null,
        width: 200,
        height: 200
      };
    } else {
      gennote = {
        id: _model_util__WEBPACK_IMPORTED_MODULE_0__["default"].generateId(8),
        interlacement: i,
        title: note.title !== undefined ? note.title : "",
        text: note.text,
        ref: ref,
        color: note.color !== undefined ? note.color : "#FFFF00",
        component: component,
        imageurl: note.imageurl !== undefined ? note.imageurl : null,
        width: note.width !== undefined ? note.width : 200,
        height: note.height !== undefined ? note.height : 200
      };
    }
    this.notes.push(gennote);
    return gennote.id;
  }
  createBlankNode(i) {
    const note = {
      id: _model_util__WEBPACK_IMPORTED_MODULE_0__["default"].generateId(8),
      interlacement: i,
      title: "",
      text: "",
      color: "#FFFF00",
      ref: null,
      component: null,
      imageurl: null,
      width: 200,
      height: 200
    };
    this.notes.push(note);
    return note;
  }
  getComponents() {
    return this.notes.map(el => el.component);
  }
  getRefs() {
    return this.notes.map(el => el.ref);
  }
  exportForSaving() {
    return this.notes.map(note => {
      return {
        id: note.id,
        title: note.title,
        text: note.text,
        color: note.color,
        interlacement: note.interlacement,
        imageurl: note.imageurl,
        width: note.width,
        height: note.height
      };
    });
  }
  // /** called on load new file as well as undo, redo  */
  // reloadNotes(ns: Array<any>) : Array<Note>{
  //   console.log("LOADING NOTES", ns);
  //   ns.forEach(newnote => {
  //     const found = this.notes.find(el => el.id === newnote.id);
  //     if(found !== undefined){
  //       found.text = newnote.text;
  //       found.interlacement= newnote.interlacement;
  //       found.ref= (newnote.ref === undefined) ? null : newnote.ref;
  //       found.component= (newnote.component === undefined) ? null : newnote.component
  //     }else{
  //       this.notes.push({
  //         id: newnote.id,
  //         text: newnote.text,
  //         interlacement: newnote.interlacement,
  //         ref: (newnote.ref === undefined) ? null : newnote.ref,
  //         component: (newnote.component === undefined) ? null : newnote.component
  //       })
  //     }
  //   });
  //   this.notes = this.notes.filter(el => ns.find(nsel => nsel.id === el.id) !== undefined);
  //   return ns;
  // }
  /**
   * gets the note associated with a given id.
   * @param id
   * @returns the note object or undefined if not found
   */
  get(id) {
    return this.notes.find(el => el.id == id);
  }
  delete(id) {
    this.notes = this.notes.filter(el => el.id != id);
  }
  setColor(id, color) {
    let note = this.get(id);
    note.color = color;
  }
}
NotesService.ɵfac = function NotesService_Factory(t) {
  return new (t || NotesService)();
};
NotesService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: NotesService,
  factory: NotesService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 27049:
/*!*****************************************************************!*\
  !*** ./src/app/core/provider/operation-descriptions.service.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationDescriptionsService": () => (/* binding */ OperationDescriptionsService)
/* harmony export */ });
/* harmony import */ var _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../assets/json/op_descriptions.json */ 45243);
/* harmony import */ var _assets_json_op_classifications_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../assets/json/op_classifications.json */ 29885);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);



class OperationDescriptionsService {
  constructor() {}
  getOpClassifications() {
    return _assets_json_op_classifications_json__WEBPACK_IMPORTED_MODULE_1__.classifications;
  }
  getCatDescription(name) {
    const cat = _assets_json_op_classifications_json__WEBPACK_IMPORTED_MODULE_1__.classifications.find(el => el.category_name == name);
    if (cat !== undefined) return cat.description;else return "";
  }
  getCatName(name) {
    const cat = _assets_json_op_classifications_json__WEBPACK_IMPORTED_MODULE_1__.classifications.find(el => el.category_name == name);
    if (cat !== undefined) return cat.category_name;else return "";
  }
  getOpDescription(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined) {
      return item.description;
    } else {
      return "";
    }
  }
  hasDisplayName(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined) {
      return true;
    } else {
      return false;
    }
  }
  getDisplayName(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined) {
      return item.displayname;
    } else {
      return opname;
    }
  }
  getOpYoutube(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined && item.youtube !== undefined) {
      return item.youtube;
    } else {
      return "";
    }
  }
  getOpApplication(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined) {
      return item.application;
    } else {
      return "";
    }
  }
  getYoutube(opname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.operation.find(el => el.name == opname);
    if (item !== undefined) {
      return item.youtube;
    } else {
      return "";
    }
  }
  getParamDescription(paramname) {
    const item = _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.param.find(el => el.name == paramname);
    if (item !== undefined) {
      return item.description;
    }
  }
  getDyanmicText() {
    return _assets_json_op_descriptions_json__WEBPACK_IMPORTED_MODULE_0__.dynamic_description;
  }
}
OperationDescriptionsService.ɵfac = function OperationDescriptionsService_Factory(t) {
  return new (t || OperationDescriptionsService)();
};
OperationDescriptionsService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  token: OperationDescriptionsService,
  factory: OperationDescriptionsService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 46524:
/*!****************************************************!*\
  !*** ./src/app/core/provider/operation.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationService": () => (/* binding */ OperationService)
/* harmony export */ });
/* harmony import */ var _operations_combinatorics_combinatorics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operations/combinatorics/combinatorics */ 19942);
/* harmony import */ var _operations_complex_twill_complex_twill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations/complex_twill/complex_twill */ 37457);
/* harmony import */ var _operations_deinterlace_deinterlace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations/deinterlace/deinterlace */ 69950);
/* harmony import */ var _operations_interlace_interlace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operations/interlace/interlace */ 34220);
/* harmony import */ var _operations_interlace_warps_interlace_warps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operations/interlace_warps/interlace_warps */ 78196);
/* harmony import */ var _operations_invert_invert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operations/invert/invert */ 52763);
/* harmony import */ var _operations_layer_notation_layer_notation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../operations/layer_notation/layer_notation */ 29048);
/* harmony import */ var _operations_random_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operations/random/random */ 85133);
/* harmony import */ var _operations_rect_rect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../operations/rect/rect */ 15328);
/* harmony import */ var _operations_satin_satin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../operations/satin/satin */ 76441);
/* harmony import */ var _operations_satinish_satinish__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operations/satinish/satinish */ 75708);
/* harmony import */ var _operations_square_waffle_square_waffle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../operations/square_waffle/square_waffle */ 39660);
/* harmony import */ var _operations_tabby_tabby__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../operations/tabby/tabby */ 89029);
/* harmony import */ var _operations_twill_twill__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../operations/twill/twill */ 30961);
/* harmony import */ var _operations_undulating_twill_undulating_twill__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../operations/undulating_twill/undulating_twill */ 97758);
/* harmony import */ var _operations_waffleish_waffleish__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../operations/waffleish/waffleish */ 70449);
/* harmony import */ var _operations_applymaterialsandsystems_applymaterialsandsystems__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../operations/applymaterialsandsystems/applymaterialsandsystems */ 30823);
/* harmony import */ var _operations_bindwarpfloats_bindwarpfloats__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../operations/bindwarpfloats/bindwarpfloats */ 60160);
/* harmony import */ var _operations_bindweftfloats_bindweftfloats__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../operations/bindweftfloats/bindweftfloats */ 79572);
/* harmony import */ var _operations_chaos_chaos__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../operations/chaos/chaos */ 9525);
/* harmony import */ var _operations_clear_clear__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../operations/clear/clear */ 52669);
/* harmony import */ var _operations_flipx_flipx__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../operations/flipx/flipx */ 45733);
/* harmony import */ var _operations_flipy_flipy__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../operations/flipy/flipy */ 76817);
/* harmony import */ var _operations_imagemap_imagemap__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../operations/imagemap/imagemap */ 48893);
/* harmony import */ var _operations_joinleft_joinleft__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../operations/joinleft/joinleft */ 60588);
/* harmony import */ var _operations_jointop_jointop__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../operations/jointop/jointop */ 73655);
/* harmony import */ var _operations_layer_layer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../operations/layer/layer */ 85005);
/* harmony import */ var _operations_makesymmetric_makesymmetric__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../operations/makesymmetric/makesymmetric */ 66551);
/* harmony import */ var _operations_margin_margin__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../operations/margin/margin */ 14887);
/* harmony import */ var _operations_resize_resize__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../operations/resize/resize */ 97802);
/* harmony import */ var _operations_rotate_rotate__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../operations/rotate/rotate */ 66475);
/* harmony import */ var _operations_selvedge_selvedge__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../operations/selvedge/selvedge */ 32908);
/* harmony import */ var _operations_set_set__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../operations/set/set */ 17435);
/* harmony import */ var _operations_shaded_satin_shaded_satin__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../operations/shaded_satin/shaded_satin */ 72023);
/* harmony import */ var _operations_shiftx_shiftx__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../operations/shiftx/shiftx */ 93838);
/* harmony import */ var _operations_shifty_shifty__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../operations/shifty/shifty */ 42454);
/* harmony import */ var _operations_slope_slope__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../operations/slope/slope */ 6758);
/* harmony import */ var _operations_spliceinwarps_spliceinwarps__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../operations/spliceinwarps/spliceinwarps */ 77683);
/* harmony import */ var _operations_spliceinwefts_spliceinwefts__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../operations/spliceinwefts/spliceinwefts */ 53979);
/* harmony import */ var _operations_stretch_stretch__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../operations/stretch/stretch */ 99414);
/* harmony import */ var _operations_system_notation_system_notation__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../operations/system_notation/system_notation */ 94485);
/* harmony import */ var _operations_tile_tile__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../operations/tile/tile */ 49815);
/* harmony import */ var _operations_undulatewarps_undulatewarps__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../operations/undulatewarps/undulatewarps */ 37571);
/* harmony import */ var _operations_undulatewefts_undulatewefts__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../operations/undulatewefts/undulatewefts */ 95397);
/* harmony import */ var _operations_unset_unset__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../operations/unset/unset */ 27605);
/* harmony import */ var _operations_warp_profile_warp_profile__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../operations/warp_profile/warp_profile */ 60233);
/* harmony import */ var _operations_weft_profile_weft_profile__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../operations/weft_profile/weft_profile */ 42131);
/* harmony import */ var _operations_overlay_overlay__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../operations/overlay/overlay */ 47948);
/* harmony import */ var _operations_overlay_multiple_overlay_multiple__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../operations/overlay_multiple/overlay_multiple */ 37923);
/* harmony import */ var _operations_bwimagemap_bwimagemap__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../operations/bwimagemap/bwimagemap */ 4599);
/* harmony import */ var _operations_samplelength_samplelength__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../operations/samplelength/samplelength */ 94642);
/* harmony import */ var _operations_samplewidth_samplewidth__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../operations/samplewidth/samplewidth */ 12714);
/* harmony import */ var _operations_assignsystems_assignsystems__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../operations/assignsystems/assignsystems */ 77509);
/* harmony import */ var _operations_fill_fill__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../operations/fill/fill */ 52066);
/* harmony import */ var _operations_atop_atop__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../operations/atop/atop */ 78878);
/* harmony import */ var _operations_mask_mask__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../operations/mask/mask */ 6134);
/* harmony import */ var _operations_diff_diff__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../operations/diff/diff */ 3064);
/* harmony import */ var _operations_cutout_cutout__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../operations/cutout/cutout */ 30715);
/* harmony import */ var _operations_crop_crop__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../operations/crop/crop */ 55421);
/* harmony import */ var _operations_trim_trim__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../operations/trim/trim */ 89469);
/* harmony import */ var _operations_makeloom_makeloom__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../operations/makeloom/makeloom */ 59299);
/* harmony import */ var _operations_makedirectloom_makedirectloom__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../operations/makedirectloom/makedirectloom */ 27178);
/* harmony import */ var _operations_drawdown_drawdown__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../operations/drawdown/drawdown */ 96987);
/* harmony import */ var _operations_directdrawdown_directdrawdown__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../operations/directdrawdown/directdrawdown */ 59332);
/* harmony import */ var _operations_sinewave_sineweave__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../operations/sinewave/sineweave */ 95680);
/* harmony import */ var _operations_sawtooth_sawtooth__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../operations/sawtooth/sawtooth */ 4475);
/* harmony import */ var _operations_erase_blank_erase_blank__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../operations/erase_blank/erase_blank */ 91843);
/* harmony import */ var _operations_shift_shift__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../operations/shift/shift */ 78856);
/* harmony import */ var _operations_flip_flip__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../operations/flip/flip */ 12670);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! @angular/core */ 22560);






































































class OperationService {
  constructor() {
    this.ops = [];
    this.dynamic_ops = [];
    this.classification = [];
    // this.dynamic_ops.push(dynamic_join_left);
    // this.dynamic_ops.push(dynamic_join_top);
    this.dynamic_ops.push(_operations_imagemap_imagemap__WEBPACK_IMPORTED_MODULE_23__.imagemap);
    this.dynamic_ops.push(_operations_bwimagemap_bwimagemap__WEBPACK_IMPORTED_MODULE_49__.bwimagemap);
    this.dynamic_ops.push(_operations_layer_notation_layer_notation__WEBPACK_IMPORTED_MODULE_6__.notation);
    this.dynamic_ops.push(_operations_system_notation_system_notation__WEBPACK_IMPORTED_MODULE_40__.notation_system);
    this.dynamic_ops.push(_operations_weft_profile_weft_profile__WEBPACK_IMPORTED_MODULE_46__.weft_profile);
    this.dynamic_ops.push(_operations_warp_profile_warp_profile__WEBPACK_IMPORTED_MODULE_45__.warp_profile);
    this.dynamic_ops.push(_operations_samplewidth_samplewidth__WEBPACK_IMPORTED_MODULE_51__.sample_width);
    this.dynamic_ops.push(_operations_samplelength_samplelength__WEBPACK_IMPORTED_MODULE_50__.sample_length);
    //**push operations that you want the UI to show as options here */
    this.ops.push(_operations_rect_rect__WEBPACK_IMPORTED_MODULE_8__.rect);
    this.ops.push(_operations_twill_twill__WEBPACK_IMPORTED_MODULE_13__.twill);
    this.ops.push(_operations_complex_twill_complex_twill__WEBPACK_IMPORTED_MODULE_1__.complextwill);
    this.ops.push(_operations_undulating_twill_undulating_twill__WEBPACK_IMPORTED_MODULE_14__.undulatingtwill);
    this.ops.push(_operations_square_waffle_square_waffle__WEBPACK_IMPORTED_MODULE_11__.square_waffle);
    this.ops.push(_operations_waffleish_waffleish__WEBPACK_IMPORTED_MODULE_15__.waffleish);
    this.ops.push(_operations_satin_satin__WEBPACK_IMPORTED_MODULE_9__.satin);
    this.ops.push(_operations_satinish_satinish__WEBPACK_IMPORTED_MODULE_10__.satinish);
    this.ops.push(_operations_shaded_satin_shaded_satin__WEBPACK_IMPORTED_MODULE_33__.shaded_satin);
    // this.ops.push(tabby);
    this.ops.push(_operations_tabby_tabby__WEBPACK_IMPORTED_MODULE_12__.tabby_der);
    // this.ops.push(rib);
    this.ops.push(_operations_random_random__WEBPACK_IMPORTED_MODULE_7__.random);
    this.ops.push(_operations_interlace_interlace__WEBPACK_IMPORTED_MODULE_3__.interlace);
    this.ops.push(_operations_deinterlace_deinterlace__WEBPACK_IMPORTED_MODULE_2__.deinterlace);
    this.ops.push(_operations_interlace_warps_interlace_warps__WEBPACK_IMPORTED_MODULE_4__.interlacewarps);
    this.ops.push(_operations_spliceinwefts_spliceinwefts__WEBPACK_IMPORTED_MODULE_38__.splicein);
    this.ops.push(_operations_spliceinwarps_spliceinwarps__WEBPACK_IMPORTED_MODULE_37__.spliceinwarps);
    this.ops.push(_operations_assignsystems_assignsystems__WEBPACK_IMPORTED_MODULE_52__.assignsystems);
    this.ops.push(_operations_invert_invert__WEBPACK_IMPORTED_MODULE_5__.invert);
    //  this.ops.push(replicate);
    this.ops.push(_operations_flipx_flipx__WEBPACK_IMPORTED_MODULE_21__.flipx);
    this.ops.push(_operations_flipy_flipy__WEBPACK_IMPORTED_MODULE_22__.flipy);
    this.ops.push(_operations_shiftx_shiftx__WEBPACK_IMPORTED_MODULE_34__.shiftx);
    this.ops.push(_operations_shifty_shifty__WEBPACK_IMPORTED_MODULE_35__.shifty);
    this.ops.push(_operations_layer_layer__WEBPACK_IMPORTED_MODULE_26__.layer);
    this.ops.push(_operations_selvedge_selvedge__WEBPACK_IMPORTED_MODULE_31__.selvedge);
    this.ops.push(_operations_bindweftfloats_bindweftfloats__WEBPACK_IMPORTED_MODULE_18__.bindweftfloats);
    this.ops.push(_operations_bindwarpfloats_bindwarpfloats__WEBPACK_IMPORTED_MODULE_17__.bindwarpfloats);
    this.ops.push(_operations_joinleft_joinleft__WEBPACK_IMPORTED_MODULE_24__.joinleft);
    this.ops.push(_operations_jointop_jointop__WEBPACK_IMPORTED_MODULE_25__.jointop);
    this.ops.push(_operations_slope_slope__WEBPACK_IMPORTED_MODULE_36__.slope);
    this.ops.push(_operations_tile_tile__WEBPACK_IMPORTED_MODULE_41__.tile);
    this.ops.push(_operations_undulatewefts_undulatewefts__WEBPACK_IMPORTED_MODULE_43__.undulatewefts);
    this.ops.push(_operations_undulatewarps_undulatewarps__WEBPACK_IMPORTED_MODULE_42__.undulatewarps);
    this.ops.push(_operations_chaos_chaos__WEBPACK_IMPORTED_MODULE_19__.chaos);
    this.ops.push(_operations_stretch_stretch__WEBPACK_IMPORTED_MODULE_39__.stretch);
    this.ops.push(_operations_resize_resize__WEBPACK_IMPORTED_MODULE_29__.resize);
    this.ops.push(_operations_margin_margin__WEBPACK_IMPORTED_MODULE_28__.margin);
    this.ops.push(_operations_clear_clear__WEBPACK_IMPORTED_MODULE_20__.clear);
    this.ops.push(_operations_set_set__WEBPACK_IMPORTED_MODULE_32__.set);
    this.ops.push(_operations_unset_unset__WEBPACK_IMPORTED_MODULE_44__.unset);
    this.ops.push(_operations_rotate_rotate__WEBPACK_IMPORTED_MODULE_30__.rotate);
    this.ops.push(_operations_makesymmetric_makesymmetric__WEBPACK_IMPORTED_MODULE_27__.makesymmetric);
    this.ops.push(_operations_fill_fill__WEBPACK_IMPORTED_MODULE_53__.fill);
    this.ops.push(_operations_overlay_overlay__WEBPACK_IMPORTED_MODULE_47__.overlay);
    this.ops.push(_operations_atop_atop__WEBPACK_IMPORTED_MODULE_54__.atop);
    this.ops.push(_operations_mask_mask__WEBPACK_IMPORTED_MODULE_55__.mask);
    this.ops.push(_operations_diff_diff__WEBPACK_IMPORTED_MODULE_56__.diff);
    this.ops.push(_operations_cutout_cutout__WEBPACK_IMPORTED_MODULE_57__.cutout);
    this.ops.push(_operations_shift_shift__WEBPACK_IMPORTED_MODULE_67__.shift);
    this.ops.push(_operations_flip_flip__WEBPACK_IMPORTED_MODULE_68__.flip);
    this.ops.push(_operations_overlay_multiple_overlay_multiple__WEBPACK_IMPORTED_MODULE_48__.overlay_multi);
    //   //this.ops.push(germanify);
    //   //this.ops.push(crackleify);
    //   //this.ops.push(variants);
    this.ops.push(_operations_crop_crop__WEBPACK_IMPORTED_MODULE_58__.crop);
    this.ops.push(_operations_trim_trim__WEBPACK_IMPORTED_MODULE_59__.trim);
    this.ops.push(_operations_makeloom_makeloom__WEBPACK_IMPORTED_MODULE_60__.makeloom);
    this.ops.push(_operations_makedirectloom_makedirectloom__WEBPACK_IMPORTED_MODULE_61__.makedirectloom);
    this.ops.push(_operations_drawdown_drawdown__WEBPACK_IMPORTED_MODULE_62__.drawdown);
    this.ops.push(_operations_directdrawdown_directdrawdown__WEBPACK_IMPORTED_MODULE_63__.directdrawdown);
    this.ops.push(_operations_erase_blank_erase_blank__WEBPACK_IMPORTED_MODULE_66__.erase_blank);
    this.ops.push(_operations_applymaterialsandsystems_applymaterialsandsystems__WEBPACK_IMPORTED_MODULE_16__.apply_mats);
    this.ops.push(_operations_combinatorics_combinatorics__WEBPACK_IMPORTED_MODULE_0__.combinatorics);
    this.ops.push(_operations_sinewave_sineweave__WEBPACK_IMPORTED_MODULE_64__.sinewave);
    this.ops.push(_operations_sawtooth_sawtooth__WEBPACK_IMPORTED_MODULE_65__.sawtooth);
  }
  isDynamic(name) {
    const parent_ndx = this.dynamic_ops.findIndex(el => el.name === name);
    if (parent_ndx == -1) return false;
    return true;
  }
  getOp(name) {
    const op_ndx = this.ops.findIndex(el => el.name === name);
    const parent_ndx = this.dynamic_ops.findIndex(el => el.name === name);
    if (op_ndx !== -1) return this.ops[op_ndx];
    if (parent_ndx !== -1) return this.dynamic_ops[parent_ndx];
    return null;
  }
  hasOldName(op, name) {
    return op.old_names.find(el => el === name) !== undefined;
  }
  getOpByOldName(name) {
    const allops = this.ops.concat(this.dynamic_ops);
    const old_name = allops.filter(el => this.hasOldName(el, name));
    if (old_name.length == 0) {
      return this.getOp('rectangle');
    } else {
      return old_name[0];
    }
  }
}
OperationService.ɵfac = function OperationService_Factory(t) {
  return new (t || OperationService)();
};
OperationService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_69__["ɵɵdefineInjectable"]({
  token: OperationService,
  factory: OperationService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 22791:
/*!********************************************************!*\
  !*** ./src/app/core/provider/patternfinder.service.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PatternfinderService": () => (/* binding */ PatternfinderService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class PatternfinderService {
  constructor() {}
  getThreadingFromArr(arr) {
    var marked_strings = [];
    var marked_strings_frame_tracker = [];
    var threading = [];
    for (var i = 0; i < arr.length; i++) {
      threading.push([]);
      for (var j = 0; j < arr[i].length; j++) {
        threading[i].push(0);
      }
    }
    var frame_count = 0;
    for (var c = 0; c < arr.length; c++) {
      if (!marked_strings.includes(arr[c])) {
        marked_strings.push(arr[c]);
        marked_strings_frame_tracker.push(frame_count);
        threading[frame_count][c] = 1;
        frame_count += 1;
      } else {
        for (var s = 0; s < marked_strings.length; s++) {
          if (marked_strings[s] == arr[c]) {
            threading[marked_strings_frame_tracker[s]][c] = 1;
          }
        }
      }
    }
    var max_idx = 0;
    for (var i = threading.length - 1; i >= 0; i--) {
      if (threading[i].find(elmt => elmt == 1)) {
        for (var j = 0; j < threading[i].length; j++) {
          if (threading[i][j] == 0) {
            var allZero = true;
            for (var k = j + 1; k < threading[i].length; k++) {
              if (threading[i][k] == 1) {
                allZero = false;
              }
            }
            if (allZero && max_idx < j) {
              max_idx = j;
            }
          }
        }
      } else {
        threading.splice(i, 1);
      }
    }
    for (var i = 0; i < threading.length; i++) {
      threading[i].splice(max_idx + 1, threading[i].length - max_idx + 1);
    }
    var toRetThreading = [];
    for (var i = 0; i < threading.length; i++) {
      for (var j = 0; j < threading[i].length; j++) {
        if (threading[i][j] == 1) {
          toRetThreading.push(j);
          break;
        }
      }
    }
    return toRetThreading;
  }
  getTreadlingFromArr(arr) {
    var marked_strings = [];
    var marked_strings_col_tracker = [];
    var treadling = [];
    for (var i = 0; i < arr.length; i++) {
      treadling.push([]);
      for (var j = 0; j < arr[i].length; j++) {
        treadling[i].push(0);
      }
    }
    var treadle_count = 0;
    for (var r = 0; r < arr.length; r++) {
      if (!marked_strings.includes(arr[r])) {
        marked_strings.push(arr[r]);
        marked_strings_col_tracker.push(treadle_count);
        treadling[r][treadle_count] = 1;
        treadle_count += 1;
      } else {
        for (var s = 0; s < marked_strings.length; s++) {
          if (marked_strings[s] == arr[r]) {
            treadling[r][marked_strings_col_tracker[s]] = 1;
          }
        }
      }
    }
    var max_idx = 0;
    for (var i = treadling.length - 1; i >= 0; i--) {
      if (treadling[i].find(elmt => elmt == 1)) {
        for (var j = 0; j < treadling[i].length; j++) {
          if (treadling[i][j] == 0) {
            var allZero = true;
            for (var k = j + 1; k < treadling[i].length; k++) {
              if (treadling[i][k] == 1) {
                allZero = false;
              }
            }
            if (allZero && max_idx < j) {
              max_idx = j;
            }
          }
        }
      } else {
        treadling.splice(i, 1);
      }
    }
    for (var i = 0; i < treadling.length; i++) {
      treadling[i].splice(max_idx + 1, treadling[i].length - max_idx + 1);
    }
    var toRetTreadling = [];
    for (var i = 0; i < treadling.length; i++) {
      for (var j = 0; j < treadling[i].length; j++) {
        if (treadling[i][j] == 1) {
          toRetTreadling.push(j);
          break;
        }
      }
    }
    return toRetTreadling;
  }
  findBasePatternString(subsection) {
    var str = "";
    var pattern = [];
    for (var i = 0; i < subsection.length; i++) {
      let currentChar = subsection[i];
      if (currentChar == ",") {
        pattern.push(parseInt(str));
        str = "";
      } else {
        str += currentChar;
      }
    }
    return this.findBasePatternArray(pattern);
  }
  findBasePatternArray(pattern) {
    for (var i = 2; i < pattern.length; i++) {
      if (pattern.length % i == 0) {
        var match = true;
        for (var j = 1; j < i; j++) {
          if (pattern.slice(0, pattern.length / i) != pattern.slice(pattern.length / i * j, pattern.length / i * (j + 1))) {
            match = false;
          }
          if (match) {
            return this.findBasePatternArray(pattern.slice(0, pattern.length / i));
          }
        }
      }
    }
    return pattern;
  }
  toString(pattern) {
    var strPattern = "";
    for (var i = 0; i < pattern.length; i++) {
      var num = pattern[i];
      strPattern += num.toString();
      strPattern += ",";
    }
    return strPattern.slice(0, -1);
  }
  toArray(pattern) {
    var arrayPattern = [];
    var temp = "";
    for (var i = 0; i < pattern.length; i++) {
      var currentChar = pattern[i];
      if (currentChar != ",") {
        temp += currentChar;
        if (i == pattern.length - 1) {
          arrayPattern.push(parseInt(temp));
        }
      } else if (currentChar == ",") {
        arrayPattern.push(parseInt(temp));
        temp = "";
      }
    }
    return arrayPattern;
  }
  countOccurances(arr, item) {
    var count = 0;
    for (var i in arr) {
      if (i == item) {
        count += 1;
      }
    }
    return count;
  }
  findPatterns(sequence) {
    for (var i = 0; i < sequence.length; i++) {
      if (sequence[i] == -1) {
        var allEmpty = true;
        for (var j = i + 1; j < sequence.length; j++) {
          if (sequence[j] != -1) {
            allEmpty = false;
          }
        }
        if (allEmpty) {
          break;
        }
      }
    }
    if (allEmpty) {
      sequence.splice(i, sequence.length - i);
    }
    var singles = {};
    for (var i = 0; i < sequence.length; i++) {
      var count = 0;
      sequence.forEach(element => {
        if (element == sequence[i]) {
          count += 1;
        }
      });
      singles[sequence[i]] = count;
    }
    for (var key in singles) {
      if (singles[key] == 1) {
        delete singles[key];
      }
    }
    if (Object.keys(singles).length == 0) {
      return sequence;
    }
    for (var size = 1; size < sequence.length; size++) {
      for (var i = 0; i < sequence.length - 1 - size; size++) {
        let key = sequence.slice(i, i + size);
        var repeat = true;
        for (var j = i + size; j < sequence.length - 1 - size; j += size) {
          if (JSON.stringify(sequence.slice(j, j + size)) != JSON.stringify(key)) {
            repeat = false;
          }
        }
        if (repeat) {
          return key;
        }
      }
    }
    return sequence;
  }
  findDraftPatterns(treadlingPatterns, treadling, threadingPatterns, threading, draft) {
    var treadlingString = this.toString(treadling);
    var threadingString = this.toString(threading);
    var treadlingRanges = [];
    var threadingRanges = [];
    let idxTreadling = treadlingString.indexOf(treadlingPatterns);
    var length = -1;
    for (var j = 0; j < treadlingString.length; j++) {
      if (j == idxTreadling) {
        length += 1;
        break;
      }
      if (treadlingString[j] == ",") {
        length += 1;
      }
    }
    treadlingRanges.push([length, treadlingPatterns.length]);
    let idxThreading = threadingString.indexOf(threadingPatterns);
    var length = -1;
    for (var j = 0; j < threadingString.length; j++) {
      if (j == idxThreading) {
        length += 1;
        break;
      }
      if (threadingString[j] == ",") {
        length += 1;
      }
    }
    threadingRanges.push([length, threadingPatterns.length]);
    var draftPatterns = [];
    for (var i = 0; i < treadlingRanges.length; i++) {
      for (var j = 0; j < threadingRanges.length; j++) {
        var pattern = [];
        var counter = -1;
        for (var idxWeft = treadlingRanges[i][0]; idxWeft < treadlingRanges[i][1]; idxWeft += 1) {
          counter += 1;
          pattern.push([]);
          for (var idxWarp = threadingRanges[j][0]; idxWarp < threadingRanges[j][1]; idxWarp += 1) {
            pattern[counter].push(draft[idxWeft][idxWarp]);
          }
        }
        draftPatterns.push(pattern);
      }
    }
    var transformedDraftPatterns = [];
    for (var i = 0; i < draftPatterns.length; i++) {
      transformedDraftPatterns.push([]);
      for (var j = 0; j < draftPatterns[i].length; j++) {
        transformedDraftPatterns[i].push([]);
        for (var k = 0; k < draftPatterns[i][j].length; k++) {
          if (draftPatterns[i][j][k] == 1 || draftPatterns[i][j][k].is_up) {
            transformedDraftPatterns[i][j].push(1);
          } else {
            transformedDraftPatterns[i][j].push(0);
          }
        }
      }
    }
    return transformedDraftPatterns[0];
  }
  computePatterns(threading, treadling, draft) {
    let threadingPatterns = this.findPatterns(threading);
    let treadlingPatterns = this.findPatterns(treadling);
    return this.findDraftPatterns(treadlingPatterns, treadling, threadingPatterns, threading, draft);
  }
}
PatternfinderService.ɵfac = function PatternfinderService_Factory(t) {
  return new (t || PatternfinderService)();
};
PatternfinderService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: PatternfinderService,
  factory: PatternfinderService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 74983:
/*!*****************************************************!*\
  !*** ./src/app/core/provider/simulation.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SimulationService": () => (/* binding */ SimulationService)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ 92845);
/* harmony import */ var _model_yarnsimulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/yarnsimulation */ 61350);
/* harmony import */ var _provider_materials_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../provider/materials.service */ 2940);
/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ 41100);
/* harmony import */ var three_examples_jsm_math_Lut__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three/examples/jsm/math/Lut */ 29586);
/* harmony import */ var _model_datatypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/datatypes */ 86789);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/drafts */ 1435);
/* harmony import */ var _model_cell__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/cell */ 94467);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/sequence */ 62390);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 22560);











class SimulationService {
  constructor(ms) {
    this.ms = ms;
    this.hasSimulation = false;
    this.currentSim = null;
  }
  /**
   * clears the memory devoted to a scene
   * @param scene
   */
  endSimulation(scene) {
    // document.body.removeChild(this.renderer.domElement);
    scene.clear();
    scene.children.forEach(childMesh => {
      if (childMesh.geometry !== undefined) childMesh.geometry.dispose();
      if (childMesh.texture !== undefined) childMesh.texture.dispose();
      if (childMesh.material !== undefined) childMesh.material.dispose();
    });
    this.hasSimulation = false;
  }
  tileDraft(draft, boundary) {
    //extend to left and right top and bottom
    let pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.TwoD();
    let weft_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.OneD();
    let weft_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.OneD();
    let warp_mats = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.OneD();
    let warp_sys = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.OneD();
    draft.drawdown.forEach((row, ndx) => {
      let seq = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.OneD().import(row);
      weft_mats.push(draft.rowShuttleMapping[ndx]);
      weft_sys.push(draft.rowSystemMapping[ndx]);
      if (ndx == 0) {
        warp_mats.import(draft.colShuttleMapping);
        warp_sys.import(draft.colSystemMapping);
      }
      //first, expand rows
      for (let i = 0; i < boundary; i++) {
        seq.push((0,_model_cell__WEBPACK_IMPORTED_MODULE_4__.getCellValue)(row[i % row.length]));
        let from_end = i % row.length;
        seq.unshift((0,_model_cell__WEBPACK_IMPORTED_MODULE_4__.getCellValue)(row[row.length - 1 - from_end]));
        if (ndx == 0) {
          warp_mats.push(draft.colShuttleMapping[i % row.length]);
          warp_mats.unshift(draft.colShuttleMapping[row.length - 1 - from_end]);
          warp_sys.push(draft.colSystemMapping[i % row.length]);
          warp_sys.unshift(draft.colSystemMapping[row.length - 1 - from_end]);
        }
      }
      pattern.pushWeftSequence(seq.val());
    });
    let extended_pattern = new _model_sequence__WEBPACK_IMPORTED_MODULE_5__.Sequence.TwoD().import(pattern.export());
    for (let i = 0; i < boundary; i++) {
      let offset = i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown);
      let row = pattern.getWeft(i % (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown));
      extended_pattern.pushWeftSequence(row);
      let ending_row = pattern.getWeft((0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) - 1 - offset);
      extended_pattern.unshiftWeftSequence(ending_row);
      weft_mats.push(draft.rowShuttleMapping[i]);
      weft_sys.push(draft.rowSystemMapping[i]);
      weft_mats.unshift(draft.rowShuttleMapping[(0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) - 1 - offset]);
      weft_sys.unshift(draft.rowSystemMapping[(0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) - 1 - offset]);
    }
    const expanded_draft = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.initDraftFromDrawdown)(extended_pattern.export());
    expanded_draft.colShuttleMapping = warp_mats.val();
    expanded_draft.colSystemMapping = warp_sys.val();
    expanded_draft.rowShuttleMapping = weft_mats.val();
    expanded_draft.rowSystemMapping = weft_sys.val();
    return Promise.resolve(expanded_draft);
  }
  /**
   * generates a new simulation with the given draft and simulation parameters
   * @param draft
   * @param sim
   * @returns promise for simulation data
   */
  generateSimulationData(draft, sim) {
    const currentSim = {
      draft: draft,
      bounds: {
        topleft: {
          x: sim.boundary,
          y: sim.boundary
        },
        width: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown),
        height: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown)
      },
      sim: sim,
      topo: null,
      vtxs: null,
      layer_maps: null
    };
    return this.tileDraft(draft, sim.boundary).then(expandeddraft => {
      currentSim.draft = expandeddraft;
      return (0,_model_yarnsimulation__WEBPACK_IMPORTED_MODULE_0__.getDraftTopology)(currentSim.draft, sim);
    }).then(topology => {
      currentSim.topo = topology;
      return (0,_model_yarnsimulation__WEBPACK_IMPORTED_MODULE_0__.createLayerMaps)(currentSim.draft, topology, sim);
    }).then(lm => {
      currentSim.layer_maps = lm;
      return (0,_model_yarnsimulation__WEBPACK_IMPORTED_MODULE_0__.translateTopologyToPoints)(currentSim.draft, currentSim.topo, lm, sim);
    }).then(vtxs => {
      currentSim.vtxs = vtxs;
      return currentSim;
    });
  }
  setupSimulation(draft, renderer, scene, camera, layer_threshold, warp_range, warp_spacing, layer_spacing, max_interlacement_width, max_interlacement_height, boundary, radius, ms) {
    camera = new three__WEBPACK_IMPORTED_MODULE_6__.PerspectiveCamera(75, 1, 0.1, 1000);
    const controls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_7__.OrbitControls(camera, renderer.domElement);
    const animate = function () {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
      controls.update();
    };
    scene.background = new three__WEBPACK_IMPORTED_MODULE_6__.Color(0xf0f0f0);
    camera.position.set(20, 0, 200);
    camera.lookAt(0, 0, 0);
    controls.update();
    animate();
    const sim = {
      warp_spacing,
      layer_spacing,
      ms,
      layer_threshold,
      max_interlacement_width,
      max_interlacement_height,
      boundary,
      radius
    };
    return this.generateSimulationData(draft, sim).then(simdata => {
      this.currentSim = simdata;
      return simdata;
    });
  }
  recalcSimData(scene, draft, warp_spacing, layer_spacing, layer_threshold, max_interlacement_width, max_interlacement_height, boundary, radius, ms) {
    const sim = {
      warp_spacing,
      layer_spacing,
      layer_threshold,
      max_interlacement_width,
      max_interlacement_height,
      boundary,
      radius,
      ms
    };
    this.currentSim.sim = sim;
    return this.generateSimulationData(draft, sim).then(simdata => {
      this.currentSim = simdata;
      return simdata;
    });
  }
  renderSimdata(scene, simdata, warps, wefts, warp_layer, weft_layers, topo, show_draft) {
    this.hasSimulation = true;
    if (this.currentSim.draft == null) return;
    scene.clear();
    const light = new three__WEBPACK_IMPORTED_MODULE_6__.DirectionalLight(0xffffff, 1.0);
    const back_light = new three__WEBPACK_IMPORTED_MODULE_6__.DirectionalLight(0xffffff, 1.0);
    scene.add(light);
    scene.add(back_light);
    light.position.set(20, 0, 50);
    back_light.position.set(20, 0, -50);
    const boundary_vtx = this.getBoundaryVtxs(simdata);
    this.drawAxis(scene, simdata, boundary_vtx);
    this.drawYarns(scene, simdata, boundary_vtx);
    this.drawEndCaps(scene, simdata, boundary_vtx);
    this.drawWarpLayerMap(scene, boundary_vtx);
    this.drawWeftLayerMap(scene, boundary_vtx);
    this.drawTopology(scene, boundary_vtx);
    this.drawDraft(scene, this.currentSim.draft, this.currentSim.sim, boundary_vtx);
    if (!wefts) this.hideWefts();
    if (!warps) this.hideWarps();
    if (!warp_layer) this.hideWarpLayerMap();
    if (!weft_layers) this.hideWeftLayerMap();
    if (!topo) this.hideTopo();
    if (!show_draft) this.hideDraft();
  }
  drawAxis(scene, simdata, boundary_vtx) {
    this.axis_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    //X AXIS 
    const material = new three__WEBPACK_IMPORTED_MODULE_6__.LineBasicMaterial({
      color: 0x0000ff
    });
    const points = [];
    points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 20, boundary_vtx.min_y - 20, 0));
    points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.max_x + 20, boundary_vtx.min_y - 20, 0));
    const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry().setFromPoints(points);
    const line = new three__WEBPACK_IMPORTED_MODULE_6__.Line(geometry, material);
    this.axis_scene.add(line);
    /**Y AXIS */
    const y_points = [];
    y_points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 20, boundary_vtx.min_y - 20, 0));
    y_points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 20, boundary_vtx.max_y + 20, 0));
    const y_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry().setFromPoints(y_points);
    const y_line = new three__WEBPACK_IMPORTED_MODULE_6__.Line(y_geometry, material);
    this.axis_scene.add(y_line);
    /**Z AXIS */
    const z_points = [];
    z_points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 20, boundary_vtx.min_y - 20, 0));
    z_points.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 20, boundary_vtx.min_y - 20, 100));
    const z_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry().setFromPoints(z_points);
    const z_line = new three__WEBPACK_IMPORTED_MODULE_6__.Line(z_geometry, material);
    this.axis_scene.add(z_line);
    this.axis_scene = this.applyOrientationConversion(this.axis_scene, boundary_vtx);
    scene.add(this.axis_scene);
  }
  /**
   * given the vtx data and a boundary, this function returns the min/max values for wefts and warps to be used to position the start and end of the warp and weft data.
   * @param simdata
   * @returns
   */
  getBoundaryVtxs(simdata) {
    const vtxs = simdata.vtxs;
    const bounds = simdata.bounds;
    //get the weft boundary, draw warps from this data
    let in_bound_wefts = vtxs.wefts.filter((el, ndx) => ndx >= bounds.topleft.y && ndx < bounds.topleft.y + bounds.height);
    let min_y = in_bound_wefts.reduce((acc, row) => {
      let min_in_row = row.filter(vtx => vtx.j >= bounds.topleft.x && vtx.j < bounds.topleft.x + bounds.width).reduce((subacc, vtx) => {
        if (vtx.y < subacc) return vtx.y;
        return subacc;
      }, 10000);
      if (min_in_row < acc) return min_in_row;
      return acc;
    }, 100000);
    let max_y = in_bound_wefts.reduce((acc, row) => {
      let max_in_row = row.filter(vtx => vtx.j >= bounds.topleft.x && vtx.j < bounds.topleft.x + bounds.width).reduce((subacc, vtx) => {
        if (vtx.y > subacc) return vtx.y;
        return subacc;
      }, 0);
      if (max_in_row > acc) return max_in_row;
      return acc;
    }, 0);
    let min_x = in_bound_wefts.reduce((acc, row) => {
      let min_in_row = row.filter(vtx => vtx.j >= bounds.topleft.x && vtx.j < bounds.topleft.x + bounds.width).reduce((subacc, vtx) => {
        if (vtx.x < subacc) return vtx.x;
        return subacc;
      }, 10000);
      if (min_in_row < acc) return min_in_row;
      return acc;
    }, 100000);
    let max_x = in_bound_wefts.reduce((acc, row) => {
      let max_in_row = row.filter(vtx => vtx.j >= bounds.topleft.x && vtx.j < bounds.topleft.x + bounds.width).reduce((subacc, vtx) => {
        if (vtx.x > subacc) return vtx.x;
        return subacc;
      }, 0);
      if (max_in_row > acc) return max_in_row;
      return acc;
    }, 0);
    return {
      min_x,
      max_x,
      min_y,
      max_y
    };
  }
  getClosestVtx(simdata, warp, i, j) {
    if (warp) {
      let vtxs = simdata.vtxs.warps[j];
      let closest_ndx = vtxs.reduce((acc, vtx, ndx) => {
        if (Math.abs(vtx.i - i) < acc.dist) return {
          dist: Math.abs(vtx.i - i),
          ndx
        };
        return acc;
      }, {
        dist: 10000,
        ndx: -1
      });
      if (closest_ndx.ndx == -1) return null;
      return vtxs[closest_ndx.ndx];
    } else {
      //on wefts 
      let vtxs = simdata.vtxs.wefts[i];
      let closest_ndx = vtxs.reduce((acc, vtx, ndx) => {
        if (vtx.j >= simdata.bounds.topleft.x && vtx.j < simdata.bounds.topleft.x + simdata.bounds.width && Math.abs(vtx.j - j) < acc.dist) return {
          dist: Math.abs(vtx.j - j),
          ndx
        };
        return acc;
      }, {
        dist: 10000,
        ndx: -1
      });
      if (closest_ndx.ndx == -1) return null;
      return vtxs[closest_ndx.ndx];
    }
  }
  /**
   * this renders the imagery of the yarns. It uses the boundary provided by
   * @param scene
   * @param simdata
   */
  drawYarns(scene, simdata, boundary_vtx) {
    this.warp_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    this.weft_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    const vtxs = simdata.vtxs;
    const draft = simdata.draft;
    //DRAW THE WARPS
    for (let j = simdata.bounds.topleft.x; j < simdata.bounds.width + simdata.bounds.topleft.x; j++) {
      const pts = [];
      if (vtxs.warps[j].length > 0 && vtxs.warps[j] !== undefined) {
        const material_id = draft.colShuttleMapping[j];
        let diameter = this.ms.getDiameter(material_id);
        let color = this.ms.getColor(material_id);
        let in_bounds_vxts = simdata.vtxs.warps[j].filter(el => el.i >= simdata.bounds.topleft.y && el.i < simdata.bounds.topleft.y + simdata.bounds.height);
        let start_vtx = this.getClosestVtx(simdata, true, simdata.bounds.topleft.y, j);
        let end_vtx = this.getClosestVtx(simdata, true, simdata.bounds.topleft.y + simdata.bounds.height, j);
        if (start_vtx !== null) pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(start_vtx.x, boundary_vtx.min_y - 10, start_vtx.z));
        in_bounds_vxts.slice().forEach(vtx => {
          if (vtx.x !== undefined) pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(vtx.x, vtx.y, vtx.z));
        });
        if (end_vtx !== null) pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(end_vtx.x, boundary_vtx.max_y + 10, end_vtx.z));
        const curve = new three__WEBPACK_IMPORTED_MODULE_6__.CatmullRomCurve3(pts, false, 'catmullrom', .1);
        const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.TubeGeometry(curve, 100, diameter / 2, 6, false);
        const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshPhysicalMaterial({
          color: color,
          depthTest: true,
          emissive: 0x000000,
          metalness: 0,
          roughness: 0.5,
          clearcoat: 1.0,
          clearcoatRoughness: 1.0,
          reflectivity: 0.0
        });
        let curveObject = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
        this.warp_scene.add(curveObject);
      }
    }
    ;
    this.warp_scene = this.applyOrientationConversion(this.warp_scene, boundary_vtx);
    scene.add(this.warp_scene);
    //draw wefts
    for (let i = simdata.bounds.topleft.y; i < simdata.bounds.height + simdata.bounds.topleft.y; i++) {
      let weft_vtx_list = vtxs.wefts[i];
      let in_bound_vtxs = weft_vtx_list.filter(el => el.j >= simdata.bounds.topleft.x && el.j < simdata.bounds.width + simdata.bounds.topleft.x);
      const pts = [];
      let start_vtx = this.getClosestVtx(simdata, false, i, simdata.bounds.topleft.x);
      let end_vtx = this.getClosestVtx(simdata, false, i, simdata.bounds.topleft.x + simdata.bounds.width);
      if (start_vtx !== null) pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.min_x - 10, start_vtx.y, start_vtx.z));
      in_bound_vtxs.forEach(vtx => {
        if (vtx.x !== undefined) {
          pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(vtx.x, vtx.y, vtx.z));
        }
      });
      if (end_vtx !== null) pts.push(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(boundary_vtx.max_x + 10, end_vtx.y, end_vtx.z));
      const material_id = draft.rowShuttleMapping[i];
      let diameter = this.ms.getDiameter(material_id);
      let color = this.ms.getColor(material_id);
      const curve = new three__WEBPACK_IMPORTED_MODULE_6__.CatmullRomCurve3(pts, false, 'catmullrom', .1);
      const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.TubeGeometry(curve, 100, diameter / 2, 6, false);
      const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshPhysicalMaterial({
        color: color,
        emissive: 0x000000,
        depthTest: true,
        metalness: 0,
        roughness: 0.5,
        clearcoat: 1.0,
        clearcoatRoughness: 1.0,
        reflectivity: 0.0
      });
      let curveObject = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
      this.weft_scene.add(curveObject);
    }
    this.weft_scene = this.applyOrientationConversion(this.weft_scene, boundary_vtx);
    scene.add(this.weft_scene);
  }
  drawDraft(scene, draft, sim, boundary_vtx) {
    this.draft_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry();
    // const yarn_height = 5;
    const yarn_height = this.currentSim.sim.warp_spacing;
    let alldata = [];
    let positions = [];
    let colors = [];
    let normals = [];
    let indicies = [];
    for (let i = 0; i < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown); i++) {
      for (let j = 0; j < (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown); j++) {
        const col = (0,_model_cell__WEBPACK_IMPORTED_MODULE_4__.getCellValue)(draft.drawdown[i][j]) == true ? 0 : 1;
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * i, 0],
          norm: [0, 1, 0],
          color: [col, col, col]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * i, 0],
          norm: [0, 1, 0],
          color: [col, col, col]
        });
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * (i + 1), 0],
          norm: [0, 1, 0],
          color: [col, col, col]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * (i + 1), 0],
          norm: [0, 1, 0],
          color: [col, col, col]
        });
        let starting_index = (i * (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) + j) * 4;
        indicies = indicies.concat([starting_index + 2, starting_index + 0, starting_index + 3, starting_index + 1, starting_index + 3, starting_index + 0]);
      }
    }
    for (const vertex of alldata) {
      positions.push(...vertex.pos);
      normals.push(...vertex.norm);
      colors.push(...vertex.color);
    }
    geometry.setIndex(indicies);
    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(positions, 3));
    geometry.setAttribute('normal', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(normals, 3));
    geometry.setAttribute('color', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(colors, 3));
    const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
      side: three__WEBPACK_IMPORTED_MODULE_6__.DoubleSide,
      vertexColors: true
    });
    let mesh = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
    this.draft_scene.add(mesh);
    this.draft_scene = this.applyOrientationConversion(this.draft_scene, boundary_vtx);
    scene.add(this.draft_scene);
  }
  showDraft() {
    this.draft_scene.visible = true;
  }
  hideDraft() {
    this.draft_scene.visible = false;
  }
  showWarps() {
    this.warp_scene.visible = true;
  }
  hideWarps() {
    this.warp_scene.visible = false;
  }
  showWefts() {
    // console.log("SHOW WEFTS");
    this.weft_scene.visible = true;
  }
  hideWefts() {
    this.weft_scene.visible = false;
  }
  hideWarpLayerMap() {
    this.warp_layer_map_scene.visible = false;
  }
  showWarpLayerMap() {
    this.warp_layer_map_scene.visible = true;
    // console.log("SHOW WARP LAYER MAP", this.warp_layer_map_scene)
  }

  hideWeftLayerMap() {
    this.weft_layer_map_scene.visible = false;
  }
  showWeftLayerMap() {
    this.weft_layer_map_scene.visible = true;
    // console.log("SHOW LAYER MAP", this.weft_layer_map_scene)
  }

  hideTopo() {
    this.topo_scene.visible = false;
  }
  showTopo() {
    this.topo_scene.visible = true;
    // console.log("SHOW LAYER MAP", this.topo_scene)
  }

  drawWeftLayerMap(scene, boundary_vtx) {
    this.weft_layer_map_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    let z = -20;
    const lm = this.currentSim.layer_maps;
    const sim = this.currentSim.sim;
    const draft = this.currentSim.draft;
    let range = lm.weft.reduce((acc, val) => {
      let max = val.reduce((sub_acc, vtx) => {
        if (vtx > sub_acc) return vtx;
        return sub_acc;
      }, 0);
      if (max > acc) return max;
      return acc;
    }, 0);
    if (range == 0) range = 1;
    const lut = new three_examples_jsm_math_Lut__WEBPACK_IMPORTED_MODULE_8__.Lut();
    lut.setColorMap('rainbow', 512);
    const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry();
    // const yarn_height = 5;
    const yarn_height = this.currentSim.sim.warp_spacing;
    let alldata = [];
    let positions = [];
    let colors = [];
    let normals = [];
    let indicies = [];
    for (let i = 0; i < lm.weft.length; i++) {
      for (let j = 0; j < lm.weft[0].length; j++) {
        const r = 0.5 + lm.weft[i][j] / range;
        const col = lut.getColor(r);
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * i, z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * i, z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * (i + 1), z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * (i + 1), z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        let starting_index = (i * (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) + j) * 4;
        indicies = indicies.concat([starting_index + 2, starting_index + 0, starting_index + 3, starting_index + 1, starting_index + 3, starting_index + 0]);
      }
    }
    for (const vertex of alldata) {
      positions.push(...vertex.pos);
      normals.push(...vertex.norm);
      colors.push(...vertex.color);
    }
    geometry.setIndex(indicies);
    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(positions, 3));
    geometry.setAttribute('normal', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(normals, 3));
    geometry.setAttribute('color', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(colors, 3));
    const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
      side: three__WEBPACK_IMPORTED_MODULE_6__.DoubleSide,
      transparent: true,
      vertexColors: true,
      opacity: .5
    });
    let mesh = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
    this.weft_layer_map_scene.add(mesh);
    this.weft_layer_map_scene = this.applyOrientationConversion(this.weft_layer_map_scene, boundary_vtx);
    scene.add(this.weft_layer_map_scene);
  }
  drawWarpLayerMap(scene, boundary_vtx) {
    this.warp_layer_map_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    let z = -20;
    const lm = this.currentSim.layer_maps;
    const sim = this.currentSim.sim;
    const draft = this.currentSim.draft;
    let range = lm.warp.reduce((acc, val) => {
      let max = val.reduce((sub_acc, vtx) => {
        if (vtx > sub_acc) return vtx;
        return sub_acc;
      }, 0);
      if (max > acc) return max;
      return acc;
    }, 0);
    if (range == 0) range = 1;
    const lut = new three_examples_jsm_math_Lut__WEBPACK_IMPORTED_MODULE_8__.Lut();
    lut.setColorMap('rainbow', 512);
    const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry();
    // const yarn_height = 5;
    const yarn_height = this.currentSim.sim.warp_spacing;
    let alldata = [];
    let positions = [];
    let colors = [];
    let normals = [];
    let indicies = [];
    for (let i = 0; i < lm.warp.length; i++) {
      for (let j = 0; j < lm.warp[0].length; j++) {
        const r = 0.5 + lm.warp[i][j] / range;
        const col = lut.getColor(r);
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * i, z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * i, z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * j, yarn_height * (i + 1), z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        alldata.push({
          pos: [sim.warp_spacing * (j + 1), yarn_height * (i + 1), z],
          norm: [0, 1, 0],
          color: [col.r, col.g, col.b]
        });
        let starting_index = (i * (0,_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) + j) * 4;
        indicies = indicies.concat([starting_index + 2, starting_index + 0, starting_index + 3, starting_index + 1, starting_index + 3, starting_index + 0]);
      }
    }
    for (const vertex of alldata) {
      positions.push(...vertex.pos);
      normals.push(...vertex.norm);
      colors.push(...vertex.color);
    }
    geometry.setIndex(indicies);
    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(positions, 3));
    geometry.setAttribute('normal', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(normals, 3));
    geometry.setAttribute('color', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(colors, 3));
    const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
      side: three__WEBPACK_IMPORTED_MODULE_6__.DoubleSide,
      transparent: true,
      vertexColors: true,
      opacity: .5
    });
    let mesh = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
    this.warp_layer_map_scene.add(mesh);
    this.warp_layer_map_scene = this.applyOrientationConversion(this.warp_layer_map_scene, boundary_vtx);
    scene.add(this.warp_layer_map_scene);
  }
  drawTopology(scene, boundary_vtx) {
    // console.log("LAYER MAP DRAWN")
    this.topo_scene = new three__WEBPACK_IMPORTED_MODULE_6__.Group();
    const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry();
    let alldata = [];
    let positions = [];
    let colors = [];
    let normals = [];
    let indicies = [];
    const topo = this.currentSim.topo;
    const sim = this.currentSim.sim;
    const yarn_height = sim.warp_spacing;
    const lut = new three_examples_jsm_math_Lut__WEBPACK_IMPORTED_MODULE_8__.Lut();
    const range = 10;
    lut.setColorMap('rainbow', 10);
    topo.forEach((vtx, x) => {
      const r = 0.5 + vtx.z_pos / range;
      const col = lut.getColor(r);
      // let z = vtx.z_pos * sim.layer_spacing;
      // let z = -10 + vtx.z_pos;
      let z = -1;
      alldata.push({
        pos: [sim.warp_spacing * vtx.j_left + 2, yarn_height * vtx.i_bot + 2, z],
        norm: [0, 1, 0],
        color: [col.r, col.g, col.b]
      });
      alldata.push({
        pos: [sim.warp_spacing * vtx.j_right + sim.warp_spacing - 2, yarn_height * vtx.i_bot + 2, z],
        norm: [0, 1, 0],
        color: [col.r, col.g, col.b]
      });
      alldata.push({
        pos: [sim.warp_spacing * vtx.j_left + 2, yarn_height * vtx.i_top + yarn_height - 2, z],
        norm: [0, 1, 0],
        color: [col.r, col.g, col.b]
      });
      alldata.push({
        pos: [sim.warp_spacing * vtx.j_right + sim.warp_spacing - 2, yarn_height * vtx.i_top + yarn_height - 2, z],
        norm: [0, 1, 0],
        color: [col.r, col.g, col.b]
      });
      let starting_index = x * 4;
      indicies = indicies.concat([starting_index + 2, starting_index + 0, starting_index + 3, starting_index + 1, starting_index + 3, starting_index + 0]);
    });
    for (const vertex of alldata) {
      positions.push(...vertex.pos);
      normals.push(...vertex.norm);
      colors.push(...vertex.color);
    }
    geometry.setIndex(indicies);
    geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(positions, 3));
    geometry.setAttribute('normal', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(normals, 3));
    geometry.setAttribute('color', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(colors, 3));
    const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
      side: three__WEBPACK_IMPORTED_MODULE_6__.DoubleSide,
      transparent: true,
      vertexColors: true,
      opacity: .5,
      wireframe: true
    });
    let mesh = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(geometry, material);
    this.topo_scene.add(mesh);
    this.topo_scene = this.applyOrientationConversion(this.topo_scene, boundary_vtx);
    scene.add(this.topo_scene);
  }
  applyOrientationConversion(object, boundary_vtx) {
    const trans = new three__WEBPACK_IMPORTED_MODULE_6__.Matrix4();
    let width = boundary_vtx.max_x - boundary_vtx.min_x;
    let height = boundary_vtx.max_y - boundary_vtx.min_y;
    trans.makeTranslation(-(boundary_vtx.min_x + width / 2), boundary_vtx.min_y + height / 2, 0);
    object.applyMatrix4(trans);
    const quaternion = new three__WEBPACK_IMPORTED_MODULE_6__.Quaternion();
    //rotate around the x axis to match draft orientation in top left
    quaternion.setFromAxisAngle(new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(1, 0, 0), Math.PI);
    object.applyQuaternion(quaternion);
    // quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI );
    // curveObject.applyQuaternion(quaternion);
    return object;
  }
  drawEndCaps(scene, simdata, boundary_vtx) {
    const vtxs = simdata.vtxs;
    const draft = simdata.draft;
    const bounds = simdata.bounds;
    const ms = simdata.sim.ms;
    if (vtxs.warps.length <= 0) return;
    //DRAW WARP ENDS
    let in_bounds_warps = vtxs.warps.filter(el => el[0].j >= bounds.topleft.x && el[0].j < bounds.topleft.x + bounds.width);
    in_bounds_warps.forEach((warp, ndx) => {
      let j = ndx + bounds.topleft.x;
      if (warp.length > 0) {
        let start_vtx = this.getClosestVtx(simdata, true, simdata.bounds.topleft.y, j);
        let end_vtx = this.getClosestVtx(simdata, true, simdata.bounds.topleft.y + simdata.bounds.height, j);
        const material_id = draft.colShuttleMapping[j];
        let diameter = ms.getDiameter(material_id);
        const color = this.ms.getColor(material_id);
        const top_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.CircleGeometry(diameter / 2, 32);
        top_geometry.rotateX(Math.PI / 2);
        if (start_vtx !== null) top_geometry.translate(start_vtx.x, boundary_vtx.min_y - 10, start_vtx.z);
        const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
          color: color
        });
        let end_circle = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(top_geometry, material);
        this.warp_scene.add(end_circle);
        const bot_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.CircleGeometry(diameter / 2, 32);
        bot_geometry.rotateX(3 * Math.PI / 2);
        if (end_vtx !== null) bot_geometry.translate(end_vtx.x, boundary_vtx.max_y + 10, end_vtx.z);
        let top_circle = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(bot_geometry, material);
        // top_circle.tranlsateY(-top/2);
        // top_circle.tranlsateX(-right/2);
        this.warp_scene.add(top_circle);
      }
    });
    let in_bounds_wefts = vtxs.wefts.filter((el, ndx) => ndx >= bounds.topleft.y && ndx < bounds.topleft.y + bounds.height);
    in_bounds_wefts.forEach((weft, ndx) => {
      let in_range = weft.filter(el => el.j >= bounds.topleft.x && el.j < bounds.topleft.x + bounds.width);
      let i = ndx + bounds.topleft.y;
      if (weft.length > 0) {
        let start_vtx = this.getClosestVtx(simdata, false, i, simdata.bounds.topleft.x);
        let end_vtx = this.getClosestVtx(simdata, false, i, simdata.bounds.topleft.x + simdata.bounds.width);
        const material_id = draft.rowShuttleMapping[i];
        let diameter = ms.getDiameter(material_id);
        const color = this.ms.getColor(material_id);
        const top_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.CircleGeometry(diameter / 2, 32);
        top_geometry.rotateY(3 * Math.PI / 2);
        if (start_vtx !== null) top_geometry.translate(boundary_vtx.min_x - 10, start_vtx.y, start_vtx.z);
        const material = new three__WEBPACK_IMPORTED_MODULE_6__.MeshBasicMaterial({
          color: color
        });
        let end_circle = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(top_geometry, material);
        this.weft_scene.add(end_circle);
        const bot_geometry = new three__WEBPACK_IMPORTED_MODULE_6__.CircleGeometry(diameter / 2, 32);
        bot_geometry.rotateY(Math.PI / 2);
        if (end_vtx !== null) bot_geometry.translate(boundary_vtx.max_x + 10, end_vtx.y, end_vtx.z);
        let top_circle = new three__WEBPACK_IMPORTED_MODULE_6__.Mesh(bot_geometry, material);
        this.weft_scene.add(top_circle);
      }
    });
  }
}
SimulationService.ɵfac = function SimulationService_Factory(t) {
  return new (t || SimulationService)(_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵinject"](_provider_materials_service__WEBPACK_IMPORTED_MODULE_1__.MaterialsService));
};
SimulationService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdefineInjectable"]({
  token: SimulationService,
  factory: SimulationService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 99938:
/*!************************************************!*\
  !*** ./src/app/core/provider/state.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StateService": () => (/* binding */ StateService)
/* harmony export */ });
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/fire/auth */ 61577);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/drafts */ 1435);
/* harmony import */ var _filesystem_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filesystem.service */ 65130);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);





class StateService {
  // private itemDoc: AngularFirestoreDocument<Item>;
  constructor(files) {
    this.files = files;
    this.active_id = 0;
    this.max_size = 10;
    this.last_saved_time = "";
    this.active_id = 0;
    this.timeline = [];
  }
  clearTimeline() {
    this.active_id = 0;
    this.undo_disabled = true;
    this.redo_disabled = true;
    this.timeline = [];
  }
  printValue(value) {
    console.log("printing", value);
  }
  validateWriteData(cur_state) {
    return cur_state;
  }
  /**
   * used in weaver - adds a draft to the history state
   * @param draft
   */
  addHistoryState(draft) {
    var state = {
      draft: (0,_model_drafts__WEBPACK_IMPORTED_MODULE_0__.copyDraft)(draft),
      ada: null
    };
    //we are looking at the most recent state
    if (this.active_id > 0) {
      //erase all states until you get to the active row
      this.timeline.splice(0, this.active_id);
      this.active_id = 0;
      this.redo_disabled = true;
    }
    //add the new element to position 0
    var len = this.timeline.unshift(state);
    if (len > this.max_size) this.timeline.pop();
    if (this.timeline.length > 1) this.undo_disabled = false;
  }
  /**
   * used in mixer - adds an ada file to the history state
   * @param ada
   */
  addMixerHistoryState(ada) {
    var state = {
      draft: null,
      ada: {
        version: ada.file.version,
        workspace: ada.file.workspace,
        type: ada.file.type,
        nodes: ada.file.nodes.slice(),
        tree: ada.file.tree.slice(),
        draft_nodes: ada.file.draft_nodes.slice(),
        ops: ada.file.ops.slice(),
        notes: ada.file.notes.slice(),
        materials: ada.file.materials.slice(),
        scale: ada.file.scale
      }
    };
    //write this to database, overwritting what was previously there
    //this.files.writeUserData(ada.file);
    const auth = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_2__.getAuth)();
    const user = auth.currentUser;
    if (user !== null) {
      this.files.writeFileData(user.uid, this.files.current_file_id, ada.file);
    }
    //we are looking at the most recent state
    if (this.active_id > 0) {
      //erase all states until you get to the active row
      this.timeline.splice(0, this.active_id);
      this.active_id = 0;
      this.redo_disabled = true;
    }
    //add the new element to position 0
    var len = this.timeline.unshift(state);
    if (len > this.max_size) this.timeline.pop();
    if (this.timeline.length > 1) this.undo_disabled = false;
    //this.logState(ada);
  }
  /**
   * called on redo in weaver
   * @returns returns the draft to reload
   */
  restoreNextHistoryState() {
    if (this.active_id == 0) return;
    this.active_id--;
    if (this.active_id == 0) this.redo_disabled = true;
    return this.timeline[this.active_id].draft;
  }
  /**
   * called on redo in mixer
   * @returns returns the ada file to reload
   */
  restoreNextMixerHistoryState() {
    if (this.active_id == 0) return;
    this.active_id--;
    if (this.active_id == 0) this.redo_disabled = true;
    return this.timeline[this.active_id].ada;
  }
  /**
   * called on undo in weaver
   * @returns returns the draft to load
   */
  restorePreviousHistoryState() {
    this.active_id++;
    //you've hit the end of available states to restore
    if (this.active_id >= this.timeline.length) {
      this.active_id--;
      this.undo_disabled = true;
      return null;
    }
    this.redo_disabled = false;
    return this.timeline[this.active_id].draft;
  }
  /**
  * called on undo in mixer
  * @returns returns the draft to load
  */
  restorePreviousMixerHistoryState() {
    this.active_id++;
    //you've hit the end of available states to restore
    if (this.active_id >= this.timeline.length) {
      this.active_id--;
      this.undo_disabled = true;
      return null;
    }
    this.redo_disabled = false;
    return this.timeline[this.active_id].ada;
  }
}
StateService.ɵfac = function StateService_Factory(t) {
  return new (t || StateService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_filesystem_service__WEBPACK_IMPORTED_MODULE_1__.FilesystemService));
};
StateService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: StateService,
  factory: StateService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 14711:
/*!**************************************************!*\
  !*** ./src/app/core/provider/systems.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SystemsService": () => (/* binding */ SystemsService)
/* harmony export */ });
/* harmony import */ var _model_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/system */ 36305);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


/**
 * stores global information about the number of warp systems in use.
 */
class SystemsService {
  constructor() {
    this.weft_systems = [];
    this.warp_systems = [];
    for (let i = 0; i < 26; i++) {
      const weft = (0,_model_system__WEBPACK_IMPORTED_MODULE_0__.createSystem)();
      weft.id = i;
      weft.name = String.fromCharCode(i + 97);
      this.weft_systems.push(weft);
      const warp = (0,_model_system__WEBPACK_IMPORTED_MODULE_0__.createSystem)();
      warp.id = i;
      warp.name = "" + (i + 1);
      this.warp_systems.push(warp);
    }
    this.weft_systems[0].in_use = true;
    this.warp_systems[0].in_use = true;
  }
  reset() {
    this.weft_systems.forEach(el => {
      el.in_use = false;
      el.visible = true;
    });
    this.warp_systems.forEach(el => {
      el.in_use = false;
      el.visible = true;
    });
    this.weft_systems[0].in_use = true;
    this.warp_systems[0].in_use = true;
  }
  getWeftSystem(id) {
    return this.weft_systems[id];
  }
  getWarpSystem(id) {
    return this.warp_systems[id];
  }
  getFirstWarpSystem() {
    return this.warp_systems[0];
  }
  getFirstWeftSystem() {
    return this.weft_systems[0];
  }
  addWeftSystemFromId(id) {
    this.weft_systems[id].in_use = true;
  }
  addWarpSystemFromId(id) {
    this.warp_systems[id].in_use = true;
  }
  weftSystemIsVisible(id) {
    return this.weft_systems[id].visible;
  }
  warpSystemIsVisible(id) {
    return this.warp_systems[id].visible;
  }
  /**
  * looks for the next in use system after the ndx submitted.
  * @param ndx
  */
  getNextWarpSystemFrom(ndx) {
    return ndx + 1;
    // const in_use = this.warp_systems.filter(el => el.in_use);
    // let use_ndx = in_use.findIndex(el => el.id === ndx);
    // use_ndx++;
    // if(use_ndx < in_use.length){
    //   return in_use[use_ndx].id;
    // }else{
    //   //get the last used number an dincrement one
    //   this.warp_systems[use_ndx].in_use = true;
    //   return use_ndx;
    // }
  }
  /**
   * looks for the next in use system after the ndx submitted.
   * @param ndx
   */
  getNextWeftSystemFrom(ndx) {
    return ndx + 1;
    // const in_use = this.weft_systems.filter(el => el.in_use);
    // let use_ndx = in_use.findIndex(el => el.id == ndx);
    // use_ndx++;
    // if(use_ndx < in_use.length){
    //   return in_use[use_ndx].id;
    // }else{
    //   //get the last used number an dincrement one
    //   this.weft_systems[use_ndx].in_use = true;
    //   return use_ndx;
    // }
  }
  /**
   * checks if we should move to the next system id or create a new empty system.
   * @returns the id of the created or empty system to add to
  */
  getNextWarpSystem(ndx, draft) {
    var system_id = draft.colSystemMapping[ndx];
    // //are any other rows assigned to this system or is this the first
    const count = draft.colSystemMapping.reduce((acc, val) => {
      if (val === system_id) {
        acc = acc + 1;
      }
      return acc;
    }, 0);
    //this is the only one assigned
    if (count === 1) {
      return 0; // return the starting index
    } else {
      return this.getNextWarpSystemFrom(system_id);
    }
  }
  /**
   * checks if we should move to the next system id or create a new empty system.
   * @returns the id of the created or empty system to add to
  */
  getNextWeftSystem(ndx, draft) {
    var system_id = draft.rowSystemMapping[ndx];
    //are any other rows assigned to this system or is this the first
    const count = draft.rowSystemMapping.reduce((acc, val) => {
      if (val === system_id) {
        acc = acc + 1;
      }
      return acc;
    }, 0);
    //this is the only one assigned
    if (count === 1) {
      return 0; // return the starting index
    } else {
      return this.getNextWeftSystemFrom(system_id);
    }
  }
  getWeftSystemCode(id) {
    var system = this.getWeftSystem(id);
    if (system === undefined) return "err";
    return system.name;
  }
  getWarpSystemCode(id) {
    var system = this.getWarpSystem(id);
    if (system === undefined) return "err";
    return system.name;
  }
}
SystemsService.ɵfac = function SystemsService_Factory(t) {
  return new (t || SystemsService)();
};
SystemsService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: SystemsService,
  factory: SystemsService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 6177:
/*!***********************************************!*\
  !*** ./src/app/core/provider/tree.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TreeService": () => (/* binding */ TreeService)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/model/drafts */ 1435);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/model/looms */ 58364);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/model/util */ 75973);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/provider/workspace.service */ 80828);
/* harmony import */ var _image_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./image.service */ 53398);
/* harmony import */ var _operation_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation.service */ 46524);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 22560);















/**
 * this class registers the relationships between subdrafts, operations, and connections
 */
class TreeService {
  constructor(ws, ops, imageservice, systemsservice) {
    this.ws = ws;
    this.ops = ops;
    this.imageservice = imageservice;
    this.systemsservice = systemsservice;
    this.nodes = []; //an unordered list of all the nodes
    this.tree = []; //a representation of the node relationships
    this.open_connection = -1; //represents a node that is currently seeking a conneciton, used for checking which nodes it is able to connect to
  }
  /**
   * generates an id from the timestamp and random number (to offset effects to two functions running in the same ms)
   */
  getUniqueId() {
    return _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].generateId(8);
  }
  /**
   * go through the list of nodes being loaded and replace any with names that have been outdated.
   * **/
  replaceOutdatedOps(nodes) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const correctedNodes = nodes.map(node => {
        if (_this.ops.getOp(node.name) === null) {
          const op = _this.ops.getOpByOldName(node.name);
          node.name = op.name;
          node.inlets = op.inlets;
        }
        return node;
      });
      return Promise.resolve(correctedNodes);
    })();
  }
  /** scan through nodes and return all that our valid */
  validateNodes() {
    var _this2 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const err_ops = _this2.nodes.filter(el => el.type === "op").filter(el => _this2.ops.getOp(el.name) === undefined);
      //console.error("found invalid op nodes", err_ops);
      err_ops.forEach(node => {
        _this2.removeOperationNode(node.id);
      });
      ///also check to see that all connections exist
      const cxns = _this2.getUnusuedConnections();
      // console.log("unusued connections found", cxns);
      cxns.forEach(el => _this2.removeNode(el));
      return err_ops.length === 0;
    })();
  }
  setOpParams(id, params, inlets) {
    this.getOpNode(id).params = params.slice();
    this.getOpNode(id).inlets = inlets.slice();
  }
  /**
   * this is called when a dynamic operation's parameter updates and therefore, must change inlet values
   * @param node_id an object containing the id of hte parameter that has changed
   * @param param_id the id of the parameter that changed
   * @param value the value at that parameter
   * @returns a list of inlet values to add.
   */
  onDynanmicOperationParamChange(opid, name, inlets, param_id, param_val) {
    console.log("ON DYNAMIC PARAM CHANGE ", opid, param_id, param_val);
    const op = this.ops.getOp(name);
    const param_type = op.params[param_id].type;
    const opnode = this.getOpNode(opid);
    if (!this.ops.isDynamic(name)) return;
    if (op.dynamic_param_id != param_id && param_type !== 'notation_toggle') return;
    let param_vals = opnode.params.map((el, ndx) => {
      return {
        op_name: name,
        param: op.params[ndx],
        val: el
      };
    });
    inlets = op.onParamChange(param_vals, op.inlets, inlets, param_id, param_val);
    return inlets;
  }
  //   onDynanmicOperationParamChange(opid: number, name: string, inlets: Array<any>, param_id: number, param_val: any) : Array<any>{
  //     const op = this.ops.getOp(name);
  //     const opnode = this.getOpNode(opid);
  //     let param_type = op.params[param_id].type;
  //     if(param_id === (<DynamicOperation>op).dynamic_param_id || param_type == 'notation_toggle'){
  //       const type = (<DynamicOperation>op).dynamic_param_type;
  //       let static_inputs = op.inlets.filter(el => el.type === 'static');
  //       let num_dynamic_inlets = inlets.length - static_inputs.length;
  //       let matches = [];
  //       switch(type){
  //         case 'notation':
  //           const system_parsing_regex = /.*?(.*?[a-xA-Z]+[\d]+).*?/i;
  //           if(param_id == 1 && param_val == 0){
  //             const string_to_parse = op.params[0].value;
  //             matches = utilInstance.parseRegex(opnode.params[0], (<StringParam> op.params[0]).regex);
  //             matches = matches.map(el => el.slice(1, -1))
  //             matches = matches.reduce((acc, val) => {
  //               const sub_match = utilInstance.parseRegex(val, system_parsing_regex);
  //               return acc.concat(sub_match);
  //             }, []);
  //             inlets = inlets.slice(0,static_inputs.length);
  //             matches.forEach(el => {
  //               inlets.push(el);
  //             })
  //           }else if(param_id == 1 && param_val == 1){
  //             matches = utilInstance.parseRegex(opnode.params[0],(<StringParam> op.params[0]).regex);
  //             matches = matches.map(el => el.slice(1, -1))
  //             inlets = inlets.slice(0,static_inputs.length);
  //             matches.forEach(el => {
  //               inlets.push(el);
  //             })
  //           }else{
  //             matches = utilInstance.parseRegex(param_val, (<StringParam> op.params[0]).regex);
  //             matches = matches.map(el => el.slice(1, -1))
  //             if(opnode.params[1] == 0){
  //               matches = matches.reduce((acc, val) => {
  //                 const sub_match = utilInstance.parseRegex(val, system_parsing_regex);
  //                 return acc.concat(sub_match);
  //               }, []);
  //             }  
  //             inlets = inlets.slice(0,static_inputs.length);
  //             matches.forEach(el => {
  //               inlets.push(el);
  //             })
  //           }
  //         break;
  //         case 'profile':
  //           matches = utilInstance.parseRegex(param_val, (<StringParam>op.params[0]).regex);
  //           inlets = inlets.slice(0,static_inputs.length);
  //           matches.forEach(el => {
  //             if(inlets.find(inletval => inletval == el.charAt(0)) === undefined) inlets.push(el.charAt(0));
  //           })
  //         break;
  //         case 'draft':
  //           if(param_val !== -1){
  //             const draftNode = <DraftNode> this.getNode(param_val);
  //             const uniqueVals = utilInstance.filterToUniqueValues(draftNode.loom.threading);
  //             const inlet_nums = uniqueVals.length;
  //             inlets = inlets.slice(0,static_inputs.length);
  //             for(let i = 0; i < inlet_nums; i++){
  //               inlets.push(i+1);
  //             }
  //           }
  //         break;
  //         case 'number':
  //         if(param_type === 'number'){
  //           if(param_val > num_dynamic_inlets){
  //             for(let i = num_dynamic_inlets; i < param_val; i++){
  //                 inlets.push(i+1);
  //             }
  //           }else if(param_val < num_dynamic_inlets){
  //             const delete_num = num_dynamic_inlets - param_val;
  //             inlets = inlets.slice(0, -delete_num);
  //           }
  //         }else if(param_type == 'string'){
  //           const all_inputs = param_val.split(' ');
  //           const unique_values = utilInstance.filterToUniqueValues(all_inputs);
  //           inlets = inlets.slice(0,static_inputs.length);
  //           unique_values.forEach(el => {
  //             inlets.push(el);
  //           })
  //         }
  //         break;
  //         case 'system':
  //            static_inputs = op.inlets.filter(el => el.type === 'static');
  //            num_dynamic_inlets = inlets.length - static_inputs.length;
  //           if(param_val > num_dynamic_inlets){
  //             for(let i = num_dynamic_inlets; i < param_val; i++){
  //                 this.systemsservice.weft_systems[i].in_use = true;
  //                 inlets.push(i);  
  //             }
  //           }else if(param_val < num_dynamic_inlets){
  //             inlets = inlets.slice(0, param_val+static_inputs);
  //           }
  //         break;
  //       }
  //     }
  //   return inlets;
  // }
  /**
   * loads data into an operation node from a file load, or when an operation is first instantiated,  or undo/redo event
   * @param entry the upload entry associated with this node or null if there was no upload associated
   * @param name the name of the operation
   * @param params the parameters to input
   * @param inlets an array containing the paramteres that get mapped to inputs at each inlets
   * @returns the node and the entry
   */
  loadOpData(entry, name, params, inlets) {
    const nodes = this.nodes.filter(el => el.id === entry.cur_id);
    let op = this.ops.getOp(name);
    if (nodes.length !== 1) {
      return Promise.reject("found 0 or more than 1 nodes at id " + entry.cur_id);
    }
    const node = nodes[0];
    if (op === undefined || op === null) {
      return Promise.reject("no op of name:" + name + " exists");
    }
    if (params === undefined) {
      params = [];
    }
    if (params === undefined) {
      inlets = [];
    }
    const param_types = op.params.map(el => el.type);
    const formatted_params = param_types.map((type, ndx) => {
      switch (type) {
        case "boolean":
          return params[ndx] ? 1 : 0;
        case "file":
          const id_and_data = this.imageservice.getImageData(params[ndx]);
          if (id_and_data === undefined || id_and_data.data === undefined) return {
            id: params[ndx],
            data: null
          };else return {
            id: params[ndx],
            data: id_and_data.data
          };
        default:
          return params[ndx];
      }
    });
    const default_param_values = this.ops.getOp(name).params.map(el => el.value);
    //this gets teh default values for the opration
    //this overwrites some of those with any value that has been previous added
    const params_out = default_param_values.map((p, ndx) => {
      if (ndx < params.length) return formatted_params[ndx];else return p;
    });
    const default_inlet_values = this.ops.getOp(name).inlets.map(el => el.value);
    if (inlets === undefined || inlets.length == 0) {
      inlets = default_inlet_values.slice();
      if (this.ops.isDynamic(name)) {
        const op = this.ops.getOp(name);
        node.params = params_out.slice();
        let dynamic_inlets = this.onDynanmicOperationParamChange(node.id, name, inlets, op.dynamic_param_id, op.params[op.dynamic_param_id].value);
        inlets = dynamic_inlets.slice();
      }
    }
    inlets = inlets.map(el => el === null ? 0 : el);
    node.dirty = false;
    node.name = name;
    node.params = params_out.slice();
    node.inlets = inlets.slice();
    return Promise.resolve({
      on: nodes[0],
      entry
    });
  }
  /**
   * recomputes the value of every loom.
   */
  updateLooms() {
    this.getDraftNodes().forEach(dn => {
      const loom_utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(dn.loom_settings.type);
      loom_utils.computeLoomFromDrawdown(dn.draft.drawdown, dn.loom_settings, this.ws.selected_origin_option).then(loom => {
        dn.loom = loom;
      });
    });
  }
  /**
   * a preview is a temporary object that is created when two drafts overlap in drawing mode
   * it just needs to contain a draft (and no loom as it will be deleted when the active operation ends)
   * @param sd
   * @param draft
   * @returns
   */
  setPreview(sd, draft) {
    this.preview = {
      id: -1,
      type: "draft",
      ref: sd.hostView,
      component: sd.instance,
      dirty: true,
      draft: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.copyDraft)(draft),
      loom: null,
      loom_settings: null,
      render_colors: false
    };
    sd.dirty = true;
    return Promise.resolve(this.preview);
  }
  setPreviewDraft(draft) {
    if (this.preview === undefined) return Promise.reject("preview undefined");
    this.preview.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.copyDraft)(draft);
    this.preview.dirty = true;
    this.preview.component.draft = draft;
    return Promise.resolve(this.preview);
  }
  unsetPreview() {
    this.preview = undefined;
  }
  hasPreview() {
    if (this.preview === undefined) return false;
    return true;
  }
  getPreview() {
    return this.preview;
  }
  getPreviewComponent() {
    return this.preview.component;
  }
  /**
   * returns a list of all the node ids of drafts that are dirty (including preview)
   */
  getDirtyDrafts() {
    return this.nodes.filter(el => el.type === "draft").concat(this.preview).filter(el => el.dirty).map(el => el.id);
  }
  /**
   * load the data into the draft node
   * @param entry the map entry associated with this node, null if not supplied
   * @param id the id of this node, which should match the component
   * @param draft the draft to associate with this node
   * @param loom the loom to associate with this node
   * @returns the created draft node and the entry associated with this
   */
  loadDraftData(entry, draft, loom, loom_settings, render_colors) {
    const nodes = this.nodes.filter(el => el.id === entry.cur_id);
    if (nodes.length !== 1) return Promise.reject("found 0 or more than 1 nodes at id " + entry.cur_id);
    nodes[0].dirty = true;
    draft.id = entry.cur_id;
    nodes[0].draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.copyDraft)(draft);
    if (loom_settings === null || loom_settings == undefined) {
      nodes[0].loom_settings = {
        type: this.ws.type,
        epi: this.ws.epi,
        units: this.ws.units,
        frames: this.ws.min_frames,
        treadles: this.ws.min_treadles
      };
    } else {
      nodes[0].loom_settings = loom_settings;
    }
    if (loom === null) {
      const loom_utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(nodes[0].loom_settings.type);
      loom_utils.computeLoomFromDrawdown(draft.drawdown, nodes[0].loom_settings, this.ws.selected_origin_option).then(loom => {
        nodes[0].loom = loom;
      });
    } else {
      nodes[0].loom = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.copyLoom)(loom);
    }
    if (render_colors === undefined || render_colors === null) nodes[0].render_colors = false;else nodes[0].render_colors = render_colors;
    //console.log("DRAFT NODE LOADED:",_.cloneDeep(<DraftNode> nodes[0]))
    return Promise.resolve({
      dn: nodes[0],
      entry
    });
  }
  /**
   * loads in data to the nodes, from undo/redo or new file additions.
   * when loading new files or states, the tree will have been previously cleared. \
   * when loading new nodes from a file into an existing workspace,new ids must be assigned to ensure they are unique
   * nodes are loaded before the view has been inititialized
   * when new data is loaded, it makes sure each of the ids generated is unique
   * @param type the type of node to create
   * @param id the current id of the
   * @returns a map representating any id changes
   */
  loadNode(type, id) {
    let node;
    switch (type) {
      case 'draft':
        node = {
          type: type,
          ref: null,
          id: this.getUniqueId(),
          component: null,
          dirty: false,
          draft: null,
          loom: null,
          loom_settings: null
        };
        break;
      case 'op':
        node = {
          type: type,
          ref: null,
          id: this.getUniqueId(),
          component: null,
          dirty: false,
          params: [],
          inlets: [],
          name: ''
        };
        break;
      default:
        node = {
          type: type,
          ref: null,
          id: this.getUniqueId(),
          component: null,
          dirty: false
        };
        break;
    }
    this.nodes.push(node);
    this.tree.push({
      node: node,
      parent: null,
      outputs: [],
      inputs: []
    });
    return {
      prev_id: id,
      cur_id: node.id
    };
  }
  getConnectionsInvolving(node_id) {
    const tn = this.getTreeNode(node_id);
    if (tn.outputs.length !== 1) console.error("connection node has more than one to");
    if (tn.inputs.length !== 1) console.error("connection node has more than one from");
    return {
      from: tn.inputs[0].tn.node.id,
      to: tn.outputs[0].tn.node.id
    };
  }
  /**
   * given an operation and a connection, return the inlet to which this connection inserts
   * @param op_id
   * @param cxn_id
   * @param returns the position index of the cxn or -1 if not found
   */
  getInletOfCxn(op_id, cxn_id) {
    const inputs = this.getInputsWithNdx(op_id);
    const ndx = inputs.filter(el => el.tn.node.id === cxn_id).map(el => el.ndx);
    if (ndx.length === 0) return -1;
    if (ndx.length === 1) return ndx[0];
    console.error("connection found at more than one inlet");
    return -1;
  }
  /**
   * before performing a dynamic op, make sure that their are no connections that are pointing to an inlet that nolonger exists
   * @param id - the object id we are checking
   * @returns an array of viewRefs for Connections to remove.
   */
  sweepInlets(id) {
    const opnode = this.getOpNode(id);
    const op = this.ops.getOp(opnode.name);
    const inputs_to_op = this.getInputsWithNdx(id);
    const num_constant_inlets = op.inlets.length;
    //filter out inputs that are matched to an index highter than what we offer
    const missing_inlets = inputs_to_op.filter(el => el.ndx >= opnode.inlets.length);
    const viewRefs = missing_inlets.map(el => el.tn.node.ref);
    missing_inlets.forEach(el => {
      this.removeConnectionNode(el.tn.inputs[0].tn.node.id, el.tn.outputs[0].tn.node.id, el.ndx);
    });
    return Promise.resolve(viewRefs);
  }
  /**
   * sets the open connection
   * @param id the value to set the open connection to
   * @returns  true if the id maps to a subdraft
   */
  setOpenConnection(id) {
    if (this.getType(id) !== 'draft') return false;
    this.open_connection = id;
    console.log("set open connection", id);
    return true;
  }
  hasOpenConnection() {
    return this.open_connection !== -1;
  }
  getOpenConnection() {
    return this.getComponent(this.open_connection);
  }
  /**
   * TEMP DISABLE DUE TO CAUSING PROBLEMS
   * unsets the open connection
   * @returns  true if it indeed changed the value
   */
  unsetOpenConnection() {
    this.open_connection = -1;
    return true;
  }
  setNodeComponent(id, c) {
    const node = this.getNode(id);
    node.component = c;
  }
  setNodeViewRef(id, v) {
    const node = this.getNode(id);
    node.ref = v;
  }
  /** clears all the data associated with this tree */
  clear() {
    this.tree = [];
    this.nodes = [];
  }
  /** depends on having nodes created first so that all tree nodes are present */
  /**
   * this function is called from the mixer when processing file data. It depends on having all nodes created first.
   * @param id_map this is a map created on upload that maps uploaded ids to the current ids.
   * @param node_id the current node_id
   * @param parent_id the current treenode id of the parent node
   * @param inputs the current treenode ids for all inputs
   * @param outputs the current treenode ids for all outputs
   * @returns an object that holds the tree node as well as its associated map entry
   */
  loadTreeNodeData(id_map, node_id, parent_id, inputs, outputs) {
    var _this3 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const entry = id_map.find(el => el.cur_id === node_id);
      const tn = _this3.getTreeNode(node_id);
      tn.parent = parent_id === -1 ? null : _this3.getTreeNode(parent_id);
      tn.inputs = inputs.filter(input => input !== undefined).map(input => {
        return {
          tn: _this3.getTreeNode(input.tn),
          ndx: input.ndx
        };
      });
      tn.outputs = outputs.filter(output => output !== undefined).map(output => {
        return {
          tn: _this3.getTreeNode(output.tn),
          ndx: output.ndx
        };
      });
      return Promise.resolve({
        tn,
        entry
      });
    })();
  }
  /**
   * create an node and add it to the tree (without relationships)
   * @param id a unique id for this component, ideally created by the viewCompomentRef
   * @param type the type of component
   * @param component the compoenent instance
   * @returns the id assigned
   */
  createNode(type, component, ref) {
    let node;
    switch (type) {
      case 'draft':
        node = {
          type: type,
          ref: ref,
          id: this.getUniqueId(),
          component: component,
          dirty: false,
          draft: null
        };
        break;
      case 'op':
        node = {
          type: type,
          ref: ref,
          id: this.getUniqueId(),
          component: component,
          inlets: [],
          dirty: false,
          params: [],
          name: ''
        };
        break;
      default:
        node = {
          type: type,
          ref: ref,
          id: this.getUniqueId(),
          component: component,
          dirty: false
        };
        break;
    }
    this.nodes.push(node);
    this.tree.push({
      node: node,
      parent: null,
      outputs: [],
      inputs: []
    });
    return node.id;
  }
  getComponent(id) {
    const node = this.getNode(id);
    return node.component;
  }
  getComponents() {
    return this.nodes.map(node => node.component);
  }
  getNode(id) {
    const ndx = this.getNodeIndex(id);
    if (ndx === -1) return null;
    return this.nodes[ndx];
  }
  getNodeIdList() {
    return this.nodes.map(node => node.id);
  }
  getNodeIndex(id) {
    return this.nodes.findIndex(el => el.id == id);
  }
  getType(id) {
    const node = this.getNode(id);
    return node.type;
  }
  getViewRef(id) {
    const node = this.getNode(id);
    return node.ref;
  }
  /**
   * get's this subdraft's parent
   * @param sd_id
   * @returns the parent's id, or -1 if it has no parent
   */
  getSubdraftParent(sd_id) {
    const tn = this.getTreeNode(sd_id);
    if (tn.parent === null || tn.parent === undefined) return -1;else return tn.parent.node.id;
  }
  hasParent(sd_id) {
    return this.getSubdraftParent(sd_id) === -1 ? false : true;
  }
  /**
   * return the connection objects that are immediately attached to this object
   * @param id - the node id
   * @returns an array of id's for the immediatly connected connections
   */
  getNodeConnections(id) {
    const tn = this.getTreeNode(id);
    const out_node = tn.outputs.map(el => el.tn.node);
    const out_cxn = out_node.filter(el => el.type === 'cxn');
    const in_node = tn.inputs.map(el => el.tn.node);
    const in_cxn = in_node.filter(el => el.type === 'cxn');
    const join = out_cxn.concat(in_cxn);
    return join.map(el => el.id);
  }
  /**
   * gets a list of non-connection nodes that need to be updated if this node moves.
   * this takes into acccount that some nodes have a parent that will move with them.
   * @param id
   * @returns
   */
  getNodesToUpdateOnMove(id) {
    const tn = this.getTreeNode(id);
    let to_check = [id];
    if (this.isMultipleParent(id) || this.isSibling(id)) return to_check;
    //the parent if there is one
    if (tn.parent !== null) to_check.push(tn.parent.node.id);
    //add the child this node generated if there is one. 
    const outputs = this.getNonCxnOutputs(id).map(el => this.getTreeNode(el));
    const has_parents = outputs.filter(el => el.parent !== null);
    const is_child = has_parents.filter(el => el.parent.node.id === id).map(el => el.node.id);
    if (is_child.length > 0) to_check = to_check.concat(is_child);
    return to_check;
  }
  /**
   * called on an operation to check if it can accept connections from a given subdraft
   * @param id - the id of the operation in question
   * @param inlet - the inlet id we are looking at
   */
  canAcceptConnections(id, inlet) {
    if (this.open_connection === -1) {
      console.error("no open connection");
      return false; //there is no open connection
    }

    const parent_op = this.getSubdraftParent(this.open_connection);
    if (parent_op === id) {
      return false; //can't be an input to your parent
    }

    const is_already_connected = this.getInputsAtNdx(id, inlet).length > 0 && this.getInputs(id).find(el => el === this.open_connection) !== undefined;
    if (is_already_connected) {
      // console.error("already connected, draft=", this.open_connection, " opid=", id);
      return false; //these two things are already directly connected
    }

    const has_room = this.getInputs(id).length < this.getComponent(id).op.inlets[inlet].num_drafts || this.getComponent(id).op.inlets[inlet].num_drafts == -1;
    if (!has_room) return false;
    if (parent_op === -1 && has_room) return true; //if you don't have a parent and there is room, go for it
    const upstream = this.getUpstreamOperations(parent_op);
    const no_circles = upstream.length == 0 || upstream.find(el => el === parent_op) == -1;
    return has_room && no_circles;
  }
  /**
   * test if this node has children, as opposed to just zero
   * @param id
   * @returns a boolean
   */
  isParent(id) {
    const tn = this.getTreeNode(id);
    return tn.outputs.length > 0;
  }
  /**
   * test if this node is a seed (e.g. has no inputs)
   * @param id
   * @returns a boolean
   */
  isSeedDraft(id) {
    const tn = this.getTreeNode(id);
    return this.getType(id) === "draft" && tn.inputs.length === 0;
  }
  /**
  * test if this node has just one child.
  * @param id
  * @returns a boolean
  */
  hasSingleChild(id) {
    const tn = this.getTreeNode(id);
    return tn.outputs.length === 1;
  }
  /**
   * test if this node has just one child and that child subdraft is currently hidden
   * @param id
   * @returns a boolean
   */
  opHasHiddenChild(id) {
    const tn = this.getTreeNode(id);
    const outs = this.getNonCxnOutputs(id);
    if (outs.length === 0) return false;
    const child_id = outs.shift();
    const sd = this.getComponent(child_id);
    return !sd.draft_visible;
  }
  /**
   * test if this node has many children, as opposed to just one
   * @param id
   * @returns a boolean
   */
  isMultipleParent(id) {
    const tn = this.getTreeNode(id);
    return tn.outputs.length > 1;
  }
  /**
   * test if two components are siblings (e.g. they have the same parent).
   * if we pass the same id in for both, it will return false
   * @param id
   * @returns a boolean
   */
  areSiblings(a_id, b_id) {
    if (a_id === b_id) return false;
    const atn = this.getTreeNode(a_id);
    const btn = this.getTreeNode(b_id);
    if (atn.parent == null || btn.parent == null) return false;
    return atn.parent.node.id === btn.parent.node.id;
  }
  /**
  * test if this node is a sibling of the one provided
  * @param id
  * @returns a boolean
  */
  isSibling(id) {
    const tn = this.getTreeNode(id);
    if (tn.parent == null) return false;
    return this.getTreeNode(tn.parent.node.id).outputs.length > 1;
  }
  /**
   * given a node, recusively walks the tree and returns a list of all the operations that are affected
   * @param id
   * @returns an array of operation ids for nodes that need recalculating
   */
  getDownstreamOperations(id) {
    let ops = [];
    const tn = this.getTreeNode(id);
    if (tn.outputs.length > 0) {
      tn.outputs.forEach(el => {
        if (el.tn.node.type == 'op') {
          ops.push(el.tn.node.id);
        }
        ops = ops.concat(this.getDownstreamOperations(el.tn.node.id));
      });
    }
    return ops;
  }
  /**
  * given a node, recusively walks the tree and returns a list of all the operations that are linked up the chain to this component
  * @param id
  * @returns an array of operation ids that influence this draft
  */
  getUpstreamOperations(id) {
    let ops = [];
    const tn = this.getTreeNode(id);
    if (tn.inputs.length > 0) {
      tn.inputs.forEach(el => {
        if (el.tn.node.type === 'op') {
          ops.push(el.tn.node.id);
        }
        ops = ops.concat(this.getUpstreamOperations(el.tn.node.id));
      });
    }
    return ops;
  }
  /**
  * given a node, recusively walks the tree and returns a list of all the drafts that are linked up the chain to this component
  * @param id
  * @returns an array of draft ids that influence this draft
  */
  getUpstreamDrafts(id) {
    let ops = [];
    const tn = this.getTreeNode(id);
    if (tn.inputs.length > 0) {
      tn.inputs.forEach(el => {
        if (el.tn.node.type == 'draft') {
          ops.push(el.tn.node.id);
        }
        ops = ops.concat(this.getUpstreamDrafts(el.tn.node.id));
      });
    }
    return ops;
  }
  /**
     * removes a subdraft and all associated connections from the tree, returns the nodes
     * @param id {number}
  
     */
  removeSubdraftNode(id) {
    const deleted = [];
    if (id === undefined) return;
    //get any input ops and connections
    const ops_in = this.getNonCxnInputs(id);
    const cxns_in = this.getInputs(id);
    //get output connections and subdrafts
    const cxns_out = this.getOutputs(id); //the connection between the op and child subdrafts
    const ops_out = this.getNonCxnOutputs(id); //get all 
    //get all the output connections of those subdrafts
    const op_in_cxns = ops_in.reduce((acc, el) => {
      return acc.concat(this.getInputs(el));
    }, []);
    // console.log("Ops in", ops_in);
    // console.log("CXNs in", cxns_in);
    // console.log("CXNs out", cxns_out);
    // console.log("OPSs out", ops_out);
    // console.log("op connections in", op_in_cxns);
    deleted.push(this.removeNode(id));
    cxns_in.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    cxns_out.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    ops_in.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    op_in_cxns.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    // deleted.concat(sds_in.map(el => this.removeNode(el)));
    // deleted.concat(cxns_in.map(el => {return this.removeNode(el)}));
    // deleted.concat(cxns_out.map(el => {return this.removeNode(el)}));
    //deleted.concat(sds_out.map(el => {return this.removeNode(el)}));
    //deleted.concat(sds_out_cxns.map(el => {return this.removeNode(el)}));
    return deleted;
  }
  /**
   * deletes an operation node and any associated subdrafts and connections
   * @param id - the operation to remove
   * @returns a list of all nodes removed as a result of this action
   */
  removeOperationNode(id) {
    const deleted = [];
    if (id === undefined) return;
    //get any input subdrafts and connections
    const sds_in = this.getNonCxnInputs(id);
    const cxns_in = this.getInputs(id);
    //get output connections and subdrafts
    const cxns_out = this.getOutputs(id); //the connection between the op and child subdrafts
    const sds_out = this.getNonCxnOutputs(id); //get all 
    //get all the output connections of those subdrafts
    const sds_out_cxns = sds_out.reduce((acc, el) => {
      return acc.concat(this.getOutputs(el));
    }, []);
    // console.log("SDs in", sds_in);
    // console.log("CXNs in", cxns_in);
    // console.log("CXNs out", cxns_out);
    // console.log("SDs out", sds_out);
    // console.log("sd connections out", sds_out_cxns);
    deleted.push(this.removeNode(id));
    cxns_in.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    cxns_out.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    sds_out.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    sds_out_cxns.forEach(el => {
      deleted.push(this.removeNode(el));
    });
    return deleted;
  }
  /**
   * deletes a connection
   * @param id - the connection to remove
   * @returns a list of all nodes removed as a result of this action
   */
  //removeConnectionNode(from:number, to:number, inletid: number) : Array<Node>{
  removeConnectionNode(from, to, inletid) {
    const cxn_id = this.getConnectionAtInlet(from, to, inletid);
    const deleted = [];
    if (cxn_id === undefined) return;
    deleted.push(this.removeNode(cxn_id));
    return deleted;
  }
  removeConnectionNodeById(cxn_id) {
    const deleted = [];
    if (cxn_id === undefined) return;
    deleted.push(this.removeNode(cxn_id));
    return deleted;
  }
  /**
   * this removes a node from the list and tree
   * @param id the id of the node to be removed
   * @returns the node it removed
   */
  removeNode(id) {
    const deleted = [];
    const node = this.getNode(id);
    deleted.push(node);
    if (node === undefined) return;
    this.removeNodeTreeAssociations(node.id);
    //remove all connections connecting to and from this node
    const ndx = this.getNodeIndex(id);
    const i = this.tree.findIndex(el => el.node.id == id);
    this.tree.splice(i, 1);
    this.nodes.splice(ndx, 1);
    return node;
  }
  /**
   * searches within the downstream ops for all opnodes and when a "dirty" node has all possible inputs fulfilled
   * @returns return a list of those nodes
   */
  getNodesWithDependenciesSatisfied() {
    const dependency_nodes = this.nodes.filter(el => el.dirty && el.type === "op").map(el => el);
    // const dependency_nodes: Array<OpNode> = ds
    // .map(el => <OpNode> this.getNode(el))
    // .filter(el => el.dirty);
    const ready = dependency_nodes.filter((el, ndx) => {
      const depends_on = this.getUpstreamOperations(el.id);
      const needs = depends_on.map(id => this.getNode(id).dirty);
      const find_true = needs.findIndex(el => el === true);
      if (find_true === -1) return el;
    });
    return ready;
  }
  /**
     * given the results of an operation, updates any associated drafts, creating or adding null drafts to no longer needed drafts
     * since this function cannot delete nodes, it makes nodes that no longer need to exist as null for later collection
     * @param res the list of results from perform op
     * @returns a list of the draft nodes touched.
     */
  updateDraftsFromResults(parent, res, inputs) {
    var _this4 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const out = _this4.getNonCxnOutputs(parent);
      const touched = [];
      const opnode = _this4.getOpNode(parent);
      const op = _this4.ops.getOp(opnode.name);
      //console.log("updating drafts, there are currently: ", out.length, "existing ouputs and ", res.length, "new outputs");
      if (out.length === res.length) {
        out.forEach((output, ndx) => {
          _this4.setDraftOnly(output, res[ndx]);
          touched.push(output);
        });
        return Promise.resolve(touched);
      } else if (out.length > res.length) {
        //create a new draft node for each outcome;
        for (let i = res.length; i < out.length; i++) {
          const dn = _this4.getNode(out[i]);
          if (dn.render_colors === undefined) dn.render_colors = false;
          dn.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.initDraftWithParams)({
            wefts: 1,
            warps: 1
          });
          dn.loom_settings = {
            type: _this4.ws.type,
            units: _this4.ws.units,
            epi: _this4.ws.epi,
            frames: _this4.ws.min_frames,
            treadles: _this4.ws.min_treadles
          };
          const loom_utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(dn.loom_settings.type);
          loom_utils.computeLoomFromDrawdown(dn.draft.drawdown, dn.loom_settings, _this4.ws.selected_origin_option).then(loom => {
            dn.loom = loom;
            dn.dirty = true;
            touched.push(out[i]);
            return Promise.resolve(touched);
          });
        }
      } else {
        const fns = [];
        for (let i = out.length; i < res.length; i++) {
          const id = _this4.createNode('draft', null, null);
          const cxn = _this4.createNode('cxn', null, null);
          _this4.addConnection(parent, 0, id, 0, cxn);
          fns.push(_this4.loadDraftData({
            prev_id: -1,
            cur_id: id
          }, res[i], null, null, true)); //add loom as null for now as it assumes that downstream drafts do not have custom loom settings (e.g. they can be generated from drawdown)
        }

        return Promise.all(fns).then(drafts_loaded => {
          const param_vals = op.params.map((param, ndx) => {
            return {
              param: param,
              val: opnode.params[ndx]
            };
          });
          const ids = drafts_loaded.map(el => el.entry.cur_id);
          ids.forEach((id, ndx) => {
            let d = _this4.getDraft(id);
            d.gen_name = op.generateName(param_vals, inputs, ndx);
          });
          return Promise.resolve(ids);
        });
      }
    })();
  }
  /**
   * deteremines which ops are "top level" meaning there is no op above them
   * @returns
   */
  performTopLevelOps() {
    var _this5 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      //mark all ops as dirty to start
      _this5.nodes.forEach(el => {
        if (el.type === "op") el.dirty = true;
      });
      const top_level_nodes = _this5.nodes.filter(el => el.type === 'op').filter(el => _this5.getUpstreamOperations(el.id).length === 0).map(el => el.id);
      return _this5.performGenerationOps(top_level_nodes);
    })();
  }
  /**
   * given a list of operations to perform, recursively performs all on nodes that have dependencies satisified
   * only after entire generation has been calculated
   * @param op_fn_list
   * @returns //need a way to get this to return any drafts that it touched along the way
   */
  performGenerationOps(op_node_list) {
    const needs_computing = op_node_list.filter(el => this.getOpNode(el).dirty);
    if (needs_computing.length == 0) return Promise.resolve([]);
    const op_fn_list = needs_computing.map(el => this.performOp(el));
    return Promise.all(op_fn_list).then(out => {
      const flat = out.reduce((acc, el, ndx) => {
        return acc.concat(el);
      }, []);
      return this.getNodesWithDependenciesSatisfied();
    }).then(needs_performing => {
      const fns = needs_performing.filter(el => el.dirty).map(el => el.id);
      if (needs_performing.length === 0) return [];
      return this.performGenerationOps(fns);
    });
  }
  isValidIOTuple(io) {
    if (io === null || io === undefined) return false;
    const draft_tn = io.tn.inputs[0].tn;
    const cxn_tn = io.tn;
    const type = draft_tn.node.type;
    const draft = draft_tn.node.draft;
    if (draft === null || draft === undefined) return false;
    if ((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.wefts)(draft.drawdown) == 0 || (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.warps)(draft.drawdown) == 0) return false;
    return true;
  }
  /**
   * performs the given operation
   * returns the list of draft ids affected by this calculation
   * @param op_id the operation triggering this series of update
   */
  performOp(id) {
    var _this6 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const opnode = _this6.getNode(id);
      const op = _this6.ops.getOp(opnode.name);
      const all_inputs = _this6.getInputsWithNdx(id);
      if (op === null || op === undefined) return Promise.reject("Operation is null");
      let inputs = [];
      //if(this.ops.isDynamic(opnode.name)){
      const param_vals = op.params.map((param, ndx) => {
        return {
          param: param,
          val: opnode.params[ndx]
        };
      });
      const flip_fns = [];
      const draft_id_to_ndx = [];
      const flips = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getFlips(_this6.ws.selected_origin_option, 3);
      all_inputs.filter(el => _this6.isValidIOTuple(el)).forEach(el => {
        const draft_tn = el.tn.inputs[0].tn;
        const cxn_tn = el.tn;
        const type = draft_tn.node.type;
        if (type === 'draft') {
          draft_id_to_ndx.push({
            ndx: el.ndx,
            node_id: draft_tn.node.id,
            cxn: cxn_tn.node.id
          });
          flip_fns.push((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.flipDraft)(draft_tn.node.draft, flips.horiz, flips.vert));
        }
      });
      return Promise.all(flip_fns).then(flipped_drafts => {
        const paraminputs = draft_id_to_ndx.map(el => {
          const draft = flipped_drafts.find(draft => draft.id === el.node_id);
          if (draft === undefined) {
            console.error("Draft not found in flipped", flipped_drafts, draft_id_to_ndx, el);
            return undefined;
          } else return {
            drafts: [draft],
            inlet_id: el.ndx,
            params: [opnode.inlets[el.ndx]]
          };
        });
        const cleaned_inputs = paraminputs.filter(el => el != undefined);
        inputs = inputs.concat(cleaned_inputs);
        return op.perform(param_vals, inputs);
      }).then(res => {
        const flips = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getFlips(_this6.ws.selected_origin_option, 3);
        return Promise.all(res.map(el => (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.flipDraft)(el, flips.horiz, flips.vert)));
      }).then(flipped => {
        opnode.dirty = false;
        return _this6.updateDraftsFromResults(id, flipped, inputs);
      });
    })();
  }
  getDraftNodes() {
    return this.nodes.filter(el => el.type === 'draft').map(el => el);
  }
  getDrafts() {
    const draft_nodes = this.nodes.filter(el => el.type == 'draft');
    const draft_comps = draft_nodes.map(el => el.component);
    return draft_comps;
  }
  getLoom(id) {
    if (id === -1) return null;
    const dn = this.getNode(id);
    if (dn === null || dn === undefined) return null;
    return dn.loom;
  }
  setLoom(id, loom) {
    const dn = this.getNode(id);
    if (dn !== null && dn !== undefined) dn.loom = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.copyLoom)(loom);
  }
  setLoomAndRecomputeDrawdown(id, loom, loom_settings) {
    const dn = this.getNode(id);
    if (dn !== null && dn !== undefined) dn.loom = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.copyLoom)(loom);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(loom_settings.type);
    return utils.computeDrawdownFromLoom(loom, this.ws.selected_origin_option).then(drawdown => {
      dn.draft.drawdown = drawdown;
      return Promise.resolve(dn.draft);
    });
  }
  getLoomSettings(id) {
    if (id === -1) return null;
    const dn = this.getNode(id);
    if (dn === null || dn === undefined) return null;
    return dn.loom_settings;
  }
  setLoomSettings(id, loom_settings) {
    const dn = this.getNode(id);
    if (dn !== null && dn !== undefined) dn.loom_settings = loom_settings;
  }
  getLooms() {
    const dns = this.getDraftNodes();
    return dns.map(el => el.loom);
  }
  getDraft(id) {
    if (id === -1) return this.preview.draft;
    const dn = this.getNode(id);
    if (dn === null || dn === undefined) return null;
    return dn.draft;
  }
  getDraftName(id) {
    if (id === -1) return this.preview.draft.ud_name;
    const dn = this.getNode(id);
    if (dn === null || dn === undefined || dn.draft === null) return "null draft";
    return dn.draft.ud_name === "" ? dn.draft.gen_name : dn.draft.ud_name;
  }
  getConnections() {
    const draft_nodes = this.nodes.filter(el => el.type === 'cxn');
    const draft_comps = draft_nodes.map(el => el.component);
    return draft_comps;
  }
  getOperations() {
    const draft_nodes = this.nodes.filter(el => el.type === 'op');
    const draft_comps = draft_nodes.map(el => el.component);
    return draft_comps;
  }
  getOpNodes() {
    return this.nodes.filter(el => el.type === 'op').map(el => el);
  }
  /**
   * @todo update this to handle clear nodes whole input indexes no longer exist
   * scans the connections and checks that the to and from nodes AND INDEXES still exist
   * @returns an array of connections to delete
   */
  getUnusuedConnections() {
    const comps = this.nodes.filter(el => el.type === 'cxn');
    const nodes = comps.map(el => this.getTreeNode(el.id));
    const to_delete = [];
    nodes.forEach(el => {
      if (el.inputs.length === 0 || el.outputs.length === 0) {
        to_delete.push(el);
        return;
      }
      const null_inputs = el.inputs.filter(el => el.tn.node === null || el.tn.node === undefined);
      null_inputs.forEach(el => {
        to_delete.push(el.tn);
      });
      const null_outputs = el.outputs.filter(el => el.tn.node === null || el.tn.node === undefined);
      null_outputs.forEach(el => {
        to_delete.push(el.tn);
      });
    });
    return to_delete.map(el => el.node.id);
  }
  /**
   * gets the tree node associated with a given Node
   * @param id the idea of the node (not the tree node id)
   * @returns
   */
  getTreeNode(id) {
    const found = this.tree.find(el => el.node.id === id);
    if (found === undefined) {
      console.error("Tree node for ", id, "not found");
      return undefined;
    }
    return found;
  }
  /**
   * adds a connection from subddraft to operation. connections can be of the type
   * subdraft -> op (input to op)
   * op -> subdraft (output generatedd by op)
   * @returns an array of the ids of the elements connected to this op
      */
  addConnection(from, from_ndx, to, to_ndx, cxn) {
    let from_tn = this.getTreeNode(from);
    let to_tn = this.getTreeNode(to);
    const cxn_tn = this.getTreeNode(cxn);
    from_tn.outputs.push({
      tn: cxn_tn,
      ndx: from_ndx
    });
    cxn_tn.inputs = [{
      tn: from_tn,
      ndx: 0
    }];
    cxn_tn.outputs = [{
      tn: to_tn,
      ndx: 0
    }];
    to_tn.inputs.push({
      tn: cxn_tn,
      ndx: to_ndx
    });
    if (from_tn.node.type === 'op') to_tn.parent = from_tn;
    return this.getNonCxnInputs(to);
  }
  /**
   * this sets the parent of a subdraft to the operation that created iit
   * @returns an array of the subdraft ids connected to this operation
   */
  setSubdraftParent(sd, op) {
    const sd_tn = this.getTreeNode(sd);
    const op_tn = this.getTreeNode(op);
    sd_tn.parent = op_tn;
  }
  /**
   * this removes the given id from the tree
   * given the structure of the code, this will never be called on a connection node, as only ops and subdrafts can be
   * explicitly deleted.
   * @param id the id to delete
   */
  removeNodeTreeAssociations(id) {
    const tn = this.getTreeNode(id);
    if (tn === undefined) return;
    //travel to all the trreenode's inputs, and erase this from their output
    tn.inputs.forEach(el => {
      const cxn_ndx_output = el.tn.outputs.findIndex(out => out.tn.node.id == id);
      el.tn.outputs.splice(cxn_ndx_output, 1);
    });
    tn.outputs.forEach(el => {
      const cxn_ndx_input = el.tn.inputs.findIndex(i => i.tn.node.id == id);
      el.tn.inputs.splice(cxn_ndx_input, 1);
    });
    tn.outputs = [];
    tn.inputs = [];
  }
  //finds the connection compoment associated with the subdraft sd
  getConnectionComponentFromSubdraft(sd_id) {
    const sd_node = this.getTreeNode(sd_id);
    if (sd_node.outputs.length == 0) {
      console.log("Error: subdraft node did not have outputs");
      return null;
    } else if (sd_node.outputs.length > 1) {
      console.log("Error: subdraft node had more than one output");
      return null;
    }
    const cxn_node = sd_node.outputs[0].tn.node;
    return cxn_node.component;
  }
  /**
  * given a from, to, and inlet index, return the connection id
  * @param from
  * @returns the node id of the connection, or -1 if that connection is not found
  */
  getConnectionAtInlet(from, to, ndx) {
    let found = -1;
    const inputs = this.getInputsWithNdx(to);
    const connection = inputs.filter(el => el.ndx == ndx);
    if (connection === undefined) return -1;
    if (connection.length == 1) return connection[0].tn.node.id;else {
      connection.forEach(connectionAtInlet => {
        const non_cnx_inputs = this.getInputs(connectionAtInlet.tn.node.id);
        const match_from = non_cnx_inputs.find(el => el === from);
        if (match_from !== undefined) found = connectionAtInlet.tn.node.id;
      });
    }
    return found;
  }
  /**
   * given two nodes, returns the id of the connection node connecting them
   * @param a one node
   * @param b the otehr node node
   * @returns the node id of the connection, or -1 if that connection is not found
   */
  getConnection(a, b) {
    const set_a = this.nodes.filter(el => el.type === 'cxn').filter(el => this.getOutputs(el.id).find(treenode_id => this.getTreeNode(treenode_id).node.id === a)).filter(el => this.getInputsWithNdx(el.id).find(ip => ip.tn.node.id === b));
    const set_b = this.nodes.filter(el => el.type === 'cxn').filter(el => this.getOutputs(el.id).find(treenode_id => this.getTreeNode(treenode_id).node.id === b)).filter(el => this.getInputsWithNdx(el.id).find(ip => ip.tn.node.id === a));
    const combined = set_a.concat(set_b);
    if (combined.length === 0) {
      //console.error("No connection found between", a, b);
      return -1;
    }
    if (combined.length > 1) {
      console.error("more than one connection found");
    }
    return combined[0].id;
  }
  /**
   * checks if this node receives any input values
   * @param id the node id
   * @returns a boolean describing if an input exists
   */
  hasInput(id) {
    const tn = this.getTreeNode(id);
    return tn.inputs.length > 0;
  }
  /**
   * returns the ids of all nodes connected to the input node that are not connection nodes
   * @param op_id
   */
  getNonCxnInputs(id) {
    const inputs = this.getInputs(id);
    const id_list = inputs.map(id => this.getNode(id)).filter(node => node.type === 'cxn').map(node => this.getConnectionInput(node.id));
    // const id_list:Array<number> = node_list.map(node => (node.type === 'cxn') ? this.getConnectionInput(node.id): -1);
    return id_list;
  }
  hasNdx(stored_input, input_to_function) {
    if (input_to_function === -1) return false;
    if (stored_input === -1) return false;else return true;
  }
  /**
  * returns the ids of all nodes connected to the input node that are not connection nodes
  * in the case of dynamic ops, also provide the input index
  * @param op_id
  */
  getOpComponentInputs(op_id, ndx) {
    const inputs = this.getInputsWithNdx(op_id);
    const id_list = inputs.filter(param => param.ndx === ndx).map(param => param.tn.node).filter(node => node.type === 'cxn').map(node => this.getConnectionInput(node.id));
    // const id_list:Array<number> = node_list.map(node => (node.type === 'cxn') ? this.getConnectionInput(node.id): -1);
    return id_list;
  }
  /**
   * returns the ids of all nodes connected to the input node that are op nodes
   * @param op_id
   */
  getOpInputs(id) {
    const inputs = this.getInputs(id);
    const node_list = inputs.map(id => this.getNode(id));
    //const id_list:Array<number> = node_list.map(node => (node.type === 'cxn') ? this.getConnectionInput(node.id): node.id);
    const id_list = node_list.filter(node => node.type === 'cxn').map(node => this.getNode(this.getConnectionInput(node.id))).filter(node => node.type === 'op').map(node => node.id);
    return id_list;
  }
  /**
   * returns the ids of all nodes connected to the input node that are draft nodes
   * @param op_id
   */
  getDraftInputs(id) {
    const inputs = this.getInputs(id);
    const node_list = inputs.map(id => this.getNode(id));
    //const id_list:Array<number> = node_list.map(node => (node.type === 'cxn') ? this.getConnectionInput(node.id): node.id);
    const id_list = node_list.filter(node => node.type === 'cxn').map(node => this.getNode(this.getConnectionInput(node.id))).filter(node => node.type === 'draft').map(node => node.id);
    return id_list;
  }
  /**
  * returns the ids of all nodes connected to the output node that are not connection nodes
  * @param op_id
  */
  getNonCxnOutputs(id) {
    const outputs = this.getOutputs(id);
    const node_list = outputs.map(id => this.getNode(id));
    const id_list = node_list.map(node => this.getNode(node.id)).filter(node => node.type === 'cxn').map(node => this.getConnectionOutput(node.id));
    return id_list;
  }
  /**
  * returns the ids of all nodes connected to the output node that are not connection nodes
  * @param op_id
  */
  getDraftOutputs(id) {
    const outputs = this.getOutputs(id);
    const node_list = outputs.map(id => this.getNode(id));
    const id_list = node_list.map(node => this.getNode(node.id)).filter(node => node.type === 'cxn').map(node => this.getConnectionOutput(node.id)).filter(node => this.getType(node) === 'draft');
    return id_list;
  }
  getInputs(node_id) {
    const tn = this.getTreeNode(node_id);
    if (tn === undefined) return [];
    const input_ids = tn.inputs.map(child => child.tn.node.id);
    return input_ids;
  }
  getInputsWithNdx(node_id) {
    const tn = this.getTreeNode(node_id);
    if (tn === undefined) return [];
    return tn.inputs;
  }
  getInputsAtNdx(node_id, inlet_ndx) {
    const tn = this.getTreeNode(node_id);
    if (tn === undefined) return [];
    return tn.inputs.filter(el => el.ndx == inlet_ndx);
  }
  getConnectionInput(node_id) {
    const tn = this.getTreeNode(node_id);
    const input_ids = tn.inputs.map(child => child.tn.node.id);
    if (input_ids.length > 1) console.log("Error: more than one input");
    return input_ids[0];
  }
  getOutputs(node_id) {
    const tn = this.getTreeNode(node_id);
    if (tn === undefined) return [];
    const ids = tn.outputs.map(child => child.tn.node.id);
    return ids;
  }
  getConnectionOutput(node_id) {
    const tn = this.getTreeNode(node_id);
    const output_ids = tn.outputs.map(child => child.tn.node.id);
    if (output_ids.length > 1) console.log("Error: more than one output");
    return output_ids.pop();
  }
  /**
   * returns the ids of the total set of operations that, when performed, will chain down to the other operations
   */
  getTopLevelOps() {
    return this.nodes.filter(el => el.type === "op").filter(el => this.getUpstreamOperations(el.id).length === 0).map(el => el.id);
  }
  /**
   * returns a list of any drafts that have no parents
   */
  getTopLevelDrafts() {
    return this.nodes.filter(el => el.type === "draft").map(el => this.getTreeNode(el.id)).filter(el => el.parent === null).map(el => el.node.id);
  }
  getGenerationChildren(parents) {
    let children = [];
    parents.forEach(parent => {
      const tn = this.getTreeNode(parent);
      children = children.concat(tn.outputs.map(io => io.tn.node.id));
    });
    return children;
  }
  /**
   * for degugging, this "prints" a list of the tree by generations
   */
  print() {
    const gens = this.convertTreeToGenerations();
    gens.forEach((el, ndx) => {
      console.log("****  geneation ", ndx, "****");
      el.forEach(subel => {
        const type = this.getType(subel);
        console.log("(", subel, ',', type, ')');
      });
    });
    console.log("tree: ", this.tree);
  }
  /**
   * converts the tree into an array where each element belongs to a similar "generation" meaning the first generation had no parents/inputs, and the subsequent generations are descending from that.
   * returns a list of ids referencing the element ids belonging to each generation
   * should return an array that has the same number of elements as the tree overall
   */
  convertTreeToGenerations() {
    const gens = [];
    let parents = this.tree.filter(tn => tn.inputs.length == 0).map(tn => tn.node.id);
    while (parents.length > 0) {
      gens.push(parents);
      parents = this.getGenerationChildren(parents);
    }
    return gens;
  }
  /**
   * converts all of the nodes in this tree for saving.
   * @returns an array of objects that describe nodes
   */
  exportNodesForSaving(current_scale) {
    const objs = [];
    this.nodes.forEach(node => {
      const savable = {
        node_id: node.id,
        type: node.type,
        topleft: node.component !== null ? node.component.topleft : {
          x: 0,
          y: 0
        }
      };
      objs.push(savable);
    });
    return objs;
  }
  adjustTreadlingForSaving(tread) {
    if (tread == null || tread == undefined) return [];
    const adjusted = [];
    tread.forEach((row, i) => {
      if (row.length === 0) {
        adjusted.push([-1]);
      } else {
        adjusted.push(row.slice());
      }
    });
    return adjusted;
  }
  /**
  * converts draft nodes into a form suited for export.
  * drafts with parents are not saved, as their data is generated from operations on load.
  * @returns an array of objects that describe nodes
  */
  exportDraftNodeProxiesForSaving() {
    const objs = [];
    this.getDraftNodes().forEach(node => {
      let loom_export = null;
      if (node.loom !== null && node.loom !== undefined) {
        loom_export = {
          threading: node.loom.threading.slice(),
          tieup: node.loom.tieup.slice(),
          treadling: this.adjustTreadlingForSaving(node.loom.treadling)
        };
      }
      if (node.draft !== null && node.draft !== undefined) {
        const savable = {
          node_id: node.id,
          draft_id: node.draft.id,
          draft_name: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.getDraftName)(node.draft),
          draft: this.hasParent(node.id) ? null : node.draft,
          draft_visible: node.component !== null ? node.component.draft_visible : true,
          loom: this.hasParent(node.id) ? null : loom_export,
          loom_settings: node.loom_settings,
          render_colors: node.render_colors == undefined ? true : node.render_colors
        };
        objs.push(savable);
      }
    });
    //MAKE SURE ALL DRAFTS ARE ORIENTED TO TOP LEFT ON SAVE
    let flip_fs = [];
    let ids = [];
    const flips = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getFlips(this.ws.selected_origin_option, 3);
    objs.forEach((obj, i) => {
      if (obj.draft !== null) {
        flip_fs.push((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.flipDraft)(obj.draft, flips.horiz, flips.vert));
        ids.push(i);
      }
    });
    return Promise.all(flip_fs).then(drafts => {
      drafts.forEach((draft, i) => {
        objs[i].draft = draft;
      });
      let ids = [];
      let flip_fs = [];
      objs.forEach((obj, i) => {
        if (obj.loom !== null) {
          flip_fs.push((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.flipLoom)(obj.loom, flips.horiz, flips.vert));
          ids.push(i);
        }
      });
      return Promise.all(flip_fs);
    }).then(looms => {
      looms.forEach((loom, i) => {
        objs[i].loom = loom;
      });
      return objs;
    });
  }
  /**
   * this function is used when the file loader needs to create a template for an object that doesn't yet exist in the tree
   * but will be loaded into the tree.
   * @param draft : the draft that will be loaded into this node
   * @param preloaded : a list of preloaded node ids to factor in when creating this new id.
   */
  getNewDraftProxies(draft, preloaded) {
    const id = this.getUniqueId();
    const node = {
      node_id: id,
      type: 'draft',
      topleft: null
    };
    const draft_node = {
      node_id: id,
      draft_id: draft.id,
      draft_name: '',
      draft: null,
      draft_visible: true,
      loom: null,
      loom_settings: null,
      render_colors: true
    };
    const treenode = {
      node: node.node_id,
      parent: -1,
      inputs: [],
      outputs: []
    };
    return {
      node,
      treenode,
      draft_node
    };
  }
  setNodesClear() {
    this.nodes.forEach(node => node.dirty = false);
  }
  setDirty(id) {
    this.getNode(id).dirty = true;
  }
  setDraftClean(id) {
    if (id === -1) {
      this.preview.dirty = false;
      return;
    }
    const node = this.getNode(id);
    if (node === undefined) {
      console.error("no node found at ", id);
      return;
    }
    node.dirty = false;
  }
  setDraftOnly(id, draft) {
    const dn = this.getNode(id);
    draft.id = id;
    dn.draft = draft;
    dn.render_colors = dn.render_colors === undefined ? true : dn.render_colors;
    if (dn.component !== null) dn.component.draft = draft;
  }
  /**
   * sets a new draft and loom at node specified by id. This occures when an operation that generated a draft has been recomputed
   * @param id the node to update
   * @param temp the draft to add
   * @param loom_settings  the settings that should govern the loom generated
   */
  setDraftAndRecomputeLoom(id, temp, loom_settings) {
    const dn = this.getNode(id);
    let ud_name = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.getDraftName)(temp);
    if (dn.draft === null) {
      dn.draft = temp;
    } else {
      ud_name = dn.draft.ud_name;
      dn.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_2__.createDraft)(temp.drawdown, temp.gen_name, ud_name, temp.rowShuttleMapping, temp.rowSystemMapping, temp.colShuttleMapping, temp.colSystemMapping);
    }
    dn.draft.id = id;
    if (loom_settings === null || loom_settings === undefined) {
      dn.loom_settings = {
        type: this.ws.type,
        epi: this.ws.epi,
        units: this.ws.units,
        frames: this.ws.min_frames,
        treadles: this.ws.min_treadles
      };
    } else dn.loom_settings = loom_settings;
    dn.dirty = true;
    if (dn.component !== null) dn.component.draft = temp;
    const loom_utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_3__.getLoomUtilByType)(dn.loom_settings.type);
    return loom_utils.computeLoomFromDrawdown(temp.drawdown, loom_settings, this.ws.selected_origin_option).then(loom => {
      dn.loom = loom;
      return Promise.resolve(loom);
    });
  }
  /**
   * sets a new draft
   * @param temp the draft to set this component to
   */
  setDraftPattern(id, pattern) {
    const dn = this.getNode(id);
    dn.draft.drawdown = pattern.slice();
    dn.component.draft = dn.draft;
    dn.dirty = true;
  }
  getOpNode(id) {
    return this.getNode(id);
  }
  /**
   * exports all operation nodes with information that can be reloaded
   * @returns
   */
  exportOpMetaForSaving() {
    const objs = [];
    this.getOpNodes().forEach(op_node => {
      const op = this.ops.getOp(op_node.name);
      let cleaned_params = op.params.map((param_template, ndx) => {
        if (param_template.type == 'file') {
          return op_node.params[ndx].id;
        } else {
          return op_node.params[ndx];
        }
      });
      const savable = {
        node_id: op_node.id,
        name: op_node.name,
        params: cleaned_params,
        inlets: op_node.inlets
      };
      objs.push(savable);
    });
    return objs;
  }
  exportTreeForSaving() {
    const objs = [];
    this.tree.forEach(treenode => {
      const savable = {
        node: treenode.node.id,
        parent: treenode.parent !== null && treenode.parent !== undefined ? treenode.parent.node.id : -1,
        inputs: treenode.inputs.map(el => {
          return {
            tn: el.tn.node.id,
            ndx: el.ndx
          };
        }),
        outputs: treenode.outputs.map(el => {
          return {
            tn: el.tn.node.id,
            ndx: el.ndx
          };
        })
      };
      objs.push(savable);
    });
    return objs;
  }
}
TreeService.ɵfac = function TreeService_Factory(t) {
  return new (t || TreeService)(_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵinject"](_core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_6__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵinject"](_operation_service__WEBPACK_IMPORTED_MODULE_8__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵinject"](_image_service__WEBPACK_IMPORTED_MODULE_7__.ImageService), _angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵinject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_5__.SystemsService));
};
TreeService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_9__["ɵɵdefineInjectable"]({
  token: TreeService,
  factory: TreeService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 5794:
/*!*************************************************!*\
  !*** ./src/app/core/provider/upload.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UploadService": () => (/* binding */ UploadService)
/* harmony export */ });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/storage */ 19058);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);





const httpOptions = {
  headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({})
};
class UploadService {
  constructor(auth) {
    this.auth = auth;
  }
  createImageFromBlob(image) {
    let reader = new FileReader();
    reader.addEventListener("load", () => {
      this.imageToShow = reader.result;
    }, false);
    if (image) {
      reader.readAsDataURL(image);
    }
  }
  getHash(upload) {
    let file = upload.file;
    return new Promise((resolve, reject) => {
      let reader = new FileReader();
      reader.onload = function (event) {
        let data = event.target.result;
        console.log("GET HASH ", data);
        let ret = data;
        if (data) {
          let uintArBuff = new Uint8Array(ret); //Does an array buffer convert to a Uint8Array?
          crypto.subtle.digest('SHA-1', uintArBuff).then(data => {
            var base64 = btoa(new Uint8Array(data).reduce((data, byte) => data + String.fromCharCode(byte), ''));
            console.log("RESOLVING WITH ", base64);
            resolve(base64);
          });
        } else {
          reject('null');
        }
      };
      reader.readAsArrayBuffer(file);
    });
  }
  uploadData(id, upload, metadata) {
    const storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage)();
    const storageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref)(storage, 'uploads/' + id);
    const uploadTask = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytesResumable)(storageRef, upload.file, metadata);
    uploadTask.on('state_changed', snapshot => {
      // Observe state change events such as progress, pause, and resume
      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
      this.progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;
      console.log('Upload is ' + this.progress + '% done');
      switch (snapshot.state) {
        case 'paused':
          console.log('Upload is paused');
          break;
        case 'running':
          console.log('Upload is running');
          break;
      }
    }, error => {
      console.error(error);
    }, () => {});
    return (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytes)(storageRef, upload.file, metadata).then(snapshot => {
      return snapshot;
    }).catch(console.error); //error on get hash
  }
  /**
   * runs checks and, if cleared, pushes the upload to the firebase storage server
   * @param upload the upload data
   * @returns Promise of the result of firebase's upload task, snapshot of the file
   */
  pushUpload(upload) {
    //const id = Math.random().toString(36).substring(2);
    let id = '';
    let metadata = null;
    return this.getHash(upload).then(hash => {
      id = hash;
      metadata = {
        customMetadata: {
          user: this.auth.uid,
          filename: upload.name
        }
      };
      upload.name = id;
      return this.alreadyLoaded(id);
    }).then(already_loaded => {
      if (!already_loaded) {
        return this.uploadData(id, upload, metadata);
      }
    }).catch(console.error);
  }
  // Get metadata properties
  getDownloadMetaData(id) {
    const storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage)();
    return (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getMetadata)((0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref)(storage, 'uploads/' + id)).then(metadata => {
      return Promise.resolve(metadata);
      // Metadata now contains the metadata for 'images/forest.jpg'
    }).catch(error => {
      // Uh-oh, an error occurred!
    });
  }
  getDownloadData(id) {
    const storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage)();
    if (id === 'noinput') return Promise.resolve('');
    this.getDownloadMetaData(id);
    return (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getDownloadURL)((0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref)(storage, 'uploads/' + id)).then(url => {
      const xhr = new XMLHttpRequest();
      xhr.responseType = 'blob';
      xhr.onload = event => {
        const blob = xhr.response;
      };
      xhr.open('GET', url);
      xhr.send();
      return Promise.resolve(url);
    }).catch(error => {
      // A full list of error codes is available at
      // https://firebase.google.com/docs/storage/web/handle-errors
      switch (error.code) {
        case 'storage/object-not-found':
          console.error("file does not exist");
          Promise.resolve(null);
          break;
        case 'storage/unauthorized':
          console.error("not authorized");
          // User doesn't have permission to access the object
          break;
        case 'storage/canceled':
          // User canceled the upload
          console.error("canceled");
          break;
        // ...
        case 'storage/unknown':
          // Unknown error occurred, inspect the server response
          console.error('unknown');
          break;
        default:
          console.error("unhandled error", error.code);
      }
    });
  }
  alreadyLoaded(id) {
    const storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage)();
    if (id === 'noinput') return Promise.resolve(false);
    return (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getDownloadURL)((0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref)(storage, 'uploads/' + id)).then(url => {
      return Promise.resolve(true);
    }).catch(error => {
      switch (error.code) {
        case 'storage/object-not-found':
          console.error("file does not exist");
          return Promise.resolve(false);
          break;
        case 'storage/unauthorized':
          console.error("not authorized");
          // User doesn't have permission to access the object
          return Promise.resolve(false);
          break;
        case 'storage/canceled':
          // User canceled the upload
          console.error("canceled");
          return Promise.resolve(false);
          break;
        case 'storage/unknown':
          // Unknown error occurred, inspect the server response
          console.error('unknown');
          return Promise.resolve(false);
          break;
        default:
          console.error("unhandled error", error.code);
          return Promise.resolve(false);
      }
    });
  }
  deleteUpload(upload) {
    const storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage)();
    // Create a reference to the file to delete
    const desertRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref)(storage, 'uploads/' + upload.name);
    // Delete the file
    (0,firebase_storage__WEBPACK_IMPORTED_MODULE_0__.deleteObject)(desertRef).then(() => {
      console.log("file deleted");
    }).catch(error => {
      // Uh-oh, an error occurred!
    });
  }
}
UploadService.ɵfac = function UploadService_Factory(t) {
  return new (t || UploadService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_1__.AuthService));
};
UploadService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: UploadService,
  factory: UploadService.ɵfac
});

/***/ }),

/***/ 85646:
/*!**********************************************!*\
  !*** ./src/app/core/provider/vae.service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VaeService": () => (/* binding */ VaeService)
/* harmony export */ });
/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mathjs */ 10889);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


class VaeService {
  /**
   * add models on load
   */
  constructor() {
    // this.collections.forEach(
    //     collection =>  {
    this.epsilons = [];
    this.batch_size = 16;
    this.models = [];
    this.collections = ['crackle_weave', 'german'];
    //         return Promise.all(
    //             [tf.loadLayersModel('../../../assets/' + collection + '/decoder/model.json'), 
    //             tf.loadLayersModel('../../../assets/' + collection + '/encoder_log_var/model.json'),
    //             tf.loadLayersModel('../../../assets/' + collection + '/encoder_mean/model.json')
    //         ]).then(model => {
    //              this.models.push(<Model> {
    //                 name: collection,
    //                 decoder: model[0],
    //                 encoder_log_var:model [1],
    //                 encoder_mean: model[2]
    //             });
    //             }
    //         ).catch(console.error);
    //     }
    // ) 
  }

  getModel(name) {
    const m = this.models.find(el => el.name === name);
    if (m === undefined) console.error("cannot find model with name ", name);
    return m;
  }
  printDecoder(collection) {
    const m = this.getModel(collection);
    console.log(m.decoder);
  }
  cleanDraft(draft) {
    let std_dev = (0,mathjs__WEBPACK_IMPORTED_MODULE_0__.std)(draft);
    let mean_val = (0,mathjs__WEBPACK_IMPORTED_MODULE_0__.mean)(draft);
    var thresholded_draft = JSON.parse(JSON.stringify(draft)); //making deep copy of the draft
    for (var weft = 0; weft < draft.length; weft++) {
      for (var warp = 0; warp < draft[weft].length; warp++) {
        if (draft[weft][warp] >= mean_val - 0.08 * std_dev) {
          thresholded_draft[weft][warp] = 1;
        } else {
          thresholded_draft[weft][warp] = 0;
        }
      }
    }
    return thresholded_draft;
  }
}
VaeService.ɵfac = function VaeService_Factory(t) {
  return new (t || VaeService)();
};
VaeService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: VaeService,
  factory: VaeService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 20911:
/*!**************************************************!*\
  !*** ./src/app/core/provider/version.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VersionService": () => (/* binding */ VersionService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class VersionService {
  constructor() {
    this.version = '4.0.0';
  }
  currentVersion() {
    return this.version;
  }
}
VersionService.ɵfac = function VersionService_Factory(t) {
  return new (t || VersionService)();
};
VersionService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: VersionService,
  factory: VersionService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 80828:
/*!****************************************************!*\
  !*** ./src/app/core/provider/workspace.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WorkspaceService": () => (/* binding */ WorkspaceService)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _model_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/util */ 75973);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);



/**
 * store any global workspace settings here:
 * Sync these with firebase so they are remembered across user sessions
 */
class WorkspaceService {
  constructor() {
    this.file_favorites = [];
    this.min_frames = 8;
    this.min_treadles = 10;
    this.type = 'jacquard'; //'rigid', 'direct', 'frame', 'jacquard'
    this.show_errors = true;
    this.epi = 10;
    this.units = 'in';
    this.show_materials = true;
    this.black_cell_up = true;
    this.number_threading = false;
    /**
     * when looking at the draft viewer, where should the (0, 0) point of the drawdown sit.
     * 0 top right, 1 bottom right, 2 bottom left, 3 top left
     */
    this.selected_origin_option = 3;
    this.origin_option_list = [{
      value: 0,
      view: 'top right'
    }, {
      value: 1,
      view: 'bottom right'
    }, {
      value: 2,
      view: 'bottom left'
    }, {
      value: 3,
      view: 'top left'
    }];
    /**
     * show materials in mixer previews. If false, will default entirely to black and white
     */
    this.use_colors_on_mixer = true;
  }
  initDefaultWorkspace() {
    this.min_frames = 8;
    this.min_treadles = 10;
    this.type = 'jacquard'; //'rigid', 'direct', 'frame', 'jacquard'
    this.show_errors = true;
    this.epi = 10;
    this.units = 'in';
    this.show_materials = true;
    this.black_cell_up = true;
    this.number_threading = false;
    this.use_colors_on_mixer = true;
    this.selected_origin_option = 3;
  }
  loadWorkspace(data) {
    this.min_frames = data.min_frames;
    this.min_treadles = data.min_treadles;
    this.type = data.type;
    this.show_errors = data.show_errors;
    this.epi = data.epi;
    this.units = data.units;
    this.show_materials = data.show_materials;
    this.black_cell_up = data.black_cell_up;
    this.number_threading = data.number_threading;
    this.use_colors_on_mixer = data.use_colors_on_mixer;
    this.selected_origin_option = data.selected_origin_option;
    this.file_favorites = data.file_favorites === undefined ? [] : data.file_favorites;
  }
  getOriginOptions() {
    return this.origin_option_list;
  }
  isFrame() {
    if (this.type === 'frame') return true;
    return false;
  }
  /**
   * given an array of looms, infers the data from what is most commonly used
   * this assumes that most exports will have common loom data
   * @param looms
   */
  inferData(loom_settings) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (loom_settings.length === 0) return Promise.resolve("no looms");
      //filter out null or undefined looms
      loom_settings = loom_settings.filter(el => !(el === undefined || el === null));
      _this.min_frames = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getMostCommon(loom_settings.map(el => el.frames));
      _this.min_treadles = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getMostCommon(loom_settings.map(el => el.treadles));
      _this.type = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getMostCommon(loom_settings.map(el => el.type));
      _this.units = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getMostCommon(loom_settings.map(el => el.units));
      _this.epi = _model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getMostCommon(loom_settings.map(el => el.epi));
      return "done";
    })();
  }
  exportWorkspace() {
    return {
      min_frames: this.min_frames,
      min_treadles: this.min_treadles,
      type: this.type,
      show_errors: this.show_errors,
      epi: this.epi,
      units: this.units,
      show_materials: this.show_materials,
      black_cell_up: this.black_cell_up,
      number_threading: this.number_threading,
      selected_origin_option: this.selected_origin_option,
      file_favorites: this.file_favorites.slice()
    };
  }
  toggleFavorite(id) {
    const found = this.file_favorites.find(el => el === id);
    if (found) {
      this.file_favorites = this.file_favorites.filter(el => el !== id);
    } else {
      this.file_favorites.push(id);
    }
  }
  isFavorite(id) {
    const found = this.file_favorites.find(el => el === id);
    if (found === undefined) return false;else return true;
  }
}
WorkspaceService.ɵfac = function WorkspaceService_Factory(t) {
  return new (t || WorkspaceService)();
};
WorkspaceService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  token: WorkspaceService,
  factory: WorkspaceService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 26701:
/*!*************************************************!*\
  !*** ./src/app/core/signup/signup.component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignupComponent": () => (/* binding */ SignupComponent)
/* harmony export */ });
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ 2508);




class SignupComponent {
  constructor(authService) {
    this.authService = authService;
    this.password = "";
    this.email = "";
  }
  ngOnInit() {}
  onSubmit(formData) {
    // if (formData.valid) {
    //   console.log(formData.value);
    //   this.authService.emailSignup(
    //     formData.value.email,
    //     formData.value.password
    //   );
    // }
  }
}
SignupComponent.ɵfac = function SignupComponent_Factory(t) {
  return new (t || SignupComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_0__.AuthService));
};
SignupComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: SignupComponent,
  selectors: [["app-signup"]],
  decls: 11,
  vars: 1,
  consts: [[1, "form-container"], ["routerLink", "/login", "id", "goback"], [3, "ngSubmit"], ["formData", "ngForm"], ["type", "text", "placeholder", "Email address", "name", "email", "required", "", 1, "input-txt", 3, "ngModel"], ["type", "password", "placeholder", "Password", "name", "password", "required", "", 1, "input-txt", 3, "ngModel"], ["type", "submit", 1, "auth-btn", 3, "disabled"]],
  template: function SignupComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0)(1, "a", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, "Login");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "h2");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](4, "Sign Up");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "form", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngSubmit", function SignupComponent_Template_form_ngSubmit_5_listener() {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r1);
        const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](6);
        return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx.onSubmit(_r0));
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "input", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModel", function SignupComponent_Template_input_ngModel_7_listener() {
        return ctx.email;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](8, "input", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModel", function SignupComponent_Template_input_ngModel_8_listener() {
        return ctx.password;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](10, "Create Account");
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](9);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", !_r0.valid);
    }
  },
  dependencies: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.RequiredValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgForm],
  styles: ["\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 34181:
/*!*************************************************!*\
  !*** ./src/app/core/topbar/topbar.component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TopbarComponent": () => (/* binding */ TopbarComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../login/login.component */ 2409);
/* harmony import */ var _modal_about_about_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modal/about/about.modal */ 5401);
/* harmony import */ var _provider_auth_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../provider/auth.service */ 46866);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/toolbar */ 52543);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);













function TopbarComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 14)(1, "span", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "a", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function TopbarComponent_div_11_Template_a_click_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r4);
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r3.logout());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](4, "i", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("Hi ", ctx_r0.auth.username, " ");
  }
}
function TopbarComponent_div_25_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div")(1, "button", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function TopbarComponent_div_25_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r6);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r5.openLoginDialog());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](2, "i", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](3, " Log in");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
}
function TopbarComponent_div_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1, " You are already logged in! ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
class TopbarComponent {
  constructor(dialog, auth, location) {
    this.dialog = dialog;
    this.auth = auth;
    this.location = location;
    this.onCollapseSidebar = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
  }
  ngOnInit() {}
  ngAfterViewInit() {}
  openAboutDialog() {
    const dialogRef = this.dialog.open(_modal_about_about_modal__WEBPACK_IMPORTED_MODULE_1__.AboutModal);
  }
  openLoginDialog() {
    const dialogRef = this.dialog.open(_login_login_component__WEBPACK_IMPORTED_MODULE_0__.LoginComponent, {
      width: '600px'
    });
  }
  //need to handle this and load the file somehow
  // openNewFileDialog() {
  //   const dialogRef = this.dialog.open(InitModal, {
  //     data: {loomtypes: this.loomtypes, density_units: this.density_units, source: this.source}
  //   });
  //   dialogRef.afterClosed().subscribe(loadResponse => {
  //     if(loadResponse !== undefined) this.onLoadNewFile.emit(loadResponse);
  //  });
  // }
  collapse() {
    this.collapsed = !this.collapsed;
    this.onCollapseSidebar.emit();
  }
  logout() {
    this.auth.logout();
  }
}
TopbarComponent.ɵfac = function TopbarComponent_Factory(t) {
  return new (t || TopbarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_auth_service__WEBPACK_IMPORTED_MODULE_2__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_5__.Location));
};
TopbarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: TopbarComponent,
  selectors: [["app-topbar"]],
  inputs: {
    drawer: "drawer",
    collapsed: "collapsed"
  },
  outputs: {
    onCollapseSidebar: "onCollapseSidebar"
  },
  decls: 27,
  vars: 9,
  consts: [["color", "primary", 1, "topbar"], [1, "left"], ["mat-icon-button", "", "value", "collapsed", 1, "collapse", 3, "click"], ["aria-hidden", "true", 1, "fa"], [1, "titlebar"], ["mat-icon-button", "", "matTooltip", "about AdaCAD", 3, "click"], [1, "fas", "fa-info-circle"], [1, "right"], ["class", "auth", 4, "ngIf"], [1, "betadesc"], ["href", "https://groups.google.com/g/adacad-forum", 1, "mat-stroked-button", "stable"], ["href", "https://adacad.org", 2, "color", "white"], [1, "buttonrow"], [4, "ngIf"], [1, "auth"], [1, "loggedInUserName"], ["mat-icon-button", "", "matTooltip", "logout", 3, "click"], [1, "fa", "fa-sign-out"], ["mat-stroked-button", "", "matTooltip", "login", 1, "example-full-width", "login", 3, "click"], [1, "fa", "fa-sign-in"]],
  template: function TopbarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-toolbar", 0)(1, "div", 1)(2, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function TopbarComponent_Template_button_click_2_listener() {
        return ctx.collapse();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](3, "i", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](5, "AdaCAD 4.0, ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](6, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](7, "beta");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](8, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function TopbarComponent_Template_button_click_8_listener() {
        return ctx.openAboutDialog();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](9, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](10, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, TopbarComponent_div_11_Template, 5, 1, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "div", 9)(13, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](14, " This is a new/\"beta\" release of AdaCAD 4.0. This release has more features, including file loading/saving, multiselection, simulation, but has not been tested as extensively as our previous version of AdaCAD. ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](15, "b");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](16, "Use at your own risk. and please: ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](17, "a", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](18, " click here if you find broken things!");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](19, " If you would like to use the existing, and stable, version of AdaCAD, you can do so here: ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](20, "a", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](21, "adacad.org");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](22, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](23, " If you would like to use use this version, we reccomend logging in or creating an account and watching our video about how to use this new version. This will allow you to load and save files within AdaCAD: ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](24, "div", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](25, TopbarComponent_div_25_Template, 4, 0, "div", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](26, TopbarComponent_div_26_Template, 2, 0, "div", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵclassProp"]("nav-opened", !ctx.collapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵclassProp"]("fa-angle-double-right", ctx.collapsed)("fa-angle-double-left", !ctx.collapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.auth.showLogoutButton);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", !ctx.auth.isLoggedIn);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.auth.isLoggedIn);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_6__.MatButton, _angular_material_button__WEBPACK_IMPORTED_MODULE_6__.MatAnchor, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_7__.MatToolbar, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__.MatTooltip],
  styles: [".left[_ngcontent-%COMP%], .right[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.betadesc[_ngcontent-%COMP%] {\n  padding: 0px 40px;\n  font-size: 0.8em;\n  color: white;\n  background-color: #3f51b5;\n}\n\n.login[_ngcontent-%COMP%] {\n  background-color: white;\n  color: #3f51b5;\n}\n\n.filename[_ngcontent-%COMP%] {\n  font-size: 0.6em;\n  width: 217px;\n  margin: 0px 0px 0 21px;\n}\n\n.auth[_ngcontent-%COMP%] {\n  font-size: 0.6em;\n  font-weight: 400;\n  display: flex;\n  flex-direction: row;\n}\n\n.titlebar[_ngcontent-%COMP%] {\n  font-size: 0.8em;\n  color: white;\n  display: inline;\n  line-height: 25px;\n}\n\n.buttonrow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n}\n\n.loggedInUserName[_ngcontent-%COMP%] {\n  display: flex;\n  line-height: 26px;\n}\n\n.stable[_ngcontent-%COMP%] {\n  background-color: white;\n  color: #3f51b5;\n  display: block;\n}\n\np[_ngcontent-%COMP%] {\n  padding: 8px 0px;\n}\n\na[_ngcontent-%COMP%] {\n  display: inline-block;\n}\n\n.topbar[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.fa-print[_ngcontent-%COMP%] {\n  color: white;\n}\n/*# sourceURL=webpack://./src/app/core/topbar/topbar.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS90b3BiYXIvdG9wYmFyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOztFQUVJLGFBQUE7RUFDQSxtQkFBQTtBQUFKOztBQUdBO0VBQ0ksaUJBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtBQUFKOztBQUdBO0VBQ0ksdUJBQUE7RUFDQSxjQUFBO0FBQUo7O0FBSUE7RUFDSSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxzQkFBQTtBQURKOztBQUlBO0VBQ0ksZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtBQURKOztBQUtBO0VBQ0ksZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0FBRko7O0FBS0E7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSw2QkFBQTtBQUZKOztBQUtBO0VBQ0ksYUFBQTtFQUNBLGlCQUFBO0FBRko7O0FBS0E7RUFDSSx1QkFBQTtFQUNBLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBS0E7RUFDSSxnQkFBQTtBQUZKOztBQUtBO0VBQ0kscUJBQUE7QUFGSjs7QUFPQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDhCQUFBO0FBSko7O0FBUUE7RUFDQyxZQUFBO0FBTEQiLCJzb3VyY2VzQ29udGVudCI6WyIubGVmdCxcbi5yaWdodCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi5iZXRhZGVzYyB7XG4gIHBhZGRpbmc6IDBweCA0MHB4O1xuICBmb250LXNpemU6IDAuOGVtO1xuICBjb2xvcjogd2hpdGU7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjU7XG59XG5cbi5sb2dpbiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBjb2xvcjogIzNmNTFiNTtcbn1cblxuLmZpbGVuYW1lIHtcbiAgZm9udC1zaXplOiAwLjZlbTtcbiAgd2lkdGg6IDIxN3B4O1xuICBtYXJnaW46IDBweCAwcHggMCAyMXB4O1xufVxuXG4uYXV0aCB7XG4gIGZvbnQtc2l6ZTogMC42ZW07XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi50aXRsZWJhciB7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIGNvbG9yOiB3aGl0ZTtcbiAgZGlzcGxheTogaW5saW5lO1xuICBsaW5lLWhlaWdodDogMjVweDtcbn1cblxuLmJ1dHRvbnJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xufVxuXG4ubG9nZ2VkSW5Vc2VyTmFtZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG4uc3RhYmxlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGNvbG9yOiAjM2Y1MWI1O1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxucCB7XG4gIHBhZGRpbmc6IDhweCAwcHg7XG59XG5cbmEge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi50b3BiYXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5mYS1wcmludCB7XG4gIGNvbG9yOiB3aGl0ZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 81901:
/*!*******************************************************************!*\
  !*** ./src/app/core/uploads/upload-form/upload-form.component.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UploadFormComponent": () => (/* binding */ UploadFormComponent)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _provider_upload_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../provider/upload.service */ 5794);
/* harmony import */ var _model_datatypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model/datatypes */ 86789);
/* harmony import */ var _provider_image_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../provider/image.service */ 53398);
/* harmony import */ var _model_sequence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../model/sequence */ 62390);
/* harmony import */ var _model_drafts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../model/drafts */ 1435);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/progress-bar */ 51294);















const _c0 = ["uploadImage"];
function UploadFormComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 6)(1, "button", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function UploadFormComponent_div_3_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r4);
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r3.upload());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, " Upload ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", !ctx_r0.selectedFiles);
  }
}
function UploadFormComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](1, "mat-progress-bar", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("value", ctx_r1.upSvc.progress);
  }
}
class UploadFormComponent {
  constructor(upSvc, httpClient, imageService) {
    this.upSvc = upSvc;
    this.httpClient = httpClient;
    this.imageService = imageService;
    this.progress = 0;
    this.uploading = false;
    this.onData = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onError = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
  }
  detectFiles(event) {
    this.selectedFiles = event.target.files;
  }
  uploadAda(upload, file) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this.upSvc.pushUpload(upload).then(snapshot => {
        return _this.upSvc.getDownloadData(upload.name);
      }).then(url => {
        console.log("got download", url);
        _this.httpClient.get(url).toPromise().then(data => {
          var obj = {
            name: file.name.split(".")[0],
            data: data,
            type: 'ada'
          };
          _this.onData.emit(obj);
          _this.uploading = false;
          _this.selectedFiles = null;
          _this.upSvc.deleteUpload(upload);
        });
      });
    })();
  }
  uploadImage(upload, file) {
    return this.upSvc.pushUpload(upload).then(snapshot => {
      return this.imageService.loadFiles([upload.name]);
    }).then(uploaded => {
      this.onData.emit(uploaded);
      this.uploading = false;
      this.selectedFiles = null;
    }).catch(e => {
      this.onError.emit(e);
      this.uploading = false;
      this.selectedFiles = null;
    });
  }
  uploadBitmap(upload, file) {
    return this.upSvc.pushUpload(upload).then(snapshot => {
      return this.imageService.loadFiles([upload.name]);
    }).catch(e => {
      this.onError.emit(e);
      this.uploading = false;
      this.selectedFiles = null;
    });
  }
  upload() {
    console.log("UPLOAD SINGLE", this.type);
    this.uploading = true;
    let file = this.selectedFiles.item(0);
    let fileType = file.name.split(".").pop();
    let fileName = file.name.split(".")[0];
    const upload = {
      $key: '',
      file: file,
      name: fileName,
      url: '',
      progress: 0,
      createdAt: new Date()
    };
    switch (this.type) {
      case 'ada':
        this.uploadAda(upload, file);
        break;
      case 'single_image':
        this.uploadImage(upload, file);
        break;
      case 'bitmap_collection':
        this.uploadBitmaps();
        break;
      default:
        break;
    }
  }
  /**
   * used when handling the upload of multiple images (bitmaps) that should be converted into a drfat
   */
  uploadBitmaps() {
    this.uploading = true;
    const uploads = [];
    const fns = [];
    for (let i = 0; i < this.selectedFiles.length; i++) {
      let file = this.selectedFiles.item(i);
      let fileName = file.name.split(".")[0];
      const upload = {
        $key: '',
        file: file,
        name: fileName,
        url: '',
        progress: 0,
        createdAt: new Date()
      };
      uploads.push(upload);
      fns.push(this.uploadBitmap(upload, file));
    }
    Promise.all(fns).then(res => {
      let drafts = [];
      res.forEach(upload_arr => {
        let upload = upload_arr[0];
        const twod = new _model_sequence__WEBPACK_IMPORTED_MODULE_4__.Sequence.TwoD();
        let bw_ndx = upload.colors_to_bw.map(el => el.black);
        for (let i = 0; i < upload.height; i++) {
          const oned = new _model_sequence__WEBPACK_IMPORTED_MODULE_4__.Sequence.OneD();
          for (let j = 0; j < upload.width; j++) {
            const ndx = upload.image_map[i][j];
            let val = ndx < bw_ndx.length ? bw_ndx[ndx] : null;
            oned.push(val);
          }
          twod.pushWeftSequence(oned.val());
        }
        const d = (0,_model_drafts__WEBPACK_IMPORTED_MODULE_5__.initDraftFromDrawdown)(twod.export());
        d.gen_name = upload.name;
        drafts.push(d);
      });
      this.onData.emit({
        type: this.type,
        drafts: drafts
      });
      this.uploading = false;
      this.selectedFiles = null;
      return [];
    }).then(res => {
      let functions = uploads.map(el => this.upSvc.deleteUpload(el));
      return Promise.all(functions);
    }).catch(e => {
      this.onError.emit('one of the files you uploaded was not a bitmap (and had more than 100 colors, so it could not be converted to black and white), please try again');
      this.uploading = false;
      this.selectedFiles = null;
    });
  }
  ngOnInit() {}
}
UploadFormComponent.ɵfac = function UploadFormComponent_Factory(t) {
  return new (t || UploadFormComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_upload_service__WEBPACK_IMPORTED_MODULE_1__.UploadService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_provider_image_service__WEBPACK_IMPORTED_MODULE_3__.ImageService));
};
UploadFormComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
  type: UploadFormComponent,
  selectors: [["upload-form"]],
  viewQuery: function UploadFormComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵviewQuery"](_c0, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵloadQuery"]()) && (ctx.canvas = _t.first);
    }
  },
  inputs: {
    type: "type",
    multiple: "multiple",
    accepts: "accepts"
  },
  outputs: {
    onData: "onData",
    onError: "onError"
  },
  decls: 7,
  vars: 4,
  consts: [[1, "upload-container"], ["type", "file", 3, "multiple", "accept", "change"], ["class", "upload-button", 4, "ngIf"], ["class", "progress-bar", 4, "ngIf"], [1, "hidden"], ["uploadImage", ""], [1, "upload-button"], ["mat-raised-button", "", "color", "accent", 3, "disabled", "click"], [1, "progress-bar"], ["mode", "determinate", 3, "value"]],
  template: function UploadFormComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 0)(1, "label")(2, "input", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("change", function UploadFormComponent_Template_input_change_2_listener($event) {
        return ctx.detectFiles($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](3, UploadFormComponent_div_3_Template, 3, 1, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](4, UploadFormComponent_div_4_Template, 2, 1, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](5, "canvas", 4, 5);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("multiple", ctx.multiple)("accept", ctx.accepts);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", !ctx.uploading);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngIf", ctx.uploading);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_9__.MatButton, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_10__.MatProgressBar],
  styles: [".upload-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.progress-bar[_ngcontent-%COMP%], .upload-button[_ngcontent-%COMP%] {\n  width: 90px;\n}\n/*# sourceURL=webpack://./src/app/core/uploads/upload-form/upload-form.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS91cGxvYWRzL3VwbG9hZC1mb3JtL3VwbG9hZC1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0FBQ0o7O0FBRUE7O0VBRUksV0FBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLnVwbG9hZC1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuXG4ucHJvZ3Jlc3MtYmFyLFxuLnVwbG9hZC1idXR0b24ge1xuICB3aWR0aDogOTBweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 53040:
/*!**********************************************************!*\
  !*** ./src/app/draftdetail/actions/actions.component.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionsComponent": () => (/* binding */ ActionsComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ 28456);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/model/defaults */ 45286);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/autocomplete */ 88550);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/icon */ 57822);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var _angular_material_chips__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/chips */ 11169);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);























const _c0 = ["warpSystemInput"];
const _c1 = ["weftSystemInput"];
const _c2 = ["warpShuttleInput"];
const _c3 = ["weftShuttleInput"];
const _c4 = ["auto_wasy"];
const _c5 = ["auto_wesy"];
const _c6 = ["auto_wash"];
const _c7 = ["auto_wesh"];
function ActionsComponent_div_6_mat_chip_11_mat_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-icon", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function ActionsComponent_div_6_mat_chip_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-chip", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("removed", function ActionsComponent_div_6_mat_chip_11_Template_mat_chip_removed_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r13);
      const j_r10 = restoredCtx.index;
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r12.remove("wasy", j_r10));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, ActionsComponent_div_6_mat_chip_11_mat_icon_2_Template, 2, 0, "mat-icon", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r9 = ctx.$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("removable", ctx_r5.removable);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r5.ss.warp_systems[sys_r9].id + 1, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r5.removable);
  }
}
function ActionsComponent_div_6_mat_option_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r14 = ctx.$implicit;
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx_r8.warp_system);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", sys_r14.id + 1, " ");
  }
}
function ActionsComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 5)(1, "div", 6)(2, "button", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ActionsComponent_div_6_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r16);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r15.sendUpdates("wasy"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](4, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "div", 9)(6, "mat-form-field", 10)(7, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](8, " Warp System Repeat Pattern\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "mat-chip-list", 11, 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, ActionsComponent_div_6_mat_chip_11_Template, 3, 3, "mat-chip", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "input", 14, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("matChipInputTokenEnd", function ActionsComponent_div_6_Template_input_matChipInputTokenEnd_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r16);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r17.add($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "mat-autocomplete", 16, 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("optionSelected", function ActionsComponent_div_6_Template_mat_autocomplete_optionSelected_14_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r16);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r18.selected("wasy", $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](16, ActionsComponent_div_6_mat_option_16_Template, 2, 2, "mat-option", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](10);
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](15);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](11);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r0.colSystemMapping);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("formControl", ctx_r0.warpSystemCtrl)("matAutocomplete", _r7)("matChipInputFor", _r4)("matChipInputSeparatorKeyCodes", ctx_r0.separatorKeysCodes);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r0.ss.warp_systems);
  }
}
function ActionsComponent_div_7_mat_chip_11_mat_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-icon", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function ActionsComponent_div_7_mat_chip_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-chip", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("removed", function ActionsComponent_div_7_mat_chip_11_Template_mat_chip_removed_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r28);
      const j_r25 = restoredCtx.index;
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r27.remove("wash", j_r25));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, ActionsComponent_div_7_mat_chip_11_mat_icon_2_Template, 2, 0, "mat-icon", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r24 = ctx.$implicit;
    const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("selectable", ctx_r20.selectable)("removable", ctx_r20.removable);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("color", ctx_r20.ms.materials[sys_r24].color);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r20.removable);
  }
}
function ActionsComponent_div_7_mat_option_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r29 = ctx.$implicit;
    const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx_r23.system);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("color", sys_r29.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", sys_r29.name, " ");
  }
}
function ActionsComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 5)(1, "div", 6)(2, "button", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ActionsComponent_div_7_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r31);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r30.sendUpdates("wash"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](4, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "div", 9)(6, "mat-form-field", 10)(7, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](8, " Warp Materials Repeat\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "mat-chip-list", 25, 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, ActionsComponent_div_7_mat_chip_11_Template, 3, 5, "mat-chip", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "input", 28, 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("matChipInputTokenEnd", function ActionsComponent_div_7_Template_input_matChipInputTokenEnd_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r31);
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r32.add($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "mat-autocomplete", 16, 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("optionSelected", function ActionsComponent_div_7_Template_mat_autocomplete_optionSelected_14_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r31);
      const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r33.selected("wash", $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](16, ActionsComponent_div_7_mat_option_16_Template, 3, 4, "mat-option", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](10);
    const _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](15);
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](11);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r1.colShuttleMapping);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("formControl", ctx_r1.warpShuttleCtrl)("matAutocomplete", _r22)("matChipInputFor", _r19)("matChipInputSeparatorKeyCodes", ctx_r1.separatorKeysCodes);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r1.ms.materials);
  }
}
function ActionsComponent_div_8_mat_chip_11_mat_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-icon", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function ActionsComponent_div_8_mat_chip_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r43 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-chip", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("removed", function ActionsComponent_div_8_mat_chip_11_Template_mat_chip_removed_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r43);
      const j_r40 = restoredCtx.index;
      const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r42.remove("wesy", j_r40));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, ActionsComponent_div_8_mat_chip_11_mat_icon_2_Template, 2, 0, "mat-icon", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r39 = ctx.$implicit;
    const ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("selectable", ctx_r35.selectable)("removable", ctx_r35.removable);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", ctx_r35.system_codes[sys_r39], " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r35.removable);
  }
}
function ActionsComponent_div_8_mat_option_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r44 = ctx.$implicit;
    const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx_r38.system);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", sys_r44, " ");
  }
}
function ActionsComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r46 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 5)(1, "div", 6)(2, "button", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ActionsComponent_div_8_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r46);
      const ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r45.sendUpdates("wesy"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](4, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "div", 9)(6, "mat-form-field", 10)(7, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](8, " Weft System Repeat Pattern\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "mat-chip-list", 34, 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, ActionsComponent_div_8_mat_chip_11_Template, 3, 4, "mat-chip", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "input", 36, 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("matChipInputTokenEnd", function ActionsComponent_div_8_Template_input_matChipInputTokenEnd_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r46);
      const ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r47.add($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "mat-autocomplete", 16, 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("optionSelected", function ActionsComponent_div_8_Template_mat_autocomplete_optionSelected_14_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r46);
      const ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r48.selected("wesy", $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](16, ActionsComponent_div_8_mat_option_16_Template, 2, 2, "mat-option", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const _r34 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](10);
    const _r37 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](15);
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](11);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r2.rowSystemMapping);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("formControl", ctx_r2.weftSystemCtrl)("matAutocomplete", _r37)("matChipInputFor", _r34)("matChipInputSeparatorKeyCodes", ctx_r2.separatorKeysCodes);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r2.system_codes);
  }
}
function ActionsComponent_div_9_mat_chip_11_mat_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-icon", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function ActionsComponent_div_9_mat_chip_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r58 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-chip", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("removed", function ActionsComponent_div_9_mat_chip_11_Template_mat_chip_removed_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r58);
      const j_r55 = restoredCtx.index;
      const ctx_r57 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r57.remove("wesh", j_r55));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, ActionsComponent_div_9_mat_chip_11_mat_icon_2_Template, 2, 0, "mat-icon", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r54 = ctx.$implicit;
    const ctx_r50 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("selectable", ctx_r50.selectable)("removable", ctx_r50.removable);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("color", ctx_r50.ms.materials[sys_r54].color);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx_r50.removable);
  }
}
function ActionsComponent_div_9_mat_option_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-option", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r59 = ctx.$implicit;
    const ctx_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("value", ctx_r53.system);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("color", sys_r59.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"](" ", sys_r59.name, " ");
  }
}
function ActionsComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r61 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 5)(1, "div", 6)(2, "button", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ActionsComponent_div_9_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r61);
      const ctx_r60 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r60.sendUpdates("wesh"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](4, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "div", 9)(6, "mat-form-field", 10)(7, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](8, " Weft Materials Repeat\n");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "mat-chip-list", 40, 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](11, ActionsComponent_div_9_mat_chip_11_Template, 3, 5, "mat-chip", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "input", 42, 43);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("matChipInputTokenEnd", function ActionsComponent_div_9_Template_input_matChipInputTokenEnd_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r61);
      const ctx_r62 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r62.add($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "mat-autocomplete", 16, 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("optionSelected", function ActionsComponent_div_9_Template_mat_autocomplete_optionSelected_14_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r61);
      const ctx_r63 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r63.selected("wesh", $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](16, ActionsComponent_div_9_mat_option_16_Template, 3, 4, "mat-option", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const _r49 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](10);
    const _r52 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵreference"](15);
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](11);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r3.rowShuttleMapping);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("formControl", ctx_r3.weftShuttleCtrl)("matAutocomplete", _r52)("matChipInputFor", _r49)("matChipInputSeparatorKeyCodes", ctx_r3.separatorKeysCodes);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx_r3.ms.materials);
  }
}
class ActionsComponent {
  constructor(ms, ss, dialogRef, data) {
    this.ms = ms;
    this.ss = ss;
    this.dialogRef = dialogRef;
    this.data = data;
    //chip params
    this.visible = true;
    this.selectable = true;
    this.removable = true;
    this.separatorKeysCodes = [_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__.ENTER, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__.COMMA];
    this.system_codes = _core_model_defaults__WEBPACK_IMPORTED_MODULE_2__.defaults.weft_system_codes;
    this.warpSystemCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl();
    // warp_systems_pattern_strings: string[] = [];
    // allWarpSystems: string[] = [];
    this.weftSystemCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl();
    // weft_systems_pattern_strings: string[] = [];
    // allWeftSystems: string[] = [];
    this.warpShuttleCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl();
    // warp_shuttles_pattern_strings: any[] = [];
    // allWarpShuttles: any[] = [];
    this.weftShuttleCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl();
    this.onUpdateWarpSystems = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onUpdateWeftSystems = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onUpdateWarpShuttles = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onUpdateWeftShuttles = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.id = data.id;
  }
  ngOnInit() {
    this.colShuttleMapping = this.ms.getShuttles().map(el => el.id);
    this.rowShuttleMapping = this.ms.getShuttles().map(el => el.id);
    this.rowSystemMapping = this.ss.weft_systems.filter(el => el.in_use).map(el => el.id);
    this.colSystemMapping = this.ss.warp_systems.filter(el => el.in_use).map(el => el.id);
  }
  getWarpSystems() {
    return this.ss.warp_systems;
  }
  idFromString(s) {
    console.log(s);
    return s.charCodeAt(0) - 97;
  }
  shuttleIdFromName(s) {
    for (var i = 0; i < this.ms.getShuttles().length; i++) {
      let s_name = this.ms.getShuttle(i).name.toLowerCase();
      if (s_name.localeCompare(s.toLowerCase()) === 0) return i;
    }
    return -1;
  }
  add(event) {
    const input = event.input;
    const value = event.value;
    const name = input.name;
    console.log("adding to ", name);
    let shuttle_id = this.shuttleIdFromName((value || '').trim());
    switch (name) {
      case 'wasy':
        let warp_sys_id = parseInt(value) - 1;
        console.log("value is ", warp_sys_id);
        if (warp_sys_id >= 0 && warp_sys_id < this.ss.warp_systems.length) {
          console.log("adding ", warp_sys_id, "to", this.colSystemMapping);
          this.colSystemMapping.push(warp_sys_id);
          console.log("now ", this.colSystemMapping);
        }
        this.warpSystemCtrl.setValue(null);
        break;
      case 'wash':
        console.log("value is ", this.shuttleIdFromName(value.trim()));
        if ((value || '').trim() && shuttle_id != -1) {
          // let all = {
          //   id: shuttle_id,
          //   color: this.shuttles[shuttle_id].getColor(),
          //   name: this.shuttles[shuttle_id].getName()
          // }
          this.colShuttleMapping.push(shuttle_id);
        }
        this.warpShuttleCtrl.setValue(null);
        break;
      case 'wesy':
        let weft_sys_id = this.idFromString((value || '').trim());
        if (weft_sys_id >= 0 && weft_sys_id < this.ss.warp_systems.length) {
          this.rowSystemMapping.push(weft_sys_id);
        }
        this.weftSystemCtrl.setValue(null);
        break;
      case 'wesh':
        console.log("value is ", this.shuttleIdFromName(value.trim()));
        if ((value || '').trim() && shuttle_id != -1) {
          // let all = {
          //   id: shuttle_id,
          //   color: this.shuttles[shuttle_id].getColor(),
          //   name: this.shuttles[shuttle_id].getName()
          // }
          this.rowShuttleMapping.push(shuttle_id);
        }
        this.weftShuttleCtrl.setValue(null);
        break;
    }
    // Reset the input value
    if (input) {
      input.value = '';
    }
    //this.onUpdateWarpSystems.emit(this.warp_systems_pattern_strings);
  }

  remove(caller, index) {
    switch (caller) {
      case 'wasy':
        if (index >= 0 && this.colSystemMapping.length > 1) {
          this.colSystemMapping.splice(index, 1);
        }
        break;
      case 'wash':
        if (index >= 0 && this.colShuttleMapping.length > 1) {
          this.colShuttleMapping.splice(index, 1);
        }
        break;
      case 'wesy':
        if (index >= 0 && this.rowSystemMapping.length > 1) {
          this.rowSystemMapping.splice(index, 1);
        }
        break;
      case 'wesh':
        if (index >= 0 && this.rowShuttleMapping.length > 1) {
          this.rowShuttleMapping.splice(index, 1);
        }
        break;
    }
  }
  sendUpdates(source) {
    console.log("send updates", source);
    switch (source) {
      case 'wasy':
        this.onUpdateWarpSystems.emit(this.colSystemMapping);
        break;
      case 'wash':
        this.onUpdateWarpShuttles.emit(this.colShuttleMapping);
        break;
      case 'wesy':
        this.onUpdateWeftSystems.emit(this.rowSystemMapping);
        break;
      case 'wesh':
        this.onUpdateWeftShuttles.emit(this.rowShuttleMapping);
        break;
    }
  }
  selected(source, event) {
    console.log("selected", source);
    switch (source) {
      case 'wasy':
        let warp_sys_id = parseInt(event.option.viewValue) - 1;
        this.colSystemMapping.push(warp_sys_id);
        this.warpSystemCtrl.setValue(null);
        break;
      case 'wash':
        let warp_id = this.shuttleIdFromName(event.option.viewValue);
        // let warp_obj = {
        //   id: warp_id, 
        //   name: this.shuttles[warp_id].getName(), 
        //   color: this.shuttles[warp_id].getColor()
        // };
        this.colShuttleMapping.push(warp_id);
        this.warpShuttleCtrl.setValue(null);
        break;
      case 'wesy':
        let weft_sys_id = this.idFromString(event.option.viewValue);
        this.rowSystemMapping.push(weft_sys_id);
        this.weftSystemCtrl.setValue(null);
        break;
      case 'wesh':
        let weft_id = this.shuttleIdFromName(event.option.viewValue);
        // let weft_obj = {
        //   id: weft_id, 
        //   name: this.shuttles[weft_id].getName(), 
        //   color: this.shuttles[weft_id].getColor()
        // };
        this.rowShuttleMapping.push(weft_id);
        this.weftShuttleCtrl.setValue(null);
        break;
    }
  }
  close() {
    this.dialogRef.close(null);
  }
}
ActionsComponent.ɵfac = function ActionsComponent_Factory(t) {
  return new (t || ActionsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_0__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__.MAT_DIALOG_DATA));
};
ActionsComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: ActionsComponent,
  selectors: [["app-actions"]],
  viewQuery: function ActionsComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c0, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c1, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c2, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c3, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c4, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c5, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c6, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵviewQuery"](_c7, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.warpSystemInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.weftSystemInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.warpShuttleInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.weftShuttleInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.matAutocompleteWasy = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.matAutocompleteWesy = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.matAutocompleteWash = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵloadQuery"]()) && (ctx.matAutocompleteWesh = _t.first);
    }
  },
  outputs: {
    onUpdateWarpSystems: "onUpdateWarpSystems",
    onUpdateWeftSystems: "onUpdateWeftSystems",
    onUpdateWarpShuttles: "onUpdateWarpShuttles",
    onUpdateWeftShuttles: "onUpdateWeftShuttles"
  },
  decls: 10,
  vars: 4,
  consts: [[1, "toprow"], ["mat-icon-button", "", 3, "click"], [1, "fas", "fa-times"], ["mat-dialog-title", "", "cdkDrag", "", "cdkDragRootElement", ".cdk-overlay-pane", "cdkDragHandle", ""], ["class", "pattern-container", 4, "ngIf"], [1, "pattern-container"], [1, "upload"], ["mat-mini-fab", "", "matTooltip", "apply this pattern to the warp systems", "color", "primary", "aria-label", "Add Warp Systems Pattern to Weave", 3, "click"], [1, "fas", "fa-magic"], [1, "chips"], [1, "example-chip-list"], ["aria-label", "Warp System Repeat", 1, "mat-chip-list-stacked"], ["chipListWasy", ""], [3, "removable", "removed", 4, "ngFor", "ngForOf"], ["name", "wasy", "placeholder", "Add System to Pattern...", 3, "formControl", "matAutocomplete", "matChipInputFor", "matChipInputSeparatorKeyCodes", "matChipInputTokenEnd"], ["wasy", ""], [3, "optionSelected"], ["auto_wasy", "matAutocomplete"], [3, "value", 4, "ngFor", "ngForOf"], [3, "removable", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], [1, "fas", "fa-times-circle"], [3, "value"], ["mat-mini-fab", "", "matTooltip", "apply this pattern to the warp materials", "color", "primary", "aria-label", "Add Warp Materials Pattern to Weave", 3, "click"], ["aria-label", "Warp Material Repeat", 1, "mat-chip-list-stacked"], ["chipListWash", ""], [3, "selectable", "removable", "removed", 4, "ngFor", "ngForOf"], ["name", "wash", "placeholder", "Add Material to Pattern...", 3, "formControl", "matAutocomplete", "matChipInputFor", "matChipInputSeparatorKeyCodes", "matChipInputTokenEnd"], ["wash", ""], ["auto_wash", "matAutocomplete"], [3, "selectable", "removable", "removed"], [1, "fas", "fa-square-full"], ["mat-mini-fab", "", "matTooltip", "apply this pattern to the weft systems", "color", "primary", "aria-label", "Add Weft Systems Pattern to Weave", 3, "click"], ["aria-label", "Weft System Repeat", 1, "mat-chip-list-stacked"], ["chipListWesy", ""], ["name", "wesy", "placeholder", "Add System to Pattern...", 3, "formControl", "matAutocomplete", "matChipInputFor", "matChipInputSeparatorKeyCodes", "matChipInputTokenEnd"], ["wesy", ""], ["auto_wesy", "matAutocomplete"], ["mat-mini-fab", "", "color", "primary", "matTooltip", "apply this pattern to the weft materials", "aria-label", "Add Weft Materials Pattern to Weave", 3, "click"], ["aria-label", "Weft Material Repeat", 1, "mat-chip-list-stacked"], ["chipListWesh", ""], ["name", "wesh", "placeholder", "Add Shuttle to Pattern...", 3, "formControl", "matAutocomplete", "matChipInputFor", "matChipInputSeparatorKeyCodes", "matChipInputTokenEnd"], ["wesh", ""], ["auto_wesh", "matAutocomplete"]],
  template: function ActionsComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function ActionsComponent_Template_button_click_1_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4, "Apply Repeats");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "mat-dialog-content");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](6, ActionsComponent_div_6_Template, 17, 6, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](7, ActionsComponent_div_7_Template, 17, 6, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](8, ActionsComponent_div_8_Template, 17, 6, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](9, ActionsComponent_div_9_Template, 17, 6, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.ss.warp_systems.length > 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.ms.materials.length > 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.ss.weft_systems.length > 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.ms.materials.length > 1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_5__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_5__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormControlDirective, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_8__.MatAutocomplete, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_8__.MatAutocompleteTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__.MatDialogContent, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__.MatLabel, _angular_material_icon__WEBPACK_IMPORTED_MODULE_12__.MatIcon, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_13__.MatTooltip, _angular_material_chips__WEBPACK_IMPORTED_MODULE_14__.MatChipList, _angular_material_chips__WEBPACK_IMPORTED_MODULE_14__.MatChip, _angular_material_chips__WEBPACK_IMPORTED_MODULE_14__.MatChipInput, _angular_material_chips__WEBPACK_IMPORTED_MODULE_14__.MatChipRemove, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDragHandle],
  styles: [".pattern-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.upload[_ngcontent-%COMP%] {\n  padding: 12px 30px 0px 0px;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n}\n\nmat-chip[_ngcontent-%COMP%] {\n  max-width: 60px;\n}\n\ninput.mat-chip-input[_ngcontent-%COMP%] {\n  flex: 1 0 27px !important;\n}\n\n\n.code[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/actions/actions.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvYWN0aW9ucy9hY3Rpb25zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0MsYUFBQTtFQUNBLG1CQUFBO0FBQ0Q7O0FBRUE7RUFDQywwQkFBQTtBQUNEOztBQUdBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFBSjs7QUFJQTtFQUNFLGVBQUE7QUFERjs7QUFJQTtFQUNDLHlCQUFBO0FBREQ7O0FBSUE7Ozs7O0VBQUE7QUFPQTtFQUNDLG1CQUFBO0FBRkQ7O0FBS0E7O0VBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIucGF0dGVybi1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuXG4udXBsb2FkIHtcbiAgcGFkZGluZzogMTJweCAzMHB4IDBweCAwcHg7XG59XG5cbi50b3Byb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBsaW5lLWhlaWdodDogMWVtO1xufVxuXG5tYXQtY2hpcCB7XG4gIG1heC13aWR0aDogNjBweDtcbn1cblxuaW5wdXQubWF0LWNoaXAtaW5wdXQge1xuICBmbGV4OiAxIDAgMjdweCAhaW1wb3J0YW50O1xufVxuXG4vKi5hZGRzeXN0ZW17XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHBhZGRpbmc6IDVweCAwcHggMHB4IDBweDtcbn0qL1xuLmNvZGUge1xuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xufVxuXG4vKi5tYXQtaW5wdXQtZWxlbWVudHtcblx0cGFkZGluZzogMTBweCAwcHggMHB4IDBweDtcbn0qLyJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 60819:
/*!********************************************************************!*\
  !*** ./src/app/draftdetail/crosssection/crosssection.component.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CrosssectionComponent": () => (/* binding */ CrosssectionComponent)
/* harmony export */ });
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/materials.service */ 2940);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);



class CrosssectionComponent {
  constructor(ms) {
    this.ms = ms;
    this.hasSelection = false;
    this.isInit = false;
  }
  ngAfterViewInit() {}
  onLeaveTab() {}
  updateSelection(draft, start, end) {
    // console.log("Update Selection")
    // if(!this.isInit) return;
    // const topo = getDraftTopology(draft.drawdown);
    // const vtxs = evaluateVerticies(topo.warps, [], 2, 1);
    // console.log("INIT")
    // const renderer = new THREE.WebGLRenderer();
    // const size = 3;
    // const scene = new THREE.Scene();
    // scene.background = new THREE.Color( 0xf0f0f0 );
    // const div = document.getElementById('crosssection_viewer');
    // const camera = new THREE.PerspectiveCamera( 75, (div.offsetWidth/div.offsetHeight), 0.1, 1000 );
    // // light
    // const light = new THREE.DirectionalLight( 0xffffff );
    // light.position.set( 0, 0, 1 );
    // scene.add( light );
    // renderer.setSize(div.offsetWidth, div.offsetHeight);
    // div.appendChild(renderer.domElement);
    // // const geometry = new THREE.BoxGeometry( 1, 1, 1 );
    // // const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
    // // const cube = new THREE.Mesh( geometry, material );
    // vtxs.warps.forEach((warp_vtx_list, j) => {
    //   const pts = [];
    //   warp_vtx_list.forEach(vtx => {
    //     pts.push(new THREE.Vector3(vtx.x, vtx.y, vtx.z));
    //   });
    //   const material_id = draft.colShuttleMapping[j];
    //   const color = this.ms.getColor(material_id)
    //   const curve = new THREE.CatmullRomCurve3(pts, false, 'catmullrom', .5);
    //   const geometry = new THREE.TubeGeometry( curve, 20, size/3, 8, false );
    //   const material = new THREE.MeshMatcapMaterial( {color: color, opacity: 0.84} );
    //   const curveObject = new THREE.Mesh( geometry, material );
    //   scene.add(curveObject);
    // });
    //wefts aligned to wy
    // for(let i = 0; i < end.i - start.i; i++){
    //   const y = i*-size;
    //   const draft_line = draft.drawdown[i+start.i];
    //   const pts = [];
    //   draft_line.forEach((cell, j) => {
    //     let z = cell.getHeddle() ? -size : size;
    //     pts.push(new THREE.Vector3(j*size, y, z));
    //   });
    //   const curve = new THREE.CatmullRomCurve3(pts, false, 'catmullrom', .5);
    //   const geometry = new THREE.TubeGeometry( curve, 20, size/3, 8, false );
    //   const material = new THREE.MeshMatcapMaterial( {opacity: 0.84} );
    //   const curveObject = new THREE.Mesh( geometry, material );
    //    scene.add(curveObject);
    // }
    // camera.position.set( 20, 0, 50 );
    // camera.lookAt( 20, 0, 0 );  
    // animate();
    // function animate() {
    //   requestAnimationFrame( animate );
    //   //  line.rotation.x += 0.01;
    //   //  line.rotation.y += 0.01;
    //   renderer.render( scene, camera );
    // }
  }
  onDraftUpdated(draft, start, end) {}
  initScene() {
    this.isInit = true;
  }
  redraw() {}
}
CrosssectionComponent.ɵfac = function CrosssectionComponent_Factory(t) {
  return new (t || CrosssectionComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_0__.MaterialsService));
};
CrosssectionComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: CrosssectionComponent,
  selectors: [["app-crosssection"]],
  decls: 1,
  vars: 0,
  consts: [["id", "crosssection_viewer"]],
  template: function CrosssectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 0);
    }
  },
  styles: ["#crosssection_viewer[_ngcontent-%COMP%] {\n  display: block;\n  width: 100%;\n  min-height: 400px;\n  height: 100%;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/crosssection/crosssection.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvY3Jvc3NzZWN0aW9uL2Nyb3Nzc2VjdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxZQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIjY3Jvc3NzZWN0aW9uX3ZpZXdlciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogNDAwcHg7XG4gIGhlaWdodDogMTAwJTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 8842:
/*!******************************************************!*\
  !*** ./src/app/draftdetail/draftdetail.component.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DraftDetailComponent": () => (/* binding */ DraftDetailComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/model/drafts */ 1435);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/model/looms */ 58364);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider/render.service */ 78793);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/provider/file.service */ 96374);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/provider/tree.service */ 6177);
/* harmony import */ var _core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/provider/workspace.service */ 80828);
/* harmony import */ var _draftviewer_draftviewer_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./draftviewer/draftviewer.component */ 89570);
/* harmony import */ var _sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sidebar/sidebar.component */ 62262);
/* harmony import */ var _crosssection_crosssection_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./crosssection/crosssection.component */ 60819);
/* harmony import */ var _simulation_simulation_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./simulation/simulation.component */ 59300);
/* harmony import */ var _core_model_cell__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/model/cell */ 94467);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/cdk/overlay */ 76328);
































class DraftDetailComponent {
  /// ANGULAR FUNCTIONS
  /**
   * @constructor
   * ps - pattern service (variable name is initials). Subscribes to the patterns and used
   * to get and update stitches.
   * dialog - Anglar Material dialog module. Used to control the popup modals.
   */
  constructor(dialog, fs, dm, scroll, ms, ss, ws, tree, render) {
    this.dialog = dialog;
    this.fs = fs;
    this.dm = dm;
    this.scroll = scroll;
    this.ms = ms;
    this.ss = ss;
    this.ws = ws;
    this.tree = tree;
    this.render = render;
    this.closeDrawer = new _angular_core__WEBPACK_IMPORTED_MODULE_15__.EventEmitter();
    this.id = -1;
    this.collapsed = false;
    this.unsubscribe$ = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Subject();
    this.warp_locked = false;
    this.layer_threshold = 2;
    this.warp_threshold = 3;
    this.layer_spacing = 10;
    this.sim_expanded = false;
    this.viewer_expanded = false;
    this.clone_id = -1;
    this.scrollingSubscription = this.scroll.scrolled().subscribe(data => {
      this.onWindowScroll(data);
    });
    this.copy = [[(0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.createCell)(false)]];
    this.dm.selectDesignMode('draw', 'design_modes');
    this.dm.selectDesignMode('toggle', 'draw_modes');
  }
  onWindowScroll(data) {
    const scrollTop = data.measureScrollOffset("top");
    const scrollLeft = data.measureScrollOffset("left");
    this.weaveRef.reposition(scrollTop, scrollLeft);
  }
  ngOnInit() {}
  ngAfterViewInit() {}
  tabChange(event) {
    // if(event.index == 2){
    //   this.crosssection.initScene();
    // }
  }
  expandSimulation() {
    this.sim_expanded = !this.sim_expanded;
    if (this.sim_expanded) {
      const sbdiv = document.getElementById('sidebar');
      sbdiv.style.display = 'none';
      const dvdiv = document.getElementById('draft_viewer');
      dvdiv.style.display = 'none';
    } else {
      const sbdiv = document.getElementById('sidebar');
      sbdiv.style.display = 'flex';
      const dvdiv = document.getElementById('draft_viewer');
      dvdiv.style.display = 'flex';
    }
  }
  expandViewer() {
    this.viewer_expanded = !this.viewer_expanded;
    if (this.viewer_expanded) {
      const dvdiv = document.getElementById('simulation_container');
      dvdiv.style.display = 'none';
    } else {
      const dvdiv = document.getElementById('simulation_container');
      dvdiv.style.display = 'flex';
    }
  }
  /**
   * create a new object
   * @param id
   */
  loadDraft(id) {
    if (!this.tree.hasParent(id)) {
      this.id = id;
      this.clone_id = -1;
      this.draft = this.tree.getDraft(id);
      this.loom = this.tree.getLoom(id);
      this.loom_settings = this.tree.getLoomSettings(id);
      this.viewonly = this.tree.hasParent(id);
      this.render.loadNewDraft(this.draft);
      this.weaveRef.onNewDraftLoaded(this.draft, this.loom, this.loom_settings);
      this.simRef.drawSimulation(this.draft, this.loom_settings);
    } else {
      this.clone_id = id;
      const newid = this.tree.createNode('draft', null, null);
      let d = this.tree.getDraft(id);
      this.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.copyDraft)(d);
      this.draft.id = newid;
      this.id = newid;
      const loom_settings = this.tree.getLoomSettings(id);
      this.id = this.draft.id;
      this.loom_settings = {
        type: loom_settings.type,
        epi: loom_settings.epi,
        units: loom_settings.units,
        frames: loom_settings.frames,
        treadles: loom_settings.treadles
      };
      this.loom = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.copyLoom)(this.tree.getLoom(id));
      return this.tree.loadDraftData({
        prev_id: -1,
        cur_id: this.id
      }, this.draft, this.loom, this.loom_settings, false).then(d => {
        this.viewonly = this.tree.hasParent(id);
        this.render.loadNewDraft(this.draft);
        this.weaveRef.onNewDraftLoaded(this.draft, this.loom, this.loom_settings);
        this.simRef.drawSimulation(this.draft, this.loom_settings);
      });
    }
  }
  windowClosed() {
    this.draft = null;
    this.id = null;
    this.loom_settings = null;
    this.simRef.endSimulation();
  }
  ngOnDestroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
    this.simRef.endSimulation();
  }
  closeAllModals() {
    this.sidebar.closeWeaverModals();
  }
  /**
   * Updates the canvas based on the weave view.
   * @extends WeaveComponent
   * @param {Event} e - view change event from design component.
   * @returns {void}
   */
  viewChange(value) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getDraft(this.id);
    this.dm.selectDesignMode(value, 'view_modes');
    this.render.setCurrentView(value);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true
    });
  }
  onCloseDrawer() {
    this.closeDrawer.emit({
      id: this.id,
      clone_id: this.clone_id,
      dirty: this.weaveRef.is_dirty
    });
  }
  /**
   * Change the name of the brush to reflect selected brush.
   * @extends WeaveComponent
   * @param {Event} e - brush change event from design component.
   * @returns {void}
   */
  designModeChange(e) {
    this.weaveRef.unsetSelection();
  }
  redrawSimulation(e) {
    let draft = this.tree.getDraft(this.id);
    let loom_settings = this.tree.getLoomSettings(this.id);
    this.simRef.updateSimulation(draft, loom_settings);
  }
  onScroll() {}
  /**
   * Weave reference masks pattern over selected area.
   * @extends WeaveComponent
   * @param {Event} e - mask event from design component.
   * @returns {void}
   */
  onMask(e) {
    // console.log(e);
    // var p = this.draft.patterns[e.id].pattern;
    // this.weaveRef.maskArea(p);
    // this.redraw();
  }
  /// PUBLIC FUNCTIONS
  /**
   *
   * @extends WeaveComponent
   * @returns {void}
   */
  print(e) {
    console.log(e);
  }
  /**
   */
  materialChange() {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      warp_materials: true,
      weft_materials: true
    });
    //this.timeline.addHistoryState(this.draft);
  }
  /**
   * Inserts an empty row on system, system
   */
  shuttleColorChange() {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      warp_materials: true,
      weft_materials: true
    });
    // this.timeline.addHistoryState(this.draft);
  }

  updateWarpSystems(pattern) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(draft.drawdown, pattern, 'col', this.ws.selected_origin_option);
    this.tree.setDraftOnly(this.id, draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      warp_systems: true
    });
  }
  updateWeftSystems(pattern) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(draft.drawdown, pattern, 'row', this.ws.selected_origin_option);
    this.tree.setDraftOnly(this.id, draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      weft_systems: true
    });
  }
  updateWarpShuttles(pattern) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(draft.drawdown, pattern, 'col', this.ws.selected_origin_option);
    this.tree.setDraftOnly(this.id, draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      warp_materials: true
    });
  }
  updateWeftShuttles(pattern) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.generateMappingFromPattern)(draft.drawdown, pattern, 'row', this.ws.selected_origin_option);
    this.tree.setDraftOnly(this.id, draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      weft_materials: true
    });
  }
  createShuttle(e) {
    this.ms.addShuttle(e.shuttle);
  }
  // public createWarpSystem(e: any) {
  //   this.draft.addWarpSystem(e.system);
  // }
  // public createWeftSystem(e: any) {
  //   this.draft.addWarpSystem(e.system);
  // }
  hideWarpSystem(e) {
    //this.weaveRef.redraw({drawdown: true, loom:true, warp_systems: true, warp_materials:true});
  }
  showWarpSystem(e) {
    // this.weaveRef.redraw({drawdown: true, loom:true, warp_systems: true, warp_materials:true});
  }
  hideWeftSystem(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.render.updateVisible(draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      loom: true,
      weft_systems: true,
      weft_materials: true
    });
  }
  showWeftSystem(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.render.updateVisible(draft);
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      loom: true,
      weft_systems: true,
      weft_materials: true
    });
  }
  redrawLoomAndDraft() {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.render.updateVisible(draft);
    const is_frame = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.isFrame)(loom_settings);
    if (is_frame) {
      this.weaveRef.isFrame = true;
    } else {
      this.weaveRef.isFrame = false;
    }
    this.weaveRef.colShuttleMapping = draft.colShuttleMapping.slice();
    this.weaveRef.rowShuttleMapping = draft.rowShuttleMapping.slice();
    this.weaveRef.redraw(draft, loom, loom_settings, {
      drawdown: true,
      loom: true,
      warp_systems: true,
      warp_materials: true,
      weft_systems: true,
      weft_materials: true
    });
  }
  /**
   * when a change happens to the defaults for looms, we must update all looms on screen
   */
  globalLoomChange(e) {
    const dn = this.tree.getDraftNodes();
    dn.forEach(node => {
      const draft = this.tree.getDraft(node.id);
      const loom = this.tree.getLoom(node.id);
      const loom_settings = this.tree.getLoomSettings(node.id);
      node.component.drawDraft(draft);
      if (node.id == this.id) {
        this.weaveRef.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          weft_systems: true,
          warp_materials: true,
          weft_materials: true
        });
      }
    });
  }
  notesChanged(e) {
    //   console.log(e);
    //  this.draft.notes = e;
  }
  // public hideShuttle(e:any) {
  //   this.draft.updateVisible();
  //   this.weaveRef.redraw();
  //   this.weaveRef.redrawLoom();
  // }
  // public showShuttle(e:any) {
  //   this.draft.updateVisible();
  //   this.weaveRef.redraw();
  //   this.weaveRef.redrawLoom();
  // }
  updateSelection(e) {
    if (e.copy !== undefined) this.copy = e;
    if (e.id !== undefined) this.simRef.updateSelection(e.start, e.end);
  }
  renderChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (e.source === "slider") {
      this.render.setZoom(e.value);
      this.weaveRef.rescale(this.render.getZoom());
    }
    if (e.source === "in") {
      this.render.zoomIn();
      this.weaveRef.rescale(this.render.getZoom());
    }
    if (e.source === "out") {
      this.render.zoomOut();
      this.weaveRef.rescale(this.render.getZoom());
    }
    if (e.source === "front") {
      this.render.setFront(!e.checked);
      this.weaveRef.flip();
      this.weaveRef.redraw(draft, loom, loom_settings, {
        drawdown: true
      });
    }
  }
  toggleCollapsed() {
    this.collapsed = !this.collapsed;
  }
  /**
    *
    * tranfers on save from header to draft viewer
    */
  onSave(e) {
    this.weaveRef.onSave(e);
  }
  //HELPER FUNCTIONS TO AID VARIABLES CALLED FROM HTML
  layerThresholdChange() {
    console.log("layer threshold", this.layer_threshold);
    this.simRef.changeLayerThreshold(this.layer_threshold);
  }
  warpThresholdChange() {
    console.log("this.warp threshold", this.warp_threshold);
    this.simRef.changeWarpThreshold(this.warp_threshold);
  }
}
DraftDetailComponent.ɵfac = function DraftDetailComponent_Factory(t) {
  return new (t || DraftDetailComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_17__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_5__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_4__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_18__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_6__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_7__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_9__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_8__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_provider_render_service__WEBPACK_IMPORTED_MODULE_3__.RenderService));
};
DraftDetailComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdefineComponent"]({
  type: DraftDetailComponent,
  selectors: [["app-draftdetail"]],
  viewQuery: function DraftDetailComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_draftviewer_draftviewer_component__WEBPACK_IMPORTED_MODULE_10__.DraftviewerComponent, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_simulation_simulation_component__WEBPACK_IMPORTED_MODULE_13__.SimulationComponent, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_11__.SidebarComponent, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_crosssection_crosssection_component__WEBPACK_IMPORTED_MODULE_12__.CrosssectionComponent, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.weaveRef = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.simRef = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.sidebar = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.crosssection = _t.first);
    }
  },
  outputs: {
    closeDrawer: "closeDrawer"
  },
  decls: 6,
  vars: 4,
  consts: [["id", "expanded-container", 1, "design-container"], ["id", "sidebar", 3, "onDesignModeChange", "onZoomChange", "onViewChange", "onViewFront", "onHideWeftSystem", "onShowWeftSystem", "onHideWarpSystem", "onShowWarpSystem", "onGlobalLoomChange", "onLocalLoomNeedsRedraw", "onUpdateWarpSystems", "onUpdateWeftSystems", "onUpdateWarpShuttles", "onUpdateWeftShuttles", "closeDrawer"], ["sidebar", ""], [1, "viewers"], ["id", "draft_viewer", "source", "weaver", 3, "id", "onNewSelection", "onDrawdownUpdated", "onViewerExpanded"], [2, "width", "50%", 3, "id", "onExpanded"]],
  template: function DraftDetailComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 0)(1, "app-sidebar", 1, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onDesignModeChange", function DraftDetailComponent_Template_app_sidebar_onDesignModeChange_1_listener($event) {
        return ctx.designModeChange($event);
      })("onZoomChange", function DraftDetailComponent_Template_app_sidebar_onZoomChange_1_listener($event) {
        return ctx.renderChange($event);
      })("onViewChange", function DraftDetailComponent_Template_app_sidebar_onViewChange_1_listener($event) {
        return ctx.viewChange($event);
      })("onViewFront", function DraftDetailComponent_Template_app_sidebar_onViewFront_1_listener($event) {
        return ctx.renderChange($event);
      })("onHideWeftSystem", function DraftDetailComponent_Template_app_sidebar_onHideWeftSystem_1_listener($event) {
        return ctx.hideWeftSystem($event);
      })("onShowWeftSystem", function DraftDetailComponent_Template_app_sidebar_onShowWeftSystem_1_listener($event) {
        return ctx.showWeftSystem($event);
      })("onHideWarpSystem", function DraftDetailComponent_Template_app_sidebar_onHideWarpSystem_1_listener($event) {
        return ctx.hideWarpSystem($event);
      })("onShowWarpSystem", function DraftDetailComponent_Template_app_sidebar_onShowWarpSystem_1_listener($event) {
        return ctx.showWarpSystem($event);
      })("onGlobalLoomChange", function DraftDetailComponent_Template_app_sidebar_onGlobalLoomChange_1_listener($event) {
        return ctx.globalLoomChange($event);
      })("onLocalLoomNeedsRedraw", function DraftDetailComponent_Template_app_sidebar_onLocalLoomNeedsRedraw_1_listener() {
        return ctx.redrawLoomAndDraft();
      })("onUpdateWarpSystems", function DraftDetailComponent_Template_app_sidebar_onUpdateWarpSystems_1_listener($event) {
        return ctx.updateWarpSystems($event);
      })("onUpdateWeftSystems", function DraftDetailComponent_Template_app_sidebar_onUpdateWeftSystems_1_listener($event) {
        return ctx.updateWeftSystems($event);
      })("onUpdateWarpShuttles", function DraftDetailComponent_Template_app_sidebar_onUpdateWarpShuttles_1_listener($event) {
        return ctx.updateWarpShuttles($event);
      })("onUpdateWeftShuttles", function DraftDetailComponent_Template_app_sidebar_onUpdateWeftShuttles_1_listener($event) {
        return ctx.updateWeftShuttles($event);
      })("closeDrawer", function DraftDetailComponent_Template_app_sidebar_closeDrawer_1_listener() {
        return ctx.onCloseDrawer();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](3, "div", 3)(4, "app-draftviewer", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onNewSelection", function DraftDetailComponent_Template_app_draftviewer_onNewSelection_4_listener($event) {
        return ctx.updateSelection($event);
      })("onDrawdownUpdated", function DraftDetailComponent_Template_app_draftviewer_onDrawdownUpdated_4_listener($event) {
        return ctx.redrawSimulation($event);
      })("onViewerExpanded", function DraftDetailComponent_Template_app_draftviewer_onViewerExpanded_4_listener() {
        return ctx.expandViewer();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](5, "app-simulation", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onExpanded", function DraftDetailComponent_Template_app_simulation_onExpanded_5_listener() {
        return ctx.expandSimulation();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵclassProp"]("expanded", ctx.viewer_expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", ctx.id);
    }
  },
  dependencies: [_draftviewer_draftviewer_component__WEBPACK_IMPORTED_MODULE_10__.DraftviewerComponent, _sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_11__.SidebarComponent, _simulation_simulation_component__WEBPACK_IMPORTED_MODULE_13__.SimulationComponent],
  styles: ["a.help[_ngcontent-%COMP%] {\n  width: 80% !important;\n  margin: 10%;\n  border: thin solid #ff4081 !important;\n  color: #ff4081;\n  padding: 8px;\n  text-align: center;\n}\n\n.viewers[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.design-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n}\n\n.detail_data[_ngcontent-%COMP%] {\n  width: 100%;\n  min-height: 33vh;\n  padding: 18px;\n}\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n\n#draft_viewer[_ngcontent-%COMP%] {\n  min-width: 50%;\n  margin: auto;\n  height: 100%;\n}\n\n#draft_viewer.expanded[_ngcontent-%COMP%] {\n  min-width: 100%;\n  margin: auto;\n  display: flex;\n  flex-direction: row-reverse;\n  height: 100%;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/draftdetail.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvZHJhZnRkZXRhaWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxxQkFBQTtFQUNBLFdBQUE7RUFDQSxxQ0FBQTtFQUNBLGNBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFDSjs7QUFHQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7QUFBSjs7QUFHQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FBQUo7O0FBR0E7RUFDSSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0FBQUo7O0FBS0E7RUFDSSxXQUFBO0FBRko7O0FBS0E7RUFDSSxjQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7QUFGSjs7QUFLQTtFQUNJLGVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtBQUZKIiwic291cmNlc0NvbnRlbnQiOlsiYS5oZWxwIHtcbiAgd2lkdGg6IDgwJSAhaW1wb3J0YW50O1xuICBtYXJnaW46IDEwJTtcbiAgYm9yZGVyOiB0aGluIHNvbGlkICNmZjQwODEgIWltcG9ydGFudDtcbiAgY29sb3I6ICNmZjQwODE7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4udmlld2VycyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZGVzaWduLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5kZXRhaWxfZGF0YSB7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiAzM3ZoO1xuICBwYWRkaW5nOiAxOHB4O1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuI2RyYWZ0X3ZpZXdlciB7XG4gIG1pbi13aWR0aDogNTAlO1xuICBtYXJnaW46IGF1dG87XG4gIGhlaWdodDogMTAwJTtcbn1cblxuI2RyYWZ0X3ZpZXdlci5leHBhbmRlZCB7XG4gIG1pbi13aWR0aDogMTAwJTtcbiAgbWFyZ2luOiBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gIGhlaWdodDogMTAwJTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 68073:
/*!***************************************************!*\
  !*** ./src/app/draftdetail/draftdetail.module.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DraftDetailModule": () => (/* binding */ DraftDetailModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/autocomplete */ 88550);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/button-toggle */ 19837);
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/material/slide-toggle */ 84714);
/* harmony import */ var _angular_material_card__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/card */ 82156);
/* harmony import */ var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/checkbox */ 44792);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/material/divider */ 71528);
/* harmony import */ var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/expansion */ 17591);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/material/icon */ 57822);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_list__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/list */ 6517);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_radio__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/material/radio */ 52922);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/sidenav */ 16643);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/material/tabs */ 15892);
/* harmony import */ var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @angular/material/toolbar */ 52543);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var ngx_color_picker__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ngx-color-picker */ 18251);
/* harmony import */ var _angular_material_chips__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/material/chips */ 11169);
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/cdk/scrolling */ 76328);
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.module */ 40294);
/* harmony import */ var _draftdetail_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./draftdetail.component */ 8842);
/* harmony import */ var _crosssection_crosssection_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crosssection/crosssection.component */ 60819);
/* harmony import */ var _draftviewer_draftviewer_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./draftviewer/draftviewer.component */ 89570);
/* harmony import */ var _actions_actions_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/actions.component */ 53040);
/* harmony import */ var _weaverview_weaverview_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./weaverview/weaverview.component */ 53295);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider/render.service */ 78793);
/* harmony import */ var _sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sidebar/sidebar.component */ 62262);
/* harmony import */ var _draftviewer_selection_selection_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./draftviewer/selection/selection.component */ 18423);
/* harmony import */ var _simulation_simulation_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./simulation/simulation.component */ 59300);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 22560);





































class DraftDetailModule {}
DraftDetailModule.ɵfac = function DraftDetailModule_Factory(t) {
  return new (t || DraftDetailModule)();
};
DraftDetailModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: DraftDetailModule
});
DraftDetailModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [_provider_render_service__WEBPACK_IMPORTED_MODULE_6__.RenderService],
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.CommonModule, _core_core_module__WEBPACK_IMPORTED_MODULE_0__.CoreModule, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_13__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_14__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_15__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_16__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_17__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_18__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_20__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_21__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_22__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_23__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_24__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_25__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_26__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_27__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_28__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_29__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_30__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_31__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_32__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_33__.MatTooltipModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_34__.ColorPickerModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_35__.MatChipsModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_36__.ScrollingModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵsetNgModuleScope"](DraftDetailModule, {
    declarations: [_draftdetail_component__WEBPACK_IMPORTED_MODULE_1__.DraftDetailComponent, _crosssection_crosssection_component__WEBPACK_IMPORTED_MODULE_2__.CrosssectionComponent, _draftviewer_draftviewer_component__WEBPACK_IMPORTED_MODULE_3__.DraftviewerComponent, _actions_actions_component__WEBPACK_IMPORTED_MODULE_4__.ActionsComponent, _weaverview_weaverview_component__WEBPACK_IMPORTED_MODULE_5__.WeaverViewComponent, _sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_7__.SidebarComponent, _draftviewer_selection_selection_component__WEBPACK_IMPORTED_MODULE_8__.SelectionComponent, _simulation_simulation_component__WEBPACK_IMPORTED_MODULE_9__.SimulationComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.CommonModule, _core_core_module__WEBPACK_IMPORTED_MODULE_0__.CoreModule, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.ReactiveFormsModule, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_13__.MatAutocompleteModule, _angular_material_button__WEBPACK_IMPORTED_MODULE_14__.MatButtonModule, _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_15__.MatButtonToggleModule, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_16__.MatSlideToggleModule, _angular_material_card__WEBPACK_IMPORTED_MODULE_17__.MatCardModule, _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_18__.MatCheckboxModule, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_19__.MatDialogModule, _angular_material_divider__WEBPACK_IMPORTED_MODULE_20__.MatDividerModule, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_21__.MatExpansionModule, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_22__.MatFormFieldModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_23__.MatIconModule, _angular_material_input__WEBPACK_IMPORTED_MODULE_24__.MatInputModule, _angular_material_list__WEBPACK_IMPORTED_MODULE_25__.MatListModule, _angular_material_menu__WEBPACK_IMPORTED_MODULE_26__.MatMenuModule, _angular_material_radio__WEBPACK_IMPORTED_MODULE_27__.MatRadioModule, _angular_material_select__WEBPACK_IMPORTED_MODULE_28__.MatSelectModule, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_29__.MatSidenavModule, _angular_material_slider__WEBPACK_IMPORTED_MODULE_30__.MatSliderModule, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_31__.MatTabsModule, _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_32__.MatToolbarModule, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_33__.MatTooltipModule, ngx_color_picker__WEBPACK_IMPORTED_MODULE_34__.ColorPickerModule, _angular_material_chips__WEBPACK_IMPORTED_MODULE_35__.MatChipsModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_36__.ScrollingModule],
    exports: [_draftdetail_component__WEBPACK_IMPORTED_MODULE_1__.DraftDetailComponent]
  });
})();

/***/ }),

/***/ 89570:
/*!******************************************************************!*\
  !*** ./src/app/draftdetail/draftviewer/draftviewer.component.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DraftviewerComponent": () => (/* binding */ DraftviewerComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ 36312);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/model/datatypes */ 86789);
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/file.service */ 96374);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_state_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/provider/state.service */ 99938);
/* harmony import */ var _core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/provider/workspace.service */ 80828);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/model/drafts */ 1435);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/model/looms */ 58364);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/provider/tree.service */ 6177);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/model/util */ 75973);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/provider/operation.service */ 46524);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../provider/render.service */ 78793);
/* harmony import */ var _selection_selection_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./selection/selection.component */ 18423);
/* harmony import */ var _core_model_cell__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/model/cell */ 94467);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/model/defaults */ 45286);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/material/slide-toggle */ 84714);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/select */ 57371);





































const _c0 = ["bitmapImage"];
const _c1 = ["selection"];
function DraftviewerComponent_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](0, "i", 22);
  }
}
function DraftviewerComponent_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](0, "i", 23);
  }
}
function DraftviewerComponent_div_10_span_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const j_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).index;
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](j_r11);
  }
}
function DraftviewerComponent_div_10_span_5_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const j_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).index;
    const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r17.getFlippedWarpNum(j_r11));
  }
}
function DraftviewerComponent_div_10_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](1, DraftviewerComponent_div_10_span_5_ng_container_1_Template, 2, 1, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](2, DraftviewerComponent_div_10_span_5_ng_container_2_Template, 2, 1, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("warp_number origin", ctx_r12.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r12.ws.selected_origin_option == 2 || ctx_r12.ws.selected_origin_option == 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r12.ws.selected_origin_option == 0 || ctx_r12.ws.selected_origin_option == 1);
  }
}
function DraftviewerComponent_div_10_span_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_10_span_7_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r22);
      const j_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().index;
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r20.deleteCol(j_r11));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_10_span_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_10_span_8_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r25);
      const j_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().index;
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r23.cloneCol(j_r11));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_10_span_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_10_span_9_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r28);
      const j_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().index;
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r26.insertCol(j_r11 + 1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r30 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div")(1, "a", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_10_Template_a_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r30);
      const j_r11 = restoredCtx.index;
      const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r29.incrementWarpMaterial(j_r11));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](2, "a", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_10_Template_a_click_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r30);
      const j_r11 = restoredCtx.index;
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r31.incrementWarpSystem(j_r11));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](4, "div", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](5, DraftviewerComponent_div_10_span_5_Template, 3, 5, "span", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](6, "div", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](7, DraftviewerComponent_div_10_span_7_Template, 2, 0, "span", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](8, DraftviewerComponent_div_10_span_8_Template, 2, 0, "span", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](9, DraftviewerComponent_div_10_span_9_Template, 2, 0, "span", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const i_r10 = ctx.$implicit;
    const j_r11 = ctx.index;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("warp-system-col origin", ctx_r3.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("width", ctx_r3.cell_size, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("background-color", ctx_r3.ms.getColor(ctx_r3.colShuttleMapping[j_r11]))("width", ctx_r3.cell_size - 1, "px")("height", ctx_r3.cell_size - 1, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"](" ", i_r10 + 1, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", j_r11 % (ctx_r3.render == null ? null : ctx_r3.render.getTextInterval()) == 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r3.viewonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r3.viewonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r3.viewonly);
  }
}
function DraftviewerComponent_div_23_ng_container_5_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const j_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).index;
    const ctx_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("weft_number origin", ctx_r39.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r39.getFlippedWeftNum(j_r33));
  }
}
function DraftviewerComponent_div_23_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](1, DraftviewerComponent_div_23_ng_container_5_span_1_Template, 2, 4, "span", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const i_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().$implicit;
    const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", i_r32 % (ctx_r34.render == null ? null : ctx_r34.render.getTextInterval()) == 0);
  }
}
function DraftviewerComponent_div_23_ng_container_6_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const j_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).index;
    const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("weft_number origin", ctx_r42.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](j_r33);
  }
}
function DraftviewerComponent_div_23_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](1, DraftviewerComponent_div_23_ng_container_6_span_1_Template, 2, 4, "span", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const i_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().$implicit;
    const ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", i_r32 % (ctx_r35.render == null ? null : ctx_r35.render.getTextInterval()) == 0);
  }
}
function DraftviewerComponent_div_23_span_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r47 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 46);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_23_span_8_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r47);
      const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      const j_r33 = ctx_r46.index;
      const i_r32 = ctx_r46.$implicit;
      const ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r45.insertRow(j_r33, i_r32));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_23_span_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r50 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_23_span_9_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r50);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      const j_r33 = ctx_r49.index;
      const i_r32 = ctx_r49.$implicit;
      const ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r48.cloneRow(j_r33, i_r32));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_23_span_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r53 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 48);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_23_span_10_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r53);
      const i_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().$implicit;
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r51.deleteRow(i_r32));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](1, "i", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function DraftviewerComponent_div_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r55 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div")(1, "a", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_23_Template_a_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r55);
      const j_r33 = restoredCtx.index;
      const ctx_r54 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r54.incrementWeftMaterial(j_r33));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](2, "a", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_23_Template_a_click_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r55);
      const j_r33 = restoredCtx.index;
      const ctx_r56 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r56.incrementWeftSystem(j_r33));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](4, "div", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](5, DraftviewerComponent_div_23_ng_container_5_Template, 2, 1, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](6, DraftviewerComponent_div_23_ng_container_6_Template, 2, 1, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](7, "div", 42);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](8, DraftviewerComponent_div_23_span_8_Template, 2, 0, "span", 43);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](9, DraftviewerComponent_div_23_span_9_Template, 2, 0, "span", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](10, DraftviewerComponent_div_23_span_10_Template, 2, 0, "span", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const i_r32 = ctx.$implicit;
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("weft-system-row origin", ctx_r7.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("height", ctx_r7.cell_size, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("background-color", ctx_r7.ms.getColor(ctx_r7.rowShuttleMapping[i_r32]))("width", ctx_r7.cell_size - 1, "px")("height", ctx_r7.cell_size - 1, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"](" ", ctx_r7.system_codes[ctx_r7.rowSystemMapping[i_r32]], "");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r7.ws.selected_origin_option == 1 || ctx_r7.ws.selected_origin_option == 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r7.ws.selected_origin_option == 0 || ctx_r7.ws.selected_origin_option == 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r7.viewonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r7.viewonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx_r7.viewonly);
  }
}
function DraftviewerComponent_div_26_mat_option_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "mat-option", 66);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const loomtype_r64 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("value", loomtype_r64.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"](" ", loomtype_r64.viewValue, " ");
  }
}
function DraftviewerComponent_div_26_mat_option_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "mat-option", 66);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const unit_r65 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("value", unit_r65.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"](" ", unit_r65.viewValue, " ");
  }
}
function DraftviewerComponent_div_26_ng_container_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](1, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "ends / 10cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
}
function DraftviewerComponent_div_26_ng_container_23_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](1, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "epi");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
}
function DraftviewerComponent_div_26_ng_container_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](1, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "inches");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
}
function DraftviewerComponent_div_26_ng_container_27_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](1, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementContainerEnd"]();
  }
}
function DraftviewerComponent_div_26_Template(rf, ctx) {
  if (rf & 1) {
    const _r67 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 49)(1, "div", 50)(2, "form", 51, 52)(4, "mat-form-field", 53)(5, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](6, "Loom Type");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](7, "mat-select", 54);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("selectionChange", function DraftviewerComponent_div_26_Template_mat_select_selectionChange_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r66 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r66.loomChange(_r57));
    })("valueChange", function DraftviewerComponent_div_26_Template_mat_select_valueChange_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r68 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r68.loom_settings.type = $event);
    })("ngModelChange", function DraftviewerComponent_div_26_Template_mat_select_ngModelChange_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r69 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r69.loom_settings.type = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](8, DraftviewerComponent_div_26_mat_option_8_Template, 2, 2, "mat-option", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](9, "mat-form-field", 53)(10, "input", 56);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_10_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r70 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r70.warps = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r71 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r71.warpChange(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r72 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r72.warpChange(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](11, "mat-form-field", 53)(12, "input", 57);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r73 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r73.wefts = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_12_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r74 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r74.weftChange(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_12_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r75 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r75.weftChange(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](13, "mat-form-field", 53)(14, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](15, "Density Units");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](16, "mat-select", 58);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("valueChange", function DraftviewerComponent_div_26_Template_mat_select_valueChange_16_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r76 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r76.units = $event);
    })("ngModelChange", function DraftviewerComponent_div_26_Template_mat_select_ngModelChange_16_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r77 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r77.loom_settings.units = $event);
    })("selectionChange", function DraftviewerComponent_div_26_Template_mat_select_selectionChange_16_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r78 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r78.unitChange(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](17, DraftviewerComponent_div_26_mat_option_17_Template, 2, 2, "mat-option", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](18, "mat-form-field", 53)(19, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](20, "Density");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](21, "input", 59);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_21_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r79 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r79.loom_settings.epi = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_21_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r80 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r80.epiChange(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_21_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r81 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r81.epiChange(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](22, DraftviewerComponent_div_26_ng_container_22_Template, 3, 0, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](23, DraftviewerComponent_div_26_ng_container_23_Template, 3, 0, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](24, "mat-form-field", 53)(25, "input", 60);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_25_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r82 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r82.width = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_25_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r83 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r83.widthChange(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_25_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r84 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r84.widthChange(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](26, DraftviewerComponent_div_26_ng_container_26_Template, 3, 0, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](27, DraftviewerComponent_div_26_ng_container_27_Template, 3, 0, "ng-container", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](28, "mat-form-field", 53)(29, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](30, "Number of Frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](31, "input", 61);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_31_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r85 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r85.frames = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_31_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r86 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r86.updateMinFrames(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_31_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r87 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r87.updateMinFrames(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](32, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](33, "frames");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](34, "mat-form-field", 53)(35, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](36, "Number of Treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](37, "input", 63);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("ngModelChange", function DraftviewerComponent_div_26_Template_input_ngModelChange_37_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r88 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r88.treadles = $event);
    })("change", function DraftviewerComponent_div_26_Template_input_change_37_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r89 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r89.updateMinTreadles(_r57));
    })("blur", function DraftviewerComponent_div_26_Template_input_blur_37_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵreference"](3);
      const ctx_r90 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r90.updateMinTreadles(_r57));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](38, "span", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](39, "treadles");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](40, "div", 64)(41, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](42, "Editing Mode: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](43, "mat-slide-toggle", 65);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_div_26_Template_mat_slide_toggle_click_43_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r67);
      const ctx_r91 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r91.swapEditingStyle());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](44, "div")(45, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](46);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("display", ctx_r9.expanded ? "flex" : "none");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("value", ctx_r9.loom_settings.type)("ngModel", ctx_r9.loom_settings.type);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngForOf", ctx_r9.loomtypes);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngModel", ctx_r9.warps);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngModel", ctx_r9.wefts);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("value", ctx_r9.units)("ngModel", ctx_r9.loom_settings.units);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngForOf", ctx_r9.density_units);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngModel", ctx_r9.loom_settings.epi);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r9.loom_settings.units === "cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r9.loom_settings.units == "in");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngModel", ctx_r9.width);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r9.loom_settings.units === "in");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx_r9.loom_settings.units === "cm");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("disabled", ctx_r9.loom_settings.type == "jacquard")("ngModel", ctx_r9.frames);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("disabled", ctx_r9.loom_settings.type == "jacquard")("ngModel", ctx_r9.treadles);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("disabled", ctx_r9.loom_settings.type == "jacquard");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r9.dm.getSelectedDesignMode("drawdown_editing_style").viewValue);
  }
}
class DraftviewerComponent {
  /// ANGULAR FUNCTIONS
  /**
   * Creates the element reference.
   * @constructor
   */
  constructor(fs, dm, ms, ss, ws, timeline, tree, ops, render) {
    this.fs = fs;
    this.dm = dm;
    this.ms = ms;
    this.ss = ss;
    this.ws = ws;
    this.timeline = timeline;
    this.tree = tree;
    this.ops = ops;
    this.render = render;
    this.id = -1;
    this.onNewSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onDrawdownUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onViewerExpanded = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.hold_copy_for_paste = false;
    //store this here as you need it to draw the view
    this.colShuttleMapping = [];
    this.rowShuttleMapping = [];
    this.colSystemMapping = [];
    this.rowSystemMapping = [];
    this.is_dirty = false;
    this.unsubscribe$ = new rxjs__WEBPACK_IMPORTED_MODULE_17__.Subject();
    this.loomtypes = [];
    this.density_units = [];
    /** VIEW OPTIONS */
    this.expanded = false;
    this.cell_size = 10;
    this.system_codes = [];
    this.flag_recompute = false;
    this.flag_history = false;
    this.loomtypes = dm.getOptionSet('loom_types');
    this.density_units = dm.getOptionSet('density_units');
    this.cell_size = _core_model_defaults__WEBPACK_IMPORTED_MODULE_15__.defaults.draft_detail_cell_size;
    this.system_codes = _core_model_defaults__WEBPACK_IMPORTED_MODULE_15__.defaults.weft_system_codes;
  }
  ngOnInit() {
    // let draft: Draft = this.tree.getDraft(this.id);
    // const loom = this.tree.getLoom(this.id);
    // const loom_settings = this.tree.getLoomSettings(this.id);
    // this.isFrame = isFrame(loom_settings);
    //this.viewonly = !this.tree.isSeedDraft(this.id);
    this.viewonly = false;
    // this.colShuttleMapping = draft.colShuttleMapping;
    // this.rowShuttleMapping = draft.rowShuttleMapping;
  }

  ngAfterViewInit() {
    // define the elements and context of the weave draft, threading, treadling, and tieups.
    this.canvasEl = document.getElementById('drawdown');
    this.draftContainer = document.getElementById('draft-container');
    // this.svgSelectRow = el.nativeElement.children[12];
    // this.svgSelectCol = el.nativeElement.children[13];
    this.divWesy = document.getElementById('weft-systems-text');
    this.divWasy = document.getElementById('warp-systems-text');
    this.divViewFrames = document.getElementById('view_frames');
    this.threadingCanvas = document.getElementById('threading');
    this.tieupsCanvas = document.getElementById('tieups');
    this.treadlingCanvas = document.getElementById('treadling');
    this.cx = this.canvasEl.getContext('2d');
    this.cxThreading = this.threadingCanvas.getContext('2d');
    this.cxTreadling = this.treadlingCanvas.getContext('2d');
    this.cxTieups = this.tieupsCanvas.getContext('2d');
    // set the width and height
    this.rescale(this.render.getZoom());
  }
  getFlippedWarpNum(j) {
    let draft = this.tree.getDraft(this.id);
    if (draft == null) return;
    let warpnum = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
    return warpnum - j;
  }
  getFlippedWeftNum(i) {
    let draft = this.tree.getDraft(this.id);
    if (draft == null) return;
    let weftnum = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
    return weftnum - i;
  }
  expand() {
    this.expanded = !this.expanded;
    this.onViewerExpanded.emit();
  }
  //this is called anytime a new draft object is loaded. 
  onNewDraftLoaded(draft, loom, loom_settings) {
    console.log("LOADING NEW DRAFT ", draft.id, draft.drawdown);
    this.loom_settings = loom_settings;
    const frames = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numFrames)(loom), loom_settings.frames);
    const treadles = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numTreadles)(loom), loom_settings.treadles);
    this.warps = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
    this.wefts = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
    this.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) / loom_settings.epi;
    if (loom_settings.units = 'cm') this.width *= 10;
    this.units = loom_settings.units;
    const warp_num = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
    const weft_num = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
    this.colShuttleMapping = draft.colShuttleMapping;
    this.colSystemMapping = draft.colSystemMapping;
    this.rowShuttleMapping = draft.rowShuttleMapping;
    this.rowSystemMapping = draft.rowSystemMapping;
    var dims = this.render.getCellDims("base");
    this.canvasEl.width = warp_num * dims.w;
    this.canvasEl.height = weft_num * dims.h;
    this.threadingCanvas.width = warp_num * dims.w;
    this.threadingCanvas.height = frames * dims.h;
    this.treadlingCanvas.height = weft_num * dims.h;
    this.treadlingCanvas.width = treadles * dims.w;
    this.tieupsCanvas.width = treadles * dims.w;
    this.tieupsCanvas.height = frames * dims.h;
    // this.cdRef.detectChanges();
    this.redraw(draft, loom, loom_settings, {
      drawdown: true,
      loom: true,
      warp_systems: true,
      weft_systems: true,
      warp_materials: true,
      weft_materials: true
    });
  }
  clearSelection() {
    this.selection.unsetParameters();
    // d3.select(this.svgSelectCol).style('display', 'none');
    // d3.select(this.svgSelectRow).style('display', 'none');
  }

  ngOnDestroy() {
    this.removeSubscription();
  }
  /**
   *  takes an event from mouse event and determines how to handle it
   * @param target the dom target of the mouse click
   * @param shift whether or not the shift key is being held
   * @param currentPos the position of the click within the target
   */
  setPosAndDraw(target, shift, currentPos) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    const editing_style = this.dm.getSelectedDesignMode('drawdown_editing_style').value;
    if (target && target.id == 'treadling') {
      if (this.viewonly) return;
      currentPos.i = this.render.visibleRows[currentPos.i];
      if (editing_style == "loom") this.drawOnTreadling(loom, loom_settings, currentPos);
    } else if (target && target.id === 'tieups') {
      if (this.viewonly || loom_settings.type === "direct") return;
      if (editing_style == "loom") this.drawOnTieups(loom, loom_settings, currentPos);
    } else if (target && target.id === 'threading') {
      if (this.viewonly) return;
      //currentPos.i = this.loom.frame_mapping[currentPos.i];
      if (editing_style == "loom") this.drawOnThreading(loom, loom_settings, currentPos);
    } else {
      if (this.viewonly) return;
      currentPos.i = this.render.visibleRows[currentPos.i];
      if (editing_style == "drawdown") this.drawOnDrawdown(draft, loom_settings, currentPos, shift);
    }
    this.flag_history = true;
  }
  /**
   * Touch start event. Subscribes to the move event.
   * @extends WeaveDirective
   * @param {Event} event - The mousedown event.
   * @returns {void}
   */
  onStart(event) {
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    const draft = this.tree.getDraft(this.id);
    const frames = loom_settings.frames;
    const treadles = loom_settings.treadles;
    // console.log("DIV COORDS", )
    //get dimis based on zoom.
    // let dims ={
    //   w:  el.offsetWidth / warps(draft.drawdown),
    //   h:  el.offsetHeight / this.render.visibleRows.length
    // }
    let dims = this.render.getCellDims("base");
    var screen_row = Math.floor(event.offsetY / dims.h);
    var screen_col = Math.floor(event.offsetX / dims.w);
    const currentPos = {
      si: screen_row,
      i: screen_row,
      j: screen_col //col
    };

    if (event.target.localName === 'canvas') {
      this.removeSubscription();
      this.moveSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.fromEvent)(event.target, 'mousemove').subscribe(e => this.onMove(e));
      // set up the Point to be used.
      if (!event.target) return;
      //reject out of bounds requests
      switch (event.target.id) {
        case 'drawdown':
          currentPos.i -= 1;
          currentPos.j -= 1;
          currentPos.si -= 1;
          if (currentPos.i < 0 || currentPos.i >= this.render.visibleRows.length) return;
          if (currentPos.j < 0 || currentPos.j >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown)) return;
          break;
        case 'threading':
          if (currentPos.i < 0 || currentPos.i >= frames) return;
          if (currentPos.j < 0 || currentPos.j >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown)) return;
          break;
        case 'treadling':
          if (currentPos.i < 0 || currentPos.i >= this.render.visibleRows.length) return;
          if (currentPos.j < 0 || currentPos.j >= treadles) return;
          break;
        case 'tieups':
          if (currentPos.i < 0 || currentPos.i >= frames) return;
          if (currentPos.j < 0 || currentPos.j >= treadles) return;
          break;
        case 'warp-materials':
        case 'warp-systems':
          if (currentPos.j < 0 || currentPos.j >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown)) return;
          break;
        case 'weft-materials':
        case 'weft-systems':
          if (currentPos.i < 0 || currentPos.i >= this.render.visibleRows.length) return;
          break;
      }
      // Save temp pattern
      this.tempPattern = draft.drawdown.slice();
      const selected = this.dm.getSelectedDesignMode('design_modes');
      switch (selected.value) {
        case 'draw':
          switch (this.dm.getSelectedDesignMode('draw_modes').value) {
            case 'toggle':
              this.setPosAndDraw(event.target, event.shiftKey, currentPos);
              break;
            case 'up':
            case 'down':
            case 'unset':
            case 'material':
              this.setPosAndDraw(event.target, event.shiftKey, currentPos);
              this.flag_recompute = true;
              break;
          }
          break;
        case 'select':
        case 'copy':
          if (event.shiftKey) {
            this.selection.onSelectDrag(currentPos);
            this.selection.onSelectStop();
          } else this.selection.onSelectStart(event.target, currentPos);
          break;
        default:
          break;
      }
      this.lastPos = {
        si: currentPos.si,
        i: currentPos.i,
        j: currentPos.j //col
      };
    }
  }

  isSame(p1, p2) {
    if (p1 === undefined || p2 === undefined) return false;
    return p1.i == p2.i && p1.j === p2.j;
  }
  /**
   * Event called when mouse down and moved within the canvas.
   * @extends WeaveDirective
   * @param {Event} event - The mousemove event.
   * @returns {void}
   */
  onMove(event) {
    const draft = this.tree.getDraft(this.id);
    let dims = this.render.getCellDims("base");
    // var screen_row = Math.floor(event.offsetY / dims.h);
    // var screen_col = Math.floor(event.offsetX / dims.w);
    // let dims ={
    //   w: this.canvasEl.width / warps(draft.drawdown),
    //   h:  this.canvasEl.height /this.render.visibleRows.length
    // };    
    var offset = this.render.getCellDims(this.dm.getSelectedDesignMode('design_modes').value);
    // set up the point based on touched square.
    //var screen_row = Math.floor((event.offsetY + offset.y) / dims.h);
    var screen_row = Math.floor(event.offsetY / dims.h);
    var screen_col = Math.floor(event.offsetX / dims.w);
    const currentPos = {
      si: screen_row,
      i: screen_row,
      j: screen_col
    };
    if (event.target && event.target.id === "drawdown") {
      currentPos.si -= 1;
      currentPos.i -= 1;
      currentPos.j -= 1;
    }
    //don't call unless you've moved to a new spot
    if (this.isSame(currentPos, this.lastPos)) return;
    // determine action based on brush type. invert inactive on move.
    switch (this.dm.getSelectedDesignMode('design_modes').value) {
      case 'draw':
        switch (this.dm.getSelectedDesignMode('draw_modes').value) {
          case 'up':
          case 'down':
          case 'unset':
          case 'material':
            //this.unsetSelection();
            if (currentPos.i < 0 || currentPos.i >= this.render.visibleRows.length) return;
            if (currentPos.j < 0 || currentPos.j >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown)) return;
            this.setPosAndDraw(event.target, event.shiftKey, currentPos);
            this.flag_recompute = true;
            break;
        }
        break;
      case 'select':
      case 'copy':
        this.selection.onSelectDrag(currentPos);
        break;
      case 'invert':
      default:
        break;
    }
    this.lastPos = {
      si: currentPos.si,
      i: currentPos.i,
      j: currentPos.j //col
    };
  }
  /**
   * Event removes subscription when touch has ended.
   * @extends WeaveDirective
   * @param {Event} event - The mouseleave or mouseup event.
   * @returns {void}
   */
  onEnd(event) {
    const draft = this.tree.getDraft(this.id);
    this.lastPos = {
      si: -1,
      i: -1,
      j: -1
    };
    if (this.flag_history && event.type == 'mouseup') {
      this.timeline.addHistoryState(draft);
      this.flag_history = false;
    }
    if (this.flag_recompute && event.type == 'mouseup') {
      this.flag_recompute = false;
    }
    // remove subscription unless it is leave event with select.
    if (!(event.type === 'mouseleave' && (this.dm.isSelected('select', 'design_modes') || this.dm.isSelected('copy', 'design_actions')))) {
      this.removeSubscription();
      this.selection.onSelectStop();
    }
  }
  /**
   * This is emitted from the selection
   */
  onSelectionEnd() {
    if (!this.hold_copy_for_paste) this.copyArea();
    this.onNewSelection.emit({
      id: this.id,
      start: {
        i: this.selection.getStartingRowScreenIndex(),
        j: this.selection.getStartingColIndex()
      },
      end: {
        i: this.selection.getEndingRowScreenIndex(),
        j: this.selection.getEndingColIndex()
      }
    });
  }
  /**
   * Remove the subscription from the move event.
   * @extends WeaveDirective
   * @returns {void}
   */
  removeSubscription() {
    if (this.moveSubscription) {
      this.moveSubscription.unsubscribe();
    }
  }
  /**
   * Creates the copied pattern. Hack for warp and weft shuttles is that it creates a 2d arrray representing the
   * threading or treadling with "true" in the frame/threadle associated with that col/row.
   * @extends WeaveDirective
   * @returns {void}
   */
  copyArea() {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const screen_i = this.selection.getStartingRowScreenIndex();
    const draft_j = this.selection.getStartingColIndex();
    var w = this.selection.getWidth();
    var h = this.selection.getHeight();
    this.copy = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.initDraftWithParams)({
      wefts: h,
      warps: w,
      drawdown: [[(0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.createCell)(false)]]
    }).drawdown;
    const temp_copy = [];
    if (this.selection.getTargetId() === 'weft-systems') {
      for (var i = 0; i < h; i++) {
        temp_copy.push([]);
        for (var j = 0; j < this.ss.weft_systems.length; j++) {
          temp_copy[i].push(false);
        }
      }
    } else if (this.selection.getTargetId() === 'warp-systems') {
      for (var i = 0; i < this.ss.warp_systems.length; i++) {
        temp_copy.push([]);
        for (var j = 0; j < w; j++) {
          temp_copy[i].push(false);
        }
      }
    } else if (this.selection.getTargetId() === 'weft-materials') {
      for (var i = 0; i < h; i++) {
        temp_copy.push([]);
        for (var j = 0; j < this.ms.getShuttles().length; j++) {
          temp_copy[i].push(false);
        }
      }
    } else if (this.selection.getTargetId() === 'warp-materials') {
      for (var i = 0; i < this.ms.getShuttles().length; i++) {
        temp_copy.push([]);
        for (var j = 0; j < w; j++) {
          temp_copy[i].push(false);
        }
      }
    } else {
      for (var i = 0; i < h; i++) {
        temp_copy.push([]);
        for (var j = 0; j < w; j++) {
          temp_copy[i].push(false);
        }
      }
    }
    //iterate through the selection
    for (var i = 0; i < temp_copy.length; i++) {
      for (var j = 0; j < temp_copy[0].length; j++) {
        var screen_row = screen_i + i;
        var draft_row = this.render.visibleRows[screen_row];
        var col = draft_j + j;
        switch (this.selection.getTargetId()) {
          case 'drawdown':
            temp_copy[i][j] = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, draft_row, col);
            break;
          case 'threading':
            //  var frame = this.loom.frame_mapping[screen_row];
            //  temp_copy[i][j]= this.loom.isInFrame(col,frame);
            temp_copy[i][j] = loom.threading[col] === screen_row;
            break;
          case 'treadling':
            temp_copy[i][j] = loom.treadling[screen_row].find(el => el === col) !== undefined;
            ;
            break;
          case 'tieups':
            //var frame = this.loom.frame_mapping[screen_row];
            //temp_copy[i][j] = this.loom.hasTieup({i: frame, j: col, si: screen_row});
            temp_copy[i][j] = loom.tieup[screen_row][col];
            break;
          case 'warp-systems':
            temp_copy[i][j] = draft.colSystemMapping[col] == i;
            break;
          case 'weft-systems':
            temp_copy[i][j] = draft.rowSystemMapping[draft_row] == j;
            break;
          case 'warp-materials':
            temp_copy[i][j] = draft.colShuttleMapping[col] == i;
            break;
          case 'weft-materials':
            temp_copy[i][j] = draft.rowShuttleMapping[draft_row] == j;
            break;
          default:
            break;
        }
      }
    }
    if (temp_copy.length == 0) return;
    const temp_dd = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.createBlankDrawdown)(temp_copy.length, temp_copy[0].length);
    temp_copy.forEach((row, i) => {
      row.forEach((cell, j) => {
        temp_dd[i][j] = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.setCellValue)(temp_dd[i][j], cell);
      });
    });
    this.copy = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.initDraftWithParams)({
      warps: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(temp_dd),
      wefts: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(temp_dd),
      drawdown: temp_dd
    }).drawdown;
    this.onNewSelection.emit({
      copy: this.copy
    });
  }
  // private drawWeftMaterialCell(draft:Draft, cx:any, i:number){
  //   var dims = this.render.getCellDims("base");
  //   var margin = this.render.zoom*2;
  //   const ndx: number = draft.rowShuttleMapping[i];
  //   cx.fillStyle = this.ms.getColor(ndx);
  //   cx.strokeStyle = '#000000';
  //   cx.lineWidth = '1';
  //    cx.fillRect(margin, (dims.h*i)+margin, dims.w-margin, dims.h-(margin));
  //    cx.strokeRect(margin, (dims.h*i)+margin, dims.w-margin, dims.h-(margin));
  // }
  // private drawWeftMaterials(draft:Draft, cx:any, canvas:any){
  //     var dims = this.render.getCellDims("base");
  //     var margin = this.render.zoom;
  //     var top = dims.h;
  //     cx.clearRect(0,0, cx.canvas.width, cx.canvas.height);
  //     canvas.width =  dims.w;
  //     canvas.height = this.render.visibleRows.length * dims.h;
  //     cx.fillStyle = "white";
  //     cx.fillRect(0,0,canvas.width,this.render.visibleRows.length*dims.h);
  //     for(var i = 0 ; i < this.render.visibleRows.length; i++){
  //         this.drawWeftMaterialCell(draft, cx, i);        
  //     }
  // }
  drawWarpMaterialCell(draft, cx, j) {
    console.log("THIS CX ", cx);
    var dims = this.render.getCellDims("base");
    var margin = this.render.zoom * 2;
    const ndx = draft.colShuttleMapping[j];
    cx.fillStyle = this.ms.getColor(ndx);
    cx.strokeStyle = "#000000";
    cx.lineWidth = '1';
    //  if(j == warps(draft.drawdown)-1) cx.fillRect((dims.w*j)+margin, 0, dims.w-(margin*2), (dims.h) - margin);
    //  else cx.fillRect( (dims.w*j)+margin, 0, dims.w-margin, (dims.h) - margin);
    cx.fillRect(dims.w * j + margin, 0, dims.w - margin, dims.h - margin);
    cx.strokeRect(dims.w * j + margin, 0, dims.w - margin, dims.h - margin);
  }
  // private drawWarpMaterials(draft:Draft, cx:any,canvas:any){
  //   var dims = this.render.getCellDims("base");
  //   var margin = this.render.zoom;
  //   this.warpMaterialsCanvas.width =  warps(draft.drawdown) * dims.w;
  //   this.warpMaterialsCanvas.height = dims.h;
  //   cx.fillStyle = "white";
  //   cx.fillRect(0,0,canvas.width,canvas.height);
  //   for(var j = 0; j < warps(draft.drawdown); j++){
  //     this.drawWarpMaterialCell(draft, cx, j);
  //   } 
  // }
  // private drawWeftSelectorCell(draft:Draft, cx:any, i:number){
  //       var dims = this.render.getCellDims("base");
  //       var margin = this.render.zoom;
  //       cx.fillStyle = "#ffffff";
  //       if(i == wefts(draft.drawdown)-1) cx.fillRect(margin, (dims.h*i)+margin, dims.w, dims.h-(margin*2));
  //       else cx.fillRect(margin, (dims.h*i)+margin, dims.w, dims.h-(margin));
  //        cx.fillStyle = "#000000";  
  //        cx.font = "10px Arial";
  //        const sys = draft.rowSystemMapping[i];
  //        cx.fillText(this.ss.getWeftSystemCode(sys), dims.w/3, (dims.h*i)+3*dims.h/4);
  // }
  // private drawWeftSystems(draft:Draft, cx:any, canvas:HTMLCanvasElement){
  //     var dims = this.render.getCellDims("base");
  //     var top = dims.h;
  //     cx.clearRect(0,0, cx.canvas.width, cx.canvas.height);
  //     canvas.width =  dims.w;
  //     canvas.height = this.render.visibleRows.length * dims.h;
  //     cx.fillStyle = "white";
  //     cx.fillRect(0,0,canvas.width,this.render.visibleRows.length*dims.h);
  //     for(var i = 0 ; i < this.render.visibleRows.length; i++){
  //         this.drawWeftSelectorCell(draft,cx, i);        
  //     }
  // }
  drawWarpSelectorCell(draft, cx, j) {
    var dims = this.render.getCellDims("base");
    var margin = this.render.zoom;
    cx.fillStyle = "#ffffff";
    if (j == (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) - 1) cx.fillRect(dims.w * j + margin, 0, dims.w - margin * 2, dims.h - margin);else cx.fillRect(dims.w * j + margin, 0, dims.w - margin, dims.h - margin);
    cx.fillStyle = "#000000";
    cx.font = "10px Arial";
    const sys = draft.colSystemMapping[j];
    cx.fillText(this.ss.getWarpSystemCode(sys), dims.w * j + dims.w / 3, dims.w - margin * 3);
  }
  drawWarpSystems(draft, cx, canvas) {
    // var dims = this.render.getCellDims("base");
    // this.warpSystemsCanvas.width =  warps(draft.drawdown) * dims.w;
    // this.warpSystemsCanvas.height = dims.h;
    // cx.fillStyle = "white";
    // cx.fillRect(0,0,canvas.width,canvas.height);
    // for(var j = 0; j < warps(draft.drawdown); j++){
    //   this.drawWarpSelectorCell(draft, cx, j);
    // } 
  }
  /**
   * Draws the grid lines onto the canvas.
   * @extends WeaveDirective
   * @returns {void}
   */
  drawBlank(cx, canvas) {
    cx.fillStyle = "#3d3d3d";
    cx.fillRect(0, 0, canvas.width, canvas.height);
  }
  /**
   * Draws the grid lines onto the canvas.
   * @extends WeaveDirective
   * @returns {void}
   */
  drawGrid(loom, loom_settings, cx, canvas) {
    var i, j;
    var dims = this.render.getCellDims("base");
    if (canvas.id === "threading") {
      cx.fillStyle = "white";
      cx.fillRect(0, 0, canvas.width, canvas.height);
      // cx.fillStyle = "#cccccc";
      // cx.fillRect(0, 0, canvas.width, (frames - loom_settings.frames)*dims.h);
    } else if (canvas.id === "treadling") {
      cx.fillStyle = "white";
      cx.fillRect(0, 0, canvas.width, canvas.height);
      // cx.fillStyle = "#cccccc";
      // var start = loom_settings.frames * dims.w;
      // cx.fillRect(start, 0, canvas.width - start, canvas.height);
    } else if (canvas.id === "tieups") {
      cx.fillStyle = "white";
      cx.fillRect(0, 0, canvas.width, canvas.height);
      // cx.fillStyle = "#cccccc";
      // var start = loom_settings.treadles * dims.w;
      // cx.fillRect(start, 0, canvas.width - start, canvas.height);
      // cx.fillRect(0, 0, canvas.width, (frames -loom_settings.frames)*dims.h);
    }

    cx.fillStyle = "black";
    cx.lineWidth = .5;
    cx.lineCap = 'round';
    cx.strokeStyle = '#000';
    //only draw the lines if the zoom is big enough to render them well
    // draw vertical lines
    for (i = 0; i <= canvas.width; i += dims.w) {
      if (canvas.id == 'drawdown') {
        if (i > dims.w && i < canvas.width - dims.w) {
          cx.beginPath();
          cx.moveTo(i, dims.h);
          cx.lineTo(i, canvas.height - dims.h);
          cx.stroke();
        }
      } else {
        cx.beginPath();
        cx.moveTo(i, 0);
        cx.lineTo(i, canvas.height);
        cx.stroke();
      }
    }
    // draw horizontal lines
    for (i = 0; i <= canvas.height; i += dims.h) {
      if (canvas.id == "drawdown") {
        if (i > dims.h && i < canvas.height - dims.h) {
          cx.beginPath();
          cx.moveTo(dims.w, i);
          cx.lineTo(canvas.width - dims.w, i);
          cx.stroke();
        }
      } else {
        cx.beginPath();
        cx.moveTo(0, i);
        cx.lineTo(canvas.width, i);
        cx.stroke();
      }
    }
    // reset the line dash.
    //cx.setLineDash([0]);
  }

  incrementWeftSystem(i) {
    this.is_dirty = true;
    const draft = this.tree.getDraft(this.id);
    let weft = this.render.visibleRows[i];
    var newSystem = this.ss.getNextWeftSystem(weft, draft);
    draft.rowSystemMapping[weft] = newSystem;
    this.tree.setDraftOnly(this.id, draft);
  }
  incrementWeftMaterial(si) {
    this.is_dirty = true;
    const weft = this.render.visibleRows[si];
    const draft = this.tree.getDraft(this.id);
    if (this.dm.isSelected('material', 'draw_modes')) {
      const material_id = this.dm.getSelectedDesignMode('draw_modes').children[0].value;
      draft.rowShuttleMapping[weft] = parseInt(material_id);
    } else {
      const len = this.ms.getShuttles().length;
      var shuttle_id = draft.rowShuttleMapping[weft];
      var newShuttle = (shuttle_id + 1) % len;
      draft.rowShuttleMapping[weft] = newShuttle;
    }
    this.tree.setDraftOnly(this.id, draft);
    this.rowShuttleMapping = draft.rowShuttleMapping;
    this.onDrawdownUpdated.emit(draft);
  }
  incrementWarpSystem(j) {
    this.is_dirty = true;
    const draft = this.tree.getDraft(this.id);
    var newSystem = this.ss.getNextWarpSystem(j, draft);
    console.log(newSystem, j);
    draft.colSystemMapping[j] = newSystem;
    this.tree.setDraftOnly(this.id, draft);
    // this.cdRef.detectChanges();
  }

  incrementWarpMaterial(col) {
    this.is_dirty = true;
    const warp = col;
    const draft = this.tree.getDraft(this.id);
    if (this.dm.isSelected('material', 'draw_modes')) {
      const material_id = this.dm.getSelectedDesignMode('draw_modes').children[0].value;
      draft.colShuttleMapping[warp] = parseInt(material_id);
    } else {
      const len = this.ms.getShuttles().length;
      var shuttle_id = draft.colShuttleMapping[warp];
      var newShuttle = (shuttle_id + 1) % len;
      draft.colShuttleMapping[warp] = newShuttle;
    }
    this.tree.setDraftOnly(this.id, draft);
    this.colShuttleMapping = draft.colShuttleMapping;
    this.onDrawdownUpdated.emit(draft);
  }
  /**
   * Called when a single point "draw" event is called on the
   * @param {Point} currentPos - the current position of the mouse within draft.
   * @param shift - boolean for if the shift key was being held when this operation was called
   * @returns {void}
   */
  drawOnDrawdown(draft, loom_settings, currentPos, shift) {
    var updates;
    var val = false;
    if (!this.cx || !currentPos) {
      return;
    }
    if ((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.hasCell)(draft.drawdown, currentPos.i, currentPos.j)) {
      this.is_dirty = true;
      // Set the heddles based on the brush.
      switch (this.dm.getSelectedDesignMode('draw_modes').value) {
        case 'up':
          val = true;
          draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.setHeddle)(draft.drawdown, currentPos.i, currentPos.j, val);
          break;
        case 'down':
          val = false;
          draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.setHeddle)(draft.drawdown, currentPos.i, currentPos.j, val);
          break;
        case 'toggle':
          if (shift) {
            val = null;
          } else val = !(0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, currentPos.i, currentPos.j);
          draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.setHeddle)(draft.drawdown, currentPos.i, currentPos.j, val);
          break;
        case 'unset':
          draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.setHeddle)(draft.drawdown, currentPos.i, currentPos.j, null);
          break;
        case 'material':
          // this.drawOnWeftMaterials(draft, currentPos);
          // this.drawOnWarpMaterials(draft, currentPos)
          break;
        default:
          break;
      }
      // if(this.render.getCurrentView() == 'pattern'){
      //   this.drawCell(this.cx,currentPos.si, currentPos.j, "drawdown");
      // }else{
      //   this.drawYarn(currentPos.si, currentPos.j, val);
      // }
      this.tree.setDraftAndRecomputeLoom(this.id, draft, this.tree.getLoomSettings(this.id)).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true
        });
        this.onDrawdownUpdated.emit(draft);
      }).catch(console.error);
    }
  }
  /**
   * Draws or erases a single rectangle on the canvas. Updates the tieups.
   * @extends WeaveDirective
   * @param {Point} currentPos - the current position of the mouse within draft.
   * @returns {void}
   */
  drawOnTieups(loom, loom_settings, currentPos) {
    var updates;
    var val = false;
    const frames = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numFrames)(loom);
    const treadles = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numFrames)(loom);
    if (!this.cxTieups || !currentPos) {
      return;
    }
    if ((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isInUserTieupRange)(loom, loom_settings, currentPos)) {
      this.is_dirty = true;
      switch (this.dm.getSelectedDesignMode('draw_modes').value) {
        case 'up':
          val = true;
          break;
        case 'down':
          val = false;
          break;
        case 'toggle':
          val = !loom.tieup[currentPos.i][currentPos.j];
          break;
        default:
          break;
      }
      const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
      loom = utils.updateTieup(loom, {
        i: currentPos.i,
        j: currentPos.j,
        val: val
      });
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true
        });
        this.tree.setDraftOnly(this.id, draft);
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  /**
   * Draws or erases a single rectangle on the canvas. Updates the threading.
   * @extends WeaveDirective
   * @param {Point} currentPos - the current position of the mouse within draft.
   * @returns {void}
   */
  drawOnThreading(loom, loom_settings, currentPos) {
    if (!this.cxThreading || !currentPos) {
      return;
    }
    if ((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isInUserThreadingRange)(loom, loom_settings, currentPos)) {
      var val = false;
      this.is_dirty = true;
      //modify based on the current view 
      // currentPos.i = this.translateThreadingRowForView(loom, loom_settings,currentPos.i)
      switch (this.dm.getSelectedDesignMode('draw_modes').value) {
        case 'up':
          val = true;
          break;
        case 'down':
          val = false;
          break;
        case 'toggle':
          val = !(loom.threading[currentPos.j] == currentPos.i);
          break;
        default:
          break;
      }
      const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
      loom = utils.updateThreading(loom, {
        i: currentPos.i,
        j: currentPos.j,
        val: val
      });
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true
        });
        this.tree.setDraftOnly(this.id, draft);
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  /**
   * Draws or erases a single rectangle on the canvas. Updates the treadling.
   * @extends WeaveDirective
   * @param {Point} currentPos - the current position of the mouse within draft.
   * @returns {void}
   */
  drawOnTreadling(loom, loom_settings, currentPos) {
    if (!this.cxTreadling || !currentPos) {
      return;
    }
    this.is_dirty = true;
    var val = false;
    if ((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isInUserTreadlingRange)(loom, loom_settings, currentPos)) {
      switch (this.dm.getSelectedDesignMode('draw_modes').value) {
        case 'up':
          val = true;
          break;
        case 'down':
          val = false;
          break;
        case 'toggle':
          val = !(loom.treadling[currentPos.i].find(el => el === currentPos.j) !== undefined);
          break;
        default:
          break;
      }
      //this updates the value in the treadling
      const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
      loom = utils.updateTreadling(loom, {
        i: currentPos.i,
        j: currentPos.j,
        val: val
      });
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true
        });
        this.tree.setDraftOnly(this.id, draft);
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  //This function draws whatever the current value is at screen coordinates cell i, J
  drawCell(draft, loom, loom_settings, cx, i, j, type) {
    var base_dims = this.render.getCellDims("base");
    var base_fill = this.render.getCellDims("base_fill");
    var is_up = false;
    var is_set = false;
    var color = "#FFFFFF";
    var beyond = false;
    var top = 0;
    var left = 0;
    switch (type) {
      case 'drawdown':
        var row = this.render.visibleRows[i];
        is_up = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, row, j);
        is_set = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isSet)(draft.drawdown, row, j);
        if (!this.render.isFront()) is_up = !is_up;
        if (!is_set) {
          color = "#cccccc";
        } else {
          if (is_up) color = "#333333";
        }
        top = base_dims.h;
        left = base_dims.w;
        break;
      case 'threading':
        var frame = loom.threading[j];
        is_up = frame == i;
        beyond = frame > loom_settings.frames;
        //i = this.translateThreadingRowForView(loom, loom_settings, i);
        if (is_up) color = "#333333";
        //i = this.loom.frame_mapping[frame];
        break;
      case 'tieup':
        is_up = loom.tieup[i][j];
        beyond = i > loom_settings.frames;
        if (is_up) color = "#333333";
        //i = this.loom.frame_mapping[i];
        break;
      case 'treadling':
        //i and j is going to come from the UI which is only showing visible rows
        var row = this.render.visibleRows[i];
        is_up = loom.treadling[row].find(el => el == j) !== undefined;
        if (is_up) color = "#333333";
        break;
    }
    //cx.fillStyle = color;
    cx.fillStyle = color;
    cx.fillRect(left + j * base_dims.w + base_fill.x, top + i * base_dims.h + base_fill.y, base_fill.w, base_fill.h);
    // if(type =='threading'){
    //   cx.font = "10px Arial";
    //   cx.fillStyle = "white";
    //   let thread_val = loom.threading[j]+1;
    //   //if(this.ws.selected_origin_option == 1 || this.ws.selected_origin_option == 2) thread_val = numFrames(loom) - loom.threading[j];
    //   //cx.fillText(thread_val, 2+ left+j*base_dims.w + base_fill.x, top+i*base_dims.h + base_fill.y + base_fill.h);
    // }
  }
  /**This view renders cells based on the relationships with their neighbords */
  drawCrossingCell(draft, cx, i, i_next, j, type) {
    var base_dims = this.render.getCellDims("base");
    var base_fill = this.render.getCellDims("base_fill");
    var top = 0;
    var left = 0;
    var right_edge;
    var right_bot_to_top;
    var bottom_edge;
    var bottom_bot_to_top;
    right_edge = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j) !== (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j + 1) ? true : false;
    if (right_edge) {
      right_bot_to_top = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j) && !(0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j + 1) ? true : false;
    }
    bottom_edge = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j) !== (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i_next, j) ? true : false;
    if (bottom_edge) {
      bottom_bot_to_top = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i, j) && !(0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.isUp)(draft.drawdown, i_next, j) ? true : false;
    }
    j++;
    i++;
    if (right_edge) {
      cx.strokeStyle = right_bot_to_top ? "#FF0000" : "#00FF00";
      cx.beginPath();
      cx.moveTo(left + j * base_dims.w + base_fill.w, top + i * base_dims.h);
      cx.lineTo(left + j * base_dims.w + base_fill.w, top + i * base_dims.h + base_fill.h);
      cx.stroke();
    }
    if (bottom_edge) {
      cx.strokeStyle = bottom_bot_to_top ? "#0000FF" : "#FFA500";
      cx.beginPath();
      cx.moveTo(left + j * base_dims.w, top + i * base_dims.h + base_fill.h);
      cx.lineTo(left + j * base_dims.w + base_fill.w, top + i * base_dims.h + base_fill.h);
      cx.stroke();
    }
  }
  /**
   * Redraws one row to avoid drawing the entire canvas.
   * @extends WeaveDirective
   * @returns {void}
   */
  redrawRow(draft, loom, loom_settings, y, i, cx) {
    for (var j = 0; j < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown); j++) {
      //get the system at this warp
      const sys_id = draft.colSystemMapping[j];
      const sys = this.ss.getWarpSystem(sys_id);
      if (sys !== undefined && sys.visible) {
        this.drawCell(draft, loom, loom_settings, this.cx, i, j, "drawdown");
      } else {}
    }
  }
  /**
   * called on scroll
   * @param scroll_top
   * @param scroll_left
   */
  reposition(scroll_top, scroll_left) {}
  //flips the view from front to back
  flip() {
    const container = document.getElementById('draft-scale-container');
    container.style.transformOrigin = '50% 50%';
    if (this.render.view_front) container.style.transform = "matrix(1, 0, 0, 1, 0, 0) scale(" + this.render.getZoom() + ')';else container.style.transform = "matrix(-1, 0, 0, 1, 0, 0) scale(" + this.render.getZoom() + ')';
  }
  /**
   * this rescales the canvas and updates the view from scroll events
   * receives offset of the scroll from the CDKScrollable created when the scroll was initiated
   */
  //this does not draw on canvas but just rescales the canvas
  rescale(zoom) {
    //   //var dims = this.render.getCellDims("base");
    const container = document.getElementById('draft-scale-container');
    container.style.transformOrigin = 'top center';
    container.style.transform = 'scale(' + zoom + ')';
  }
  //public redrawYarnView(){
  //draw from bottom to top 
  //   //first, just draw all the wefts 
  //  const shuttles: Array<number> =  this.render.visibleRows.map(el => this.weave.rowShuttleMapping[el]);
  //  shuttles.forEach((shuttle, i) => {
  //     this.drawWeft(i, this.ms.getShuttle(shuttle));
  //  });
  //   const crossings: Array<Array<Crossing>> = this.weave.getRelationalDraft();
  //   const visible_crossings = crossings.filter((el, i) => this.render.visibleRows.find(el => el == i) !== -1);
  //   visible_crossings.forEach((row, i) =>{
  //     let cur_j = 0;
  //     let cur_state: boolean = false;
  //     row.forEach(crossing => {
  //       if(cur_j < crossing.j){
  //         cur_state = crossing.type.t;
  //       }
  //     });
  //   });  
  // let started:boolean = false;
  // for(let i = 0; i < this.render.visibleRows.length; i++){
  //   let index_row = this.render.visibleRows[i];
  //   let row_values = this.weave.drawdown[index_row];
  //   let shuttle_id = this.weave.rowShuttleMapping[index_row];
  //   let s = this.ms.getShuttle(shuttle_id);
  //   //iterate through the rows
  //   for(let j = 0; j < row_values.length; j++){
  //     let p = row_values[j];
  //   //   if(p.isEastWest())  this.drawWeftOver(i,j,s);
  //   //   if(p.isSouthWest()) this.drawWeftBottomLeft(i,j,s);
  //   //  // if(p.isNorthSouth())this.drawWeftUp(i, j, s);
  //   //   if(p.isSouthEast()) this.drawWeftBottomRight(i,j,s);
  //   //   if(p.isNorthWest()) this.drawWeftLeftUp(i,j,s);
  //   //   if(p.isNorthEast()) this.drawWeftRightUp(i, j, s);
  //   }
  // }
  //}
  /**
   * redraws the loom provided into the video
   * @returns
   */
  redrawLoom(draft, loom, loom_settings) {
    this.isFrame = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isFrame)(loom_settings);
    if (loom === null || loom === undefined) {
      return;
    }
    const frames = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numFrames)(loom), loom_settings.frames);
    const treadles = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numTreadles)(loom), loom_settings.treadles);
    var base_dims = this.render.getCellDims("base");
    var front = this.render.isFront();
    this.cxThreading.clearRect(0, 0, this.cxThreading.canvas.width, this.cxThreading.canvas.height);
    this.cxTreadling.clearRect(0, 0, this.cxTreadling.canvas.width, this.cxTreadling.canvas.height);
    this.cxTieups.clearRect(0, 0, this.cxTieups.canvas.width, this.cxTieups.canvas.height);
    this.cxThreading.canvas.width = base_dims.w * loom.threading.length;
    this.cxThreading.canvas.height = base_dims.h * frames;
    this.drawGrid(loom, loom_settings, this.cxThreading, this.threadingCanvas);
    // else this.drawBlank(this.cxThreading,this.threadingCanvas);
    this.cxTreadling.canvas.width = base_dims.w * treadles;
    this.cxTreadling.canvas.height = base_dims.h * this.render.visibleRows.length;
    this.drawGrid(loom, loom_settings, this.cxTreadling, this.treadlingCanvas);
    //else this.drawBlank(this.cxTreadling,this.treadlingCanvas);
    this.cxTieups.canvas.width = base_dims.w * treadles;
    this.cxTieups.canvas.height = base_dims.h * frames;
    this.drawGrid(loom, loom_settings, this.cxTieups, this.tieupsCanvas);
    //else this.drawBlank(this.cxTieups,this.tieupsCanvas);
    for (var j = 0; j < loom.threading.length; j++) {
      this.drawCell(draft, loom, loom_settings, this.cxThreading, loom.threading[j], j, "threading");
    }
    //only cycle through the visible rows
    for (var i = 0; i < this.render.visibleRows.length; i++) {
      if (this.render.visibleRows[i] < loom.treadling.length) {
        loom.treadling[this.render.visibleRows[i]].forEach(cell => {
          this.drawCell(draft, loom, loom_settings, this.cxTreadling, i, cell, "treadling");
        });
      }
    }
    for (var i = 0; i < loom.tieup.length; i++) {
      for (var j = 0; j < loom.tieup[i].length; j++) {
        if (loom.tieup[i][j]) {
          this.drawCell(draft, loom, loom_settings, this.cxTieups, i, j, "tieup");
        }
      }
    }
  }
  /**
   * callled when frames become visible or drawdown without frame info is loaded
   */
  recomputeLoom(draft, loom_settings) {
    this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings);
  }
  unsetSelection() {
    this.selection.unsetParameters();
  }
  drawDrawdown(draft, loom, loom_settings) {
    switch (this.render.getCurrentView()) {
      case 'pattern':
        this.redrawDraft(draft, loom, loom_settings);
        break;
      case 'crossing':
        this.redrawCrossings(draft);
        break;
    }
  }
  //takes inputs about what, exactly to redraw
  redraw(draft, loom, loom_settings, flags) {
    var base_dims = this.render.getCellDims("base");
    this.colSystemMapping = draft.colSystemMapping;
    this.rowSystemMapping = draft.rowSystemMapping;
    if (flags.drawdown !== undefined) {
      this.cx.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);
      this.cx.canvas.width = base_dims.w * ((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) + 2);
      this.cx.canvas.height = base_dims.h * (this.render.visibleRows.length + 2);
      this.cx.strokeStyle = "#3d3d3d";
      this.cx.fillStyle = "#ffffff";
      this.cx.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);
      this.cx.strokeRect(0, 0, this.canvasEl.width, this.canvasEl.height);
      this.drawDrawdown(draft, loom, loom_settings);
    }
    // if(flags.weft_systems !== undefined && this.source == "weaver"){
    //   this.drawWeftSystems(draft, this.cxWeftSystems, this.weftSystemsCanvas);
    // }
    if (flags.loom !== undefined) {
      this.redrawLoom(draft, loom, loom_settings);
    }
  }
  /**
   * Redraws the entire canvas based on weave pattern.
   * @extends WeaveDirective
   * @returns {void}
   */
  redrawDraft(draft, loom, loom_settings) {
    var base_dims = this.render.getCellDims("base");
    this.cx.fillStyle = "white";
    this.cx.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);
    var i, j;
    var color = '#000000';
    this.cx.fillStyle = color;
    for (i = 0; i < this.render.visibleRows.length; i++) {
      this.redrawRow(draft, loom, loom_settings, i * base_dims.h, i, this.cx);
    }
    this.drawGrid(loom, loom_settings, this.cx, this.canvasEl);
  }
  drawWarps(draft, cx) {
    //draw all the warps
    var base_dims = this.render.getCellDims("base");
    var schematic = this.render.getCurrentView() === "yarn";
    for (var x = 0; x < draft.colShuttleMapping.length; x++) {
      let system;
      var id = draft.colShuttleMapping[x];
      if (id === undefined) system = this.ss.getFirstWarpSystem();else system = this.ss.getWarpSystem(id);
      var shuttle = this.ms.getShuttle(id);
      if (system !== undefined && system.visible) {
        var c = shuttle.color;
        var t = shuttle.thickness;
        var center = base_dims.w / 2;
        cx.lineWidth = t / 100 * .9 * base_dims.w;
        cx.strokeStyle = shuttle.type > 0 || !schematic ? c : c + "10";
        cx.shadowColor = 'white';
        cx.shadowOffsetX = 0.5;
        cx.shadowOffsetY = 0;
        cx.beginPath();
        cx.moveTo((x + 1) * base_dims.w + center, 0);
        cx.lineTo((x + 1) * base_dims.w + center, base_dims.h * (this.render.visibleRows.length + 2));
        cx.stroke();
      }
    }
  }
  /**
    * Highlights intersections between yarns, when they cross from front to back
    * @extends WeaveDirective
    * @returns {void}
    */
  redrawCrossings(draft) {
    var base_dims = this.render.getCellDims("base");
    this.cx.fillStyle = "white";
    this.cx.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);
    var i, j;
    var color = '#000000';
    this.cx.fillStyle = color;
    for (i = 0; i < this.render.visibleRows.length; i++) {
      for (j = 0; j < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown); j++) {
        this.drawCrossingCell(draft, this.cx, this.render.visibleRows[i], this.render.getNextVisibleRow(i), j, 'crossings');
      }
    }
  }
  /**
   * Prints the pattern to the console.
   * @extends WeaveDirective
   * @param {Array<Array<boolean>>} pattern - 2D pattern array.
   * @returns {void}
   */
  printPattern(pattern) {
    for (var i = 0; i < pattern.length; i++) {
      var s = "";
      for (var j = 0; j < pattern[0].length; j++) {
        if (pattern[i][j]) {
          s += 'x';
        } else {
          s += 'o';
        }
      }
      console.log(s);
    }
  }
  //  /**
  //  * Saves the draft as a bitmap file
  //  * @extends WeaveDirective
  //  * @param {string} fileName - name to save file as
  //  * @returns {void}
  //  */
  // public getPrintableCanvas(obj) : HTMLCanvasElement {
  //   const frames = numFrames(this.loom);
  //   const treadles = numTreadles(this.loom);
  //   let dims = this.render.getCellDims("base");
  //   let b = obj.bitmap.nativeElement;
  //   let context = b.getContext('2d');
  //   b.width = (warps(this.weave.drawdown) + treadles + 6) * dims.w;
  //   b.height = (wefts(this.weave.drawdown) + frames + 6) * dims.h;
  //   context.fillStyle = "white";
  //   context.fillRect(0,0,b.width,b.height);
  //   //use this to solve 0 width errors on drawIMage
  //   if(this.loom_settings.type !== 'jacquard'){
  //     context.drawImage(this.threadingCanvas, 0, dims.h*3);
  //     context.drawImage(this.tieupsCanvas, (warps(this.weave.drawdown) +1)* dims.w, 3*dims.h);
  //     context.drawImage(this.treadlingCanvas, (warps(this.weave.drawdown) +1)* dims.w, (frames + 4)*dims.h);
  //   }
  //   //systems
  //   context.drawImage(this.warpSystemsCanvas, 0, 0);
  //   context.drawImage(this.warpMaterialsCanvas, 0, dims.h);
  //   context.drawImage(this.canvasEl, -dims.w, (frames+3)*dims.h);
  //   context.drawImage(this.weftMaterialsCanvas,(warps(this.weave.drawdown)+ treadles +1)* dims.w, (frames + 4)*dims.h);
  //   context.drawImage(this.weftSystemsCanvas,(warps(this.weave.drawdown)+ treadles +2)* dims.w, (frames + 4)*dims.h);
  //   return b;
  // }
  /**
   * Saves the draft as a bitmap file
   * @extends WeaveDirective
   * @param {string} fileName - name to save file as
   * @returns {void}
   */
  // public getBMPCanvas(obj) : HTMLCanvasElement {
  //   let b = obj.bitmap.nativeElement;
  //   let context = b.getContext('2d');
  //   let draft = this.weave.drawdown;
  //   var i,j;
  //   b.width = warps(this.weave.drawdown);
  //   b.height = wefts(this.weave.drawdown);
  //   context.fillStyle = "white";
  //   context.fillRect(0,0,b.width,b.height);
  //   context.fillStyle = "black";
  //   for( i = 0; i < b.height; i++) {
  //     for( j=0; j < b.width; j++) {
  //       let up = draft[i][j].isUp();
  //       if(up) {
  //         context.fillRect(j,i,1,1)
  //       }
  //     }
  //   }
  //   return b;
  // }
  /**
  *
  *
  */
  // public onSave(e: any) {
  //   e.bitmap = this.bitmap;
  //   if (e.type === "bmp"){
  //     let link = e.downloadLink.nativeElement;
  //     link.href = this.fs.saver.bmp(this.getBMPCanvas(e));
  //     link.download = e.name + ".jpg"; //Canvas2Bitmap  seems to be broken now
  //   } 
  //   else if (e.type === "ada"){
  //     let link = e.downloadLink.nativeElement;
  //     link.href = this.fs.saver.ada('draft', [this.weave], [this.loom],  false, 5);
  //     link.download = e.name + ".ada";
  //   } 
  //   else if (e.type === "wif"){
  //     let link = e.downloadLink.nativeElement;
  //     link.href= this.fs.saver.wif(this.weave, this.loom);
  //     link.download = e.filename +".wif";
  //   } 
  //   else if (e.type === "jpg"){
  //     let link = e.downloadLink.nativeElement;
  //     link.href = this.fs.saver.jpg(this.getPrintableCanvas(e));
  //     link.download = e.name + ".jpg";
  //   } 
  // }
  translateThreadingRowForView(loom, loom_settings, i) {
    const opt = this.ws.selected_origin_option;
    const frames = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.numFrames)(loom), loom_settings.frames);
    if (opt == 0 || opt == 3) {
      return frames - 1 - i;
    } else {
      return i;
    }
  }
  translateDrawdownRowForView(draft, i) {
    const opt = this.ws.selected_origin_option;
    if (opt == 1 || opt == 2) {
      return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown) - 1 - i;
    } else {
      return i;
    }
  }
  translateDrawdownColForView(draft, j) {
    const opt = this.ws.selected_origin_option;
    if (opt > 2) {
      return j;
    } else {
      return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) - j;
    }
  }
  /**
  * inserts an empty row just below the clicked row
  * @param si the screen index of the row we'll insert
  * @param i the absolute (not screen) index of the row we'll insert
  */
  insertRow(si) {
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    si = this.translateDrawdownRowForView(draft, si);
    let index = this.render.visibleRows[si];
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownRow)(draft.drawdown, index, null);
    draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowShuttleMapping, index, 1);
    draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowSystemMapping, index, 0);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    loom = utils.insertIntoTreadling(loom, index, []);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  /**
  * clones the selected row and pastes into next visible row
  * @param si the screen index of the row we'll insert
  * @param i the absolute (not screen) index of the row we'll insert
  */
  cloneRow(si) {
    const draft = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let loom = this.tree.getLoom(this.id);
    si = this.translateDrawdownRowForView(draft, si);
    let index = this.render.visibleRows[si];
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownRow)(draft.drawdown, index, draft.drawdown[index].slice());
    draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowShuttleMapping, index, draft.rowShuttleMapping[index]);
    draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowSystemMapping, index, draft.rowSystemMapping[index]);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      loom = utils.insertIntoTreadling(loom, index, loom.treadling[index].slice());
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  deleteRow(si) {
    const draft = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let loom = this.tree.getLoom(this.id);
    si = this.translateDrawdownRowForView(draft, si);
    let index = this.render.visibleRows[si];
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteDrawdownRow)(draft.drawdown, index);
    draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingRow)(draft.rowShuttleMapping, index);
    draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingRow)(draft.rowSystemMapping, index);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    loom = utils.deleteFromTreadling(loom, index);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.render.updateVisible(draft);
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.rowShuttleMapping = draft.rowShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  /**
  * In
  * @extends WeaveComponent
  * @returns {void}
  */
  insertCol(j) {
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    j = this.translateDrawdownColForView(draft, j);
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownCol)(draft.drawdown, j, null);
    draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colShuttleMapping, j, 0);
    draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colSystemMapping, j, 0);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    loom = utils.insertIntoThreading(loom, j, -1);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  cloneCol(j) {
    const draft = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let loom = this.tree.getLoom(this.id);
    //flip the index based on the flipped view
    j = this.translateDrawdownColForView(draft, j);
    const col = draft.drawdown.reduce((acc, el) => {
      acc.push(el[j]);
      return acc;
    }, []);
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownCol)(draft.drawdown, j, col);
    draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colShuttleMapping, j, draft.colShuttleMapping[j]);
    draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colSystemMapping, j, draft.colSystemMapping[j]);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      loom = utils.insertIntoThreading(loom, j, loom.threading[j]);
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  deleteCol(j) {
    const draft = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let loom = this.tree.getLoom(this.id);
    j = this.translateDrawdownColForView(draft, j);
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteDrawdownCol)(draft.drawdown, j);
    draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingCol)(draft.colShuttleMapping, j);
    draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingCol)(draft.colSystemMapping, j);
    const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    loom = utils.deleteFromThreading(loom, j);
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
        this.timeline.addHistoryState(draft);
        this.colShuttleMapping = draft.colShuttleMapping;
        this.onDrawdownUpdated.emit(draft);
      });
    }
  }
  isLastCol(j) {
    const draft = this.tree.getDraft(this.id);
    return j + 1 === (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
  }
  isLastRow(i) {
    const draft = this.tree.getDraft(this.id);
    return i + 1 === (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
  }
  /**
   * Tell the weave directive to fill selection with pattern.
   * @extends WeaveComponent
   * @param {Event} e - fill event from design component.
   * @returns {void}
   */
  //  public onFill(e) {
  //   let p:Pattern = this.ps.getPattern(e.id);
  //   this.weave.fillArea(this.selection, p, 'original', this.render.visibleRows, this.loom);
  //   this.loom.recomputeLoom(this.weave, this.loom.type);
  //   if(this.render.isYarnBasedView()) this.weave.computeYarnPaths(this.ms.getShuttles());
  //   this.copyArea();
  //   this.redraw({drawdown:true, loom:true});
  //   this.timeline.addHistoryState(this.weave);
  // }
  // /**
  //  * Tell weave reference to clear selection.
  //  * @extends WeaveComponent
  //  * @param {Event} Delte - clear event from design component.
  //  * @returns {void}
  //  */
  onClear(b) {
    const draft = this.tree.getDraft(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom = this.tree.getLoom(this.id);
    let width = this.selection.getWidth();
    let height = this.selection.getHeight();
    draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.pasteIntoDrawdown)(draft.drawdown, [[(0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.createCell)(b)]], this.selection.getStartingRowScreenIndex(), this.selection.getStartingColIndex(), width, height);
    switch (this.selection.getTargetId()) {
      case 'drawdown':
        this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
      case 'treading':
      case 'tieup':
      case 'treadling':
        this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
    }
    this.copyArea();
  }
  pasteViaOperation(type) {
    const draft = this.tree.getDraft(this.id);
    const copy_draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.initDraftWithParams)({
      warps: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(this.copy),
      wefts: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(this.copy),
      drawdown: this.copy
    });
    const loom_settings = this.tree.getLoomSettings(this.id);
    const adj_start_i = this.render.visibleRows[this.selection.getStartingRowScreenIndex()];
    const adj_end_i = this.render.visibleRows[this.selection.getEndingRowScreenIndex()];
    const height = adj_end_i - adj_start_i;
    let op;
    let inputs = [];
    const flips = _core_model_util__WEBPACK_IMPORTED_MODULE_10__["default"].getFlips(this.ws.selected_origin_option, 3);
    return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.flipDraft)(copy_draft, flips.horiz, flips.vert).then(flipped_draft => {
      // switch(type){
      //   case 'invert':
      //     op = this.ops.getOp('invert');
      //     inputs.push({op_name: op.name, drafts: [], inlet: -1, params: []});
      //     inputs.push({op_name:'child', drafts: [flipped_draft], inlet: 0, params: []});
      //   break;
      //   case 'mirrorX':
      //     op = this.ops.getOp('flip horiz');
      //     inputs.push({op_name: op.name, drafts: [], inlet: -1, params: []});
      //     inputs.push({op_name:'child', drafts: [flipped_draft], inlet: 0, params: []});
      //     break;
      //   case 'mirrorY':
      //     op = this.ops.getOp('flip vert');
      //     inputs.push({op_name: op.name, drafts: [], inlet: -1, params: []});
      //     inputs.push({op_name:'child', drafts: [flipped_draft], inlet: 0, params: []});
      //     break;
      //   case 'shiftLeft':
      //     op = this.ops.getOp('shift left');
      //     inputs.push({op_name: op.name, drafts: [], inlet: -1, params: [1]});
      //     inputs.push({op_name:'child', drafts: [flipped_draft], inlet: 0, params: []});
      //     break;
      //   case 'shiftUp':
      //     op = this.ops.getOp('shift up');
      //     inputs.push({op_name: op.name, drafts: [], inlet: -1, params: [1]});
      //     inputs.push({op_name:'child', drafts: [flipped_draft], inlet: 0, params: []});
      //     break;
      // }
      // return op.perform(inputs);
    }).then(res => {
      return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.flipDraft)(res[0], flips.horiz, flips.vert);
    }).then(finalres => {
      draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.pasteIntoDrawdown)(draft.drawdown, finalres.drawdown, adj_start_i, this.selection.getStartingColIndex(), this.selection.getWidth(), height);
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_materials: true,
          warp_materials: true,
          weft_systems: true,
          warp_systems: true
        });
      });
    });
  }
  /**
   * Tells weave reference to paste copied pattern.
   * @extends WeaveComponent
   * @param {Event} e - paste event from design component.
   * @returns {void}
   */
  onPaste(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom_util = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
    let pattern = [];
    let mapping = [];
    this.hold_copy_for_paste = false;
    var type;
    if (e.type === undefined) type = "original";else type = e.type;
    if (type !== 'original') {
      this.pasteViaOperation(type);
    }
    const adj_start_i = this.render.visibleRows[this.selection.getStartingRowScreenIndex()];
    const adj_end_i = this.render.visibleRows[this.selection.getEndingRowScreenIndex()];
    const height = adj_end_i - adj_start_i;
    switch (this.selection.getTargetId()) {
      case 'drawdown':
        draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.pasteIntoDrawdown)(draft.drawdown, this.copy, adj_start_i, this.selection.getStartingColIndex(), this.selection.getWidth(), height);
        //if you do this when updates come from loom, it will erase those updates
        this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
      case 'threading':
        loom_util.pasteThreading(loom, this.copy, {
          i: adj_start_i,
          j: this.selection.getStartingColIndex(),
          val: null
        }, this.selection.getWidth(), height);
        this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
      case 'tieup':
        loom_util.pasteTieup(loom, this.copy, {
          i: adj_start_i,
          j: this.selection.getStartingColIndex(),
          val: null
        }, this.selection.getWidth(), height);
        this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
      case 'treadling':
        loom_util.pasteTreadling(loom, this.copy, {
          i: adj_start_i,
          j: this.selection.getStartingColIndex(),
          val: null
        }, this.selection.getWidth(), height);
        this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
          this.redraw(draft, loom, loom_settings, {
            drawdown: true,
            loom: true,
            weft_materials: true,
            warp_materials: true,
            weft_systems: true,
            warp_systems: true
          });
        });
        break;
      case 'warp-systems':
        pattern = [];
        for (let j = 0; j < this.copy[0].length; j++) {
          const assigned_to = this.copy.findIndex(sys => (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.getCellValue)(sys[j]) == true);
          pattern.push(assigned_to);
        }
        mapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.generateMappingFromPattern)(draft.drawdown, pattern, 'col', this.ws.selected_origin_option);
        draft.colSystemMapping = mapping.map((el, ndx) => {
          if (ndx >= this.selection.getStartingColIndex() && ndx < this.selection.getStartingColIndex() + this.selection.getWidth()) {
            return el;
          } else {
            return draft.colSystemMapping[ndx];
          }
        });
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_materials: true,
          warp_materials: true,
          weft_systems: true,
          warp_systems: true
        });
        break;
      case 'warp-materials':
        pattern = [];
        for (let j = 0; j < this.copy[0].length; j++) {
          const assigned_to = this.copy.findIndex(sys => (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.getCellValue)(sys[j]) == true);
          pattern.push(assigned_to);
        }
        mapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.generateMappingFromPattern)(draft.drawdown, pattern, 'col', this.ws.selected_origin_option);
        draft.colShuttleMapping = mapping.map((el, ndx) => {
          if (ndx >= this.selection.getStartingColIndex() && ndx < this.selection.getStartingColIndex() + this.selection.getWidth()) {
            return el;
          } else {
            return draft.colShuttleMapping[ndx];
          }
        });
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_materials: true,
          warp_materials: true,
          weft_systems: true,
          warp_systems: true
        });
        break;
      case 'weft-systems':
        pattern = [];
        for (let i = 0; i < this.copy.length; i++) {
          const assigned_to = this.copy[i].findIndex(sys => (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.getCellValue)(sys) == true);
          pattern.push(assigned_to);
        }
        mapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.generateMappingFromPattern)(draft.drawdown, pattern, 'row', this.ws.selected_origin_option);
        draft.rowSystemMapping = mapping.map((el, ndx) => {
          if (ndx >= adj_start_i && ndx < adj_start_i + height) {
            return el;
          } else {
            return draft.rowSystemMapping[ndx];
          }
        });
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_materials: true,
          warp_materials: true,
          weft_systems: true,
          warp_systems: true
        });
        break;
      case 'weft-materials':
        pattern = [];
        for (let i = 0; i < this.copy.length; i++) {
          const assigned_to = this.copy[i].findIndex(sys => (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_14__.getCellValue)(sys) == true);
          pattern.push(assigned_to);
        }
        mapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.generateMappingFromPattern)(draft.drawdown, pattern, 'row', this.ws.selected_origin_option);
        draft.rowShuttleMapping = mapping.map((el, ndx) => {
          if (ndx >= adj_start_i && ndx < adj_start_i + height) {
            return el;
          } else {
            return draft.rowShuttleMapping[ndx];
          }
        });
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_materials: true,
          warp_materials: true,
          weft_systems: true,
          warp_systems: true
        });
        break;
    }
    this.copyArea();
  }
  onCopy() {
    this.copyArea();
    this.hold_copy_for_paste = true;
  }
  swapEditingStyle() {
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value === 'drawdown') {
      this.dm.selectDesignMode('loom', 'drawdown_editing_style');
    } else {
      this.dm.selectDesignMode('drawdown', 'drawdown_editing_style');
    }
  }
  loomChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    let utils = null;
    const new_settings = {
      type: e.value.loomtype,
      epi: loom_settings.epi,
      units: loom_settings.units,
      frames: loom_settings.frames,
      treadles: loom_settings.treadles
    };
    if (loom_settings.type == 'direct') {
      new_settings.frames = Math.max(loom_settings.treadles, loom_settings.frames);
      new_settings.treadles = Math.max(loom_settings.treadles, loom_settings.frames);
      this.treadles = Math.max(loom_settings.treadles, loom_settings.frames);
      this.frames = Math.max(loom_settings.treadles, loom_settings.frames);
    }
    //if we are changing from null or jacquard to a frame type loom 
    if (loom_settings.type === null || loom_settings.type === 'jacquard') {
      //from jacquard to frame
      utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(new_settings.type);
      utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, this.ws.selected_origin_option).then(loom => {
        this.tree.setLoom(this.id, loom);
        this.redraw(draft, loom, loom_settings, {
          loom: true
        });
      });
    } else if ((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isFrame)(loom_settings) && new_settings.type == 'jacquard') {
      //from a frame loom to jacquard
      utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(new_settings.type);
      utils.computeDrawdownFromLoom(loom, this.ws.selected_origin_option).then(drawdown => {
        draft.drawdown = drawdown;
        this.tree.setDraftOnly(this.id, draft);
        this.redraw(draft, loom, loom_settings, {
          loom: true
        });
      });
    } else if ((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isFrame)(loom_settings) && (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.isFrame)(new_settings)) {
      //from one frame loom to another
      const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(new_settings.type);
      if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
        utils.computeLoomFromDrawdown(draft.drawdown, loom_settings, this.ws.selected_origin_option).then(loom => {
          this.tree.setLoom(this.id, loom);
          this.redraw(draft, loom, loom_settings, {
            loom: true
          });
        });
      } else {
        utils.recomputeLoomFromThreadingAndDrawdown(loom, new_settings, draft.drawdown, this.ws.selected_origin_option).then(loom => {
          this.tree.setLoom(this.id, loom);
          this.redraw(draft, loom, loom_settings, {
            loom: true
          });
        });
      }
    }
    if (loom_settings.type === 'jacquard') this.dm.selectDesignMode('drawdown', 'drawdown_editing_style');else this.dm.selectDesignMode('loom', 'drawdown_editing_style');
    this.tree.setLoomSettings(this.id, new_settings);
  }
  unitChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    loom_settings.units = e.value.units;
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
  }
  /**
   * recomputes warps and epi if the width of the loom is changed
   * @param f
   */
  widthChange(f) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (!f.value.width) {
      f.value.width = 1;
      this.width = f.value.width;
    }
    // if(this.warp_locked){
    var new_epi = loom_settings.units == "in" ? f.value.warps / f.value.width : 10 * f.value.warps / f.value.width;
    loom_settings.epi = new_epi;
    f.value.epi = new_epi;
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
    // }else{
    //   var new_warps = (loom_settings.units === "in") 
    //   ? Math.ceil(f.value.width * f.value.epi) : 
    //   Math.ceil((10 * f.value.warps / f.value.width));
    //   this.warpNumChange({warps: new_warps});
    // }
  }

  warpNumChange(e) {
    if (e.warps == "") return;
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (e.warps > (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown)) {
      var diff = e.warps - (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown);
        const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
        loom = utils.insertIntoThreading(loom, ndx, -1);
        draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownCol)(draft.drawdown, ndx, null);
        draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colShuttleMapping, ndx, 0);
        draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingCol)(draft.colSystemMapping, ndx, 0);
      }
    } else {
      var diff = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) - e.warps;
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.warps)(draft.drawdown) - 1;
        const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
        loom = utils.deleteFromThreading(loom, ndx);
        draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteDrawdownCol)(draft.drawdown, ndx);
        draft.colShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingCol)(draft.colShuttleMapping, ndx);
        draft.colSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingCol)(draft.colSystemMapping, ndx);
      }
    }
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          warp_systems: true,
          warp_materials: true
        });
      });
    }
  }
  warpChange(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (!f.value.warps) {
      f.value.warps = 2;
      this.warps = f.value.warps;
    }
    this.warpNumChange({
      warps: f.value.warps
    });
    this.width = loom_settings.units == 'cm' ? f.value.warps / loom_settings.epi * 10 : f.value.warps / loom_settings.epi;
    f.value.width = this.width;
  }
  weftChange(f) {
    if (!f.value.wefts) {
      f.value.wefts = 2;
      this.wefts = 2;
    }
    this.weftNumChange({
      wefts: f.value.wefts
    });
  }
  weftNumChange(e) {
    if (e.wefts === "" || e.wefts == "null") return;
    const draft = this.tree.getDraft(this.id);
    let loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    if (e.wefts > (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown)) {
      var diff = e.wefts - (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown);
        draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertDrawdownRow)(draft.drawdown, ndx, null);
        draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowShuttleMapping, ndx, 1);
        draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.insertMappingRow)(draft.rowSystemMapping, ndx, 0);
        this.render.updateVisible(draft);
        const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
        loom = utils.insertIntoTreadling(loom, ndx, []);
      }
    } else {
      var diff = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown) - e.wefts;
      for (var i = 0; i < diff; i++) {
        let ndx = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.wefts)(draft.drawdown) - 1;
        draft.drawdown = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteDrawdownRow)(draft.drawdown, ndx);
        draft.rowShuttleMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingRow)(draft.rowShuttleMapping, ndx);
        draft.rowSystemMapping = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_7__.deleteMappingRow)(draft.rowSystemMapping, ndx);
        const utils = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.getLoomUtilByType)(loom_settings.type);
        loom = utils.deleteFromTreadling(loom, ndx);
        this.render.updateVisible(draft);
      }
    }
    if (this.dm.getSelectedDesignMode('drawdown_editing_style').value == 'drawdown') {
      this.tree.setDraftAndRecomputeLoom(this.id, draft, loom_settings).then(loom => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
      });
    } else {
      this.tree.setLoomAndRecomputeDrawdown(this.id, loom, loom_settings).then(draft => {
        this.redraw(draft, loom, loom_settings, {
          drawdown: true,
          loom: true,
          weft_systems: true,
          weft_materials: true
        });
      });
    }
  }
  frameChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    loom_settings.frames = e.value;
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
  }
  treadleChange(e) {
    const draft = this.tree.getDraft(this.id);
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
  }
  updateMinTreadles(f) {
    //validate the input
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom = this.tree.getLoom(this.id);
    const draft = this.tree.getDraft(this.id);
    if (!f.value.treadles) {
      f.value.treadles = 2;
      this.treadles = f.value.treadles;
    }
    f.value.treadles = Math.ceil(f.value.treadles);
    loom_settings.treadles = f.value.treadles;
    if (loom_settings.type == 'direct') {
      this.frames = f.value.treadles;
      this.treadles = f.value.treadles;
      loom_settings.frames = this.frames;
      loom_settings.treadles = this.treadles;
      loom.tieup = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.generateDirectTieup)(f.value.treadles);
      this.tree.setLoom(this.id, loom);
    }
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
  }
  updateMinFrames(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    const loom = this.tree.getLoom(this.id);
    const draft = this.tree.getDraft(this.id);
    if (!f.value.frames) {
      f.value.frames = 2;
      this.frames = f.value.frames;
    }
    f.value.frames = Math.ceil(f.value.frames);
    loom_settings.frames = f.value.frames;
    if (loom_settings.type == 'direct') {
      this.frames = f.value.frames;
      this.treadles = f.value.frames;
      loom_settings.frames = this.frames;
      loom_settings.treadles = this.treadles;
      loom.tieup = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_8__.generateDirectTieup)(f.value.frames);
      this.tree.setLoom(this.id, loom);
    }
    this.tree.setLoomSettings(this.id, loom_settings);
    this.redraw(draft, loom, loom_settings, {
      loom: true
    });
  }
  epiChange(f) {
    const loom_settings = this.tree.getLoomSettings(this.id);
    const draft = this.tree.getDraft(this.id);
    if (!f.value.epi) {
      f.value.epi = 1;
      loom_settings.epi = f.value.epi;
      this.tree.setLoomSettings(this.id, loom_settings);
    }
    //this.loom.overloadEpi(f.value.epi);
    this.ws.epi = f.value.epi;
    this.width = loom_settings.units == 'cm' ? f.value.warps / loom_settings.epi * 10 : f.value.warps / loom_settings.epi;
    f.value.width = this.width;
    this.onDrawdownUpdated.emit(draft);
  }
}
DraftviewerComponent.ɵfac = function DraftviewerComponent_Factory(t) {
  return new (t || DraftviewerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_1__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_3__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_4__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_6__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_state_service__WEBPACK_IMPORTED_MODULE_5__.StateService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_9__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_11__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_provider_render_service__WEBPACK_IMPORTED_MODULE_12__.RenderService));
};
DraftviewerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdefineComponent"]({
  type: DraftviewerComponent,
  selectors: [["app-draftviewer"]],
  viewQuery: function DraftviewerComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_c0, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_c1, 7, _selection_selection_component__WEBPACK_IMPORTED_MODULE_13__.SelectionComponent);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.bitmap = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.selection = _t.first);
    }
  },
  hostBindings: function DraftviewerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("mousedown", function DraftviewerComponent_mousedown_HostBindingHandler($event) {
        return ctx.onStart($event);
      })("mouseleave", function DraftviewerComponent_mouseleave_HostBindingHandler($event) {
        return ctx.onEnd($event);
      })("mouseup", function DraftviewerComponent_mouseup_HostBindingHandler($event) {
        return ctx.onEnd($event);
      });
    }
  },
  inputs: {
    id: "id",
    source: "source",
    viewonly: "viewonly"
  },
  outputs: {
    onNewSelection: "onNewSelection",
    onDrawdownUpdated: "onDrawdownUpdated",
    onViewerExpanded: "onViewerExpanded"
  },
  decls: 27,
  vars: 45,
  consts: [["id", "draft-container"], [1, "expand"], ["mat-icon-button", "", "color", "primary", "aria-label", "expand to view simuation full screen", 3, "click"], ["class", "fa-solid fa-maximize", 4, "ngIf"], ["class", "fa-solid fa-minimize", 4, "ngIf"], ["id", "draft-scale-container"], [3, "id", "onCopy", "onClear", "onPaste", "onSelectionEnd"], ["selection", ""], ["id", "warp-systems-text"], [3, "class", "width", 4, "ngFor", "ngForOf"], ["id", "threading", 1, ""], ["id", "tieups"], ["tieups", ""], ["id", "drawdown"], ["drawdown", ""], ["id", "treadling"], ["treadling", ""], ["id", "weft-systems-text"], [3, "class", "height", 4, "ngFor", "ngForOf"], ["hidden", ""], ["bitmapImage", ""], ["class", "controls", 3, "display", 4, "ngIf"], [1, "fa-solid", "fa-maximize"], [1, "fa-solid", "fa-minimize"], [1, "warp-material", 3, "click"], [1, "warp-system", 3, "click"], [1, "warp-number-container"], [3, "class", 4, "ngIf"], [1, "warp_selectors"], ["class", "warp_delete", 3, "click", 4, "ngIf"], ["class", "warp_clone", 3, "click", 4, "ngIf"], ["class", "warp_insert", 3, "click", 4, "ngIf"], [4, "ngIf"], [1, "warp_delete", 3, "click"], [1, "fa", "fa-trash"], [1, "warp_clone", 3, "click"], [1, "fa", "fa-clone"], [1, "warp_insert", 3, "click"], [1, "fa", "fa-plus-circle"], [1, "weft-material", 3, "click"], [1, "weft-system", 3, "click"], [1, "weft_indicies"], [1, "weft_actions"], ["class", "weft_insert", 3, "click", 4, "ngIf"], ["class", "weft_clone", 3, "click", 4, "ngIf"], ["class", "weft_delete", 3, "click", 4, "ngIf"], [1, "weft_insert", 3, "click"], [1, "weft_clone", 3, "click"], [1, "weft_delete", 3, "click"], [1, "controls"], [1, "left-side"], ["novalidate", ""], ["envt", "ngForm"], [1, "fullwidth"], ["name", "loomtype", 3, "value", "ngModel", "selectionChange", "valueChange", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "name", "warps", "type", "number", "min", "2", "placeholder", "Warp Ends", 3, "ngModel", "ngModelChange", "change", "blur"], ["matInput", "", "name", "wefts", "type", "number", "min", "2", "placeholder", "Weft Pics", 3, "ngModel", "ngModelChange", "change", "blur"], ["name", "units", 3, "value", "ngModel", "valueChange", "ngModelChange", "selectionChange"], ["matInput", "", "name", "epi", "type", "number", "min", "0", 3, "ngModel", "ngModelChange", "change", "blur"], ["matInput", "", "name", "width", "step", "0.125", "type", "number", "min", "0.25", "max", "60", "placeholder", "Width", 3, "ngModel", "ngModelChange", "change", "blur"], ["matInput", "", "name", "frames", "step", "1", "type", "number", "min", "2", "max", "1000", 3, "disabled", "ngModel", "ngModelChange", "change", "blur"], ["matSuffix", ""], ["matInput", "", "name", "treadles", "step", "1", "type", "number", "min", "2", "max", "1000", 3, "disabled", "ngModel", "ngModelChange", "change", "blur"], [1, "right-side", "fullwidth"], [3, "disabled", "click"], [3, "value"]],
  template: function DraftviewerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function DraftviewerComponent_Template_button_click_2_listener() {
        return ctx.expand();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](3, DraftviewerComponent_i_3_Template, 1, 0, "i", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](4, DraftviewerComponent_i_4_Template, 1, 0, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](5, "div", 5)(6, "app-selection", 6, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("onCopy", function DraftviewerComponent_Template_app_selection_onCopy_6_listener() {
        return ctx.onCopy();
      })("onClear", function DraftviewerComponent_Template_app_selection_onClear_6_listener($event) {
        return ctx.onClear($event);
      })("onPaste", function DraftviewerComponent_Template_app_selection_onPaste_6_listener($event) {
        return ctx.onPaste($event);
      })("onSelectionEnd", function DraftviewerComponent_Template_app_selection_onSelectionEnd_6_listener() {
        return ctx.onSelectionEnd();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](8, "div")(9, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](10, DraftviewerComponent_div_10_Template, 10, 16, "div", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](11, "div");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](12, "canvas", 10)(13, "div")(14, "canvas", 11, 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](16, "div");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](17, "canvas", 13, 14)(19, "canvas", 15, 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](21, "div")(22, "div", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](23, DraftviewerComponent_div_23_Template, 11, 17, "div", 18);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](24, "canvas", 19, 20);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](26, DraftviewerComponent_div_26_Template, 47, 22, "div", 21);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("draft-container ", ctx.source, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassProp"]("expanded", ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassProp"]("expanded", ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", !ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("origin", ctx.ws.selected_origin_option, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassProp"]("hide", ctx.render.current_view == "simulate");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("warp-systems-container origin", ctx.ws.selected_origin_option, " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("warp-systems-text origin", ctx.ws.selected_origin_option, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngForOf", ctx.colSystemMapping);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate2"]("threading-tieup-container origin", ctx.ws.selected_origin_option, " editable-", ctx.dm.getSelectedDesignMode("drawdown_editing_style").value, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassProp"]("hidden", !ctx.isFrame);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("threading-tieup-spacer origin", ctx.ws.selected_origin_option, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate2"]("drawdown-container origin", ctx.ws.selected_origin_option, " editable-", ctx.dm.getSelectedDesignMode("drawdown_editing_style").value, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassProp"]("hidden", !ctx.isFrame);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("weft-systems-container origin", ctx.ws.selected_origin_option, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵclassMapInterpolate1"]("weft-systems-text origin", ctx.ws.selected_origin_option, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngForOf", ctx.render == null ? null : ctx.render.visibleRows);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngIf", ctx.id !== -1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_19__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_19__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_20__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_20__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.NgForm, _angular_material_core__WEBPACK_IMPORTED_MODULE_21__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_22__.MatButton, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_23__.MatSlideToggle, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_24__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_24__.MatLabel, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_24__.MatSuffix, _angular_material_input__WEBPACK_IMPORTED_MODULE_25__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_26__.MatSelect, _selection_selection_component__WEBPACK_IMPORTED_MODULE_13__.SelectionComponent],
  styles: ["canvas[_ngcontent-%COMP%] {\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\n.top-half-draft[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.hide[_ngcontent-%COMP%] {\n  display: none !important;\n}\n\n.origin-selector[_ngcontent-%COMP%] {\n  color: #333;\n}\n\n#threading[_ngcontent-%COMP%] {\n  padding-right: 15px;\n}\n\n#treadling[_ngcontent-%COMP%] {\n  margin-top: 15px;\n}\n\n.controls[_ngcontent-%COMP%] {\n  width: 25%;\n  display: flex;\n  padding: 24px;\n  flex-direction: column;\n  font-size: 0.8em;\n}\n\n.expand[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 10px;\n  left: 30vw;\n  z-index: 2;\n}\n\n.expand.expanded[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 10px;\n  left: 60vw;\n  z-index: 2;\n}\n\n.left-side[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.right-side[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.fullwidth[_ngcontent-%COMP%] {\n  width: 100%;\n}\n\n#draft-container[_ngcontent-%COMP%] {\n  display: flex;\n  overflow: scroll;\n  height: 100%;\n  width: 100%;\n}\n\n#draft-container.expanded[_ngcontent-%COMP%] {\n  width: 75%;\n}\n\n#draft-scale-container[_ngcontent-%COMP%] {\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  margin: auto;\n  display: flex;\n}\n\n#draft-scale-container.origin0[_ngcontent-%COMP%], #draft-scale-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: column;\n}\n\n#draft-scale-container.origin1[_ngcontent-%COMP%], #draft-scale-container.origin2[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n}\n\n.warp-systems-container[_ngcontent-%COMP%] {\n  padding-left: 15px;\n  display: flex;\n  padding-right: 15px;\n}\n\n.warp-systems-container.origin0[_ngcontent-%COMP%] {\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.warp-systems-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.warp-systems-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n  align-items: flex-start;\n}\n\n.warp-systems-container.origin2[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n  align-items: flex-end;\n}\n\n.threading-tieup-container[_ngcontent-%COMP%] {\n  display: flex;\n}\n\n.threading-tieup-container.editable-loom[_ngcontent-%COMP%] {\n  opacity: 1;\n  cursor: pointer;\n}\n\n.threading-tieup-container.editable-drawdown[_ngcontent-%COMP%] {\n  opacity: 0.75;\n  cursor: not-allowed;\n}\n\n.threading-tieup-spacer.origin3[_ngcontent-%COMP%], .threading-tieup-spacer.origin2[_ngcontent-%COMP%] {\n  width: 15px;\n  display: block;\n}\n\n.threading-tieup-spacer.origin0[_ngcontent-%COMP%], .threading-tieup-spacer.origin0[_ngcontent-%COMP%] {\n  width: 0px;\n  display: block;\n}\n\n.threading-tieup-container.origin0[_ngcontent-%COMP%]   #threading[_ngcontent-%COMP%], .threading-tieup-container.origin0[_ngcontent-%COMP%]   #tieups[_ngcontent-%COMP%] {\n  transform: matrix3d(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n\n.threading-tieup-container.origin2[_ngcontent-%COMP%]   #tieups[_ngcontent-%COMP%] {\n  transform: matrix3d(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n\n.drawdown-container.origin2[_ngcontent-%COMP%]   #treadling[_ngcontent-%COMP%] {\n  transform: matrix3d(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n\n.threading-tieup-container.origin3[_ngcontent-%COMP%]   #tieups[_ngcontent-%COMP%] {\n  transform: matrix3d(-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n.threading-tieup-container.origin3[_ngcontent-%COMP%]   #threading[_ngcontent-%COMP%] {\n  transform: matrix3d(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n\n.drawdown-container.origin3[_ngcontent-%COMP%]   #treadling[_ngcontent-%COMP%] {\n  transform: matrix3d(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n\n.drawdown-container.editable-loom[_ngcontent-%COMP%]   #treadling[_ngcontent-%COMP%] {\n  opacity: 1;\n  cursor: pointer;\n}\n.drawdown-container.editable-loom[_ngcontent-%COMP%]   #drawdown[_ngcontent-%COMP%] {\n  opacity: 0.75;\n  cursor: not-allowed;\n}\n\n.drawdown-container.editable-drawdown[_ngcontent-%COMP%]   #treadling[_ngcontent-%COMP%] {\n  opacity: 0.75;\n  cursor: not-allowed;\n}\n.drawdown-container.editable-drawdown[_ngcontent-%COMP%]   #drawdown[_ngcontent-%COMP%] {\n  opacity: 1;\n  cursor: pointer;\n}\n\n.threading-tieup-container.origin0[_ngcontent-%COMP%], .threading-tieup-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n  padding-left: 15px;\n}\n\n.threading-tieup-container.origin2[_ngcontent-%COMP%], .threading-tieup-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.drawdown-container[_ngcontent-%COMP%] {\n  display: flex;\n}\n\n.drawdown-container.origin0[_ngcontent-%COMP%], .drawdown-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n}\n\n.drawdown-container.origin2[_ngcontent-%COMP%], .drawdown-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.weft-systems-container[_ngcontent-%COMP%] {\n  display: flex;\n  padding-top: 15px;\n}\n\n.weft-systems-container.origin0[_ngcontent-%COMP%], .weft-systems-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n}\n\n.weft-systems-container.origin2[_ngcontent-%COMP%], .weft-systems-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.warp-number-container[_ngcontent-%COMP%] {\n  display: flex;\n  height: 20px;\n}\n\n.warp-systems-text[_ngcontent-%COMP%] {\n  cursor: pointer;\n  font-size: 14px;\n  line-height: 14px;\n  color: #333;\n  z-index: 1;\n  display: flex;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n\n.warp-systems-text.origin0[_ngcontent-%COMP%], .warp-systems-text.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n  justify-content: flex-start;\n}\n\n.warp-systems-text.origin2[_ngcontent-%COMP%], .warp-systems-text.origin3[_ngcontent-%COMP%] {\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\n.warp-system-col[_ngcontent-%COMP%] {\n  width: 15px;\n  flex-grow: 1;\n  color: #000;\n  z-index: 1;\n  opacity: 1;\n  display: flex;\n  text-align: center;\n  vertical-align: top;\n  line-height: 8px;\n}\n.warp-system-col[_ngcontent-%COMP%]   .warp_selectors[_ngcontent-%COMP%] {\n  display: flex;\n  height: 60px;\n  flex-direction: column;\n}\n.warp-system-col[_ngcontent-%COMP%]:hover   .warp_insert[_ngcontent-%COMP%], .warp-system-col[_ngcontent-%COMP%]:hover   .warp_clone[_ngcontent-%COMP%], .warp-system-col[_ngcontent-%COMP%]:hover   .warp_delete[_ngcontent-%COMP%] {\n  display: block;\n}\n\n.warp-system-col.origin0[_ngcontent-%COMP%], .warp-system-col.origin3[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n  justify-content: flex-end;\n}\n\n.warp-system-col.origin2[_ngcontent-%COMP%] {\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.warp-system-col.origin1[_ngcontent-%COMP%] {\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.warp_system_code[_ngcontent-%COMP%] {\n  \n  color: black;\n  display: block;\n  width: 10px;\n  height: 10px;\n  border-bottom: thin solid black;\n  border-left: thin solid black;\n}\n\n.warp_number[_ngcontent-%COMP%] {\n  display: block;\n  color: black;\n  position: relative;\n  height: 15px;\n  padding-left: 2px;\n  border-left: thin solid black;\n}\n\n.warp_number.origin0[_ngcontent-%COMP%], .warp_number.origin1[_ngcontent-%COMP%] {\n  left: 9px;\n}\n\n.warp_number.origin2[_ngcontent-%COMP%], .warp_number.origin3[_ngcontent-%COMP%] {\n  left: 0px;\n}\n\n.warp_number_last[_ngcontent-%COMP%] {\n  display: block;\n  \n  left: 10px;\n  height: 15px;\n}\n\n.warp_number_last.origin0[_ngcontent-%COMP%], .warp_number_last.origin1[_ngcontent-%COMP%] {\n  border-left: thin solid black;\n  padding-left: 2px;\n}\n\n.warp_number_last.origin2[_ngcontent-%COMP%], .warp_number_last.origin3[_ngcontent-%COMP%] {\n  border-right: thin solid black;\n  padding-left: 0px;\n}\n\n.warp_insert[_ngcontent-%COMP%], .warp_clone[_ngcontent-%COMP%], .warp_delete[_ngcontent-%COMP%] {\n  align-items: left;\n  justify-content: left;\n  cursor: pointer;\n  height: 18px;\n  padding-bottom: 5px;\n  z-index: 2;\n  display: none;\n}\n\n.fa-plus-circle[_ngcontent-%COMP%] {\n  color: hsl(141deg, 71%, 48%);\n}\n\n.fa-clone[_ngcontent-%COMP%] {\n  color: hsl(204deg, 86%, 53%);\n}\n\n.fa-trash[_ngcontent-%COMP%] {\n  color: hsl(348deg, 100%, 61%);\n}\n\n.weft-systems-text[_ngcontent-%COMP%] {\n  cursor: pointer;\n  font-size: 14px;\n  line-height: 14px;\n  color: #333;\n  z-index: 2;\n  display: flex;\n  justify-content: flex-start;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\n.weft-systems-text.origin0[_ngcontent-%COMP%], .weft-systems-text.origin3[_ngcontent-%COMP%] {\n  flex-direction: column;\n}\n\n.weft-systems-text.origin1[_ngcontent-%COMP%], .weft-systems-text.origin2[_ngcontent-%COMP%] {\n  flex-direction: column;\n}\n\n.weft_actions[_ngcontent-%COMP%] {\n  display: flex;\n  width: 60px;\n  flex-direction: row;\n}\n\n.weft-system-row[_ngcontent-%COMP%] {\n  height: 15px;\n  display: flex;\n  flex-grow: 1;\n  color: #333;\n  z-index: 1;\n  opacity: 1;\n  text-align: center;\n  vertical-align: middle;\n  justify-content: flex-start;\n  line-height: 8px;\n}\n.weft-system-row[_ngcontent-%COMP%]   .weft_indicies[_ngcontent-%COMP%] {\n  width: 20px;\n  display: block;\n}\n.weft-system-row[_ngcontent-%COMP%]:hover   .weft_insert[_ngcontent-%COMP%], .weft-system-row[_ngcontent-%COMP%]:hover   .weft_clone[_ngcontent-%COMP%], .weft-system-row[_ngcontent-%COMP%]:hover   .weft_delete[_ngcontent-%COMP%] {\n  display: block;\n}\n\n.weft-system-row.origin0[_ngcontent-%COMP%], .weft-system-row.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n}\n\n.weft-system-row.origin2[_ngcontent-%COMP%], .weft-system-row.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.weft_system_code[_ngcontent-%COMP%] {\n  display: block;\n  width: 10px;\n  height: 10px;\n  border-left: thin solid #333;\n  border-top: thin solid #333;\n}\n\n.weft_number[_ngcontent-%COMP%] {\n  display: block;\n  position: relative;\n  border-bottom: thin solid #333;\n  width: 20px;\n}\n\n.weft_number.origin0[_ngcontent-%COMP%], .weft_number.origin3[_ngcontent-%COMP%] {\n  top: -9px;\n  padding-top: -9px;\n}\n\n.weft_number.origin1[_ngcontent-%COMP%], .weft_number.origin2[_ngcontent-%COMP%] {\n  top: 1px;\n  padding-top: 0px;\n}\n\n.weft_number_last[_ngcontent-%COMP%] {\n  display: block;\n  position: relative;\n  top: 0px;\n  width: 20px;\n}\n\n.weft_number_last.origin0[_ngcontent-%COMP%], .weft_number_last.origin3[_ngcontent-%COMP%] {\n  border-bottom: thin solid #333;\n}\n\n.weft_number_last.origin1[_ngcontent-%COMP%], .weft_number_last.origin2[_ngcontent-%COMP%] {\n  border-top: thin solid white;\n}\n\n.weft_insert[_ngcontent-%COMP%], .weft_clone[_ngcontent-%COMP%], .weft_delete[_ngcontent-%COMP%] {\n  align-items: right;\n  justify-content: right;\n  cursor: pointer;\n  width: 20px;\n  padding-right: 5px;\n  z-index: 2;\n  display: none;\n}\n\na[_ngcontent-%COMP%] {\n  color: black;\n}\n\n.weft-material[_ngcontent-%COMP%], .warp-material[_ngcontent-%COMP%] {\n  position: relative;\n  top: 1px;\n  width: 9px;\n  height: 9px;\n  border: thin solid grey;\n}\n\n.warp-system[_ngcontent-%COMP%] {\n  display: block;\n  padding: 4px 0px;\n}\n\n.warp-material[_ngcontent-%COMP%] {\n  display: block;\n}\n\n.weft-material[_ngcontent-%COMP%], .weft-system[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin: 0px 2px;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/draftviewer/draftviewer.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"]
});

/***/ }),

/***/ 18423:
/*!**************************************************************************!*\
  !*** ./src/app/draftdetail/draftviewer/selection/selection.component.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectionComponent": () => (/* binding */ SelectionComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/provider/tree.service */ 6177);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/model/looms */ 58364);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../provider/render.service */ 78793);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/model/defaults */ 45286);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);














function SelectionComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](1, "button", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](2, "i", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("matMenuTriggerFor", ctx_r0.actions);
  }
}
class SelectionComponent {
  constructor(dm, tree, render) {
    this.dm = dm;
    this.tree = tree;
    this.render = render;
    this.onFill = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onCopy = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onClear = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onPaste = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.onSelectionEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.hide_selection = false;
    this.design_actions = dm.getOptionSet('design_actions');
    this.hide_options = true;
    this.hide_parent = true;
    this.hide_actions = false;
    this.force_height = false;
    this.force_width = false;
    this.start = {
      i: 0,
      si: 0,
      j: 0
    };
    this.end = {
      i: 0,
      si: 0,
      j: 0
    };
    this.top = 0;
    this.left = 0;
    this.screen_height = 0;
    this.screen_width = 0;
  }
  ngOnInit() {}
  ngAfterViewInit() {
    this.selectionEl = document.getElementById('selection');
    this.parent = document.getElementById('selection-container');
  }
  designActionChange(action) {
    switch (action) {
      case 'up':
        this.clearEvent(true);
        break;
      case 'down':
        this.clearEvent(false);
        break;
      case 'copy':
        this.copyEvent();
        break;
      case 'paste':
        this.pasteEvent('original');
        break;
      case 'toggle':
        this.pasteEvent('invert');
        break;
      case 'flip_x':
        this.pasteEvent('mirrorX');
        break;
      case 'flip_y':
        this.pasteEvent('mirrorY');
        break;
      case 'shift_left':
        this.pasteEvent('shiftLeft');
        break;
      case 'shift_up':
        this.pasteEvent('shiftUp');
        break;
    }
  }
  fillEvent(id) {
    var obj = {};
    obj.id = id;
    this.onFill.emit(obj);
  }
  copyEvent() {
    this.onCopy.emit();
  }
  clearEvent(b) {
    this.onClear.emit(b);
  }
  pasteEvent(type) {
    var obj = {};
    obj.type = type;
    this.onPaste.emit(obj);
  }
  /**
   * set parameters and view when starting a new selections
   * @param target he HTML target that receieved the mouse down event
   * @param start the interlacement upon that target that received the mouse click
   * @returns
   */
  onSelectStart(target, start) {
    const loom = this.tree.getLoom(this.id);
    const loom_settings = this.tree.getLoomSettings(this.id);
    //clear existing params
    this.unsetParameters();
    if (!target) return;
    this.target = target;
    this.start = start;
    this.hide_parent = false;
    switch (target.id) {
      case 'treadling':
        this.start.j = 0;
        this.width = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_1__.numTreadles)(loom), loom_settings.treadles);
        this.force_width = true;
        break;
      case 'threading':
        this.start.i = 0;
        this.start.si = 0;
        this.height = Math.max((0,_core_model_looms__WEBPACK_IMPORTED_MODULE_1__.numFrames)(loom), loom_settings.frames);
        this.force_height = true;
        break;
      case 'weft-systems':
      case 'weft-materials':
        this.force_width = true;
        this.width = 1;
        break;
      case 'warp-systems':
      case 'warp-materials':
        this.force_height = true;
        this.height = 1;
        break;
      case 'drawdown':
      case 'tieups':
        break;
    }
    this.end = start;
    this.recalculateSize();
    //set view flags
    this.hide_options = true;
    this.hide_parent = false;
    this.redraw();
  }
  /**
   * updates selectiono parameters when the user drags the selected area
   * @param pos the mouse position
   * @returns boolean to specify if the point was in range or not
   */
  onSelectDrag(pos) {
    if (pos.si < 0) {
      pos.si = 0;
      return false;
    }
    if (pos.si > this.render.visibleRows.length) {
      pos.si = this.render.visibleRows.length;
      return false;
    }
    this.end = pos;
    switch (this.target.id) {
      case 'treadling':
        this.end.i = pos.i;
        this.end.si = pos.si;
        break;
      case 'threading':
        this.end.j = pos.j;
        break;
      case 'weft-systems':
      case 'weft-materials':
      case 'warp-systems':
      case 'warp-materials':
      case 'drawdown':
      case 'tieups':
        break;
    }
    this.recalculateSize();
    this.redraw();
  }
  /**
   * triggers view changes when the selection event ends OR mouse leaves valid view
   */
  onSelectStop() {
    if (this.target === undefined) return;
    switch (this.target.id) {
      case "threading":
      case "treadling":
      case "tieups":
      case "warp-materials":
      case "warp-systems":
      case "weft-materials":
      case "weft-systems":
        this.hide_actions = true;
        break;
      default:
        this.hide_actions = false;
        break;
    }
    this.hide_options = false;
    this.onSelectionEnd.emit();
  }
  onSelectCancel() {
    this.hide_options = true;
    this.hide_parent = true;
    this.unsetParameters();
  }
  getStartingRowScreenIndex() {
    return Math.min(this.start.si, this.end.si);
  }
  getStartingRowIndex() {
    return Math.min(this.start.i, this.end.i);
  }
  getStartingColIndex() {
    return Math.min(this.start.j, this.end.j);
  }
  getEndingColIndex() {
    return Math.max(this.start.j, this.end.j);
  }
  getEndingRowScreenIndex() {
    return Math.max(this.start.si, this.end.si);
  }
  // getEndingIndex(): number{
  //   return Math.min(this.start.j, this.end.j);
  // }
  getWidth() {
    return this.width;
  }
  getHeight() {
    return this.height;
  }
  setEnd(end) {
    this.end = end;
    this.recalculateSize();
  }
  setStart(start) {
    this.hide_parent = false;
    this.hide_options = true;
    this.start = start;
    this.recalculateSize();
    this.top = this.start.i * this.render.getCellDims('base').h;
    this.left = this.start.j * this.render.getCellDims('base').w;
  }
  recalculateSize() {
    if (!this.force_width) this.width = Math.abs(this.end.j - this.start.j);
    if (!this.force_height) this.height = Math.abs(this.end.i - this.start.i);
    this.screen_width = this.width * this.render.getCellDims('base').w;
    this.screen_height = this.height * this.render.getCellDims('base').h;
  }
  unsetParameters() {
    this.width = -1;
    this.height = -1;
    this.force_width = false;
    this.force_height = false;
    this.hide_parent = true;
    this.hide_options = true;
  }
  hasSelection() {
    return this.width > 0 && this.height > 0;
  }
  getTop() {
    return Math.min(this.start.si, this.end.si);
  }
  getLeft() {
    return Math.min(this.start.j, this.end.j);
  }
  setTarget(t) {
    this.target = t;
  }
  getTarget() {
    return this.target;
  }
  getTargetId() {
    if (this.target !== undefined) return this.target.id;
    return undefined;
  }
  redraw() {
    if (this.hasSelection() && this.target.id !== 'tieups') {
      this.hide_parent = false;
      let top_ndx = Math.min(this.start.si, this.end.si);
      let left_ndx = Math.min(this.start.j, this.end.j);
      let in_div_top = top_ndx * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.draft_detail_cell_size;
      let in_div_left = left_ndx * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.draft_detail_cell_size;
      let abs_top = this.target.offsetTop;
      let abs_left = this.target.offsetLeft;
      if (this.target.id == 'drawdown') {
        abs_top += _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.draft_detail_cell_size;
        abs_left += _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.draft_detail_cell_size;
      }
      this.parent.style.top = abs_top + in_div_top + "px";
      this.parent.style.left = abs_left + in_div_left + "px";
    } else {
      this.hide_parent = true;
    }
  }
}
SelectionComponent.ɵfac = function SelectionComponent_Factory(t) {
  return new (t || SelectionComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_0__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_provider_render_service__WEBPACK_IMPORTED_MODULE_3__.RenderService));
};
SelectionComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineComponent"]({
  type: SelectionComponent,
  selectors: [["app-selection"]],
  inputs: {
    id: "id"
  },
  outputs: {
    onFill: "onFill",
    onCopy: "onCopy",
    onClear: "onClear",
    onPaste: "onPaste",
    onSelectionEnd: "onSelectionEnd"
  },
  decls: 12,
  vars: 13,
  consts: [["id", "selection-container"], [1, "selection-row"], ["id", "selection", 1, "selection"], ["id", "selection-actions", 1, "selection-actions"], [4, "ngIf"], ["mat-icon-button", "", "matTooltip", "copy this region", 3, "click"], [1, "fas", "fa-clipboard"], ["mat-icon-button", "", "matTooltip", "paste into this region", 3, "click"], [1, "fas", "fa-paste"], ["mat-icon-button", "", "matTooltip", "edit design in this region", 3, "matMenuTriggerFor"], [1, "fas", "fa-magic"]],
  template: function SelectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 0)(1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](4, SelectionComponent_ng_container_4_Template, 3, 1, "ng-container", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](5, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function SelectionComponent_Template_button_click_5_listener() {
        return ctx.copyEvent();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](6, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](7, "button", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function SelectionComponent_Template_button_click_7_listener() {
        return ctx.pasteEvent("original");
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](8, "i", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](9, "div", 1)(10, "span");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](11);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵstyleProp"]("display", ctx.hide_parent ? "none" : "flex");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵstyleProp"]("width", ctx.screen_width, "px")("height", ctx.screen_height, "px")("display", ctx.hide_selection ? "none" : "block");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵstyleProp"]("display", ctx.hide_options ? "none" : "flex");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", !ctx.hide_actions);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtextInterpolate2"]("", ctx.width, " x ", ctx.height, " ");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_7__.MatButton, _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__.MatMenuTrigger, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_9__.MatTooltip],
  styles: ["#selection-container[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: flex;\n  flex-direction: column;\n  pointer-events: none;\n  z-index: 100;\n}\n\n.selection-row[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  pointer-events: none;\n}\n\n.selection-actions[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  width: -moz-fit-content;\n  width: fit-content;\n  background: white;\n  opacity: 0.8;\n  pointer-events: all;\n}\n\n.selection[_ngcontent-%COMP%] {\n  border: dashed #ff4081 4px;\n  pointer-events: none;\n  overflow: visible;\n  z-index: 2;\n}\n\n.pattern-swatch[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%] {\n  border: thin solid grey;\n}\n\nspan[_ngcontent-%COMP%] {\n  padding-left: 8px;\n}\n\n.menu-button[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/draftviewer/selection/selection.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvZHJhZnR2aWV3ZXIvc2VsZWN0aW9uL3NlbGVjdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxvQkFBQTtFQUNBLFlBQUE7QUFDSjs7QUFHQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLG9CQUFBO0FBQUo7O0FBR0E7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUFBLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsbUJBQUE7QUFBSjs7QUFHQTtFQUNJLDBCQUFBO0VBRUEsb0JBQUE7RUFDQSxpQkFBQTtFQUNBLFVBQUE7QUFESjs7QUFLRTtFQUNJLHVCQUFBO0FBRk47O0FBS0U7RUFDSSxpQkFBQTtBQUZOOztBQU1FO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsMkJBQUE7QUFITiIsInNvdXJjZXNDb250ZW50IjpbIiNzZWxlY3Rpb24tY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgbGVmdDogMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgei1pbmRleDogMTAwO1xufVxuXG4uc2VsZWN0aW9uLXJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uc2VsZWN0aW9uLWFjdGlvbnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBvcGFjaXR5OiAwLjg7XG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XG59XG5cbi5zZWxlY3Rpb24ge1xuICBib3JkZXI6IGRhc2hlZCAjZmY0MDgxIDRweDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICB6LWluZGV4OiAyO1xufVxuXG4ucGF0dGVybi1zd2F0Y2ggc3ZnIHtcbiAgYm9yZGVyOiB0aGluIHNvbGlkIGdyZXk7XG59XG5cbnNwYW4ge1xuICBwYWRkaW5nLWxlZnQ6IDhweDtcbn1cblxuLm1lbnUtYnV0dG9uIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 78793:
/*!********************************************************!*\
  !*** ./src/app/draftdetail/provider/render.service.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderService": () => (/* binding */ RenderService)
/* harmony export */ });
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/model/defaults */ 45286);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/model/drafts */ 1435);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/provider/systems.service */ 14711);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);





class RenderService {
  constructor(ss) {
    this.ss = ss;
    //max values
    this.zoom = _core_model_defaults__WEBPACK_IMPORTED_MODULE_0__.defaults.draft_detail_zoom; //zoom can range from .1 to 2
    // this.view_frames = view_frames;
    this.current_view = 'pattern';
    this.view_front = true;
    //renders at min -  expands to max
    //   this.base_cell = {
    //   w: {max: 10, min: 0},
    //   h: {max: 10, min: 0},
    //   margin_fill_x: {max: 1, min: 0},
    //   margin_fill_y: {max: 1, min: 0},
    //   margin_clear_x: {max: 2, min: 0},
    //   margin_clear_y: {max: 2, min: 0},
    // };
    //  this.select = {
    //   offset_x: {max: 7, min: 0},
    //   offset_y: {max: 7, min: 0}
    //  }
  }

  loadNewDraft(draft) {
    this.visibleRows = [];
    for (let i = 0; i < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_1__.wefts)(draft.drawdown); i++) {
      this.visibleRows[i] = i;
    }
  }
  getTextInterval() {
    if (this.zoom > 1.75) return 1;
    if (this.zoom > 1.5) return 2;
    if (this.zoom > 1.25) return 4;
    if (this.zoom > 1) return 5;
    if (this.zoom > .75) return 8;
    if (this.zoom > .5) return 10;
    if (this.zoom > .25) return 12;
    return 15;
  }
  /**
   * given the ndx, get the next visible row or -1 if there isn't a next
   * @param ndx
   */
  getNextVisibleRow(ndx) {
    const next = ndx++;
    if (next >= this.visibleRows.length) return -1;
    return this.visibleRows[next];
  }
  /**SET DEFAULT CELL SIZE */
  getCellDims(type) {
    return {
      x: 0,
      y: 0,
      w: _core_model_defaults__WEBPACK_IMPORTED_MODULE_0__.defaults.draft_detail_cell_size,
      h: _core_model_defaults__WEBPACK_IMPORTED_MODULE_0__.defaults.draft_detail_cell_size
    };
    // return {
    //   x: this.getOffset(type+"_x"),
    //   y: this.getOffset(type+"_y"),
    //   w: this.base_cell.w.min,
    //   h: this.base_cell.h.min
    // };
  }

  setZoom(z) {
    this.zoom = z;
  }
  getZoom() {
    return this.zoom;
  }
  zoomOut() {
    this.zoom -= .25;
    if (this.zoom < .1) this.zoom = .1;
  }
  zoomIn() {
    this.zoom += .25;
    if (this.zoom > 2) this.zoom = 2;
  }
  // private getOffset(type) {
  //   if(type ==="select_x") return this.select.offset_x.min;
  //   if(type ==="select_y") return this.select.offset_y.min;
  //   if(type ==="base_clear_x") return this.base_cell.margin_clear_x.min;
  //   if(type ==="base_clear_y") return this.base_cell.margin_clear_y.min;
  //   if(type ==="base_fill_x") return this.base_cell.margin_fill_x.min;
  //   if(type ==="base_fill_y") return this.base_cell.margin_fill_y.min;
  //   else return 0;
  // }
  isYarnBasedView() {
    return this.current_view == 'visual' || this.current_view == 'yarn';
  }
  getCurrentView() {
    return this.current_view;
  }
  setCurrentView(view) {
    this.current_view = view;
  }
  isFront() {
    return this.view_front;
  }
  setFront(value) {
    return this.view_front = value;
  }
  updateVisible(draft) {
    this.visibleRows = draft.rowSystemMapping.map((val, ndx) => {
      return this.ss.weftSystemIsVisible(val) ? ndx : -1;
    }).filter(el => el !== -1);
  }
}
RenderService.ɵfac = function RenderService_Factory(t) {
  return new (t || RenderService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_2__.SystemsService));
};
RenderService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: RenderService,
  factory: RenderService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 62262:
/*!**********************************************************!*\
  !*** ./src/app/draftdetail/sidebar/sidebar.component.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SidebarComponent": () => (/* binding */ SidebarComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/modal/blankdraft/blankdraft.modal */ 84602);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/provider/tree.service */ 6177);
/* harmony import */ var _mixer_provider_ink_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../mixer/provider/ink.service */ 37045);
/* harmony import */ var _actions_actions_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../actions/actions.component */ 53040);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../provider/render.service */ 78793);
/* harmony import */ var _weaverview_weaverview_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../weaverview/weaverview.component */ 53295);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);






















function SidebarComponent_ng_container_9_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "button", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_ng_container_9_button_1_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵrestoreView"](_r8);
      const mode_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵnextContext"]().$implicit;
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵresetView"](ctx_r6.drawModeChange(mode_r4.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](2, "span", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const mode_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵnextContext"]().$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("is-active", ctx_r5.dm.isSelected(mode_r4.value, "draw_modes"));
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("name", mode_r4.value)("disabled", ctx_r5.viewonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassMap"](mode_r4.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtextInterpolate"](mode_r4.viewValue);
  }
}
function SidebarComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtemplate"](1, SidebarComponent_ng_container_9_button_1_Template, 4, 8, "button", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const mode_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("ngIf", mode_r4.value !== "material");
  }
}
function SidebarComponent_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](1, "button", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_ng_container_14_Template_button_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵrestoreView"](_r12);
      const shuttle_r10 = restoredCtx.$implicit;
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵresetView"](ctx_r11.drawWithMaterial(shuttle_r10.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](2, "span", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](3, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const shuttle_r10 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵstyleProp"]("background", shuttle_r10.color);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtextInterpolate"](shuttle_r10.name);
  }
}
class SidebarComponent {
  constructor(dm, is, tree, ms, dialog, render) {
    this.dm = dm;
    this.is = is;
    this.tree = tree;
    this.ms = ms;
    this.dialog = dialog;
    this.render = render;
    this.onUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onRedo = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onDesignModeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onZoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onViewChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onViewFront = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onShowWarpSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onHideWarpSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onShowWeftSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onHideWeftSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onLocalLoomNeedsRedraw = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onGlobalLoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onOperationAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onImport = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onViewPortMove = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onUpdateWarpSystems = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onUpdateWeftSystems = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onUpdateWarpShuttles = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onUpdateWeftShuttles = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onMaterialChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onNoteCreate = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onMLChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.onNewDraftCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.closeDrawer = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.view = 'pattern';
    this.front = true;
    this.view = this.dm.getSelectedDesignMode('view_modes').value;
  }
  ngOnInit() {
    this.draft = this.tree.getDraft(this.id);
    this.loom_settings = this.tree.getLoomSettings(this.id);
    this.front = this.render.view_front;
  }
  select() {
    var obj = {};
    obj.name = "select";
    obj.target = "design_modes";
    this.dm.selectDesignMode(obj.name, obj.target);
    this.onDesignModeChange.emit(obj);
  }
  createNewDraft() {
    const dialogRef = this.dialog.open(_core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_0__.BlankdraftModal, {});
    dialogRef.afterClosed().subscribe(obj => {
      // if(loadResponse !== undefined) this.onLoadNewFile.emit(loadResponse);
      if (obj !== undefined && obj !== null) this.onNewDraftCreated.emit(obj);
    });
  }
  closeDetailView() {
    this.closeDrawer.emit();
  }
  closeWeaverModals() {
    if (this.actions_modal != undefined && this.actions_modal.componentInstance != null) this.actions_modal.close();
    if (this.weaver_view_modal != undefined && this.weaver_view_modal.componentInstance != null) this.weaver_view_modal.close();
  }
  shapeChange(name) {
    var obj = {};
    obj.name = name;
    obj.target = "shapes";
    console.log('setting shape', name);
    this.dm.selectDesignMode(obj.name, obj.target);
    this.onDesignModeChange.emit(obj);
  }
  drawModeChange(name) {
    var obj = {};
    obj.name = name;
    obj.target = "draw_modes";
    this.dm.selectDesignMode(obj.name, obj.target);
    this.onDesignModeChange.emit(obj);
  }
  drawWithMaterial(material_id) {
    console.log("draw with material", material_id);
    var obj = {};
    obj.name = 'material';
    obj.target = 'draw_modes';
    obj.id = material_id;
    this.dm.selectDesignMode(obj.name, obj.target);
    const mode = this.dm.getDesignMode(obj.name, obj.target);
    mode.children = [];
    mode.children.push({
      value: obj.id,
      viewValue: "",
      icon: "",
      children: [],
      selected: false
    });
    console.log("children", mode.children);
    this.onDesignModeChange.emit(obj);
  }
  zoomChange(e, source) {
    e.source = source;
    this.onZoomChange.emit(e);
  }
  zoomIn() {
    this.onZoomChange.emit({
      source: 'in',
      val: -1
    });
  }
  zoomOut() {
    this.onZoomChange.emit({
      source: 'out',
      val: -1
    });
  }
  viewFront(e, value, source) {
    e.source = source;
    e.value = !value;
    this.onViewFront.emit(e);
  }
  viewChange(e) {
    if (e.checked) {
      this.onViewChange.emit('visual');
      this.dm.selectDesignMode('visual', 'view_modes');
    } else {
      this.onViewChange.emit('pattern');
      this.dm.selectDesignMode('pattern', 'view_modes');
    }
  }
  visibleButton(id, visible, type) {
    console.log("called", id, visible, type);
    if (type == "weft") {
      if (visible) {
        this.onShowWeftSystem.emit({
          systemId: id
        });
      } else {
        this.onHideWeftSystem.emit({
          systemId: id
        });
      }
    } else {
      if (visible) {
        this.onShowWarpSystem.emit({
          systemId: id
        });
      } else {
        this.onHideWarpSystem.emit({
          systemId: id
        });
      }
    }
  }
  openWeaverView() {
    if (this.weaver_view_modal != undefined && this.weaver_view_modal.componentInstance != null) return;
    this.weaver_view_modal = this.dialog.open(_weaverview_weaverview_component__WEBPACK_IMPORTED_MODULE_7__.WeaverViewComponent, {
      disableClose: true,
      maxWidth: 350,
      hasBackdrop: false,
      data: {
        render: this.render,
        draft: this.draft
      }
    });
    this.weaver_view_modal.componentInstance.onZoomChange.subscribe(event => {
      this.onZoomChange.emit(event);
    });
    this.weaver_view_modal.componentInstance.onViewChange.subscribe(event => {
      this.onViewChange.emit(event);
    });
    this.weaver_view_modal.componentInstance.onViewFront.subscribe(event => {
      this.onViewFront.emit(event);
    });
    this.weaver_view_modal.componentInstance.onShowWarpSystem.subscribe(event => {
      this.onShowWarpSystem.emit(event);
    });
    this.weaver_view_modal.componentInstance.onHideWarpSystem.subscribe(event => {
      this.onHideWarpSystem.emit(event);
    });
    this.weaver_view_modal.componentInstance.onShowWeftSystem.subscribe(event => {
      this.onShowWeftSystem.emit(event);
    });
    this.weaver_view_modal.componentInstance.onHideWeftSystem.subscribe(event => {
      this.onHideWeftSystem.emit(event);
    });
    this.weaver_view_modal.afterClosed().subscribe(result => {
      //this.onLoomChange.emit();
      // dialogRef.componentInstance.onChange.removeSubscription();
    });
  }
  openActions() {
    if (this.actions_modal != undefined && this.actions_modal.componentInstance != null) return;
    this.actions_modal = this.dialog.open(_actions_actions_component__WEBPACK_IMPORTED_MODULE_5__.ActionsComponent, {
      disableClose: true,
      maxWidth: 350,
      hasBackdrop: false,
      data: {
        id: this.id
      }
    });
    this.actions_modal.componentInstance.onUpdateWarpShuttles.subscribe(event => {
      this.onUpdateWarpShuttles.emit(event);
    });
    this.actions_modal.componentInstance.onUpdateWarpSystems.subscribe(event => {
      this.onUpdateWarpSystems.emit(event);
    });
    this.actions_modal.componentInstance.onUpdateWeftShuttles.subscribe(event => {
      this.onUpdateWeftShuttles.emit(event);
    });
    this.actions_modal.componentInstance.onUpdateWeftSystems.subscribe(event => {
      this.onUpdateWeftSystems.emit(event);
    });
    //   this.view_modal.afterClosed().subscribe(result => {
    //     //this.onLoomChange.emit();
    //    // dialogRef.componentInstance.onChange.removeSubscription();
    // });
  }

  undoClicked(e) {
    this.onUndo.emit();
  }
  redoClicked(e) {
    this.onRedo.emit();
  }
  inkChanged(value) {
    console.log("changing to", value);
    this.is.select(value);
    //this.onInkChange.emit(e.target.name);
  }

  designModeChange(name) {
    console.log("design mode change", name);
    this.dm.selectDesignMode(name, 'design_modes');
    this.onDesignModeChange.emit(name);
  }
  addNote() {
    this.onNoteCreate.emit();
  }
}
SidebarComponent.ɵfac = function SidebarComponent_Factory(t) {
  return new (t || SidebarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_1__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_mixer_provider_ink_service__WEBPACK_IMPORTED_MODULE_4__.InkService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_2__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_9__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_provider_render_service__WEBPACK_IMPORTED_MODULE_6__.RenderService));
};
SidebarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineComponent"]({
  type: SidebarComponent,
  selectors: [["app-sidebar"]],
  inputs: {
    timeline: "timeline",
    id: "id"
  },
  outputs: {
    onUndo: "onUndo",
    onRedo: "onRedo",
    onDesignModeChange: "onDesignModeChange",
    onZoomChange: "onZoomChange",
    onViewChange: "onViewChange",
    onViewFront: "onViewFront",
    onShowWarpSystem: "onShowWarpSystem",
    onHideWarpSystem: "onHideWarpSystem",
    onShowWeftSystem: "onShowWeftSystem",
    onHideWeftSystem: "onHideWeftSystem",
    onLocalLoomNeedsRedraw: "onLocalLoomNeedsRedraw",
    onGlobalLoomChange: "onGlobalLoomChange",
    onOperationAdded: "onOperationAdded",
    onImport: "onImport",
    onViewPortMove: "onViewPortMove",
    onUpdateWarpSystems: "onUpdateWarpSystems",
    onUpdateWeftSystems: "onUpdateWeftSystems",
    onUpdateWarpShuttles: "onUpdateWarpShuttles",
    onUpdateWeftShuttles: "onUpdateWeftShuttles",
    onMaterialChange: "onMaterialChange",
    onNoteCreate: "onNoteCreate",
    onMLChange: "onMLChange",
    onNewDraftCreated: "onNewDraftCreated",
    closeDrawer: "closeDrawer"
  },
  decls: 26,
  vars: 14,
  consts: [[1, "sidebar"], [1, "tool-chunk"], ["mat-icon-button", "", "color", "primary", 3, "click"], [1, "fa", "fa-angle-double-right"], ["mat-icon-button", "", "color", "primary", "matTooltip", "Edit Draft Cells", 3, "matMenuTriggerFor"], [1, "fas", "fa-edit"], ["inks", "matMenu"], [4, "ngFor", "ngForOf"], ["mat-icon-button", "", "color", "primary", "matTooltip", "Set Colors", 3, "matMenuTriggerFor"], [1, "fa-solid", "fa-paintbrush"], ["colors", "matMenu"], ["mat-icon-button", "", "color", "primary", "matTooltip", "Select Region", 3, "click"], [1, "fas", "fa-expand"], ["matTooltip", "Set Repeats", "color", "primary", "mat-icon-button", "", 3, "click"], [1, "fas", "fa-magic"], [1, "tool-chunk", "slider"], ["color", "primary", "mat-icon-button", "", 3, "click"], [1, "fas", "fa-search-plus"], [1, "view_slider"], ["tickInterval", ".1", "color", "primary", "step", ".1", "min", "0", "max", "2", 3, "vertical", "value", "change"], [1, "fas", "fa-search-minus"], ["class", "menu-button", "mat-menu-item", "", 3, "is-active", "name", "disabled", "click", 4, "ngIf"], ["mat-menu-item", "", 1, "menu-button", 3, "name", "disabled", "click"], [1, "menu-item"], ["mat-menu-item", "", 1, "menu-button", 3, "click"], [1, "swatch"]],
  template: function SidebarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_Template_button_click_2_listener() {
        return ctx.closeDetailView();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](3, "i", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](4, "div", 1)(5, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](6, "i", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](7, "mat-menu", null, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtemplate"](9, SidebarComponent_ng_container_9_Template, 2, 1, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](10, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](11, "i", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](12, "mat-menu", null, 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtemplate"](14, SidebarComponent_ng_container_14_Template, 5, 3, "ng-container", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](15, "button", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_Template_button_click_15_listener() {
        return ctx.select();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](16, "i", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](17, "button", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_Template_button_click_17_listener() {
        return ctx.openActions();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](18, "i", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](19, "div", 15)(20, "button", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_Template_button_click_20_listener() {
        return ctx.zoomIn();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](21, "i", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](22, "div", 18)(23, "mat-slider", 19);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("change", function SidebarComponent_Template_mat_slider_change_23_listener($event) {
        return ctx.zoomChange($event, "slider");
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](24, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function SidebarComponent_Template_button_click_24_listener() {
        return ctx.zoomOut();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](25, "i", 20);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵreference"](8);
      const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵreference"](13);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("is-active", ctx.dm.isSelected("draw", "design_modes"));
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("matMenuTriggerFor", _r0);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("ngForOf", ctx.dm.draw_modes);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("is-active", ctx.dm.isSelected("draw", "design_modes"));
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("matMenuTriggerFor", _r2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("ngForOf", ctx.ms.materials);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("is-active", ctx.dm.isSelected("select", "design_modes"));
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("is-active", ctx.actions_modal && ctx.actions_modal.componentInstance != null);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵpropertyInterpolate"]("value", ctx.render.zoom);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("vertical", true);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_10__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_11__.MatButton, _angular_material_menu__WEBPACK_IMPORTED_MODULE_12__.MatMenu, _angular_material_menu__WEBPACK_IMPORTED_MODULE_12__.MatMenuItem, _angular_material_menu__WEBPACK_IMPORTED_MODULE_12__.MatMenuTrigger, _angular_material_slider__WEBPACK_IMPORTED_MODULE_13__.MatSlider, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__.MatTooltip],
  styles: [".sidebar[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: space-between;\n  width: 42px;\n  height: 100%;\n  font-size: 0.8em;\n}\n\n.slider[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  max-width: 33%;\n}\n\n.swatch[_ngcontent-%COMP%] {\n  width: 9px;\n  height: 9px;\n  margin-right: 4px;\n  display: inline-block;\n  border: thin solid grey;\n}\n\n.menu-item[_ngcontent-%COMP%] {\n  font-style: inherit;\n  display: inline-block;\n  padding-left: 12px;\n  font-weight: inherit;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/sidebar/sidebar.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvc2lkZWJhci9zaWRlYmFyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSw4QkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGNBQUE7QUFDSjs7QUFFQTtFQUNJLFVBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxxQkFBQTtFQUNBLHVCQUFBO0FBQ0o7O0FBRUE7RUFDSSxtQkFBQTtFQUNBLHFCQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLnNpZGViYXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgd2lkdGg6IDQycHg7XG4gIGhlaWdodDogMTAwJTtcbiAgZm9udC1zaXplOiAwLjhlbTtcbn1cblxuLnNsaWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1heC13aWR0aDogMzMlO1xufVxuXG4uc3dhdGNoIHtcbiAgd2lkdGg6IDlweDtcbiAgaGVpZ2h0OiA5cHg7XG4gIG1hcmdpbi1yaWdodDogNHB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlcjogdGhpbiBzb2xpZCBncmV5O1xufVxuXG4ubWVudS1pdGVtIHtcbiAgZm9udC1zdHlsZTogaW5oZXJpdDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nLWxlZnQ6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 59300:
/*!****************************************************************!*\
  !*** ./src/app/draftdetail/simulation/simulation.component.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SimulationComponent": () => (/* binding */ SimulationComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/tree.service */ 6177);
/* harmony import */ var _core_provider_simulation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/simulation.service */ 74983);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ 92845);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/model/looms */ 58364);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/provider/materials.service */ 2940);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/input */ 68562);















function SimulationComponent_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 9);
  }
}
function SimulationComponent_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 10);
  }
}
class SimulationComponent {
  constructor(tree, ms, simulation) {
    this.tree = tree;
    this.ms = ms;
    this.simulation = simulation;
    this.onExpanded = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.sim_expanded = false;
    this.layer_spacing = 10;
    this.layer_threshold = 1;
    this.warp_threshold = 2;
    this.max_interlacement_width = 10;
    this.max_interlacement_height = 10;
    this.showing_warp_layer_map = false;
    this.showing_weft_layer_map = false;
    this.showing_warps = true;
    this.showing_wefts = true;
    this.showing_topo = false;
    this.showing_draft = false;
    this.boundary = 10;
    this.radius = 40;
    this.current_simdata = null;
  }
  onResize(event) {
    this.onWindowResize();
  }
  ngOnInit() {}
  ngAfterViewInit() {
    const div = document.getElementById('simulation_container');
    this.renderer = new three__WEBPACK_IMPORTED_MODULE_5__.WebGLRenderer();
    this.scene = new three__WEBPACK_IMPORTED_MODULE_5__.Scene();
    this.camera = new three__WEBPACK_IMPORTED_MODULE_5__.PerspectiveCamera(75, 1, 0.1, 1000);
    this.renderer.setSize(div.offsetWidth, div.offsetHeight);
    div.appendChild(this.renderer.domElement);
  }
  calcDefaultLayerSpacing(draft) {
    let max_weft = draft.rowShuttleMapping.reduce((acc, val) => {
      let diam = this.ms.getDiameter(val);
      if (diam > acc) return diam;
      return acc;
    }, 0);
    let max_warp = draft.colShuttleMapping.reduce((acc, val) => {
      let diam = this.ms.getDiameter(val);
      if (diam > acc) return diam;
      return acc;
    }, 0);
    return (max_weft / 2 + max_warp / 2) * 10;
  }
  endSimulation() {
    this.simulation.endSimulation(this.scene);
  }
  drawSimulation(draft, loom_settings) {
    this.layer_spacing = this.calcDefaultLayerSpacing(draft);
    this.draft = draft;
    this.loom_settings = loom_settings;
    this.layer_spacing = this.calcDefaultLayerSpacing(draft);
    this.simulation.setupSimulation(draft, this.renderer, this.scene, this.camera, this.layer_threshold, this.warp_threshold, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(loom_settings), this.layer_spacing, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.current_simdata = simdata;
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  /**
   * this passes new information to a current rendering, updating which portion of the data we are visualizing.
   * @param draft
   * @param loom_settings
   * @param start
   * @param end
   */
  updateSelection(start, end) {
    let width = end.j - start.j;
    if (width <= 0) return;
    let height = end.i - start.i;
    if (height <= 0) return;
    this.current_simdata.bounds = {
      topleft: {
        x: start.j,
        y: start.i
      },
      width,
      height
    };
    this.simulation.renderSimdata(this.scene, this.current_simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
  }
  /**
   * call this when the simulation needs to be updated due to a structural change.
   * This will recalculate all the simulation data and then redraw it to screen.
   * @param draft
   * @param loom_settings
   */
  updateSimulation(draft, loom_settings) {
    this.draft = draft;
    this.loom_settings = loom_settings;
    this.simulation.recalcSimData(this.scene, draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  changeLayerThreshold() {
    this.simulation.recalcSimData(this.scene, this.draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  toggleWefts() {
    if (!this.showing_wefts) this.simulation.showWefts();else this.simulation.hideWefts();
  }
  toggleDraft() {
    if (!this.showing_draft) this.simulation.showDraft();else this.simulation.hideDraft();
  }
  toggleWarps() {
    if (!this.showing_warps) this.simulation.showWarps();else this.simulation.hideWarps();
  }
  toggleTopo() {
    if (!this.showing_topo) this.simulation.showTopo();else this.simulation.hideTopo();
  }
  toggleWeftLayerView() {
    if (!this.showing_weft_layer_map) this.simulation.showWeftLayerMap();else this.simulation.hideWeftLayerMap();
  }
  toggleWarpLayerView() {
    if (!this.showing_warp_layer_map) this.simulation.showWarpLayerMap();else this.simulation.hideWarpLayerMap();
  }
  changeRadius(e) {
    this.simulation.recalcSimData(this.scene, this.draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  changeLayerSpacing(e) {
    this.simulation.recalcSimData(this.scene, this.draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  changeILaceWidth() {
    this.simulation.recalcSimData(this.scene, this.draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  changeILaceHeight() {
    this.simulation.recalcSimData(this.scene, this.draft, (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_2__.convertEPItoMM)(this.loom_settings), this.layer_spacing, this.layer_threshold, this.max_interlacement_width, this.max_interlacement_height, this.boundary, this.radius, this.ms).then(simdata => {
      this.simulation.renderSimdata(this.scene, simdata, this.showing_warps, this.showing_wefts, this.showing_warp_layer_map, this.showing_weft_layer_map, this.showing_topo, this.showing_draft);
    });
  }
  pageClose() {
    this.simulation.endSimulation(this.scene);
  }
  expand() {
    this.onExpanded.emit();
    this.sim_expanded = !this.sim_expanded;
    if (this.sim_expanded) {
      const ex_div = document.getElementById('expanded-container');
      this.renderer.setSize(ex_div.offsetWidth, ex_div.offsetHeight);
      this.camera.aspect = ex_div.offsetWidth / ex_div.offsetHeight;
    } else {
      const small_div = document.getElementById('simulation_container');
      this.renderer.setSize(small_div.offsetWidth, small_div.offsetHeight);
      this.camera.aspect = small_div.offsetWidth / small_div.offsetHeight;
    }
    this.camera.updateProjectionMatrix();
    this.renderer.render(this.scene, this.camera);
  }
  onWindowResize() {
    if (this.sim_expanded) {
      const ex_div = document.getElementById('expanded-container');
      this.renderer.setSize(ex_div.offsetWidth, ex_div.offsetHeight);
      this.camera.aspect = ex_div.offsetWidth / ex_div.offsetHeight;
    } else {
      const small_div = document.getElementById('simulation_container');
      this.renderer.setSize(small_div.offsetWidth, small_div.offsetHeight);
      this.camera.aspect = small_div.offsetWidth / small_div.offsetHeight;
    }
    this.camera.updateProjectionMatrix();
    this.renderer.render(this.scene, this.camera);
  }
}
SimulationComponent.ɵfac = function SimulationComponent_Factory(t) {
  return new (t || SimulationComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_0__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_3__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_simulation_service__WEBPACK_IMPORTED_MODULE_1__.SimulationService));
};
SimulationComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: SimulationComponent,
  selectors: [["app-simulation"]],
  hostBindings: function SimulationComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("resize", function SimulationComponent_resize_HostBindingHandler($event) {
        return ctx.onResize($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresolveWindow"]);
    }
  },
  inputs: {
    id: "id"
  },
  outputs: {
    onExpanded: "onExpanded"
  },
  decls: 24,
  vars: 16,
  consts: [["id", "simulation_container"], [1, "expand"], ["mat-icon-button", "", "color", "primary", "aria-label", "expand to view simuation full screen", 3, "click"], ["class", "fa-solid fa-maximize", 4, "ngIf"], ["class", "fa-solid fa-minimize", 4, "ngIf"], [1, "controls"], [1, "example-full-width"], ["matInput", "", "type", "number", "step", "1", 3, "ngModel", "min", "max", "ngModelChange", "change"], [1, "cameracontrols"], [1, "fa-solid", "fa-maximize"], [1, "fa-solid", "fa-minimize"]],
  template: function SimulationComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function SimulationComponent_Template_button_click_2_listener() {
        return ctx.expand();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, SimulationComponent_i_3_Template, 1, 0, "i", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, SimulationComponent_i_4_Template, 1, 0, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](5, "div", 5)(6, "mat-form-field", 6)(7, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](8, "Space Between Layers");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](9, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function SimulationComponent_Template_input_ngModelChange_9_listener($event) {
        return ctx.layer_spacing = $event;
      })("change", function SimulationComponent_Template_input_change_9_listener($event) {
        return ctx.changeLayerSpacing($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](10, "mat-form-field", 6)(11, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](12, "Radius");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](13, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function SimulationComponent_Template_input_ngModelChange_13_listener($event) {
        return ctx.radius = $event;
      })("change", function SimulationComponent_Template_input_change_13_listener($event) {
        return ctx.changeRadius($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](14, "mat-form-field", 6)(15, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](16, "Layer Threshold");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](17, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function SimulationComponent_Template_input_ngModelChange_17_listener($event) {
        return ctx.layer_threshold = $event;
      })("change", function SimulationComponent_Template_input_change_17_listener() {
        return ctx.changeLayerThreshold();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](18, "mat-form-field", 6)(19, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](20, "Longest Weft Float");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](21, "input", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function SimulationComponent_Template_input_ngModelChange_21_listener($event) {
        return ctx.max_interlacement_width = $event;
      })("change", function SimulationComponent_Template_input_change_21_listener() {
        return ctx.changeILaceWidth();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](22, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](23, " Press and move to rotate the simulation. Press+Control and move will pan the camera. Scroll in/out will zoom in/out\n");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx.sim_expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.sim_expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("display", ctx.sim_expanded ? "flex" : "none");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx.layer_spacing)("min", 0)("max", 100);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx.radius)("min", 1)("max", 1000);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx.layer_threshold)("min", 1)("max", 100);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx.max_interlacement_width)("min", 1)("max", 100);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.NgModel, _angular_material_button__WEBPACK_IMPORTED_MODULE_8__.MatButton, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_10__.MatInput],
  styles: ["#simulation_container[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  display: block;\n}\n\n.toggle[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.cameracontrols[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 75%;\n  text-align: center;\n  top: 90vh;\n  font-size: 0.8em;\n  left: 3%;\n}\n\n.controls[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 25%;\n  display: flex;\n  flex-direction: column;\n  top: 3%;\n  font-size: 0.8em;\n  left: 3%;\n}\n\n.expand[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 10px;\n  left: 60vw;\n  z-index: 2;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/simulation/simulation.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvc2ltdWxhdGlvbi9zaW11bGF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUksV0FBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGNBQUE7QUFBSjs7QUFLQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtBQUZKOztBQUtBO0VBQ0ksa0JBQUE7RUFDQSxVQUFBO0VBQ0Esa0JBQUE7RUFDQSxTQUFBO0VBQ0EsZ0JBQUE7RUFDQSxRQUFBO0FBRko7O0FBS0E7RUFDSSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxPQUFBO0VBQ0EsZ0JBQUE7RUFDQSxRQUFBO0FBRko7O0FBS0E7RUFDSSxrQkFBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0VBQ0EsVUFBQTtBQUZKIiwic291cmNlc0NvbnRlbnQiOlsiI3NpbXVsYXRpb25fY29udGFpbmVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgbWluLWhlaWdodDogNDAwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4udG9nZ2xlIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cblxuLmNhbWVyYWNvbnRyb2xzIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogNzUlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRvcDogOTB2aDtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgbGVmdDogMyU7XG59XG5cbi5jb250cm9scyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IDI1JTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgdG9wOiAzJTtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgbGVmdDogMyU7XG59XG5cbi5leHBhbmQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTBweDtcbiAgbGVmdDogNjB2dztcbiAgei1pbmRleDogMjtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 53295:
/*!****************************************************************!*\
  !*** ./src/app/draftdetail/weaverview/weaverview.component.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WeaverViewComponent": () => (/* binding */ WeaverViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/systems.service */ 14711);
/* harmony import */ var _provider_render_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../provider/render.service */ 78793);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/slide-toggle */ 84714);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);














class WeaverViewComponent {
  constructor(ss, dm, dialog, render) {
    // console.log("unique rows", utilInstance.filterToUniqueValues(this.draft.rowSystemMapping))
    this.ss = ss;
    this.dm = dm;
    this.dialog = dialog;
    this.render = render;
    // zoom:number;
    // @Input() view;
    // @Input() front;
    // @Input() view_modes;
    this.front = true;
    this.collective_systems = [];
    this.onViewChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onViewFront = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onZoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onShowWarpSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onHideWarpSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onShowWeftSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onHideWeftSystem = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    // this.weft_systems = utilInstance.filterToUniqueValues(this.draft.rowSystemMapping).map(el => this.ss.getWeftSystem(el));
    // this.warp_systems = utilInstance.filterToUniqueValues(this.draft.colSystemMapping).map(el => this.ss.getWarpSystem(el));;
    // this.weft_systems.forEach(system => {
    //   this.collective_systems.push({id: system.id, weft: system, warp: null});
    // })
    // this.warp_systems.forEach(system => {
    //   const ndx = this.collective_systems.findIndex(el => el.id === system.id);
    //   if(ndx !== -1) this.collective_systems[ndx].warp = system;
    //   else this.collective_systems.push({id: system.id, weft: null, warp: system});
    // })
  }

  ngOnInit() {}
  close() {}
  viewChange(e) {
    console.log(e);
    if (e.checked) this.onViewChange.emit('simulate');else this.onViewChange.emit('pattern');
  }
  zoomChange(e, source) {
    e.source = source;
    this.onZoomChange.emit(e);
  }
  toggleCrossingView() {
    this.onViewChange.emit('crossing');
  }
  viewFront(e, value, source) {
    e.source = source;
    e.value = !value;
    this.onViewFront.emit(e);
  }
  /**
   * assumes layers
   * hows all weft systems placed upon a given layer
   * @param id
   */
  showOnly(id) {
    //need to look down the warps on this system and look for alternating values
    //if there is an alternating value, then that weft system is part of this. 
    //hilde the other warps
    // this.collective_systems.forEach(data => {
    //   if(data.id === id){
    //     if(data.warp !== null){
    //       data.warp.visible = true;
    //       this.onShowWarpSystem.emit({systemId: data.id});
    //     }  
    //   }else{
    //     if(data.warp !== null){
    //       this.onHideWarpSystem.emit({systemId: data.id});
    //       data.warp.visible = false;
    //     }  
    //   }
    // });
    //   //for each system
    //   this.collective_systems.forEach(cs => {
    //     const  system_id = cs.id;
    //     const sys_draft:Array<Array<boolean>> = [];
    //     this.draft.drawdown.forEach((row, i) => {
    //       if(this.draft.rowSystemMapping[i] !== system_id) return;
    //       sys_draft.push([]);
    //       row.forEach((col, j) => {
    //         if(this.draft.colSystemMapping[j] !== id) return;
    //           sys_draft[sys_draft.length-1].push(this.draft.drawdown[i][j].getHeddle());
    //       });
    //     });
    //     if(sys_draft.length == 0){
    //       const sys = this.collective_systems.find(el => el.id == system_id);
    //       if(sys.weft !== null){
    //         sys.weft.visible = false;
    //         this.onHideWeftSystem.emit({systemId: sys.id});
    //       }
    //     }else{
    //       //now we have a draft that includes only the layer id and the system id disclosed
    //       const first_val:boolean = sys_draft[0][0];
    //       let found: boolean = false; 
    //       for(let i = 0; i < sys_draft.length && !found; i++){
    //         const diff = sys_draft[i].find(el => el !== first_val);
    //         if(diff !== undefined){
    //           found = true;
    //           const sys = this.collective_systems.find(el => el.id == system_id);
    //           if(sys.weft !== null){
    //           sys.weft.visible = true;
    //           this.onShowWeftSystem.emit({systemId: sys.id});
    //           }
    //         }
    //       }
    //       if(!found){
    //         const sys = this.collective_systems.find(el => el.id == system_id);
    //         if(sys.weft !== null){
    //         sys.weft.visible = false;
    //         this.onHideWeftSystem.emit({systemId: system_id});
    //         }
    //       }
    //     }
    //   });
  }
  visibleButton(id, visible, type) {
    if (type == "weft") {
      if (visible) {
        this.onShowWeftSystem.emit({
          systemId: id
        });
      } else {
        this.onHideWeftSystem.emit({
          systemId: id
        });
      }
    } else {
      if (visible) {
        this.onShowWarpSystem.emit({
          systemId: id
        });
      } else {
        this.onHideWarpSystem.emit({
          systemId: id
        });
      }
    }
  }
}
WeaverViewComponent.ɵfac = function WeaverViewComponent_Factory(t) {
  return new (t || WeaverViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_0__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_render_service__WEBPACK_IMPORTED_MODULE_2__.RenderService));
};
WeaverViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: WeaverViewComponent,
  selectors: [["app-weaverview"]],
  outputs: {
    onViewChange: "onViewChange",
    onViewFront: "onViewFront",
    onZoomChange: "onZoomChange",
    onShowWarpSystem: "onShowWarpSystem",
    onHideWarpSystem: "onHideWarpSystem",
    onShowWeftSystem: "onShowWeftSystem",
    onHideWeftSystem: "onHideWeftSystem"
  },
  decls: 19,
  vars: 3,
  consts: [[1, "toprow"], ["mat-icon-button", "", 3, "click"], [1, "fas", "fa-times"], ["mat-dialog-title", "", "cdkDrag", "", "cdkDragRootElement", ".cdk-overlay-pane", "cdkDragHandle", ""], [1, "view_slider"], ["mat-icon-button", ""], [1, "fas", "fa-search-plus"], ["invert", "", "tickInterval", ".1", "step", ".1", "min", "0", "max", "2", 3, "value", "change"], [1, "fas", "fa-search-minus"], [1, "yarns-and-back"], [3, "checked", "change"]],
  template: function WeaverViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function WeaverViewComponent_Template_button_click_1_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](4, "Draft View");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](5, "mat-dialog-content")(6, "div", 4)(7, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](8, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "mat-slider", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("change", function WeaverViewComponent_Template_mat_slider_change_9_listener($event) {
        return ctx.zoomChange($event, "slider");
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](10, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](11, "i", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "div", 9)(13, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](14, " View Yarns ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](15, "mat-slide-toggle", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("change", function WeaverViewComponent_Template_mat_slide_toggle_change_15_listener($event) {
        return ctx.viewChange($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](16, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](17, " View Back ");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](18, "mat-slide-toggle", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("change", function WeaverViewComponent_Template_mat_slide_toggle_change_18_listener($event) {
        ctx.front = !ctx.front;
        return ctx.viewFront($event, ctx.front, "front");
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](9);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpropertyInterpolate"]("value", ctx.render.zoom);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("checked", ctx.render.current_view !== "pattern");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("checked", !ctx.render.view_front);
    }
  },
  dependencies: [_angular_material_button__WEBPACK_IMPORTED_MODULE_5__.MatButton, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_6__.MatSlideToggle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_4__.MatDialogContent, _angular_material_slider__WEBPACK_IMPORTED_MODULE_7__.MatSlider, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_8__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_8__.CdkDragHandle],
  styles: [".main-options[_ngcontent-%COMP%] {\n  display: block;\n}\n\nh4[_ngcontent-%COMP%] {\n  margin: 6px 0px;\n  padding: 6px 0px;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n}\n\n.mat-stroked-button[_ngcontent-%COMP%] {\n  border: 1px solid currentColor;\n  padding: 0px 11px;\n  line-height: 20px;\n  font-size: 0.8em;\n}\n\n.yarns-and-back[_ngcontent-%COMP%] {\n  display: flex;\n  font-size: 0.8em;\n}\n\n.view_slider[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 8px 0 16px 0;\n  font-size: 0.8em;\n  flex-direction: column;\n  margin: auto;\n}\n\n.system-matrix[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8em;\n}\n\n.system-row[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  font-size: 0.8em;\n}\n\n.system-activate[_ngcontent-%COMP%] {\n  width: 50%;\n}\n\n.weft-system[_ngcontent-%COMP%], .warp-system[_ngcontent-%COMP%] {\n  width: 25%;\n}\n\n.mat-button-toggle-appearance-standard[_ngcontent-%COMP%]   .mat-button-toggle-label-content[_ngcontent-%COMP%] {\n  \n  padding: 0 9px;\n  font-size: 0.9em;\n}\n/*# sourceURL=webpack://./src/app/draftdetail/weaverview/weaverview.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZHJhZnRkZXRhaWwvd2VhdmVydmlldy93ZWF2ZXJ2aWV3LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0ksY0FBQTtBQUFKOztBQUdBO0VBQ0MsZUFBQTtFQUNBLGdCQUFBO0FBQUQ7O0FBV0E7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQVJGOztBQVdBO0VBQ0UsOEJBQUE7RUFDQSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUFSRjs7QUFZQTtFQUNFLGFBQUE7RUFDQSxnQkFBQTtBQVRGOztBQVlBO0VBQ0UsV0FBQTtFQUNBLHFCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxzQkFBQTtFQUNBLFlBQUE7QUFURjs7QUFZQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0FBVEY7O0FBWUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQVRGOztBQVlBO0VBQ0UsVUFBQTtBQVRGOztBQVlBOztFQUVFLFVBQUE7QUFURjs7QUFzQkE7RUFDSSx1QkFBQTtFQUNBLGNBQUE7RUFDQSxnQkFBQTtBQW5CSiIsInNvdXJjZXNDb250ZW50IjpbIi5tYWluLW9wdGlvbnMge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuaDQge1xuICBtYXJnaW46IDZweCAwcHg7XG4gIHBhZGRpbmc6IDZweCAwcHg7XG59XG5cbi50b3Byb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBsaW5lLWhlaWdodDogMWVtO1xufVxuXG4ubWF0LXN0cm9rZWQtYnV0dG9uIHtcbiAgYm9yZGVyOiAxcHggc29saWQgY3VycmVudENvbG9yO1xuICBwYWRkaW5nOiAwcHggMTFweDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG59XG5cbi55YXJucy1hbmQtYmFjayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG59XG5cbi52aWV3X3NsaWRlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHggMCAxNnB4IDA7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1hcmdpbjogYXV0bztcbn1cblxuLnN5c3RlbS1tYXRyaXgge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmb250LXNpemU6IDAuOGVtO1xufVxuXG4uc3lzdGVtLXJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG59XG5cbi5zeXN0ZW0tYWN0aXZhdGUge1xuICB3aWR0aDogNTAlO1xufVxuXG4ud2VmdC1zeXN0ZW0sXG4ud2FycC1zeXN0ZW0ge1xuICB3aWR0aDogMjUlO1xufVxuXG4ubWF0LWJ1dHRvbi10b2dnbGUtYXBwZWFyYW5jZS1zdGFuZGFyZCAubWF0LWJ1dHRvbi10b2dnbGUtbGFiZWwtY29udGVudCB7XG4gIC8qIGxpbmUtaGVpZ2h0OiA0OHB4OyAqL1xuICBwYWRkaW5nOiAwIDlweDtcbiAgZm9udC1zaXplOiAwLjllbTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 61595:
/*!**************************************************!*\
  !*** ./src/app/mixer/design/design.component.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DesignComponent": () => (/* binding */ DesignComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/modal/blankdraft/blankdraft.modal */ 84602);
/* harmony import */ var _modal_ops_ops_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modal/ops/ops.component */ 554);
/* harmony import */ var _core_provider_state_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/provider/state.service */ 99938);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/provider/operation.service */ 46524);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/modal/loadfile/loadfile.component */ 17623);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/divider */ 71528);
/* harmony import */ var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/expansion */ 17591);
/* harmony import */ var _angular_material_list__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/list */ 6517);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);



















function DesignComponent_ng_container_24_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "mat-expansion-panel")(2, "mat-expansion-panel-header")(3, "mat-panel-title", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](5, "mat-panel-description")(6, "button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_ng_container_24_ng_container_10_Template_button_click_6_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r7);
      const op_name_r5 = restoredCtx.$implicit;
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r6.addOperation(op_name_r5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](7, "h4");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](8, " Description ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](9, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](11, "h4");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](12, "Application ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](13, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](14);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const op_name_r5 = ctx.$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r4.op_desc.getDisplayName(op_name_r5), " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](ctx_r4.op_desc.getOpDescription(op_name_r5));
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r4.op_desc.getOpApplication(op_name_r5), "");
  }
}
function DesignComponent_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "mat-accordion", 20)(2, "mat-expansion-panel")(3, "mat-expansion-panel-header")(4, "mat-panel-title", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](6, "mat-panel-description");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](7, "p", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](9, "mat-accordion", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](10, DesignComponent_ng_container_24_ng_container_10_Template, 15, 3, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const class_r3 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", class_r3.category_name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](class_r3.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", class_r3.op_names);
  }
}
class DesignComponent {
  constructor(ops, op_desc, ss, dialog) {
    this.ops = ops;
    this.op_desc = op_desc;
    this.ss = ss;
    this.dialog = dialog;
    this.onUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onRedo = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onNewDraftCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onOperationAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onImport = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onNoteCreate = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onLoadDrafts = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    const allops = this.ops.ops.concat(this.ops.dynamic_ops);
    this.classifications = this.op_desc.getOpClassifications();
  }
  openBitmaps() {
    const dialogRef = this.dialog.open(_core_modal_loadfile_loadfile_component__WEBPACK_IMPORTED_MODULE_5__.LoadfileComponent, {
      data: {
        multiple: true,
        accepts: '.jpg,.bmp,.png',
        type: 'bitmap_collection',
        title: 'Select Bitmap Files to Convert to Drafts'
      }
    });
    dialogRef.afterClosed().subscribe(drafts => {
      if (drafts !== undefined) {
        this.onLoadDrafts.emit(drafts);
      }
    });
  }
  createNewDraft() {
    const dialogRef = this.dialog.open(_core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_0__.BlankdraftModal, {});
    dialogRef.afterClosed().subscribe(obj => {
      // if(loadResponse !== undefined) this.onLoadNewFile.emit(loadResponse);
      if (obj !== undefined && obj !== null) this.onNewDraftCreated.emit(obj);
    });
  }
  openOps() {
    if (this.op_modal != undefined && this.op_modal.componentInstance != null) return;
    this.op_modal = this.dialog.open(_modal_ops_ops_component__WEBPACK_IMPORTED_MODULE_1__.OpsComponent, {
      disableClose: true,
      hasBackdrop: false
    });
    this.op_modal.componentInstance.onOperationAdded.subscribe(event => {
      this.onOperationAdded.emit(event);
    });
    this.op_modal.componentInstance.onImport.subscribe(event => {
      this.onImport.emit(event);
    });
    this.op_modal.afterClosed().subscribe(result => {
      //this.onLoomChange.emit();
      // dialogRef.componentInstance.onChange.removeSubscription();
    });
  }
  addOperation(name) {
    this.onOperationAdded.emit(name);
  }
  addNote() {
    this.onNoteCreate.emit();
  }
  undoClicked(e) {
    this.onUndo.emit();
  }
  redoClicked(e) {
    this.onRedo.emit();
  }
}
DesignComponent.ɵfac = function DesignComponent_Factory(t) {
  return new (t || DesignComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_3__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_4__.OperationDescriptionsService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_core_provider_state_service__WEBPACK_IMPORTED_MODULE_2__.StateService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialog));
};
DesignComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
  type: DesignComponent,
  selectors: [["app-design"]],
  outputs: {
    onUndo: "onUndo",
    onRedo: "onRedo",
    onNewDraftCreated: "onNewDraftCreated",
    onOperationAdded: "onOperationAdded",
    onImport: "onImport",
    onNoteCreate: "onNoteCreate",
    onLoadDrafts: "onLoadDrafts"
  },
  decls: 65,
  vars: 3,
  consts: [[1, "designtools"], [1, "undoredo"], ["mat-stroked-button", "", "color", "primary", "matTooltip", "undo", 3, "disabled", "click"], ["undoEvent", ""], [1, "fas", "fa-undo"], ["mat-stroked-button", "", "color", "primary", "matTooltip", "redo", 3, "disabled", "click"], ["redoEvent", ""], [1, "fas", "fa-redo"], ["mat-stroked-button", "", "color", "primary", "matTooltip", "Blank Draft", 3, "click"], [1, "fas", "fa-chess-board"], ["mat-stroked-button", "", "color", "primary", 3, "click"], [1, "fa-solid", "fa-chess-board"], ["mat-stroked-button", "", "color", "primary", "matTooltip", "Note", "color", "primary", 3, "click"], [1, "fas", "fa-comment"], [4, "ngFor", "ngForOf"], [1, "setting_title"], [1, "fa-sharp", "fa-solid", "fa-circle-down"], [1, "draft-inlet-icon"], [1, "fa-solid", "fa-eye"], [1, "material-inlet-icon"], ["multi", "", 1, "operation_categories"], [1, "cat_title"], [1, "cat_desc"], ["multi", "", 1, "example-headers-align"], [1, "opname"], ["mat-button", "", "color", "primary", 1, "fa-solid", "fa-plus", "add", 3, "click"]],
  template: function DesignComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "button", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_Template_button_click_2_listener($event) {
        return ctx.undoClicked($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](4, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](5, " Undo ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](6, "button", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_Template_button_click_6_listener($event) {
        return ctx.redoClicked($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](8, "i", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](9, " Redo ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](10, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_Template_button_click_10_listener() {
        return ctx.createNewDraft();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](11, "i", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](12, " Add Blank Draft to Workspace ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](13, "button", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_Template_button_click_13_listener() {
        return ctx.openBitmaps();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](14, "i", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](15, " Import Bitmaps to AdaCAD Drafts");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](16, "button", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function DesignComponent_Template_button_click_16_listener() {
        return ctx.addNote();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](17, "i", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](18, " Add Comment to Workspace ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](19, "mat-divider");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](20, "h2");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](21, "Operation Descriptions");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](22, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](23, "You can add operations to the AdaCAD workspace to mathematically describe different relationships within your weave draft. We've organized them into categories that you can browse below ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](24, DesignComponent_ng_container_24_Template, 11, 3, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](25, "mat-divider");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](26, "h2", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](27, " Keyboard Shortcuts");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](28, "mat-list")(29, "mat-list-item");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](30, "\u2318x Undo");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](31, "mat-list-item");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](32, "\u2318y Redo");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](33, "mat-list-item");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](34, "\u2318= Zoom In");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](35, "mat-list-item");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](36, "\u2318- Zoom Out");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](37, "mat-list-item");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](38, "\u2318s Save");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](39, "h2", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](40, "Interaction");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](41, "h3");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](42, "Chain Operations");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](43, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](44, " To connect operations together, click the ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](45, "i", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](46, " on the bottom of a draft and connect it to the ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](47, "i", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](48, " on the top of an operation. ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](49, "h3");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](50, "Highlight an Operation Chain");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](51, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](52, " If you'd like to highlight the chain of operations that generated a particular operation input, you can do so by clicking the ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](53, "i", 18);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](54, " on the input");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](55, "h3");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](56, "Multiselect Operations");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](57, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](58, "Hold the shift key and click all the operations you would like to select. Once you let go, you can move them all as a group. ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](59, "h3");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](60, "Add Materials to Drafts");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](61, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](62, " Some operations allow you to add in information about the materials and systems to be used when they compute a new draft. These operations will have a ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](63, "i", 19);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](64, " as one of their inputs. The material and system information from the draft you connect will be used in the resulting draft ");
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", ctx.ss.undo_disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", ctx.ss.redo_disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](18);
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("ngForOf", ctx.classifications);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.NgForOf, _angular_material_button__WEBPACK_IMPORTED_MODULE_9__.MatButton, _angular_material_divider__WEBPACK_IMPORTED_MODULE_10__.MatDivider, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatAccordion, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanel, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelHeader, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelTitle, _angular_material_expansion__WEBPACK_IMPORTED_MODULE_11__.MatExpansionPanelDescription, _angular_material_list__WEBPACK_IMPORTED_MODULE_12__.MatList, _angular_material_list__WEBPACK_IMPORTED_MODULE_12__.MatListItem, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_13__.MatTooltip],
  styles: [".mixer[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n}\n\n.designtools[_ngcontent-%COMP%] {\n  margin: 20px;\n}\n\n.opname[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n\nh4[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n\nh5[_ngcontent-%COMP%] {\n  font-weight: normal;\n  font-style: italic;\n}\n\ni[_ngcontent-%COMP%] {\n  display: inline-block;\n}\n\n.setting_title[_ngcontent-%COMP%] {\n  padding: 18px 0px;\n}\n\n.draft-inlet-icon[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 20px;\n  background: url('draft_inlet.svg');\n  background-size: 24px 24px;\n}\n\n.material-inlet-icon[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 20px;\n  background: url('material_inlet.svg');\n  background-size: 24px 24px;\n}\n\n.undoredo[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n.undoredo[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  width: 49%;\n}\n\n.add[_ngcontent-%COMP%] {\n  width: 40px;\n  height: 40px;\n  width: 100%;\n  text-align: right;\n}\n\nh3[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 0.8em;\n  padding-bottom: 12px;\n  padding-top: 18px;\n}\n\n.mat-divider[_ngcontent-%COMP%] {\n  margin: 4px 0px;\n}\n\nh2[_ngcontent-%COMP%], .cat_title[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n\n.mat-divider[_ngcontent-%COMP%] {\n  padding: 12px 0px;\n}\n\n.operation_categories[_ngcontent-%COMP%] {\n  padding-top: 12px;\n}\n\n.cat_desc[_ngcontent-%COMP%] {\n  margin-bottom: 32px;\n}\n\np[_ngcontent-%COMP%] {\n  line-height: 1.6em;\n  margin-bottom: 12px;\n}\n\nbutton[_ngcontent-%COMP%] {\n  margin: 4px;\n  width: 100%;\n}\n/*# sourceURL=webpack://./src/app/mixer/design/design.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvZGVzaWduL2Rlc2lnbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGtCQUFBO0FBQ0o7O0FBRUE7RUFDSSxZQUFBO0FBQ0o7O0FBR0E7RUFDSSxpQkFBQTtBQUFKOztBQUdBO0VBQ0ksaUJBQUE7QUFBSjs7QUFHQTtFQUNJLG1CQUFBO0VBQ0Esa0JBQUE7QUFBSjs7QUFHQTtFQUNJLHFCQUFBO0FBQUo7O0FBR0E7RUFDSSxpQkFBQTtBQUFKOztBQUVBO0VBQ0ksV0FBQTtFQUNBLFlBQUE7RUFDQSxrQ0FBQTtFQUNBLDBCQUFBO0FBQ0o7O0FBRUU7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHFDQUFBO0VBQ0EsMEJBQUE7QUFDSjs7QUFFQTtFQUNJLFdBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSw4QkFBQTtBQUNKO0FBQ0k7RUFDSSxVQUFBO0FBQ1I7O0FBR0E7RUFDSSxXQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtBQUFKOztBQUdBO0VBQ0ksMEJBQUE7RUFDQSxnQkFBQTtFQUNBLG9CQUFBO0VBQ0EsaUJBQUE7QUFBSjs7QUFJQTtFQUNLLGVBQUE7QUFETDs7QUFNQTs7RUFFSSxpQkFBQTtBQUhKOztBQVFBO0VBQ0ksaUJBQUE7QUFMSjs7QUFRQTtFQUNJLGlCQUFBO0FBTEo7O0FBUUE7RUFDSSxtQkFBQTtBQUxKOztBQVVBO0VBQ0ksa0JBQUE7RUFDQSxtQkFBQTtBQVBKOztBQVdBO0VBQ0ksV0FBQTtFQUNBLFdBQUE7QUFSSiIsInNvdXJjZXNDb250ZW50IjpbIi5taXhlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmRlc2lnbnRvb2xzIHtcbiAgbWFyZ2luOiAyMHB4O1xufVxuXG4ub3BuYW1lIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmg0IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmg1IHtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuXG5pIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4uc2V0dGluZ190aXRsZSB7XG4gIHBhZGRpbmc6IDE4cHggMHB4O1xufVxuXG4uZHJhZnQtaW5sZXQtaWNvbiB7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJhY2tncm91bmQ6IHVybCguLi8uLi8uLi9hc3NldHMvc3ZnL2RyYWZ0X2lubGV0LnN2Zyk7XG4gIGJhY2tncm91bmQtc2l6ZTogMjRweCAyNHB4O1xufVxuXG4ubWF0ZXJpYWwtaW5sZXQtaWNvbiB7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJhY2tncm91bmQ6IHVybCguLi8uLi8uLi9hc3NldHMvc3ZnL21hdGVyaWFsX2lubGV0LnN2Zyk7XG4gIGJhY2tncm91bmQtc2l6ZTogMjRweCAyNHB4O1xufVxuXG4udW5kb3JlZG8ge1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuLnVuZG9yZWRvIGJ1dHRvbiB7XG4gIHdpZHRoOiA0OSU7XG59XG5cbi5hZGQge1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICB3aWR0aDogMTAwJTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbmgzIHtcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIHBhZGRpbmctYm90dG9tOiAxMnB4O1xuICBwYWRkaW5nLXRvcDogMThweDtcbn1cblxuLm1hdC1kaXZpZGVyIHtcbiAgbWFyZ2luOiA0cHggMHB4O1xufVxuXG5oMixcbi5jYXRfdGl0bGUge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLm1hdC1kaXZpZGVyIHtcbiAgcGFkZGluZzogMTJweCAwcHg7XG59XG5cbi5vcGVyYXRpb25fY2F0ZWdvcmllcyB7XG4gIHBhZGRpbmctdG9wOiAxMnB4O1xufVxuXG4uY2F0X2Rlc2Mge1xuICBtYXJnaW4tYm90dG9tOiAzMnB4O1xufVxuXG5wIHtcbiAgbGluZS1oZWlnaHQ6IDEuNmVtO1xuICBtYXJnaW4tYm90dG9tOiAxMnB4O1xufVxuXG5idXR0b24ge1xuICBtYXJnaW46IDRweDtcbiAgd2lkdGg6IDEwMCU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 27195:
/*!******************************************!*\
  !*** ./src/app/mixer/mixer.component.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MixerComponent": () => (/* binding */ MixerComponent),
/* harmony export */   "myCustomTooltipDefaults": () => (/* binding */ myCustomTooltipDefaults)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_fire_analytics__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/fire/analytics */ 52591);
/* harmony import */ var _angular_fire_auth__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/fire/auth */ 61577);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var _core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/modal/blankdraft/blankdraft.modal */ 84602);
/* harmony import */ var _core_model_cell__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/model/cell */ 94467);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/model/defaults */ 45286);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/model/drafts */ 1435);
/* harmony import */ var _core_model_looms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/model/looms */ 58364);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/model/util */ 75973);
/* harmony import */ var _core_provider_auth_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/provider/auth.service */ 46866);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core/provider/file.service */ 96374);
/* harmony import */ var _core_provider_filesystem_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/provider/filesystem.service */ 65130);
/* harmony import */ var _core_provider_image_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/provider/image.service */ 53398);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_notes_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/provider/notes.service */ 31326);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../core/provider/operation.service */ 46524);
/* harmony import */ var _core_provider_state_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../core/provider/state.service */ 99938);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/provider/tree.service */ 6177);
/* harmony import */ var _core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../core/provider/workspace.service */ 80828);
/* harmony import */ var _draftdetail_draftdetail_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../draftdetail/draftdetail.component */ 8842);
/* harmony import */ var _draftdetail_provider_render_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../draftdetail/provider/render.service */ 78793);
/* harmony import */ var _palette_palette_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./palette/palette.component */ 64989);
/* harmony import */ var _provider_multiselect_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./provider/multiselect.service */ 16379);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./provider/viewport.service */ 2320);
/* harmony import */ var _provider_zoom_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./provider/zoom.service */ 75817);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @angular/cdk/scrolling */ 76328);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @angular/common/http */ 58987);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @angular/material/sidenav */ 16643);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @angular/material/tabs */ 15892);
/* harmony import */ var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @angular/material/progress-bar */ 51294);
/* harmony import */ var _core_topbar_topbar_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../core/topbar/topbar.component */ 34181);
/* harmony import */ var _core_modal_material_material_modal__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../core/modal/material/material.modal */ 75727);
/* harmony import */ var _core_filebrowser_filebrowser_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../core/filebrowser/filebrowser.component */ 52609);
/* harmony import */ var _core_modal_examples_examples_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../core/modal/examples/examples.component */ 12324);
/* harmony import */ var _core_keycodes_directive__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../core/keycodes.directive */ 85150);
/* harmony import */ var _mixerview_mixerview_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./mixerview/mixerview.component */ 13440);
/* harmony import */ var _design_design_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./design/design.component */ 61595);
/* harmony import */ var _quickop_quickop_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./quickop/quickop.component */ 75754);














































































function MixerComponent_mat_drawer_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "mat-drawer", 17)(1, "div", 18)(2, "div", 19)(3, "button", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r9.collapsed = !ctx_r9.collapsed);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](4, "i", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](5, "button", 22, 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r11.undo());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](7, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](8, "button", 25, 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_8_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r12.redo());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](10, "i", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](11, "button", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_11_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r13.createNote());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](12, "i", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](13, "button", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_13_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r14.createNewDraft());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](14, "i", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](15, "button", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_15_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r15.toggleSelectMode());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](16, "i", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](17, "button", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_17_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r16.onSave({
        type: "ada"
      }));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](18, "i", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](19, "div", 36)(20, "h1");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](21, "AdaCAD");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](22, "div", 37)(23, "button", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_23_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r17.zoomIn());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](24, "mat-slider", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("change", function MixerComponent_mat_drawer_5_Template_mat_slider_change_24_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r18.zoomChange($event, "slider"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](25, "button", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_25_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r19.zoomOut());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](26, "button", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("click", function MixerComponent_mat_drawer_5_Template_button_click_26_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r10);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r20.togglePanMode());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](27, "i", 42);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("disableClose", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵclassProp"]("nav-opened", !ctx_r1.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵclassProp"]("fa-angle-double-right", ctx_r1.collapsed)("fa-angle-double-left", !ctx_r1.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("disabled", ctx_r1.ss.undo_disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("disabled", ctx_r1.ss.redo_disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("color", ctx_r1.dm.isSelected("marquee", "design_modes") ? "accent" : "primary");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵpropertyInterpolate"]("value", ctx_r1.zs.zoom_table_ndx);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("vertical", true)("step", 1)("min", 0)("max", ctx_r1.zs.num_steps);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("color", ctx_r1.dm.isSelected("pan", "design_modes") ? "accent" : "primary");
  }
}
function MixerComponent_mat_drawer_6_mat_option_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "mat-option", 63);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r27 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", option_r27.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtextInterpolate1"](" ", option_r27.view, " ");
  }
}
function MixerComponent_mat_drawer_6_mat_option_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "mat-option", 63);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const loomtype_r28 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", loomtype_r28.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtextInterpolate1"](" ", loomtype_r28.viewValue, " ");
  }
}
function MixerComponent_mat_drawer_6_mat_option_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "mat-option", 63);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const unit_r29 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", unit_r29.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtextInterpolate1"](" ", unit_r29.viewValue, " ");
  }
}
function MixerComponent_mat_drawer_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "mat-drawer", 43)(1, "app-topbar", 44, 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onCollapseSidebar", function MixerComponent_mat_drawer_6_Template_app_topbar_onCollapseSidebar_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r30.collapsed = !ctx_r30.collapsed);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](3, "mat-tab-group", 46)(4, "mat-tab", 47)(5, "app-filebrowser", 48);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onLoadNewFile", function MixerComponent_mat_drawer_6_Template_app_filebrowser_onLoadNewFile_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r32.loadNewFile($event));
    })("onLoadFromDB", function MixerComponent_mat_drawer_6_Template_app_filebrowser_onLoadFromDB_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r33.loadFromDB($event));
    })("onClearScreen", function MixerComponent_mat_drawer_6_Template_app_filebrowser_onClearScreen_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r34.loadBlankFile());
    })("onCurrentFileDeleted", function MixerComponent_mat_drawer_6_Template_app_filebrowser_onCurrentFileDeleted_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r35.deleteCurrentFile());
    })("onSave", function MixerComponent_mat_drawer_6_Template_app_filebrowser_onSave_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r36 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r36.onSave($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](6, "mat-tab", 49)(7, "app-design", 50, 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onUndo", function MixerComponent_mat_drawer_6_Template_app_design_onUndo_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r37 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r37.undo());
    })("onRedo", function MixerComponent_mat_drawer_6_Template_app_design_onRedo_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r38.redo());
    })("onOperationAdded", function MixerComponent_mat_drawer_6_Template_app_design_onOperationAdded_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r39.operationAdded($event));
    })("onImport", function MixerComponent_mat_drawer_6_Template_app_design_onImport_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r40.importNewFile($event));
    })("onLoadDrafts", function MixerComponent_mat_drawer_6_Template_app_design_onLoadDrafts_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r41 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r41.loadDrafts($event));
    })("onNoteCreate", function MixerComponent_mat_drawer_6_Template_app_design_onNoteCreate_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r42.createNote());
    })("onNewDraftCreated", function MixerComponent_mat_drawer_6_Template_app_design_onNewDraftCreated_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r43.newDraftCreated($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](9, "mat-tab", 51)(10, "form", 52, 53)(12, "mat-form-field")(13, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](14, "When viewing Draft Details, Place the (0,0) point at: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](15, "mat-select", 54);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("selectionChange", function MixerComponent_mat_drawer_6_Template_mat_select_selectionChange_15_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r44 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r44.originChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](16, MixerComponent_mat_drawer_6_mat_option_16_Template, 2, 2, "mat-option", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](17, "mat-form-field")(18, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](19, "Loom Type");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](20, "mat-select", 56);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("selectionChange", function MixerComponent_mat_drawer_6_Template_mat_select_selectionChange_20_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵreference"](11);
      const ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r45.loomChange(_r23));
    })("valueChange", function MixerComponent_mat_drawer_6_Template_mat_select_valueChange_20_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r46.loomtype = $event);
    })("ngModelChange", function MixerComponent_mat_drawer_6_Template_mat_select_ngModelChange_20_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r47.loomtype = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](21, MixerComponent_mat_drawer_6_mat_option_21_Template, 2, 2, "mat-option", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](22, "mat-form-field")(23, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](24, "Default Density Units");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](25, "mat-select", 57);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("valueChange", function MixerComponent_mat_drawer_6_Template_mat_select_valueChange_25_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r48.units = $event);
    })("ngModelChange", function MixerComponent_mat_drawer_6_Template_mat_select_ngModelChange_25_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r49.units = $event);
    })("selectionChange", function MixerComponent_mat_drawer_6_Template_mat_select_selectionChange_25_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵreference"](11);
      const ctx_r50 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r50.unitChange(_r23));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](26, MixerComponent_mat_drawer_6_mat_option_26_Template, 2, 2, "mat-option", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](27, "mat-form-field")(28, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtext"](29, "Default Density");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](30, "input", 58);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("ngModelChange", function MixerComponent_mat_drawer_6_Template_input_ngModelChange_30_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r51.epi = $event);
    })("change", function MixerComponent_mat_drawer_6_Template_input_change_30_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵreference"](11);
      const ctx_r52 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r52.epiChange(_r23));
    })("blur", function MixerComponent_mat_drawer_6_Template_input_blur_30_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵreference"](11);
      const ctx_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r53.epiChange(_r23));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](31, "mat-tab", 59)(32, "app-material-modal", 60);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onMaterialChange", function MixerComponent_mat_drawer_6_Template_app_material_modal_onMaterialChange_32_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r54 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r54.materialChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](33, "mat-tab", 61)(34, "app-examples", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onLoadExample", function MixerComponent_mat_drawer_6_Template_app_examples_onLoadExample_34_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵrestoreView"](_r31);
      const ctx_r55 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵresetView"](ctx_r55.loadNewFile($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](35, "app-loadfile");
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("disableClose", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("collapsed", ctx_r2.collapsed)("drawer", ctx_r2.drawer);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](14);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", ctx_r2.selected_origin);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngForOf", ctx_r2.origin_options);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", ctx_r2.loomtype)("ngModel", ctx_r2.loomtype);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngForOf", ctx_r2.loomtypes);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("value", ctx_r2.units)("ngModel", ctx_r2.units);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngForOf", ctx_r2.density_units);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngModel", ctx_r2.epi);
  }
}
function MixerComponent_mat_progress_bar_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](0, "mat-progress-bar", 64);
  }
}
//disables some angular checking mechanisms
(0,_angular_core__WEBPACK_IMPORTED_MODULE_34__.enableProdMode)();
/** Custom options the configure the tooltip's default show/hide delays. */
const myCustomTooltipDefaults = {
  showDelay: 1000,
  hideDelay: 1000,
  touchendHideDelay: 1000,
  position: 'right',
  disableTooltipInteractivity: true
};
class MixerComponent {
  /// ANGULAR FUNCTIONS
  /**
   * @constructor
   * ps - pattern service (variable name is initials). Subscribes to the patterns and used
   * to get and update stitches.
   * dialog - Anglar Material dialog module. Used to control the popup modals.
   */
  constructor(dm, auth, ms, sys, tree, scroll, fs, ws, vp, notes, ss, dialog, image, ops, http, zs, files, render, multiselect, fbauth) {
    var _this = this;
    this.dm = dm;
    this.auth = auth;
    this.ms = ms;
    this.sys = sys;
    this.tree = tree;
    this.scroll = scroll;
    this.fs = fs;
    this.ws = ws;
    this.vp = vp;
    this.notes = notes;
    this.ss = ss;
    this.dialog = dialog;
    this.image = image;
    this.ops = ops;
    this.http = http;
    this.zs = zs;
    this.files = files;
    this.render = render;
    this.multiselect = multiselect;
    this.fbauth = fbauth;
    this.epi = 10;
    this.units = 'cm';
    this.frames = 8;
    this.treadles = 10;
    this.loomtype = "jacquard";
    this.loomtypes = [];
    this.density_units = [];
    this.warp_locked = false;
    this.origin_options = null;
    this.selected_origin = 0;
    this.show_viewer = false;
    this.show_details = false;
    this.loading = false;
    /**
      * The weave Timeline object.
      * @property {Timeline}
      */
    this.viewonly = false;
    this.manual_scroll = false;
    this.unsubscribe$ = new rxjs__WEBPACK_IMPORTED_MODULE_35__.Subject();
    this.collapsed = true;
    this.selected_nodes_copy = null;
    this.selected_origin = this.ws.selected_origin_option;
    this.origin_options = this.ws.getOriginOptions();
    this.epi = ws.epi;
    this.units = ws.units;
    this.frames = ws.min_frames;
    this.treadles = ws.min_treadles;
    this.loomtype = ws.type;
    this.loomtypes = dm.getOptionSet('loom_types');
    this.density_units = dm.getOptionSet('density_units');
    //this.dialog.open(MixerInitComponent, {width: '600px'});
    this.scrollingSubscription = this.scroll.scrolled().subscribe(data => {
      this.onWindowScroll(data);
    });
    this.vp.setAbsolute(_core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_canvas_width, _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_canvas_height); //max size of canvas, evenly divisible by default cell size
    //subscribe to the login event and handle what happens in that case 
    if (auth) {
      const success = (0,_angular_fire_auth__WEBPACK_IMPORTED_MODULE_36__.authState)(this.fbauth).subscribe( /*#__PURE__*/function () {
        var _ref = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (user) {
          _this.initLoginLogoutSequence(user);
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }
  ngOnInit() {
    const analytics = (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_37__.getAnalytics)();
    (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_37__.logEvent)(analytics, 'onload', {
      items: [{
        uid: this.auth.uid
      }]
    });
  }
  ngAfterViewInit() {}
  onWindowScroll(data) {
    if (!this.manual_scroll) {
      this.palette.handleWindowScroll(data);
      // this.view_tool.updateViewPort(data);
    } else {
      this.manual_scroll = false;
    }
  }
  setScroll(delta) {
    this.palette.handleScroll(delta);
    this.manual_scroll = true;
    //this.view_tool.updateViewPort(data);
  }

  closeDetailViewer(obj) {
    console.log("OBJ ", obj);
    this.show_details = false;
    this.details.windowClosed();
    //the object was never copied
    if (obj.clone_id == -1) {
      let comp = this.tree.getComponent(obj.id);
      comp.redrawExistingDraft();
      this.palette.updateDownstream(obj.id).then(el => {
        this.palette.addTimelineState();
      });
      //reperform all of the ops 
    } else {
      //this object was copied and we need to keep the copy
      if (obj.dirty) {
        const parent = this.tree.getComponent(obj.clone_id);
        let el = document.getElementById('scale-' + parent.id);
        let width = 0;
        if (el !== null && el !== undefined) width = el.offsetWidth;
        this.palette.createSubDraftFromEditedDetail(obj.id).then(sd => {
          const new_topleft = {
            x: parent.topleft.x + (width + 40) * this.zs.zoom / _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size,
            y: parent.topleft.y
          };
          sd.setPosition(new_topleft);
        });
      } else {
        this.tree.removeSubdraftNode(obj.id);
      }
    }
    //refresh all of the subdrafts
    // let tlds:Array<number> = this.tree.getTopLevelDrafts();
    // tlds.forEach(tld => {
    //   let comp: SubdraftComponent = <SubdraftComponent>this.tree.getComponent(tld);
    //   comp.redrawExistingDraft();
    // })
    // this.palette.updateDownstream(obj).then(el => {
    //   this.palette.addTimelineState();
    // });
    // //reperform all of the ops 
  }

  detailViewChange() {
    this.details.weaveRef.rescale(this.render.getZoom());
  }
  addOp(event) {
    this.palette.addOperation(event);
  }
  isBlankWorkspace() {
    return this.tree.nodes.length == 0;
  }
  zoomIn() {
    const old_zoom = this.zs.zoom;
    this.zs.zoomIn();
    this.renderChange(old_zoom);
  }
  zoomOut() {
    const old_zoom = this.zs.zoom;
    this.zs.zoomOut();
    this.renderChange(old_zoom);
  }
  createNewDraft() {
    const dialogRef = this.dialog.open(_core_modal_blankdraft_blankdraft_modal__WEBPACK_IMPORTED_MODULE_1__.BlankdraftModal, {});
    dialogRef.afterClosed().subscribe(obj => {
      if (obj !== undefined && obj !== null) this.newDraftCreated(obj);
    });
  }
  zoomChange(e, source) {
    const old_zoom = this.zs.zoom;
    this.zs.setZoom(e.value);
    this.palette.rescale(old_zoom);
  }
  /**
   * this is called anytime a user event is fired
   * @param user
   */
  initLoginLogoutSequence(user) {
    var _this2 = this;
    console.log("IN LOGIN/LOGOUT ", user);
    let searchParams = new URLSearchParams(window.location.search);
    if (searchParams.has('ex')) {
      this.loadExampleAtURL(searchParams.get('ex'));
      return;
    }
    if (user === null) {
      //this is a logout event
      this.files.setCurrentFileInfo(this.files.generateFileId(), 'blank draft', '');
      this.files.clearTree();
    } else {
      if (this.auth.isFirstSession() || !this.auth.isFirstSession() && this.isBlankWorkspace()) {
        this.auth.getMostRecentFileIdFromUser(user).then( /*#__PURE__*/function () {
          var _ref2 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (fileid) {
            if (fileid !== null) {
              const ada = yield _this2.files.getFile(fileid).catch(e => {
                console.error("HI ", e);
              });
              const meta = yield _this2.files.getFileMeta(fileid).catch(console.error);
              if (ada === undefined) {
                _this2.loadBlankFile();
              } else if (meta === undefined) {
                _this2.files.setCurrentFileInfo(fileid, 'file name not found', '');
                _this2.prepAndLoadFile('file name not found', fileid, '', ada);
              } else {
                _this2.files.setCurrentFileInfo(fileid, meta.name, meta.desc);
                _this2.prepAndLoadFile(meta.name, fileid, meta.desc, ada);
              }
            } else {
              console.log("LOOKING FOR ADA FILE");
              _this2.auth.getMostRecentAdaFromUser(user).then( /*#__PURE__*/function () {
                var _ref3 = (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (adafile) {
                  console.log("ADA FILE IS ", adafile);
                  if (adafile !== null) {
                    let fileid = yield _this2.files.convertAdaToFile(user.uid, adafile);
                    console.log("convert ada to file id ", fileid);
                    let ada = yield _this2.files.getFile(fileid);
                    let meta = yield _this2.files.getFileMeta(fileid);
                    if (ada === undefined) {
                      _this2.loadBlankFile();
                    } else if (meta === undefined) {
                      _this2.files.setCurrentFileInfo(fileid, 'file name not found', '');
                      _this2.prepAndLoadFile('file name not found', fileid, '', ada);
                    } else {
                      _this2.files.setCurrentFileInfo(fileid, meta.name, meta.desc);
                      _this2.prepAndLoadFile(meta.name, fileid, meta.desc, ada);
                    }
                  } else {
                    console.log("load blank");
                    _this2.loadBlankFile();
                    return;
                  }
                });
                return function (_x3) {
                  return _ref3.apply(this, arguments);
                };
              }());
            }
          });
          return function (_x2) {
            return _ref2.apply(this, arguments);
          };
        }());
      } else {
        //this.loadBlankFile();
        this.saveFile();
        this.files.writeNewFileMetaData(user.uid, this.files.current_file_id, this.files.current_file_name, this.files.current_file_desc);
      }
    }
  }
  /**
  * this is called when paste is called and has loaded in the data from the copy event.
  * @param result
  */
  insertPasteFile(result) {
    this.processFileData(result.data).then(data => {
      this.palette.changeDesignmode('move');
      this.saveFile();
    }).catch(console.error);
  }
  /**
   * this gets called when a new file is started from the topbar or a new file is reload via undo/redo
   * @param result
   */
  loadNewFile(result) {
    this.clearAll();
    this.files.setCurrentFileInfo(result.id, result.name, result.desc);
    this.processFileData(result.data).then(data => {
      this.palette.changeDesignmode('move');
      this.saveFile();
    }).catch(e => {
      console.log("CAUGHT ERROR through from process file data");
    });
  }
  loadFromDB(fileid) {
    var _this3 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this3.clearAll();
      const ada = yield _this3.files.getFile(fileid);
      const meta = yield _this3.files.getFileMeta(fileid);
      _this3.files.setCurrentFileInfo(fileid, meta.name, meta.desc);
      _this3.prepAndLoadFile(meta.name, fileid, meta.desc, ada);
      _this3.saveFile();
    })();
  }
  loadBlankFile() {
    this.clearAll();
    this.files.setCurrentFileInfo(this.files.generateFileId(), 'load blank', '');
    this.saveFile();
  }
  deleteCurrentFile() {
    this.clearAll();
    if (this.files.file_tree.length > 0) {
      this.loadFromDB(this.files.file_tree[0].id);
    } else {
      this.files.setCurrentFileInfo(this.files.generateFileId(), 'new blank file', '');
    }
    this.saveFile();
  }
  saveFile() {
    //if this user is logged in, write it to the
    this.fs.saver.ada('mixer', true, this.zs.zoom).then(so => {
      this.ss.addMixerHistoryState(so);
    });
  }
  /**
   * this gets called when a new file is started from the topbar
   * @param result
   */
  importNewFile(result) {
    this.processFileData(result.data).then(data => {
      this.palette.changeDesignmode('move');
      this.clearAll();
      console.log("imported new file", result, result.data);
    }).catch(console.error);
  }
  printTreeStatus(name, treenode) {
    treenode.forEach(tn => {
      if (tn === undefined) {
        console.log("Undefined Node", tn);
        return;
      }
      if (tn.inputs === undefined) {
        console.log("Undefined Inputs", tn);
        return;
      }
      if (tn.outputs === undefined) {
        console.log("Undefined Outputs", tn);
        return;
      }
      switch (tn.node.type) {
        case 'cxn':
          if (tn.inputs.length !== 1 || tn.outputs.length !== 1) console.log("Invalid Number of Inputs/Outputs on Connection", tn);
          break;
        case 'draft':
          if (tn.inputs.length > 1) console.log("Invalid Number of Inputs/Outputs on Draft", tn);
          break;
      }
    });
  }
  /**
   * this uses the uploaded node data to create new nodes, in addition to any nodes that may already exist
   * @param nodes the nodes from the upload
   * @returns an array of uploaded ids mapped to unique ids in this instance
   */
  loadNodes(nodes) {
    var _this4 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const functions = nodes.map(n => _this4.tree.loadNode(n.type, n.node_id));
      return Promise.all(functions);
    })();
  }
  /**
   * uploads the relationships between the nodes as specified in a load file
   * @param id_map the map from uploaded ids to current ids generated by loadNodes
   * @param tns the uploaded treenode data
   * @returns an array of treenodes and the map associated at each tree node
   */
  loadTreeNodes(id_map, tns) {
    var _this5 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const updated_tnp = tns.map(tn => {
        //we need these here because firebase does not store arrays of size 0
        if (tn.inputs === undefined) tn.inputs = [];
        if (tn.outputs === undefined) tn.outputs = [];
        const input_list = tn.inputs.map(input => {
          if (typeof input === 'number') {
            const input_in_map = id_map.find(el => el.prev_id === input);
            if (input_in_map !== undefined) {
              return {
                tn: input_in_map.cur_id,
                ndx: 0
              };
            } else {
              console.error("could not find matching node");
            }
          } else {
            const input_in_map = id_map.find(el => el.prev_id === input.tn);
            if (input_in_map !== undefined) {
              return {
                tn: input_in_map.cur_id,
                ndx: input.ndx
              };
            } else {
              console.error("could not find matching node");
            }
          }
        });
        const output_list = tn.outputs.map(output => {
          //handle files of old type, before inputs were broken into two fields
          if (typeof output === 'number') {
            const output_map = id_map.find(el => el.prev_id === output);
            if (output_map !== undefined) {
              return {
                tn: output_map.cur_id,
                ndx: 0
              };
            } else {
              console.error("could not find matching node");
            }
          } else {
            const output_map = id_map.find(el => el.prev_id === output.tn);
            if (output_map !== undefined) {
              return {
                tn: output_map.cur_id,
                ndx: output.ndx
              };
            } else {
              console.error("could not find matching node");
            }
          }
        });
        const new_tn = {
          node: id_map.find(el => el.prev_id === tn.node).cur_id,
          parent: tn.parent === null || tn.parent === -1 ? -1 : id_map.find(el => el.prev_id === tn.parent).cur_id,
          inputs: input_list,
          outputs: output_list
        };
        //console.log("new tn is ", new_tn);
        return new_tn;
      });
      const functions = updated_tnp.map(tn => _this5.tree.loadTreeNodeData(id_map, tn.node, tn.parent, tn.inputs, tn.outputs));
      return Promise.all(functions);
    })();
  }
  /**
   * Take a fileObj returned from the fileservice and process
   */
  processFileData(data) {
    var _this6 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this6.loading = true;
      let entry_mapping = [];
      _this6.updateOrigin(_this6.ws.selected_origin_option);
      //start processing images first thing 
      const images_to_load = [];
      data.ops.forEach(op => {
        const internal_op = _this6.ops.getOp(op.name);
        if (internal_op === undefined || internal_op == null || internal_op.params === undefined) return;
        const param_types = internal_op.params.map(el => el.type);
        param_types.forEach((p, ndx) => {
          if (p === 'file') {
            images_to_load.push(op.params[ndx]);
          }
        });
      });
      return _this6.image.loadFiles(images_to_load).then(el => {
        return _this6.tree.replaceOutdatedOps(data.ops);
      }).then(correctedOps => {
        data.ops = correctedOps;
        return _this6.loadNodes(data.nodes);
      }).then(id_map => {
        entry_mapping = id_map;
        return _this6.loadTreeNodes(id_map, data.treenodes);
      }).then(treenodes => {
        const seednodes = treenodes.filter(tn => _this6.tree.isSeedDraft(tn.tn.node.id)).map(tn => tn.entry);
        const seeds = seednodes.map(sn => {
          let d = null;
          let render_colors = true;
          const draft_node = data.nodes.find(node => node.node_id === sn.prev_id);
          //let d: Draft = initDraft();
          let l = {
            treadling: [],
            tieup: [],
            threading: []
          };
          let ls = {
            frames: _this6.ws.min_frames,
            treadles: _this6.ws.min_treadles,
            epi: _this6.ws.epi,
            units: _this6.ws.units,
            type: _this6.ws.type
          };
          if (draft_node !== undefined) {
            const located_draft = data.draft_nodes.find(draft => draft.draft_id === draft_node.node_id);
            if (located_draft === undefined) {
              console.log("Looking for ", draft_node.node_id, "in", data.draft_nodes.map(el => el.draft_id));
              console.error("could not find draft with id in draft list");
            } else {
              d = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.copyDraft)(located_draft.draft);
              ls = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_6__.copyLoomSettings)(located_draft.loom_settings);
              l = (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_6__.copyLoom)(located_draft.loom);
              if (located_draft.render_colors !== undefined) render_colors = located_draft.render_colors;
            }
          } else {
            console.error("draft node could not be found");
          }
          if (d !== null && d !== undefined) {
            d.id = sn.cur_id; //do this so that all draft ids match the component / node ids
          } else {
            d = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.initDraftWithParams)({
              warps: 1,
              wefts: 1,
              drawdown: [[false]]
            });
            d.id = sn.cur_id;
          }
          return {
            entry: sn,
            id: sn.cur_id,
            draft: d,
            loom: l,
            loom_settings: ls,
            render_colors: render_colors
          };
        });
        const seed_fns = seeds.map(seed => _this6.tree.loadDraftData(seed.entry, seed.draft, seed.loom, seed.loom_settings, seed.render_colors));
        const op_fns = data.ops.map(op => {
          const entry = entry_mapping.find(el => el.prev_id == op.node_id);
          return _this6.tree.loadOpData(entry, op.name, op.params, op.inlets);
        });
        return Promise.all([seed_fns, op_fns]);
      }).then(el => {
        return _this6.tree.validateNodes();
      }).then(el => {
        //console.log("performing top level ops");
        return _this6.tree.performTopLevelOps();
      }).then(el => {
        //delete any nodes that no longer need to exist
        _this6.tree.getDraftNodes().filter(el => el.draft === null).forEach(el => {
          if (_this6.tree.hasParent(el.id)) {
            el.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.initDraftWithParams)({
              warps: 1,
              wefts: 1,
              pattern: [[(0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.createCell)(false)]]
            });
            el.draft.id = el.id;
          } else {
            console.log("removing node ", el.id, el.type, _this6.tree.hasParent(el.id));
            _this6.tree.removeNode(el.id);
          }
        });
      }).then(el => {
        return _this6.tree.nodes.forEach(node => {
          if (!(node.component === null || node.component === undefined)) return;
          const entry = entry_mapping.find(el => el.cur_id === node.id);
          if (entry === undefined) return;
          switch (node.type) {
            case 'draft':
              _this6.palette.loadSubDraft(node.id, _this6.tree.getDraft(node.id), data.nodes.find(el => el.node_id === entry.prev_id), data.draft_nodes.find(el => el.node_id === entry.prev_id), data.scale);
              break;
            case 'op':
              const op = _this6.tree.getOpNode(node.id);
              _this6.palette.loadOperation(op.id, op.name, op.params, op.inlets, data.nodes.find(el => el.node_id === entry.prev_id).topleft, data.scale);
              break;
            case 'cxn':
              _this6.palette.loadConnection(node.id);
              break;
          }
        });
      })
      // ).then(el => {
      //   return this.tree.nodes.forEach(node => {
      //     if(!(node.component === null || node.component === undefined)) return;
      //     switch (node.type){
      //       case 'cxn':
      //         this.palette.loadConnection(node.id)
      //         break;
      //     }
      //   })
      // })
      .then(el => {
        //NOW GO THOUGH ALL DRAFT NODES and ADD IN DATA THAT IS REQUIRED
        data.draft_nodes.forEach(np => {
          const new_id = entry_mapping.find(el => el.prev_id === np.node_id);
          const node = _this6.tree.getNode(new_id.cur_id);
          if (node === undefined) return;
          node.draft.ud_name = np.draft_name;
          node.loom_settings = np.loom_settings;
        });
        // const dn = this.tree.getDraftNodes();
        // dn.forEach(node => {
        //   console.log("RES", node.draft, node.loom, node.loom_settings)
        // })
        data.notes.forEach(note => {
          _this6.palette.createNote(note);
        });
      }).then(res => {
        // this.palette.rescale(data.scale);
        _this6.loading = false;
        return Promise.resolve('alldone');
      }).catch(e => {
        _this6.loading = false;
        console.log("ERROR THOWN in process", e);
      });
      //print out all trees:
    })();
  }
  /**
   * Called from import bitmaps to drafts features. The drafts have already been imported and sent to this function,
   * which now needs to draw them to the workspace
   * @param drafts
   */
  loadDrafts(drafts) {
    const loom = {
      threading: [],
      tieup: [],
      treadling: []
    };
    const loom_settings = {
      type: this.ws.type,
      epi: this.ws.epi,
      units: this.ws.units,
      frames: this.ws.min_frames,
      treadles: this.ws.min_treadles
    };
    let topleft = this.vp.getTopLeft();
    let max_h = 0;
    let cur_h = topleft.y + 20; //start offset from top
    let cur_w = topleft.x + 50;
    let zoom_factor = _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size / this.zs.zoom;
    let x_margin = 20 / zoom_factor;
    let y_margin = 40 / zoom_factor;
    let view_width = this.vp.getWidth() * zoom_factor;
    drafts.forEach(draft => {
      const id = this.tree.createNode("draft", null, null);
      this.tree.loadDraftData({
        prev_id: null,
        cur_id: id
      }, draft, loom, loom_settings, true);
      this.palette.loadSubDraft(id, draft, null, null, this.zs.zoom);
      //position the drafts so that they don't all overlap. 
      max_h = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.wefts)(draft.drawdown) * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size > max_h ? (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.wefts)(draft.drawdown) * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size : max_h;
      let approx_w = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.warps)(draft.drawdown);
      //300 because each draft is defined as having min-width of 300pm
      let w = approx_w * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size > 300 ? approx_w * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.mixer_cell_size : 300 / zoom_factor;
      let dn = this.tree.getNode(id);
      dn.component.topleft = {
        x: cur_w,
        y: cur_h
      };
      cur_w += w + x_margin;
      if (cur_w > view_width) {
        cur_w = topleft.x + 50;
        cur_h += max_h + y_margin;
        max_h = 0;
      }
    });
    this.palette.addTimelineState();
  }
  loadExampleAtURL(name) {
    const analytics = (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_37__.getAnalytics)();
    (0,_angular_fire_analytics__WEBPACK_IMPORTED_MODULE_37__.logEvent)(analytics, 'onurl', {
      items: [{
        uid: this.auth.uid,
        name: name
      }]
    });
    this.http.get('assets/examples/' + name + ".ada", {
      observe: 'response'
    }).subscribe(res => {
      console.log(res);
      if (res.status == 404) return;
      this.clearAll();
      return this.fs.loader.ada(name, -1, '', res.body).then(loadresponse => {
        this.loadNewFile(loadresponse);
      });
    });
  }
  prepAndLoadFile(name, id, desc, ada) {
    return this.fs.loader.ada(name, id, desc, ada).then(lr => {
      this.loadNewFile(lr);
    });
  }
  clearView() {
    this.palette.clearComponents();
    this.vp.clear();
  }
  clearAll() {
    console.log("CLEAR ALL");
    this.clearView();
    this.tree.clear();
    this.ss.clearTimeline();
    this.notes.clear();
  }
  ngOnDestroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }
  undo() {
    let so = this.ss.restorePreviousMixerHistoryState();
    if (so === null || so === undefined) return;
    this.fs.loader.ada(this.files.current_file_name, this.files.current_file_id, this.files.current_file_desc, so).then(lr => {
      console.log("LOADing FILE ", lr);
      this.loadNewFile(lr);
    });
  }
  redo() {
    let so = this.ss.restoreNextMixerHistoryState();
    if (so === null || so === undefined) return;
    this.fs.loader.ada(this.files.current_file_name, this.files.current_file_id, this.files.current_file_desc, so).then(lr => this.loadNewFile(lr));
  }
  onCopySelections() {
    const selections = this.multiselect.copySelections();
    this.selected_nodes_copy = selections;
  }
  onPasteSelections() {
    //check to make sure something has been copied
    if (this.multiselect.copy == undefined) return;
    this.multiselect.copy.then(ada => {
      return this.fs.loader.paste(ada).then(lr => {
        this.insertPasteFile(lr);
      });
    });
    this.multiselect.clearSelections();
  }
  togglePanMode() {
    if (this.dm.isSelected('pan', "design_modes")) {
      this.dm.selectDesignMode('move', 'design_modes');
    } else {
      this.dm.selectDesignMode('pan', 'design_modes');
    }
    this.palette.designModeChanged();
    //this.show_viewer = true;
  }

  toggleSelectMode() {
    if (this.dm.isSelected('marquee', "design_modes")) {
      this.dm.selectDesignMode('move', 'design_modes');
    } else {
      this.dm.selectDesignMode('marquee', 'design_modes');
    }
    this.palette.designModeChanged();
  }
  operationAdded(name) {
    this.palette.addOperation(name);
  }
  /**
   * this is called when a user pushes save from the topbar
   * @param event
   */
  onSave(e) {
    var _this7 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const link = document.createElement('a');
      switch (e.type) {
        case 'jpg':
          return _this7.fs.saver.jpg(_this7.palette.getPrintableCanvas(e)).then(href => {
            link.href = href;
            link.download = _this7.files.current_file_name + ".jpg";
            _this7.palette.clearCanvas();
            link.click();
          });
          break;
        case 'wif':
          _this7.palette.downloadVisibleDraftsAsWif();
          return Promise.resolve(null);
          break;
        case 'ada':
          _this7.fs.saver.ada('mixer', false, _this7.zs.zoom).then(out => {
            link.href = "data:application/json;charset=UTF-8," + encodeURIComponent(out.json);
            link.download = _this7.files.current_file_name + ".ada";
            link.click();
          });
          break;
        case 'bmp':
          _this7.palette.downloadVisibleDraftsAsBmp();
          return Promise.resolve(null);
          break;
      }
    })();
  }
  /**
   * Updates the canvas based on the weave view.
   */
  renderChange(old_zoom) {
    this.palette.rescale(old_zoom);
  }
  /**
   * Updates the canvas based on the weave view.
   */
  zoomChangeExternal(event) {
    this.palette.rescale(event.old_zoom);
  }
  notesChanged(e) {
    console.log(e);
    //this.draft.notes = e;
  }

  toggleCollapsed() {
    this.collapsed = !this.collapsed;
  }
  createNote() {
    this.palette.createNote(null);
  }
  /**
   * called when the user adds a new draft from the sidebar
   * @param obj
   */
  newDraftCreated(obj) {
    const id = this.tree.createNode("draft", null, null);
    this.tree.loadDraftData({
      prev_id: null,
      cur_id: id
    }, obj.draft, obj.loom, obj.loom_settings, true);
    this.palette.loadSubDraft(id, obj.draft, null, null, this.zs.zoom);
    //id: number, d: Draft, nodep: NodeComponentProxy, draftp: DraftNodeProxy,  saved_scale: number
  }
  /**
   * something in the materials library changed, check to see if
   * there is a modal showing materials open and update it if there is
   */
  materialChange() {
    this.palette.redrawAllSubdrafts();
    if (this.show_details) {
      this.details.redrawSimulation();
    }
    this.saveFile();
  }
  /**
   * the origin must be updated after the file has been loaded.
   * @param selection
   */
  updateOrigin(selection) {
    this.selected_origin = selection;
  }
  /**
   * when the origin changes, all drafts on the canavs should be modified to the new position
   * origin changes can ONLY happen on globals
   * flips must be calculated from the prior state
   * @param e
   */
  originChange(e) {
    const flips = _core_model_util__WEBPACK_IMPORTED_MODULE_7__["default"].getFlips(this.selected_origin, e.value);
    this.selected_origin = e.value;
    this.ws.selected_origin_option = this.selected_origin;
    const dn = this.tree.getDraftNodes();
    const data = dn.map(node => {
      return {
        draft: node.draft,
        loom: node.loom,
        horiz: flips.horiz,
        vert: flips.vert
      };
    });
    // dn.forEach(node => {
    //  if(node.loom !== null) console.log(node.loom.treadling)
    // })
    const draft_fns = data.map(el => (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_5__.flipDraft)(el.draft, el.horiz, el.vert));
    return Promise.all(draft_fns).then(res => {
      for (let i = 0; i < dn.length; i++) {
        dn[i].draft = {
          id: res[i].id,
          gen_name: res[i].gen_name,
          ud_name: res[i].ud_name,
          drawdown: res[i].drawdown,
          rowShuttleMapping: res[i].rowShuttleMapping,
          rowSystemMapping: res[i].rowSystemMapping,
          colShuttleMapping: res[i].colShuttleMapping,
          colSystemMapping: res[i].colSystemMapping
        };
      }
      const loom_fns = data.map(el => (0,_core_model_looms__WEBPACK_IMPORTED_MODULE_6__.flipLoom)(el.loom, el.horiz, el.vert));
      return Promise.all(loom_fns).then(res => {
        for (let i = 0; i < dn.length; i++) {
          if (res[i] !== null) {
            dn[i].loom = {
              threading: res[i].threading.slice(),
              tieup: res[i].tieup.slice(),
              treadling: res[i].treadling.slice()
            };
          }
        }
      }).then(out => {
        this.saveFile();
      });
    });
  }
  epiChange(f) {
    if (!f.value.epi) {
      f.value.epi = 1;
      this.epi = f.value.epi;
    }
    //this.loom.overloadEpi(f.value.epi);
    this.ws.epi = f.value.epi;
  }
  /**
   * when a user selects a new loom type, the software will pull all subdrafts and update their loom information
   * @param e
   * @returns
   */
  loomChange(e) {
    console.log("e.value.loomtype", e.value.loomtype);
    this.ws.type = e.value.loomtype;
    if (this.ws.type === 'jacquard') this.dm.selectDesignMode('drawdown', 'drawdown_editing_style');else this.dm.selectDesignMode('loom', 'drawdown_editing_style');
    const dn = this.tree.getDraftNodes();
    dn.forEach(node => {
      node.loom_settings.type = e.value.loomtype;
    });
  }
  unitChange(e) {
    this.ws.units = e.value.units;
  }
  showDraftDetails(id) {
    console.log("mixer draft details", id);
    this.show_details = true;
    this.details.loadDraft(id);
    this.dm.selectDesignMode('toggle', 'draw_modes');
  }
}
MixerComponent.ɵfac = function MixerComponent_Factory(t) {
  return new (t || MixerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_9__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_auth_service__WEBPACK_IMPORTED_MODULE_8__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_13__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_17__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_18__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_38__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_10__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_19__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_24__.ViewportService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_notes_service__WEBPACK_IMPORTED_MODULE_14__.NotesService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_state_service__WEBPACK_IMPORTED_MODULE_16__.StateService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_39__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_image_service__WEBPACK_IMPORTED_MODULE_12__.ImageService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_15__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_40__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_provider_zoom_service__WEBPACK_IMPORTED_MODULE_25__.ZoomService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_core_provider_filesystem_service__WEBPACK_IMPORTED_MODULE_11__.FilesystemService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_draftdetail_provider_render_service__WEBPACK_IMPORTED_MODULE_21__.RenderService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_provider_multiselect_service__WEBPACK_IMPORTED_MODULE_23__.MultiselectService), _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdirectiveInject"](_angular_fire_auth__WEBPACK_IMPORTED_MODULE_36__.Auth, 8));
};
MixerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵdefineComponent"]({
  type: MixerComponent,
  selectors: [["app-mixer"]],
  viewQuery: function MixerComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵviewQuery"](_palette_palette_component__WEBPACK_IMPORTED_MODULE_22__.PaletteComponent, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵviewQuery"](_draftdetail_draftdetail_component__WEBPACK_IMPORTED_MODULE_20__.DraftDetailComponent, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵloadQuery"]()) && (ctx.palette = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵloadQuery"]()) && (ctx.details = _t.first);
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵProvidersFeature"]([{
    provide: _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_41__.MAT_TOOLTIP_DEFAULT_OPTIONS,
    useValue: myCustomTooltipDefaults
  }])],
  decls: 17,
  vars: 15,
  consts: [[3, "onUndo", "onRedo", "updateMixerView", "updateDetailView", "onCopySelections", "onPasteSelections"], ["cdkScrollable", "", 1, "mat-drawer-container", 3, "hasBackdrop"], ["container", ""], [1, "floating_ops"], [3, "onOperationAdded"], ["class", "sidenav_small", "mode", "over", "position", "start", "opened", "", 3, "disableClose", 4, "ngIf"], ["class", "sidenav_opened", "mode", "over", "position", "start", "opened", "", 3, "disableClose", 4, "ngIf"], ["mode", "over", "position", "end", 1, "detail_view", 3, "opened"], ["detail_drawer", ""], [3, "closeDrawer"], ["details", ""], ["id", "scrollable-container", 3, "onRevealDraftDetails"], ["palette", ""], ["mode", "indeterminate", 4, "ngIf"], ["id", "saver"], ["id", "mixerview", 1, "mixerview"], [3, "onZoomChange", "onViewPortMove"], ["mode", "over", "position", "start", "opened", "", 1, "sidenav_small", 3, "disableClose"], [1, "button_col"], [1, "design_opts"], ["mat-icon-button", "", "value", "collapsed", 1, "collapse", 3, "click"], ["aria-hidden", "true", 1, "fa"], ["mat-icon-button", "", "color", "primary", "matTooltip", "undo", 3, "disabled", "click"], ["undoEvent", ""], [1, "fas", "fa-undo"], ["mat-icon-button", "", "color", "primary", "matTooltip", "redo", 3, "disabled", "click"], ["redoEvent", ""], [1, "fas", "fa-redo"], ["mat-icon-button", "", "color", "primary", "matTooltip", "Note", "color", "primary", 3, "click"], [1, "fas", "fa-comment"], ["mat-icon-button", "", "color", "primary", "matTooltip", "Blank Draft", 3, "click"], [1, "fas", "fa-chess-board"], ["mat-icon-button", "", "matTooltip", "Select", 3, "color", "click"], [1, "fas", "fa-expand"], ["mat-icon-button", "", "color", "primary", 3, "click"], [1, "fa-solid", "fa-download"], [1, "adacad"], [1, "slider-row"], ["mat-icon-button", "", "color", "primary", 1, "fas", "fa-search-plus", 3, "click"], ["color", "primary", "tickInterval", "1", 1, "slider", 3, "vertical", "step", "min", "max", "value", "change"], ["mat-icon-button", "", "color", "primary", 1, "fas", "fa-search-minus", 3, "click"], ["mat-icon-button", "", 3, "color", "click"], [1, "fa-solid", "fa-hand"], ["mode", "over", "position", "start", "opened", "", 1, "sidenav_opened", 3, "disableClose"], ["source", "mixer", 3, "collapsed", "drawer", "onCollapseSidebar"], ["view_tool", ""], ["mat-stretch-tabs", "false", "mat-align-tabs", "start", "color", "primary", "backgroundColor", "primary"], ["label", "Files", 1, "mat-tab-label-custom"], [3, "onLoadNewFile", "onLoadFromDB", "onClearScreen", "onCurrentFileDeleted", "onSave"], ["label", "Design", 1, "mat-tab-label-custom"], [3, "onUndo", "onRedo", "onOperationAdded", "onImport", "onLoadDrafts", "onNoteCreate", "onNewDraftCreated"], ["label", "Settings", 1, "mat-tab-label-custom"], ["novalidate", "", 1, "workspace_settings"], ["envt", "ngForm"], [3, "value", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], ["name", "loomtype", 3, "value", "ngModel", "selectionChange", "valueChange", "ngModelChange"], ["name", "units", 3, "value", "ngModel", "valueChange", "ngModelChange", "selectionChange"], ["matInput", "", "name", "epi", "type", "number", "min", "0", 3, "ngModel", "ngModelChange", "change", "blur"], ["label", "Materials", 1, "mat-tab-label-custom"], [3, "onMaterialChange"], ["label", "Examples", 1, "mat-tab-label-custom"], [3, "onLoadExample"], [3, "value"], ["mode", "indeterminate"]],
  template: function MixerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](0, "appKeycodes", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onUndo", function MixerComponent_Template_appKeycodes_onUndo_0_listener() {
        return ctx.undo();
      })("onRedo", function MixerComponent_Template_appKeycodes_onRedo_0_listener() {
        return ctx.redo();
      })("updateMixerView", function MixerComponent_Template_appKeycodes_updateMixerView_0_listener($event) {
        return ctx.renderChange($event);
      })("updateDetailView", function MixerComponent_Template_appKeycodes_updateDetailView_0_listener() {
        return ctx.detailViewChange();
      })("onCopySelections", function MixerComponent_Template_appKeycodes_onCopySelections_0_listener() {
        return ctx.onCopySelections();
      })("onPasteSelections", function MixerComponent_Template_appKeycodes_onPasteSelections_0_listener() {
        return ctx.onPasteSelections();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](1, "mat-drawer-container", 1, 2)(3, "div", 3)(4, "app-quickop", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onOperationAdded", function MixerComponent_Template_app_quickop_onOperationAdded_4_listener($event) {
        return ctx.addOp($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](5, MixerComponent_mat_drawer_5_Template, 28, 16, "mat-drawer", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](6, MixerComponent_mat_drawer_6_Template, 36, 12, "mat-drawer", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](7, "mat-drawer", 7, 8)(9, "app-draftdetail", 9, 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("closeDrawer", function MixerComponent_Template_app_draftdetail_closeDrawer_9_listener($event) {
        return ctx.closeDetailViewer($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](11, "app-palette", 11, 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onRevealDraftDetails", function MixerComponent_Template_app_palette_onRevealDraftDetails_11_listener($event) {
        return ctx.showDraftDetails($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵtemplate"](13, MixerComponent_mat_progress_bar_13_Template, 1, 0, "mat-progress-bar", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelement"](14, "canvas", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementStart"](15, "div", 15)(16, "app-mixerview", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵlistener"]("onZoomChange", function MixerComponent_Template_app_mixerview_onZoomChange_16_listener($event) {
        return ctx.zoomChangeExternal($event);
      })("onViewPortMove", function MixerComponent_Template_app_mixerview_onViewPortMove_16_listener($event) {
        return ctx.setScroll($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("hasBackdrop", false);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngIf", ctx.collapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngIf", !ctx.collapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("opened", ctx.show_details)("@.disabled", true);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵclassMapInterpolate1"]("palette mode-", ctx.dm.getSelectedDesignMode("design_modes").value, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵstyleProp"]("width", ctx.vp.getAbsoluteWidth(), "px")("height", ctx.vp.getAbsoluteHeight(), "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵproperty"]("ngIf", ctx.loading);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_34__["ɵɵstyleProp"]("display", ctx.dm.isSelected("pan", "design_modes") ? "block" : "none");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_42__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_42__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_43__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_43__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_43__.NgForm, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_38__.CdkScrollable, _angular_material_core__WEBPACK_IMPORTED_MODULE_44__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_45__.MatButton, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_46__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_46__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_47__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_48__.MatSelect, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_49__.MatDrawer, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_49__.MatDrawerContainer, _angular_material_slider__WEBPACK_IMPORTED_MODULE_50__.MatSlider, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_51__.MatTabGroup, _angular_material_tabs__WEBPACK_IMPORTED_MODULE_51__.MatTab, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_41__.MatTooltip, _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_52__.MatProgressBar, _core_topbar_topbar_component__WEBPACK_IMPORTED_MODULE_26__.TopbarComponent, _core_modal_material_material_modal__WEBPACK_IMPORTED_MODULE_27__.MaterialModal, _core_filebrowser_filebrowser_component__WEBPACK_IMPORTED_MODULE_28__.FilebrowserComponent, _core_modal_examples_examples_component__WEBPACK_IMPORTED_MODULE_29__.ExamplesComponent, _core_keycodes_directive__WEBPACK_IMPORTED_MODULE_30__.KeycodesDirective, _draftdetail_draftdetail_component__WEBPACK_IMPORTED_MODULE_20__.DraftDetailComponent, _mixerview_mixerview_component__WEBPACK_IMPORTED_MODULE_31__.MixerViewComponent, _palette_palette_component__WEBPACK_IMPORTED_MODULE_22__.PaletteComponent, _design_design_component__WEBPACK_IMPORTED_MODULE_32__.DesignComponent, _quickop_quickop_component__WEBPACK_IMPORTED_MODULE_33__.QuickopComponent],
  styles: ["canvas[_ngcontent-%COMP%] {\n  position: absolute;\n}\n\n.palette[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n}\n\n#saver[_ngcontent-%COMP%] {\n  z-index: -1;\n}\n\n.sidenav_small[_ngcontent-%COMP%] {\n  width: 42px;\n  display: flex;\n  flex-direction: column;\n}\n\n.adacad[_ngcontent-%COMP%] {\n  position: relative;\n}\n\nh1[_ngcontent-%COMP%] {\n  transform: rotate(-90deg);\n  color: #3f51b5;\n  font-weight: bold;\n}\n\n.mode-pan[_ngcontent-%COMP%] {\n  cursor: grab;\n}\n\n.mode-marquee[_ngcontent-%COMP%] {\n  cursor: crosshair;\n}\n\n.mode-move[_ngcontent-%COMP%] {\n  cursor: default;\n}\n\n.mat-slider-vertical[_ngcontent-%COMP%] {\n  height: 33% !important;\n  min-height: 50px !important;\n}\n\n.slider-row[_ngcontent-%COMP%] {\n  height: 33%;\n}\n\n.slider-row[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  display: block;\n  height: 48px;\n  line-height: 32px;\n  padding-top: 8px;\n  width: 100%;\n}\n\n.button_col[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  height: 95%;\n  justify-content: space-between;\n  overflow: hidden;\n  width: 42px;\n  padding-top: 5%;\n}\n\n.sidenav_opened[_ngcontent-%COMP%] {\n  width: 33%;\n}\n\n.floating_ops[_ngcontent-%COMP%] {\n  width: 200px;\n  position: fixed;\n  top: 1vw;\n  left: 80vw;\n  z-index: 100;\n}\n\n.topbar_sub[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  width: 50%;\n}\n\n.description[_ngcontent-%COMP%] {\n  font-style: italic;\n  width: 80%;\n  padding: 0px 0px 8px 8px;\n}\n\n.mixerview[_ngcontent-%COMP%] {\n  position: fixed;\n  width: 200px;\n  height: 200px;\n  top: calc(92vh - 200px);\n  left: 82vw;\n}\n\n.collapse[_ngcontent-%COMP%] {\n  color: #3f51b5;\n}\n\n.setting_title[_ngcontent-%COMP%] {\n  padding: 18px;\n  color: grey;\n  font-size: 0.8em;\n}\n\n.nav-opened[_ngcontent-%COMP%] {\n  left: 33%;\n}\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 95%;\n}\n\n.detail_view[_ngcontent-%COMP%] {\n  width: 66%;\n}\n\n.workspace_settings[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.mat-drawer-content[_ngcontent-%COMP%] {\n  background: hsl(0deg, 100%, 100%);\n}\n\n.mat-drawer-container[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100vh !important;\n}\n\n.cdk-live-announcer-element[_ngcontent-%COMP%] {\n  display: none;\n}\n/*# sourceURL=webpack://./src/app/mixer/mixer.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvbWl4ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtBQUNKOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtBQUNGOztBQUlBO0VBQ0UsV0FBQTtBQURGOztBQUlBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtBQURGOztBQU1BO0VBQ0Esa0JBQUE7QUFIQTs7QUFLQTtFQUNFLHlCQUFBO0VBQ0EsY0FBQTtFQUNBLGlCQUFBO0FBRkY7O0FBTUE7RUFDRSxZQUFBO0FBSEY7O0FBTUE7RUFDRSxpQkFBQTtBQUhGOztBQU1BO0VBQ0UsZUFBQTtBQUhGOztBQU1BO0VBQ0Usc0JBQUE7RUFDQSwyQkFBQTtBQUhGOztBQU1BO0VBQ0UsV0FBQTtBQUhGOztBQU9BO0VBQ0UsY0FBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsV0FBQTtBQUpGOztBQVdBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsV0FBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsZUFBQTtBQVJGOztBQVdBO0VBQ0UsVUFBQTtBQVJGOztBQVlBO0VBQ0UsWUFBQTtFQUNBLGVBQUE7RUFDQSxRQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7QUFURjs7QUFjQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFVBQUE7QUFYRjs7QUFjQTtFQUNFLGtCQUFBO0VBQ0EsVUFBQTtFQUNBLHdCQUFBO0FBWEY7O0FBY0E7RUFDRSxlQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLFVBQUE7QUFYRjs7QUFjQTtFQUNFLGNBQUE7QUFYRjs7QUFjQTtFQUNFLGFBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFYRjs7QUFjQTtFQUNFLFNBQUE7QUFYRjs7QUFjQTtFQUNBLFVBQUE7QUFYQTs7QUFjQTtFQUNFLFVBQUE7QUFYRjs7QUFjQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBWEE7O0FBY0E7RUFDRSxpQ0FBQTtBQVhGOztBQWNBO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0Esd0JBQUE7QUFYRjs7QUFnQkE7RUFDRSxhQUFBO0FBYkYiLCJzb3VyY2VzQ29udGVudCI6WyJjYW52YXMge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cbi5wYWxldHRlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgbGVmdDogMHB4O1xufVxuXG4jc2F2ZXIge1xuICB6LWluZGV4OiAtMTtcbn1cblxuLnNpZGVuYXZfc21hbGwge1xuICB3aWR0aDogNDJweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmFkYWNhZCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuaDEge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpO1xuICBjb2xvcjogIzNmNTFiNTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5tb2RlLXBhbiB7XG4gIGN1cnNvcjogZ3JhYjtcbn1cblxuLm1vZGUtbWFycXVlZSB7XG4gIGN1cnNvcjogY3Jvc3NoYWlyO1xufVxuXG4ubW9kZS1tb3ZlIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4ubWF0LXNsaWRlci12ZXJ0aWNhbCB7XG4gIGhlaWdodDogMzMlICFpbXBvcnRhbnQ7XG4gIG1pbi1oZWlnaHQ6IDUwcHggIWltcG9ydGFudDtcbn1cblxuLnNsaWRlci1yb3cge1xuICBoZWlnaHQ6IDMzJTtcbn1cblxuLnNsaWRlci1yb3cgaSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IDQ4cHg7XG4gIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICBwYWRkaW5nLXRvcDogOHB4O1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmJ1dHRvbl9jb2wge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBoZWlnaHQ6IDk1JTtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aWR0aDogNDJweDtcbiAgcGFkZGluZy10b3A6IDUlO1xufVxuXG4uc2lkZW5hdl9vcGVuZWQge1xuICB3aWR0aDogMzMlO1xufVxuXG4uZmxvYXRpbmdfb3BzIHtcbiAgd2lkdGg6IDIwMHB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMXZ3O1xuICBsZWZ0OiA4MHZ3O1xuICB6LWluZGV4OiAxMDA7XG59XG5cbi50b3BiYXJfc3ViIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgd2lkdGg6IDUwJTtcbn1cblxuLmRlc2NyaXB0aW9uIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICB3aWR0aDogODAlO1xuICBwYWRkaW5nOiAwcHggMHB4IDhweCA4cHg7XG59XG5cbi5taXhlcnZpZXcge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAyMDBweDtcbiAgaGVpZ2h0OiAyMDBweDtcbiAgdG9wOiBjYWxjKDkydmggLSAyMDBweCk7XG4gIGxlZnQ6IDgydnc7XG59XG5cbi5jb2xsYXBzZSB7XG4gIGNvbG9yOiAjM2Y1MWI1O1xufVxuXG4uc2V0dGluZ190aXRsZSB7XG4gIHBhZGRpbmc6IDE4cHg7XG4gIGNvbG9yOiBncmV5O1xuICBmb250LXNpemU6IDAuOGVtO1xufVxuXG4ubmF2LW9wZW5lZCB7XG4gIGxlZnQ6IDMzJTtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDk1JTtcbn1cblxuLmRldGFpbF92aWV3IHtcbiAgd2lkdGg6IDY2JTtcbn1cblxuLndvcmtzcGFjZV9zZXR0aW5ncyB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubWF0LWRyYXdlci1jb250ZW50IHtcbiAgYmFja2dyb3VuZDogaHNsKDBkZWcsIDEwMCUsIDEwMCUpO1xufVxuXG4ubWF0LWRyYXdlci1jb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMHZoICFpbXBvcnRhbnQ7XG59XG5cbi5jZGstbGl2ZS1hbm5vdW5jZXItZWxlbWVudCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 58529:
/*!***************************************!*\
  !*** ./src/app/mixer/mixer.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MixerModule": () => (/* binding */ MixerModule)
/* harmony export */ });
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.module */ 40294);
/* harmony import */ var _mixer_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mixer.component */ 27195);
/* harmony import */ var _mixerview_mixerview_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mixerview/mixerview.component */ 13440);
/* harmony import */ var _palette_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./palette/subdraft/subdraft.component */ 49258);
/* harmony import */ var _palette_palette_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./palette/palette.component */ 64989);
/* harmony import */ var _palette_snackbar_snackbar_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./palette/snackbar/snackbar.component */ 11307);
/* harmony import */ var _palette_marquee_marquee_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./palette/marquee/marquee.component */ 9088);
/* harmony import */ var _palette_operation_operation_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./palette/operation/operation.component */ 26866);
/* harmony import */ var _palette_connection_connection_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./palette/connection/connection.component */ 28300);
/* harmony import */ var _modal_ops_ops_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modal/ops/ops.component */ 554);
/* harmony import */ var _modal_ophelp_ophelp_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modal/ophelp/ophelp.modal */ 41266);
/* harmony import */ var _palette_image_image_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./palette/image/image.component */ 96744);
/* harmony import */ var _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../draftdetail/draftdetail.module */ 68073);
/* harmony import */ var _palette_note_note_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./palette/note/note.component */ 84462);
/* harmony import */ var _palette_operation_parameter_parameter_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./palette/operation/parameter/parameter.component */ 62693);
/* harmony import */ var _palette_operation_inlet_inlet_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./palette/operation/inlet/inlet.component */ 29047);
/* harmony import */ var _design_design_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./design/design.component */ 61595);
/* harmony import */ var _quickop_quickop_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./quickop/quickop.component */ 75754);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/slide-toggle */ 84714);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/cdk/text-field */ 35804);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _core_uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/uploads/upload-form/upload-form.component */ 81901);































class MixerModule {}
MixerModule.ɵfac = function MixerModule_Factory(t) {
  return new (t || MixerModule)();
};
MixerModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵdefineNgModule"]({
  type: MixerModule
});
MixerModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵdefineInjector"]({
  imports: [_core_core_module__WEBPACK_IMPORTED_MODULE_0__.CoreModule, _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_12__.DraftDetailModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵsetNgModuleScope"](MixerModule, {
    declarations: [_mixer_component__WEBPACK_IMPORTED_MODULE_1__.MixerComponent, _mixerview_mixerview_component__WEBPACK_IMPORTED_MODULE_2__.MixerViewComponent, _palette_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_3__.SubdraftComponent, _palette_palette_component__WEBPACK_IMPORTED_MODULE_4__.PaletteComponent, _palette_snackbar_snackbar_component__WEBPACK_IMPORTED_MODULE_5__.SnackbarComponent, _palette_marquee_marquee_component__WEBPACK_IMPORTED_MODULE_6__.MarqueeComponent, _palette_operation_operation_component__WEBPACK_IMPORTED_MODULE_7__.OperationComponent, _palette_connection_connection_component__WEBPACK_IMPORTED_MODULE_8__.ConnectionComponent, _modal_ops_ops_component__WEBPACK_IMPORTED_MODULE_9__.OpsComponent, _modal_ophelp_ophelp_modal__WEBPACK_IMPORTED_MODULE_10__.OpHelpModal, _palette_image_image_component__WEBPACK_IMPORTED_MODULE_11__.ImageComponent, _palette_note_note_component__WEBPACK_IMPORTED_MODULE_13__.NoteComponent, _palette_operation_parameter_parameter_component__WEBPACK_IMPORTED_MODULE_14__.ParameterComponent, _palette_operation_inlet_inlet_component__WEBPACK_IMPORTED_MODULE_15__.InletComponent, _design_design_component__WEBPACK_IMPORTED_MODULE_16__.DesignComponent, _quickop_quickop_component__WEBPACK_IMPORTED_MODULE_17__.QuickopComponent],
    imports: [_core_core_module__WEBPACK_IMPORTED_MODULE_0__.CoreModule, _draftdetail_draftdetail_module__WEBPACK_IMPORTED_MODULE_12__.DraftDetailModule]
  });
})();
_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵsetComponentScope"](_palette_operation_operation_component__WEBPACK_IMPORTED_MODULE_7__.OperationComponent, [_angular_common__WEBPACK_IMPORTED_MODULE_20__.NgForOf, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_21__.MatTooltip, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_22__.CdkDrag, _palette_operation_parameter_parameter_component__WEBPACK_IMPORTED_MODULE_14__.ParameterComponent, _palette_operation_inlet_inlet_component__WEBPACK_IMPORTED_MODULE_15__.InletComponent], []);
_angular_core__WEBPACK_IMPORTED_MODULE_19__["ɵɵsetComponentScope"](_palette_operation_parameter_parameter_component__WEBPACK_IMPORTED_MODULE_14__.ParameterComponent, [_angular_common__WEBPACK_IMPORTED_MODULE_20__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_20__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_23__.FormControlDirective, _angular_material_core__WEBPACK_IMPORTED_MODULE_24__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_25__.MatButton, _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__.MatSlideToggle, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_27__.MatLabel, _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_28__.CdkTextareaAutosize, _angular_material_input__WEBPACK_IMPORTED_MODULE_29__.MatInput, _angular_material_select__WEBPACK_IMPORTED_MODULE_30__.MatSelect, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_21__.MatTooltip, _core_uploads_upload_form_upload_form_component__WEBPACK_IMPORTED_MODULE_18__.UploadFormComponent], []);

/***/ }),

/***/ 13440:
/*!********************************************************!*\
  !*** ./src/app/mixer/mixerview/mixerview.component.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MixerViewComponent": () => (/* binding */ MixerViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/model/datatypes */ 86789);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../provider/viewport.service */ 2320);
/* harmony import */ var _provider_zoom_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../provider/zoom.service */ 75817);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);









function MixerViewComponent__svg_rect_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](0, "rect", 4);
  }
  if (rf & 2) {
    const obj_r1 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵattribute"]("x", obj_r1.i.j * ctx_r0.cell_factor)("y", obj_r1.i.i * ctx_r0.cell_factor)("width", 2)("height", 2);
  }
}
class MixerViewComponent {
  constructor(viewport, zs) {
    this.viewport = viewport;
    this.zs = zs;
    this.onZoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onViewPortMove = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.data = {
      zoom: 5,
      default_cell_size: 5
    };
    this.viewport.vpchanged$.subscribe(data => {
      this.updateLocalDims();
    });
    this.local_view = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 100,
      height: 100
    };
  }
  ngOnInit() {
    // console.log('viewport', this.local_view);
  }
  ngAfterViewInit() {
    // this.zoom = data.zoom;
    this.bounds = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 350,
      height: 100
    };
    const viewwindow = document.getElementById('mixerview');
    console.log("MIXER ", viewwindow.offsetWidth);
    this.width = viewwindow.offsetWidth;
    this.height = viewwindow.offsetHeight;
    //ratio of the global space to the total width of the global div
    this.factor = this.width / this.viewport.getAbsoluteWidth();
    //each cell is rendered cell factor number pixels in the global view
    //this does not change when zoomed
    this.cell_factor = this.width / (this.viewport.getAbsoluteWidth() / this.data.default_cell_size);
    this.updateLocalDims();
  }
  getCx(obj) {
    return obj.p.x * this.factor;
  }
  updateLocalDims() {
    this.div = document.getElementById('scrollable-container').offsetParent;
    this.local_view.topleft = {
      x: this.div.scrollLeft / this.zs.zoom * this.cell_factor,
      y: this.div.scrollTop / this.zs.zoom * this.cell_factor
    };
  }
  updateViewPort(data) {
    this.updateLocalDims();
  }
  updateViewPortFromZoom() {
    this.updateLocalDims();
  }
  zoomIn() {
    const old_zoom = this.zs.zoom;
    this.zs.zoomIn();
    this.onZoomChange.emit({
      old_zoom: old_zoom
    });
    const adjusted = {
      x: this.local_view.topleft.x / this.cell_factor * this.zs.zoom,
      y: this.local_view.topleft.y / this.cell_factor * this.zs.zoom
    };
    this.onViewPortMove.emit(adjusted);
  }
  zoomOut() {
    const old_zoom = this.zs.zoom;
    this.zs.zoomOut();
    this.onZoomChange.emit({
      old_zoom: old_zoom
    });
    const adjusted = {
      x: this.local_view.topleft.x / this.cell_factor * this.zs.zoom,
      y: this.local_view.topleft.y / this.cell_factor * this.zs.zoom
    };
    this.onViewPortMove.emit(adjusted);
  }
  zoomChange(e, source) {
    e.source = source;
    const old_zoom = this.zs.zoom;
    this.zs.setZoom(e.value);
    // this.updateLocalDims();
    //update the window so that the current point remains at top left
    this.onZoomChange.emit({
      old_zoom: old_zoom
    });
    const adjusted = {
      x: this.local_view.topleft.x / this.cell_factor * this.zs.zoom,
      y: this.local_view.topleft.y / this.cell_factor * this.zs.zoom
    };
    this.onViewPortMove.emit(adjusted);
  }
  dragEnd($event) {}
  dragStart($event) {}
  getMatrix(el) {
    const values = el.style.transform.split(/\w+\(|\);?/);
    if (!values[1] || !values[1].length) {
      return [];
    }
    const text_vals = values[1].split(/,\s?/g);
    const numbers = text_vals.map(el => parseInt(el));
    return numbers;
  }
  dragMove($event) {
    //this holds the onscreen position of the div
    const local = document.getElementById('local_view');
    const transform = this.getMatrix(local);
    const pointerOffsetInGlobal = {
      x: transform[0],
      y: transform[1]
    };
    const adjusted = {
      x: pointerOffsetInGlobal.x / this.cell_factor * this.zs.zoom,
      y: pointerOffsetInGlobal.y / this.cell_factor * this.zs.zoom
    };
    this.onViewPortMove.emit(adjusted);
  }
}
MixerViewComponent.ɵfac = function MixerViewComponent_Factory(t) {
  return new (t || MixerViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_1__.ViewportService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_zoom_service__WEBPACK_IMPORTED_MODULE_2__.ZoomService));
};
MixerViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: MixerViewComponent,
  selectors: [["app-mixerview"]],
  outputs: {
    onZoomChange: "onZoomChange",
    onViewPortMove: "onViewPortMove"
  },
  decls: 4,
  vars: 6,
  consts: [["id", "global", 1, "global_view"], ["width", "250", "height", "250"], ["fill", "grey", 4, "ngFor", "ngForOf"], ["id", "local_view", "cdkDragBoundary", ".global_view", "cdkDragDisabled", "false", "cdkDrag", "", 1, "local", 3, "cdkDragFreeDragPosition", "cdkDragMoved", "cdkDragEnded", "cdkDragStarted"], ["fill", "grey"]],
  template: function MixerViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnamespaceSVG"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](1, "svg", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](2, MixerViewComponent__svg_rect_2_Template, 1, 4, "rect", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnamespaceHTML"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("cdkDragMoved", function MixerViewComponent_Template_div_cdkDragMoved_3_listener($event) {
        return ctx.dragMove($event);
      })("cdkDragEnded", function MixerViewComponent_Template_div_cdkDragEnded_3_listener($event) {
        return ctx.dragEnd($event);
      })("cdkDragStarted", function MixerViewComponent_Template_div_cdkDragStarted_3_listener($event) {
        return ctx.dragStart($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngForOf", ctx.viewport.objs);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("width", ctx.viewport.getWidth() / ctx.zs.zoom * ctx.cell_factor, "px")("height", ctx.viewport.getHeight() / ctx.zs.zoom * ctx.cell_factor, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("cdkDragFreeDragPosition", ctx.local_view.topleft);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.NgForOf, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_5__.CdkDrag],
  styles: [".global_view[_ngcontent-%COMP%] {\n  border: thin solid #ff3860;\n  background-color: white;\n  width: 200px;\n  height: 200px;\n}\n\nsvg[_ngcontent-%COMP%] {\n  position: relative;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.local[_ngcontent-%COMP%] {\n  border: 2px solid #ff3860;\n  z-index: 3;\n  position: relative;\n  top: -257px;\n  transform-origin: top left;\n}\n/*# sourceURL=webpack://./src/app/mixer/mixerview/mixerview.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvbWl4ZXJ2aWV3L21peGVydmlldy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNJLDBCQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtBQUFKOztBQUlBO0VBQ0ksa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFVBQUE7RUFDQSxvQkFBQTtBQURKOztBQUlBO0VBQ0kseUJBQUE7RUFDQSxVQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsMEJBQUE7QUFESiIsInNvdXJjZXNDb250ZW50IjpbIi5nbG9iYWxfdmlldyB7XG4gIGJvcmRlcjogdGhpbiBzb2xpZCAjZmYzODYwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgd2lkdGg6IDIwMHB4O1xuICBoZWlnaHQ6IDIwMHB4O1xufVxuXG5zdmcge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgei1pbmRleDogMTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5sb2NhbCB7XG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZjM4NjA7XG4gIHotaW5kZXg6IDM7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtMjU3cHg7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 41266:
/*!****************************************************!*\
  !*** ./src/app/mixer/modal/ophelp/ophelp.modal.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OpHelpModal": () => (/* binding */ OpHelpModal)
/* harmony export */ });
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/provider/operation.service */ 46524);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 94666);








function OpHelpModal_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "Description: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r0.op_description);
  }
}
function OpHelpModal_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "Application: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r1.op_application);
  }
}
function OpHelpModal_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, " Parameters: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
}
function OpHelpModal_ng_container_9_p_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const param_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate2"](" min/max value of this input: ", param_r6.min, "-", param_r6.max, "");
  }
}
function OpHelpModal_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h3");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](5, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](7, OpHelpModal_ng_container_9_p_7_Template, 2, 2, "p", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const param_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](param_r6.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r3.param_descriptions[i_r7]);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"]("Type: ", param_r6.type, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", param_r6.type == ctx_r3.number);
  }
}
function OpHelpModal_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h4");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "This is a dyanmic operation, meaning that one of the parameters above generates multiple \"inlets\" to the function, each which can accept a draft and associate a particular value with that draft.");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "h3");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](5, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"]("Input that Controls the Inlets: ", ctx_r4.dynamic_param_name, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"]("Inlet type: ", ctx_r4.dynamic_type, "");
  }
}
function OpHelpModal_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "iframe", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r5.youtube, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("src", ctx_r5.youtube, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsanitizeResourceUrl"]);
  }
}
class OpHelpModal {
  constructor(op_desc, dialogRef, data, ops) {
    this.op_desc = op_desc;
    this.dialogRef = dialogRef;
    this.data = data;
    this.ops = ops;
    this.dynamic_type = "";
    this.dynamic_param_id = 0;
    this.dynamic_param_name = '';
    this.displayname = "";
    this.op_description = "";
    this.op_application = "";
    this.dynamic_description = "";
    this.youtube = "";
    const op = this.ops.getOp(data.op.name);
    this.name = data.op.name;
    this.op_description = this.op_desc.getOpDescription(this.name);
    this.op_application = this.op_desc.getOpApplication(this.name);
    this.displayname = this.op_desc.getDisplayName(this.name);
    this.dynamic_description = this.op_desc.getDyanmicText();
    this.is_dynamic_op = this.ops.isDynamic(this.name);
    this.youtube = this.op_desc.getYoutube(this.name);
    if (this.youtube !== undefined) this.youtube = "https://www.youtube.com/embed/" + this.youtube;
    this.params = op.params;
    this.param_descriptions = op.params.map(el => this.op_desc.getParamDescription(el.name));
    this.param_descriptions = this.param_descriptions.map((dx, ndx) => dx === undefined ? this.params[ndx].dx : dx);
    if (this.is_dynamic_op) {
      this.dynamic_type = op.dynamic_param_type;
      this.dynamic_param_id = op.dynamic_param_id;
      this.dynamic_param_name = this.params[this.dynamic_param_id].name;
    }
  }
  ngOnInit() {}
  close() {
    this.dialogRef.close();
  }
}
OpHelpModal.ɵfac = function OpHelpModal_Factory(t) {
  return new (t || OpHelpModal)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__.OperationDescriptionsService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MAT_DIALOG_DATA), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__.OperationService));
};
OpHelpModal.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: OpHelpModal,
  selectors: [["app-ophelp"]],
  decls: 15,
  vars: 7,
  consts: [["mat-dialog-title", ""], [1, "help-container"], [1, "doc-container"], [4, "ngIf"], [1, "params"], [4, "ngFor", "ngForOf"], [1, "mat-raised-button", "mat-primary", 3, "click"], ["width", "560", "height", "315", "title", "YouTube video player", "frameborder", "0", "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture", "allowfullscreen", "", 3, "src"]],
  template: function OpHelpModal_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "h1", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "mat-dialog-content")(3, "div", 1)(4, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](5, OpHelpModal_ng_container_5_Template, 5, 1, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](6, OpHelpModal_ng_container_6_Template, 5, 1, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](7, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](8, OpHelpModal_ng_container_8_Template, 3, 0, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](9, OpHelpModal_ng_container_9_Template, 8, 4, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](10, OpHelpModal_ng_container_10_Template, 7, 2, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](11, OpHelpModal_ng_container_11_Template, 3, 2, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](12, "mat-dialog-actions")(13, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function OpHelpModal_Template_button_click_13_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](14, "Close");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx.displayname);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.op_description !== undefined);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.op_application !== undefined);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.data.op.params.length > 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", ctx.data.op.params);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.is_dynamic_op);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.youtube !== undefined);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_4__.NgIf, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MatDialogContent, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__.MatDialogActions],
  styles: [".help-container[_ngcontent-%COMP%] {\n  display: block;\n}\n\na[_ngcontent-%COMP%] {\n  color: #00d1b2;\n  font-weight: bold;\n}\n\nh1[_ngcontent-%COMP%] {\n  font-size: 1.8em;\n}\n\nh2[_ngcontent-%COMP%] {\n  font-size: 1em;\n  padding-top: 1em;\n  font-weight: bold;\n}\n\nh3[_ngcontent-%COMP%] {\n  font-size: 0.9em;\n  padding-top: 1em;\n  font-weight: bold;\n  font-style: italic;\n}\n/*# sourceURL=webpack://./src/app/mixer/modal/ophelp/ophelp.modal.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvbW9kYWwvb3BoZWxwL29waGVscC5tb2RhbC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0MsY0FBQTtBQUFEOztBQUdBO0VBQ0MsY0FBQTtFQUNBLGlCQUFBO0FBQUQ7O0FBR0E7RUFDQyxnQkFBQTtBQUFEOztBQUdBO0VBQ0MsY0FBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7QUFBRDs7QUFHQTtFQUNJLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FBQUoiLCJzb3VyY2VzQ29udGVudCI6WyIuaGVscC1jb250YWluZXIge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYSB7XG4gIGNvbG9yOiAjMDBkMWIyO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuaDEge1xuICBmb250LXNpemU6IDEuOGVtO1xufVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogMWVtO1xuICBwYWRkaW5nLXRvcDogMWVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuaDMge1xuICBmb250LXNpemU6IDAuOWVtO1xuICBwYWRkaW5nLXRvcDogMWVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 554:
/*!**************************************************!*\
  !*** ./src/app/mixer/modal/ops/ops.component.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OpsComponent": () => (/* binding */ OpsComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 25722);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/provider/operation.service */ 46524);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser */ 34497);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/autocomplete */ 88550);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/sidenav */ 16643);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);





















function OpsComponent_mat_option_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "mat-option", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r9 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("value", option_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", option_r9, " ");
  }
}
function OpsComponent_ng_container_19_ng_container_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "button", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function OpsComponent_ng_container_19_ng_container_1_ng_container_4_Template_button_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r15);
      const op_name_r13 = restoredCtx.$implicit;
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r14.addOp(op_name_r13));
    })("mouseover", function OpsComponent_ng_container_19_ng_container_1_ng_container_4_Template_button_mouseover_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r15);
      const op_name_r13 = restoredCtx.$implicit;
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r16.showDesc(op_name_r13));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const op_name_r13 = ctx.$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("name", op_name_r13);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r12.op_desc.getDisplayName(op_name_r13), " ");
  }
}
function OpsComponent_ng_container_19_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "div", 18)(2, "h3", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("mouseover", function OpsComponent_ng_container_19_ng_container_1_Template_h3_mouseover_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r18);
      const class_r11 = restoredCtx.$implicit;
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r17.showCatDesc(class_r11.category_name));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](4, OpsComponent_ng_container_19_ng_container_1_ng_container_4_Template, 3, 2, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const class_r11 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", class_r11.category_name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", class_r11.op_names);
  }
}
function OpsComponent_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, OpsComponent_ng_container_19_ng_container_1_Template, 5, 2, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", ctx_r3.classifications);
  }
}
function OpsComponent_ng_container_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h1");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r4.name);
  }
}
function OpsComponent_ng_container_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r5.desc);
  }
}
function OpsComponent_ng_container_23_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "li")(2, "h3", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](4, "p", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const param_r20 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](param_r20.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](param_r20.dx);
  }
}
function OpsComponent_ng_container_23_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "Parameters");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "ul");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](4, OpsComponent_ng_container_23_ng_container_4_Template, 6, 2, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", ctx_r6.params);
  }
}
function OpsComponent_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "Application: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r7.app);
  }
}
function OpsComponent_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](2, "Youtube: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](4, "iframe", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("src", ctx_r8.url, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsanitizeResourceUrl"]);
  }
}
class OpsComponent {
  constructor(ops, op_desc, sanatizer, dialog, dialogRef, data) {
    this.ops = ops;
    this.op_desc = op_desc;
    this.sanatizer = sanatizer;
    this.dialog = dialog;
    this.dialogRef = dialogRef;
    this.data = data;
    this.onOperationAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.onImport = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.opnames = [];
    this.displaynames = [];
    this.myControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__.UntypedFormControl();
    this.searchOnly = false;
    this.desc = "";
    this.app = "";
    this.name = "";
    this.youtube = "";
    this.params = [];
    this.inlets = [];
  }
  ngOnInit() {
    const allops = this.ops.ops.concat(this.ops.dynamic_ops);
    this.classifications = this.op_desc.getOpClassifications();
    this.opnames = allops.map(el => el.name);
    this.displaynames = allops.map(el => this.op_desc.getDisplayName(el.name));
    this.filteredOptions = this.myControl.valueChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.startWith)(''), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.map)(value => this._filter(value)));
    if (this.data.searchOnly !== undefined) {
      this.searchOnly = true;
    }
  }
  _filter(value) {
    const filterValue = value.toLowerCase();
    return this.displaynames.filter(option => option.toLowerCase().includes(filterValue));
  }
  close() {
    this.dialogRef.close(null);
  }
  showDesc(obj) {
    this.name = this.op_desc.getDisplayName(obj);
    this.desc = this.op_desc.getOpDescription(obj);
    this.app = this.op_desc.getOpApplication(obj);
    this.youtube = this.op_desc.getOpYoutube(obj);
    this.url = this.createYoutubeEmbedLink(this.youtube);
    this.params = this.ops.getOp(obj).params;
    this.params = this.params.map(param => {
      if (param.dx === undefined) param.dx = this.op_desc.getParamDescription(param.name);
      return param;
    });
    this.inlets = this.ops.getOp(obj).inlets;
  }
  showCatDesc(obj) {
    this.name = "category: " + this.op_desc.getCatName(obj);
    this.desc = this.op_desc.getCatDescription(obj);
    this.app = "";
  }
  createYoutubeEmbedLink(embedcode) {
    const prefix = "https://www.youtube.com/embed/";
    if (embedcode === "") return "";
    const url = this.sanatizer.bypassSecurityTrustResourceUrl(prefix + embedcode);
    console.log(this.url);
    return url;
  }
  // getParams(){
  //   const op = this.op
  // }
  addOp(name) {
    this.onOperationAdded.emit(name);
  }
  addOpFromSearch(event) {
    //need to convert display name toname here
    const ndx = this.displaynames.findIndex(el => el === event.option.value);
    if (ndx !== -1) {
      this.onOperationAdded.emit(this.opnames[ndx]);
    }
    if (this.searchOnly) {
      this.close();
    }
  }
}
OpsComponent.ɵfac = function OpsComponent_Factory(t) {
  return new (t || OpsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__.OperationDescriptionsService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.DomSanitizer), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MAT_DIALOG_DATA));
};
OpsComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: OpsComponent,
  selectors: [["app-ops"]],
  outputs: {
    onOperationAdded: "onOperationAdded",
    onImport: "onImport"
  },
  decls: 26,
  vars: 11,
  consts: [[1, "toprow"], ["mat-icon-button", "", 3, "click"], [1, "fas", "fa-times"], ["mat-dialog-title", "", "cdkDrag", "", "cdkDragRootElement", ".cdk-overlay-pane", "cdkDragHandle", ""], [1, "example-container"], ["mode", "side", "opened", "", 1, "example-sidenav"], ["drawer", ""], ["autocomplete", "off"], ["width", "100%", "appearance", "fill", 1, "full-width"], [1, "fas", "fa-search"], ["type", "text", "placeholder", "", "matInput", "", 3, "formControl", "matAutocomplete"], ["autoActiveFirstOption", "", 3, "optionSelected"], ["auto", "matAutocomplete"], [3, "value", 4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "example-sidenav-content"], [3, "value"], [4, "ngFor", "ngForOf"], [1, "op-group"], [3, "mouseover"], ["mat-stroked-button", "", 3, "name", "click", "mouseover"], [1, "param_name"], [1, "param_desc"], ["width", "300", "height", "169", "title", "YouTube video player", "frameborder", "0", "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture", "allowfullscreen", "", 3, "src"]],
  template: function OpsComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function OpsComponent_Template_button_click_1_listener() {
        return ctx.close();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4, "Operations");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](5, "mat-dialog-content")(6, "mat-drawer-container", 4)(7, "mat-drawer", 5, 6)(9, "form", 7)(10, "mat-form-field", 8)(11, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](12, "i", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](13, " search for action by name");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](14, "input", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](15, "mat-autocomplete", 11, 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("optionSelected", function OpsComponent_Template_mat_autocomplete_optionSelected_15_listener($event) {
        return ctx.addOpFromSearch($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](17, OpsComponent_mat_option_17_Template, 2, 2, "mat-option", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpipe"](18, "async");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](19, OpsComponent_ng_container_19_Template, 2, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](20, "div", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](21, OpsComponent_ng_container_21_Template, 3, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](22, OpsComponent_ng_container_22_Template, 3, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](23, OpsComponent_ng_container_23_Template, 5, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](24, OpsComponent_ng_container_24_Template, 5, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](25, OpsComponent_ng_container_25_Template, 5, 1, "ng-container", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵreference"](16);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("formControl", ctx.myControl)("matAutocomplete", _r1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpipeBind1"](18, 9, ctx.filteredOptions));
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", !ctx.searchOnly);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.name !== "");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.desc !== "");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.params.length !== 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.app !== "");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx.youtube !== "");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_8__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgForm, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.FormControlDirective, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__.MatAutocomplete, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_9__.MatAutocompleteTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_10__.MatOption, _angular_material_button__WEBPACK_IMPORTED_MODULE_11__.MatButton, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogTitle, _angular_material_dialog__WEBPACK_IMPORTED_MODULE_7__.MatDialogContent, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_13__.MatInput, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_14__.MatDrawer, _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_14__.MatDrawerContainer, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_15__.CdkDragHandle, _angular_common__WEBPACK_IMPORTED_MODULE_8__.AsyncPipe],
  styles: [".mat-dialog-content[_ngcontent-%COMP%] {\n  overflow-y: hidden;\n}\n\n.example-sidenav[_ngcontent-%COMP%] {\n  width: 350px;\n  overflow-x: hidden;\n}\n\n.mat-drawer-inner-container[_ngcontent-%COMP%] {\n  overflow: hidden !important;\n}\n\n.example-container[_ngcontent-%COMP%] {\n  width: 700px;\n  height: 400px;\n  margin: 10px;\n}\n\n.example-sidenav-content[_ngcontent-%COMP%] {\n  background: white;\n  padding: 0px 15px;\n}\n\n.mat-stroked-button[_ngcontent-%COMP%] {\n  margin: 0px 4px 4px 0px;\n  \n  text-align: left;\n}\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n\n.op_container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  width: 700px;\n}\n\nul[_ngcontent-%COMP%] {\n  list-style-type: disc;\n}\n\nli[_ngcontent-%COMP%] {\n  margin-left: 20px;\n}\n\n.param_name[_ngcontent-%COMP%] {\n  font-weight: bold;\n  margin: auto;\n}\n\n.param_desc[_ngcontent-%COMP%] {\n  padding-bottom: 0px !important;\n}\n\n.example-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\n  padding-top: 10px;\n  font-weight: bold;\n  font-size: 0.8em;\n}\n\n.example-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 1em;\n  padding-bottom: 30px;\n}\n\n.example-container[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.op-group[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\n  width: 95%;\n  font-size: 100%;\n  font-weight: bold;\n  padding: 20px 0px 10px 14px;\n}\n\n.op-group[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  width: 95%;\n  font-size: 0.8em;\n  padding: 0px 0px 10px 14px;\n}\n\n.toprow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  line-height: 1em;\n}\n\n.visibleTooltip[_ngcontent-%COMP%] {\n  font-size: 2em;\n  background: #b71c1c;\n}\n\n.op-group[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n/*# sourceURL=webpack://./src/app/mixer/modal/ops/ops.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvbW9kYWwvb3BzL29wcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0FBQ0o7O0FBR0E7RUFDSSxZQUFBO0VBQ0Esa0JBQUE7QUFBSjs7QUFHQTtFQUNJLDJCQUFBO0FBQUo7O0FBR0E7RUFDSSxZQUFBO0VBQ0EsYUFBQTtFQUNBLFlBQUE7QUFBSjs7QUFFQTtFQUNJLGlCQUFBO0VBQ0EsaUJBQUE7QUFDSjs7QUFFQTtFQUNJLHVCQUFBO0VBQ0EsK0JBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksV0FBQTtBQUNKOztBQUVBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUNKOztBQUVBO0VBQ0kscUJBQUE7QUFDSjs7QUFFQTtFQUNJLGlCQUFBO0FBQ0o7O0FBRUE7RUFDSSxpQkFBQTtFQUNBLFlBQUE7QUFDSjs7QUFFQTtFQUNJLDhCQUFBO0FBQ0o7O0FBS0E7RUFDSSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUFGSjs7QUFLQTtFQUNJLGNBQUE7RUFDQSxvQkFBQTtBQUZKOztBQUtBO0VBQ0ksZ0JBQUE7RUFDQSxpQkFBQTtBQUZKOztBQVNBO0VBQ0ksVUFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLDJCQUFBO0FBTko7O0FBV0E7RUFDSSxVQUFBO0VBQ0EsZ0JBQUE7RUFDQSwwQkFBQTtBQVJKOztBQVdBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFSSjs7QUFhQTtFQUNJLGNBQUE7RUFDQSxtQkFBQTtBQVZKOztBQWNBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0FBWEoiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWRpYWxvZy1jb250ZW50IHtcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xufVxuXG4uZXhhbXBsZS1zaWRlbmF2IHtcbiAgd2lkdGg6IDM1MHB4O1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi5tYXQtZHJhd2VyLWlubmVyLWNvbnRhaW5lciB7XG4gIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcbn1cblxuLmV4YW1wbGUtY29udGFpbmVyIHtcbiAgd2lkdGg6IDcwMHB4O1xuICBoZWlnaHQ6IDQwMHB4O1xuICBtYXJnaW46IDEwcHg7XG59XG5cbi5leGFtcGxlLXNpZGVuYXYtY29udGVudCB7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBwYWRkaW5nOiAwcHggMTVweDtcbn1cblxuLm1hdC1zdHJva2VkLWJ1dHRvbiB7XG4gIG1hcmdpbjogMHB4IDRweCA0cHggMHB4O1xuICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBkMWIyOyAqL1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm9wX2NvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHdpZHRoOiA3MDBweDtcbn1cblxudWwge1xuICBsaXN0LXN0eWxlLXR5cGU6IGRpc2M7XG59XG5cbmxpIHtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG59XG5cbi5wYXJhbV9uYW1lIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1hcmdpbjogYXV0bztcbn1cblxuLnBhcmFtX2Rlc2Mge1xuICBwYWRkaW5nLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7XG59XG5cbi5leGFtcGxlLWNvbnRhaW5lciBoMiB7XG4gIHBhZGRpbmctdG9wOiAxMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAwLjhlbTtcbn1cblxuLmV4YW1wbGUtY29udGFpbmVyIHAge1xuICBmb250LXNpemU6IDFlbTtcbiAgcGFkZGluZy1ib3R0b206IDMwcHg7XG59XG5cbi5leGFtcGxlLWNvbnRhaW5lciBoMSB7XG4gIGZvbnQtc2l6ZTogMS4yZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ub3AtZ3JvdXAgaDMge1xuICB3aWR0aDogOTUlO1xuICBmb250LXNpemU6IDEwMCU7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBwYWRkaW5nOiAyMHB4IDBweCAxMHB4IDE0cHg7XG59XG5cbi5vcC1ncm91cCBwIHtcbiAgd2lkdGg6IDk1JTtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgcGFkZGluZzogMHB4IDBweCAxMHB4IDE0cHg7XG59XG5cbi50b3Byb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBsaW5lLWhlaWdodDogMWVtO1xufVxuXG4udmlzaWJsZVRvb2x0aXAge1xuICBmb250LXNpemU6IDJlbTtcbiAgYmFja2dyb3VuZDogI2I3MWMxYztcbn1cblxuLm9wLWdyb3VwIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 28300:
/*!******************************************************************!*\
  !*** ./src/app/mixer/palette/connection/connection.component.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionComponent": () => (/* binding */ ConnectionComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/model/datatypes */ 86789);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/provider/tree.service */ 6177);
/* harmony import */ var _provider_zoom_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../provider/zoom.service */ 75817);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/provider/operation.service */ 46524);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/model/defaults */ 45286);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);













function ConnectionComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 1)(1, "button", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵlistener"]("click", function ConnectionComponent_div_0_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵrestoreView"](_r2);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵresetView"](ctx_r1.disconnect());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](2, "i", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](3, "svg", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵclassMapInterpolate1"]("connection-container selectable-", !ctx_r0.disable_drag, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵstyleProp"]("z-index", ctx_r0.zndx);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵpropertyInterpolate1"]("id", "scale-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("cdkDragDisabled", ctx_r0.disable_drag)("cdkDragFreeDragPosition", ctx_r0.topleft);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵclassProp"]("hidden", !ctx_r0.show_disconnect);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵpropertyInterpolate1"]("id", "connector-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵpropertyInterpolate1"]("id", "svg-", ctx_r0.id, "");
  }
}
class ConnectionComponent {
  constructor(tree, ops, zs) {
    this.tree = tree;
    this.ops = ops;
    this.zs = zs;
    this.onConnectionRemoved = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.EventEmitter();
    this.disable_drag = true;
    this.orientation_x = true;
    this.orientation_y = true;
    this.topleft = {
      x: 0,
      y: 0
    };
    this.width = 0;
    this.height = 0;
    this.path_text = '';
    this.show_path_text = false;
    this.show_disconnect = true;
  }
  ngOnInit() {
    const treenode = this.tree.getTreeNode(this.id);
    const from_io = treenode.inputs[0];
    const to_io = treenode.outputs[0];
    const from = from_io.tn.node.id;
    const to = to_io.tn.node.id;
    this.no_draw = this.tree.getType(from) === 'op' && this.tree.hasSingleChild(from);
    this.show_disconnect = !(this.tree.getType(from) === 'op' && !this.tree.hasSingleChild(from));
    // this.path_text = this.id+'';
    // this.show_path_text = true;
    this.updatePathText();
  }
  ngAfterViewInit() {
    this.svg = document.getElementById('svg-' + this.id.toString());
    this.connector = document.getElementById('connector-' + this.id.toString());
    const to = this.tree.getConnectionOutput(this.id);
    const from = this.tree.getConnectionInput(this.id);
    this.updateFromPosition(from, this.zs.zoom);
    this.updateToPosition(to, this.zs.zoom);
    this.drawConnection(this.zs.zoom);
  }
  disconnect() {
    this.onConnectionRemoved.emit({
      id: this.id
    });
  }
  updatePathText() {
    const treenode = this.tree.getTreeNode(this.id);
    //  const from_io = treenode.inputs[0];
    const to_io = treenode.outputs[0];
    //  const from = from_io.tn.node.id;
    const to = to_io.tn.node.id;
    if (this.tree.getNode(to).type == "op") {
      //    const from_node = <DraftNode> this.tree.getNode(from);
      const op_node = this.tree.getNode(to);
      const op_info = this.ops.getOp(op_node.name);
      const inlet = this.tree.getInletOfCxn(op_node.id, this.id);
      if (op_info.inlets[inlet] !== undefined && op_info.inlets[inlet].uses !== 'draft') {
        this.path_text = "inlet uses only " + op_info.inlets[inlet].uses;
      } else this.path_text = "";
    }
  }
  disableDrag() {
    this.disable_drag = true;
  }
  enableDrag() {
    //there is never a case where this should be enabled so set to true
    this.disable_drag = true;
  }
  /**
   * if every connection goes from one node to another, the to node is always the topleft corner
   * unless the to node is a dynamic operation, in which case we must move to an inlet.
   * @param to the id of the component this connection goes to
   */
  updateToPosition(to, scale) {
    const to_comp = this.tree.getComponent(to);
    this.b_to = {
      x: to_comp.topleft.x + 3 * this.scale / this.default_cell_size + 15 * this.scale / this.default_cell_size,
      y: to_comp.topleft.y
    };
    if (this.tree.getType(to_comp.id) === 'op') {
      // get the inlet value 
      const ndx = this.tree.getInletOfCxn(to_comp.id, this.id);
      if (ndx !== -1) {
        const ndx_in_list = this.tree.getInputsAtNdx(to_comp.id, ndx).findIndex(el => el.tn.node.id === this.id);
        const element = document.getElementById('inlet' + to_comp.id + "-" + ndx + "-" + ndx_in_list);
        //to get a current position, you need the inlets parent to have a defined position. 
        if (element !== undefined && element !== null && element.offsetParent !== null) {
          const left_offset = element.offsetLeft;
          this.b_to = {
            x: to_comp.topleft.x + left_offset * this.scale / this.default_cell_size + 15 * this.scale / this.default_cell_size,
            y: to_comp.topleft.y
          };
        } else {
          const left_offset = (ndx + ndx_in_list) * _core_model_defaults__WEBPACK_IMPORTED_MODULE_4__.defaults.inlet_button_width;
          this.b_to = {
            x: to_comp.topleft.x + left_offset * this.scale / this.default_cell_size + 15 * this.scale / this.default_cell_size,
            y: to_comp.topleft.y
          };
        }
      }
    }
    this.calculateBounds();
    this.drawConnection(scale);
  }
  /**
  * if every connection goes from one node to another, the to node is always the topleft corner
  * unless the to node is a dynamic operation, in which case we must move to an inlet.
  * @param to the id of the component this connection goes to
  */
  //  updateInitalToPosition(to: number, inlet_id: number, within_inlet_id: number,  scale: number){
  //   console.log("***UPDATE INITIAL POSITION***", to, scale)
  //   const to_comp = <OperationComponent> this.tree.getComponent(to);
  //   this.b_to = {
  //     x:  to_comp.topleft.x + 3*this.scale/this.default_cell_size +  15* this.scale/this.default_cell_size,
  //     y: to_comp.topleft.y
  //   };
  //   this.b_to = {x: to_comp.topleft.x + (inlet_id*100+15)*this.scale/this.default_cell_size, y: to_comp.topleft.y}
  //   console.log("THIS B TO ", this.b_to)
  //   this.calculateBounds();
  //   this.drawConnection(scale);
  // }
  /**
   * if every connection goes from one node to another, the from node depends on the kind of object
   * @param from the id of the component this connection goes to
   */
  updateFromPosition(from, scale) {
    const from_comp = this.tree.getComponent(from);
    if (from_comp === null) {
      console.error("no from component assigned yet on ", this.id);
    }
    if (this.tree.getType(from) === 'op') this.fromOpUpdate(from_comp);else this.fromDraftUpdate(from_comp);
    this.calculateBounds();
    this.drawConnection(scale);
  }
  //TODO, add positing here
  fromOpUpdate(op_comp) {
    const scale = document.getElementById("scale-" + op_comp.id);
    if (scale === null) {
      // console.log("draft not found on update")
      // this.b_from = 
      // {x: draft_comp.topleft.x+5, 
      //  y: draft_comp.topleft.y + draft_comp.bounds.height*(this.zs.zoom/this.default_cell_size)};
    } else {
      this.b_from = {
        x: op_comp.topleft.x + 5,
        y: op_comp.topleft.y + scale.offsetHeight * (this.zs.zoom / this.default_cell_size)
      };
    }
  }
  fromDraftUpdate(draft_comp) {
    if (draft_comp.draft_visible) {
      const scale = document.getElementById("scale-" + draft_comp.id);
      if (scale === null) {
        // console.log("draft not found on update")
        // this.b_from = 
        // {x: draft_comp.topleft.x+5, 
        //  y: draft_comp.topleft.y + draft_comp.bounds.height*(this.zs.zoom/this.default_cell_size)};
      } else {
        this.b_from = {
          x: draft_comp.topleft.x + 5,
          y: draft_comp.topleft.y + scale.offsetHeight * (this.zs.zoom / this.default_cell_size)
        };
      }
    } else {
      this.b_from = {
        x: draft_comp.topleft.x + 3 * this.zs.zoom,
        y: draft_comp.topleft.y + 30
      };
    }
  }
  calculateBounds() {
    let p1 = this.b_from;
    let p2 = this.b_to;
    let bottomright = {
      x: 0,
      y: 0
    };
    if (p1 === undefined || p2 === undefined) return;
    this.orientation_x = true;
    this.orientation_y = true;
    if (p2.x < p1.x) this.orientation_x = !this.orientation_x;
    if (p2.y < p1.y) this.orientation_y = !this.orientation_y;
    bottomright.x = Math.max(p1.x, p2.x);
    bottomright.y = Math.max(p1.y, p2.y);
    this.topleft = {
      x: Math.min(p1.x, p2.x),
      y: Math.min(p1.y, p2.y)
    };
    this.width = bottomright.x - this.topleft.x + 2; //add two so a line is drawn when horiz or vert
    this.height = bottomright.y - this.topleft.y + 2;
  }
  drawConnection(scale) {
    const stublength = 15;
    const connector_opening = 10;
    const connector_font_size = Math.max((10 - scale) / 10, .75);
    const text_path_font_size = Math.max((10 - scale) / 10, .75);
    const button_margin_left = -20;
    const button_margin_top = -16;
    if (this.no_draw) return;
    if (this.svg === null || this.svg == undefined) return;
    const stroke_width = 4 * this.zs.zoom / this.zs.getZoomMax();
    if (this.orientation_x && this.orientation_y) {
      this.svg.innerHTML = ' <path id="path-' + this.id + '" d="M 0 0 C 0 50, ' + this.width + ' ' + (this.height - 70) + ', ' + this.width + ' ' + (this.height - (stublength + connector_opening)) + '" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"  stroke-width="' + stroke_width + '"/>';
      if (this.show_path_text) {
        this.svg.innerHTML += '<text><textPath startOffset="10%" fill="#ff4081" href="#path-' + this.id + '">' + this.path_text + '</textPath></text> ';
      }
      this.svg.innerHTML += '  <line x1="' + this.width + '" y1="' + (this.height - stublength) + '" x2=' + this.width + ' y2="' + this.height + '"  stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '" />';
      this.connector.style.top = this.height - (stublength + connector_opening) + button_margin_top + 'px';
      this.connector.style.left = this.width + button_margin_left + 'px';
      this.connector.style.fontSize = connector_font_size + "em";
      this.svg.style.fontSize = text_path_font_size + "em";
    } else if (!this.orientation_x && !this.orientation_y) {
      this.svg.innerHTML = ' <path id="path-' + this.id + '" d="M 0 ' + -(stublength + connector_opening) + ' c 0 -50, ' + this.width + ' ' + (this.height + 100) + ', ' + this.width + ' ' + (this.height + (stublength + connector_opening)) + '" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '"/> ';
      if (this.show_path_text) {
        this.svg.innerHTML += ' <text><textPath startOffset="60%" fill="#ff4081" href="#path-' + this.id + '">' + this.path_text + '</textPath></text>';
      }
      this.svg.innerHTML += '  <line x1="0" y1="' + -stublength + '" x2="0" y2="0"  stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '" />';
      this.connector.style.top = -(stublength + connector_opening) + button_margin_top + 'px';
      this.connector.style.left = button_margin_left + 'px';
      this.connector.style.fontSize = connector_font_size + "em";
      this.svg.style.fontSize = text_path_font_size + "em";
    } else if (!this.orientation_x && this.orientation_y) {
      // this.svg.innerHTML = ' <path id="path-'+this.id+'" d="M '+this.bounds.width+' 0 C '+(this.bounds.width)+' 50, 0 '+(this.bounds.height-70)+', 0 '+(this.bounds.height-(stublength+connector_opening))+'" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="'+stroke_width+'"/> <text><textPath startOffset="50%" fill="#000000" href="#path-'+this.id+'">'+this.path_text+'</textPath></text> ' ;
      this.svg.innerHTML = ' <path id="path-' + this.id + '" d=" M  0 ' + (this.height - (stublength + connector_opening)) + ' C 0 ' + (this.height - (stublength + connector_opening) - 50) + ', ' + this.width + ' 50, ' + this.width + ' 0" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '"/> ';
      if (this.show_path_text) {
        this.svg.innerHTML += '<text><textPath startOffset="60%" fill="#ff4081" href="#path-' + this.id + '">' + this.path_text + '</textPath></text>';
      }
      this.svg.innerHTML += '  <line x1="0" y1="' + (this.height - stublength) + '" x2="0" y2="' + this.height + '"  stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '" />';
      this.connector.style.top = this.height - (stublength + connector_opening) + button_margin_top + 'px';
      this.connector.style.left = button_margin_left + 'px';
      this.connector.style.fontSize = connector_font_size + "em";
      this.svg.style.fontSize = text_path_font_size + "em";
    } else {
      this.svg.innerHTML = ' <path id="path-' + this.id + '" d="M 0 ' + this.height + ' C 0 ' + (this.height + 50) + ', ' + this.width + ' -50, ' + this.width + '' + -(stublength + connector_opening) + '" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"  stroke-width="' + stroke_width + '"/>';
      if (this.show_path_text) {
        this.svg.innerHTML = '<text><textPath startOffset="10%" fill="#000000" href="#path-' + this.id + '">' + this.path_text + '</textPath></text> ';
      }
      this.svg.innerHTML += '  <line x1="' + this.width + '" y1="' + -stublength + '" x2="' + this.width + '" y2="0"  stroke="#ff4081"  stroke-dasharray="4 2"   stroke-width="' + stroke_width + '" />';
      this.connector.style.top = -(stublength + connector_opening) + button_margin_top + 'px';
      this.connector.style.left = this.width + button_margin_left + 'px';
      this.connector.style.fontSize = connector_font_size + "em";
      this.svg.style.fontSize = text_path_font_size + "em";
    }
  }
  drawForPrint(canvas, cx, scale) {
    // cx.beginPath();
    // cx.strokeStyle = "#ff4081";
    // cx.setLineDash([scale, 2]);
    // cx.lineWidth = 2;
    // // this.cx.strokeRect(0,0, this.bounds.width, this.bounds.height);
    // if(this.orientation){
    //   cx.moveTo(this.bounds.topleft.x, this.bounds.topleft.y);
    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y + this.bounds.height);
    // }else{
    //   cx.moveTo(this.bounds.topleft.x, this.bounds.height+ this.bounds.topleft.y);
    //   cx.lineTo(this.bounds.width + this.bounds.topleft.x, this.bounds.topleft.y);
    // }
    // cx.stroke();
  }
  /**
   * rescales this compoment.
   * Call after the operation and subdraft connections have been updated.
   * @param scale
   */
  rescale(scale) {
    const to = this.tree.getConnectionOutput(this.id);
    const from = this.tree.getConnectionInput(this.id);
    this.updateFromPosition(from, scale);
    this.updateToPosition(to, scale);
    // this.b_from = {x: from_comp.bounds.topleft.x, y: from_comp.bounds.topleft.y + from_comp.bounds.height};
    // this.b_to = {x: to_comp.bounds.topleft.x, y: to_comp.bounds.topleft.y};
    this.scale = scale;
    this.calculateBounds();
    this.drawConnection(scale);
    // const container: HTMLElement = document.getElementById('cxn-'+this.id);
    // container.style.transformOrigin = 'top left';
    // container.style.transform = 'scale(' + this.scale/5 + ')';
  }
}

ConnectionComponent.ɵfac = function ConnectionComponent_Factory(t) {
  return new (t || ConnectionComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_1__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_3__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_provider_zoom_service__WEBPACK_IMPORTED_MODULE_2__.ZoomService));
};
ConnectionComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineComponent"]({
  type: ConnectionComponent,
  selectors: [["app-connection"]],
  inputs: {
    id: "id",
    scale: "scale",
    default_cell_size: "default_cell_size"
  },
  outputs: {
    onConnectionRemoved: "onConnectionRemoved"
  },
  decls: 1,
  vars: 1,
  consts: [["cdkDrag", "", 3, "class", "id", "cdkDragDisabled", "z-index", "cdkDragFreeDragPosition", 4, "ngIf"], ["cdkDrag", "", 3, "id", "cdkDragDisabled", "cdkDragFreeDragPosition"], ["mat-icon-button", "", "color", "accent", "aria-label", "Example icon button with a menu icon", 3, "id", "click"], [1, "fas", "fa-times"], ["xmlns", "http://www.w3.org/2000/svg", 3, "id"]],
  template: function ConnectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtemplate"](0, ConnectionComponent_div_0_Template, 4, 12, "div", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngIf", ctx.tree.getNode(ctx.id) !== null && !ctx.no_draw);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, _angular_material_button__WEBPACK_IMPORTED_MODULE_7__.MatButton, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_8__.CdkDrag],
  styles: [".connection-container[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  pointer-events: none;\n}\n\nbutton[_ngcontent-%COMP%] {\n  position: absolute;\n  font-size: 0.5em;\n  pointer-events: all;\n}\n\nsvg[_ngcontent-%COMP%] {\n  font-size: 0.8em;\n}\n\n.hidden[_ngcontent-%COMP%] {\n  display: none;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/connection/connection.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9jb25uZWN0aW9uL2Nvbm5lY3Rpb24uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDSSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0Esb0JBQUE7QUFESjs7QUFJQTtFQUNJLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQURKOztBQUlBO0VBQ0ksZ0JBQUE7QUFESjs7QUFJQTtFQUNJLGFBQUE7QUFESiIsInNvdXJjZXNDb250ZW50IjpbIi5jb25uZWN0aW9uLWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIGxlZnQ6IDBweDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbmJ1dHRvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZm9udC1zaXplOiAwLjVlbTtcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcbn1cblxuc3ZnIHtcbiAgZm9udC1zaXplOiAwLjhlbTtcbn1cblxuLmhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 96744:
/*!********************************************************!*\
  !*** ./src/app/mixer/palette/image/image.component.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageComponent": () => (/* binding */ ImageComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class ImageComponent {
  constructor() {}
  ngOnInit() {}
}
ImageComponent.ɵfac = function ImageComponent_Factory(t) {
  return new (t || ImageComponent)();
};
ImageComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: ImageComponent,
  selectors: [["app-image"]],
  decls: 7,
  vars: 0,
  consts: [[1, "image-container"], [1, "image-preview"], [1, "params"]],
  template: function ImageComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2)(3, "div");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "colortable");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "number of drafts/color groups");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
  },
  styles: ["\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 9088:
/*!************************************************************!*\
  !*** ./src/app/mixer/palette/marquee/marquee.component.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MarqueeComponent": () => (/* binding */ MarqueeComponent)
/* harmony export */ });
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/model/drafts */ 1435);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


class MarqueeComponent {
  constructor() {
    this.draft = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_0__.initDraftWithParams)({
      ud_name: "selection"
    });
    this.bounds = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 0,
      height: 0
    };
    this.start = {
      i: 0,
      j: 0,
      si: 0
    };
    this.active = false;
    this.filter = "or";
  }
  ngOnInit() {
    console.log(this.draft.id);
  }
  getDraftId() {
    return this.draft.id;
  }
  setPositionAndSize(bounds) {
    this.bounds = bounds;
  }
}
MarqueeComponent.ɵfac = function MarqueeComponent_Factory(t) {
  return new (t || MarqueeComponent)();
};
MarqueeComponent.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
  type: MarqueeComponent,
  selectors: [["app-marquee"]]
});

/***/ }),

/***/ 84462:
/*!******************************************************!*\
  !*** ./src/app/mixer/palette/note/note.component.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteComponent": () => (/* binding */ NoteComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 36312);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/model/util */ 75973);
/* harmony import */ var _core_provider_notes_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/provider/notes.service */ 31326);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../provider/viewport.service */ 2320);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/text-field */ 35804);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var ngx_color_picker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-color-picker */ 18251);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);

















function NoteComponent_button_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "button", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function NoteComponent_button_8_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r4);
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r3.uploadImage());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
}
function NoteComponent_div_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](1, "img", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("src", ctx_r1.note.imageurl, _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsanitizeUrl"]);
  }
}
function NoteComponent_mat_form_field_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "mat-form-field", 23)(1, "mat-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](2, "url");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](3, "input", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function NoteComponent_mat_form_field_15_Template_input_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r6);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r5.note.imageurl = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](4, "button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function NoteComponent_mat_form_field_15_Template_button_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵrestoreView"](_r6);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵresetView"](ctx_r7.enterUrl());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("width", ctx_r2.note.width, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx_r2.note.imageurl);
  }
}
class NoteComponent {
  constructor(notes, viewport) {
    this.notes = notes;
    this.viewport = viewport;
    this._scale = 5;
    this.deleteNote = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.saveNoteText = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.bounds = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 200,
      height: 200
    };
    this.markdown = "";
    this.show_url = false;
    this.disable_drag = false;
    this.image_url = "";
  }
  get scale() {
    return this._scale;
  }
  set scale(value) {
    this._scale = value;
    this.rescale();
  }
  ngOnInit() {
    this.note = this.notes.get(this.id);
    if (this.note == undefined) {
      this.bounds.topleft = {
        x: 0,
        y: 0
      };
    } else {
      this.bounds.topleft = {
        x: this.note.interlacement.j * this.scale,
        y: this.note.interlacement.i * this.scale
      };
    }
  }
  ngAfterViewInit() {
    this.canvas = document.getElementById("notecanvas-" + this.note.id.toString());
    this.cx = this.canvas.getContext("2d");
    this.rescale();
  }
  /**
   * called via resize button
   * @param event
   */
  onStart(event) {
    if (event.target.id == 'resize_button') {
      this.moveSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.fromEvent)(document, 'mousemove').subscribe(e => this.onDrag(e));
    }
  }
  onEnd(event) {
    if (this.moveSubscription !== undefined) this.moveSubscription.unsubscribe();
  }
  /**
   * called via drag handler to reset position
   * @param event
   */
  onDrag(event) {
    const zoom_factor = this.default_cell / this.scale;
    const pointer = {
      x: event.clientX,
      y: event.clientY
    };
    this.note.width = (pointer.x - this.bounds.topleft.x + 10) * zoom_factor;
    this.note.height = (pointer.y - this.bounds.topleft.y + 10) * zoom_factor;
  }
  delete() {
    this.deleteNote.emit(this.note.id);
  }
  dragMove($event) {
    const pointer = $event.pointerPosition;
    const relative = _core_model_util__WEBPACK_IMPORTED_MODULE_0__["default"].getAdjustedPointerPosition(pointer, this.viewport.getBounds());
    const adj = _core_model_util__WEBPACK_IMPORTED_MODULE_0__["default"].snapToGrid(relative, this.scale);
    this.bounds.topleft = adj;
    this.note.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_0__["default"].resolvePointToAbsoluteNdx(adj, this.scale);
  }
  /**
   * Called when main palette is rescaled and triggers call to rescale this element, and update its position
   * so it remains at the same coords.
   * @param scale - the zoom scale of the iterface (e.g. the number of pixels to render each cell)
   */
  rescale() {
    if (this.note === undefined) {
      console.error("note is undefined on rescale");
      return;
    }
    const zoom_factor = this.scale / this.default_cell;
    //redraw at scale
    const container = document.getElementById('scalenote-' + this.note.id);
    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';
    this.bounds.topleft = {
      x: this.note.interlacement.j * this.scale,
      y: this.note.interlacement.i * this.scale
    };
  }
  save() {
    this.saveNoteText.emit();
  }
  /**
   * draw onto the supplied canvas, to be used when printing
   * @returns
   */
  drawForPrint(canvas, cx, scale) {
    if (canvas === undefined) return;
    //draw the supplemental info like size
    cx.fillStyle = "#666666";
    cx.font = scale * 2 + "px Verdana";
    cx.fillText(this.note.text, this.bounds.topleft.x, this.bounds.topleft.y + this.bounds.height + 20);
  }
  disableDrag() {
    this.disable_drag = true;
  }
  enableDrag() {
    this.disable_drag = false;
  }
  uploadImage() {
    this.show_url = true;
  }
  enterUrl() {
    this.show_url = false;
  }
  colorChange(event) {
    this.notes.setColor(this.id, event);
  }
  hidePreview(e) {
    console.log(e.getContent());
  }
}
NoteComponent.ɵfac = function NoteComponent_Factory(t) {
  return new (t || NoteComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_core_provider_notes_service__WEBPACK_IMPORTED_MODULE_1__.NotesService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_2__.ViewportService));
};
NoteComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
  type: NoteComponent,
  selectors: [["app-note"]],
  hostBindings: function NoteComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("mousedown", function NoteComponent_mousedown_HostBindingHandler($event) {
        return ctx.onStart($event);
      })("mouseup", function NoteComponent_mouseup_HostBindingHandler($event) {
        return ctx.onEnd($event);
      });
    }
  },
  inputs: {
    id: "id",
    default_cell: "default_cell",
    scale: "scale"
  },
  outputs: {
    deleteNote: "deleteNote",
    saveNoteText: "saveNoteText"
  },
  decls: 21,
  vars: 22,
  consts: [["cdkDrag", "", 3, "cdkDragDisabled", "cdkDragFreeDragPosition", "cdkDragMoved"], [1, "note-container", 3, "id"], [1, "note-opts"], [1, "align-left"], ["cdkDragHandle", "", 1, "handle"], ["mat-icon-button", "", 1, "fa-solid", "fa-up-down-left-right"], [1, "align-right"], ["mat-icon-button", "", "matTooltip", "Change Note Color", 1, "fa-solid", "fa-palette", 3, "colorPicker", "colorPickerChange"], ["matTooltip", "Upload Image", "mat-icon-button", "", "class", "fas fa-image", 3, "click", 4, "ngIf"], ["matTooltip", "Delete", "mat-icon-button", "", 1, "fas", "fa-times", 3, "name", "click"], [1, "text-entry"], [1, "example-form"], ["appearance", "fill", 1, "notetitle"], ["matInput", "", "placeholder", "note title", "name", "title", 3, "ngModel", "ngModelChange", "focusout"], [4, "ngIf"], ["class", "url", 4, "ngIf"], ["appearance", "fill", 1, "textfield"], ["cdkTextareaAutosize", "", "resizeToFitContent", "", "matInput", "", "placeholder", "add your note text here", "name", "text", 3, "ngModel", "ngModelChange", "focusout"], [1, "expand"], ["mat-icon-button", "", "id", "resize_button", 1, "expand-icon", "fa-solid", "fa-up-right-and-down-left-from-center"], ["hidden", "", 3, "id"], ["matTooltip", "Upload Image", "mat-icon-button", "", 1, "fas", "fa-image", 3, "click"], [3, "src"], [1, "url"], ["type", "tel", "matInput", "", "placeholder", "enter the url to your image", 3, "ngModel", "ngModelChange"], ["matTooltip", "enter url", "mat-icon-button", "", 1, "fa-solid", "fa-check", 3, "click"]],
  template: function NoteComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("cdkDragMoved", function NoteComponent_Template_div_cdkDragMoved_0_listener($event) {
        return ctx.dragMove($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](5, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](6, "div", 6)(7, "button", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("colorPickerChange", function NoteComponent_Template_button_colorPickerChange_7_listener($event) {
        return ctx.colorChange($event);
      })("colorPickerChange", function NoteComponent_Template_button_colorPickerChange_7_listener($event) {
        return ctx.note.color = $event;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](8, NoteComponent_button_8_Template, 1, 0, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](9, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("click", function NoteComponent_Template_button_click_9_listener() {
        return ctx.delete();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](10, "div", 10)(11, "form", 11)(12, "mat-form-field", 12)(13, "input", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function NoteComponent_Template_input_ngModelChange_13_listener($event) {
        return ctx.note.title = $event;
      })("focusout", function NoteComponent_Template_input_focusout_13_listener() {
        return ctx.save();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](14, NoteComponent_div_14_Template, 2, 1, "div", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](15, NoteComponent_mat_form_field_15_Template, 5, 3, "mat-form-field", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](16, "mat-form-field", 16)(17, "textarea", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵlistener"]("ngModelChange", function NoteComponent_Template_textarea_ngModelChange_17_listener($event) {
        return ctx.note.text = $event;
      })("focusout", function NoteComponent_Template_textarea_focusout_17_listener() {
        return ctx.save();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](18, "div", 18);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](19, "button", 19);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](20, "canvas", 20);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵclassMapInterpolate1"]("selectable-", !ctx.disable_drag, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("cdkDragDisabled", ctx.disable_drag)("cdkDragFreeDragPosition", ctx.bounds.topleft);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("width", ctx.note.width, "px")("min-height", ctx.note.height, "px")("background", ctx.note.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpropertyInterpolate1"]("id", "scalenote-", ctx.note.id, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵstyleProp"]("background", ctx.note.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("colorPicker", ctx.note.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", !ctx.show_url);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("name", ctx.delete);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx.note.title);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.note.imageurl);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngIf", ctx.show_url);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("ngModel", ctx.note.text);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpropertyInterpolate1"]("id", "notecanvas-", ctx.note.id, "");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_6__.NgForm, _angular_material_button__WEBPACK_IMPORTED_MODULE_7__.MatButton, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__.MatLabel, _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__.CdkTextareaAutosize, _angular_material_input__WEBPACK_IMPORTED_MODULE_10__.MatInput, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__.MatTooltip, ngx_color_picker__WEBPACK_IMPORTED_MODULE_12__.ColorPickerDirective, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_13__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_13__.CdkDragHandle],
  styles: [".textfield[_ngcontent-%COMP%] {\n  width: 100%;\n}\n\n.note-container[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: flex;\n  flex-direction: column;\n  min-width: 200px;\n}\n\n.scale-conatiner[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.notetitle[_ngcontent-%COMP%] {\n  font-weight: bold;\n  width: 100%;\n}\n\n.expand[_ngcontent-%COMP%] {\n  display: flex;\n  width: 100%;\n  height: 40px;\n  justify-content: flex-end;\n  padding: 0;\n  min-width: 0;\n  height: 40px;\n  flex-shrink: 0;\n  line-height: 40px;\n  border-radius: 50%;\n  text-align: center;\n}\n\n.expand-icon[_ngcontent-%COMP%] {\n  transform: rotate(90deg);\n}\n\nimg[_ngcontent-%COMP%] {\n  pointer-events: none;\n}\n\n.mat-icon-button[_ngcontent-%COMP%] {\n  opacity: 0.6;\n}\n\n.handle[_ngcontent-%COMP%] {\n  padding: 0;\n  min-width: 0;\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n  line-height: 40px;\n  border-radius: 50%;\n  text-align: center;\n}\n\n.text-entry[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 3;\n}\n\n.note-opts[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.url[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 8px;\n  border: thin solid black;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/note/note.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9ub3RlL25vdGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDQyxXQUFBO0FBQ0Q7O0FBRUE7RUFDQyxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsZ0JBQUE7QUFDRDs7QUFFQTtFQUNDLGFBQUE7RUFDRyxzQkFBQTtBQUNKOztBQUVBO0VBQ0MsaUJBQUE7RUFDQSxXQUFBO0FBQ0Q7O0FBRUE7RUFDQyxhQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLFVBQUE7RUFDRyxZQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0gsa0JBQUE7QUFDRDs7QUFFQTtFQUNDLHdCQUFBO0FBQ0Q7O0FBRUE7RUFDQyxvQkFBQTtBQUNEOztBQUdBO0VBQ0MsWUFBQTtBQUFEOztBQUlBO0VBQ0MsVUFBQTtFQUNHLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0gsa0JBQUE7QUFERDs7QUFNQTtFQUNDLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFlBQUE7QUFIRDs7QUFPQTtFQUNDLFdBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSw4QkFBQTtBQUpEOztBQU9BO0VBQ0MsV0FBQTtFQUNBLFlBQUE7RUFDQSx3QkFBQTtBQUpEIiwic291cmNlc0NvbnRlbnQiOlsiLnRleHRmaWVsZCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4ubm90ZS1jb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi13aWR0aDogMjAwcHg7XG59XG5cbi5zY2FsZS1jb25hdGluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubm90ZXRpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZXhwYW5kIHtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDBweDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgcGFkZGluZzogMDtcbiAgbWluLXdpZHRoOiAwO1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBsaW5lLWhlaWdodDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5leHBhbmQtaWNvbiB7XG4gIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcbn1cblxuaW1nIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5tYXQtaWNvbi1idXR0b24ge1xuICBvcGFjaXR5OiAwLjY7XG59XG5cbi5oYW5kbGUge1xuICBwYWRkaW5nOiAwO1xuICBtaW4td2lkdGg6IDA7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBsaW5lLWhlaWdodDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi50ZXh0LWVudHJ5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleC1ncm93OiAzO1xufVxuXG4ubm90ZS1vcHRzIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLnVybCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogdGhpbiBzb2xpZCBibGFjaztcbn0iXSwic291cmNlUm9vdCI6IiJ9 */"]
});

/***/ }),

/***/ 29047:
/*!******************************************************************!*\
  !*** ./src/app/mixer/palette/operation/inlet/inlet.component.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InletComponent": () => (/* binding */ InletComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/model/drafts */ 1435);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/provider/operation.service */ 46524);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/provider/tree.service */ 6177);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/select */ 57371);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);















function InletComponent_ng_container_0_ng_container_2_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "mat-option", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const num_r9 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("value", num_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", num_r9, " ");
  }
}
function InletComponent_ng_container_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "mat-select", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function InletComponent_ng_container_0_ng_container_2_Template_mat_select_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r11);
      const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r10.opnode.inlets[ctx_r10.inletid] = $event);
    })("selectionChange", function InletComponent_ng_container_0_ng_container_2_Template_mat_select_selectionChange_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r11);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r12.inletChange());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, InletComponent_ng_container_0_ng_container_2_mat_option_4_Template, 2, 2, "mat-option", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r1.opnode.inlets[ctx_r1.inletid]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r1.opnode.inlets[ctx_r1.inletid]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx_r1.number_opts);
  }
}
function InletComponent_ng_container_0_ng_container_3_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" (", ctx_r13.opnode.inlets[ctx_r13.inletid], ")");
  }
}
function InletComponent_ng_container_0_ng_container_3_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r14.opnode.inlets[ctx_r14.inletid], "");
  }
}
function InletComponent_ng_container_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, InletComponent_ng_container_0_ng_container_3_span_1_Template, 2, 1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, InletComponent_ng_container_0_ng_container_3_span_2_Template, 2, 1, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.inlet.type === "notation");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.inlet.type === "profile");
  }
}
function InletComponent_ng_container_0_ng_container_4_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "mat-option", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const sys_r16 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("value", sys_r16.id);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", sys_r16.code, " ");
  }
}
function InletComponent_ng_container_0_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "mat-select", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function InletComponent_ng_container_0_ng_container_4_Template_mat_select_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r18);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r17.opnode.inlets[ctx_r17.inletid] = $event);
    })("selectionChange", function InletComponent_ng_container_0_ng_container_4_Template_mat_select_selectionChange_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r18);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r19.inletChange());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, InletComponent_ng_container_0_ng_container_4_mat_option_4_Template, 2, 2, "mat-option", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("layer ", ctx_r3.inletid + 1, ", system: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r3.opnode.inlets[ctx_r3.inletid]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx_r3.all_system_codes);
  }
}
function InletComponent_ng_container_0_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](2, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("background-color", ctx_r4.fc.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("matTooltip", ctx_r4.fc.value);
  }
}
function InletComponent_ng_container_0_div_6_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 18);
  }
}
function InletComponent_ng_container_0_div_6_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 19);
  }
}
function InletComponent_ng_container_0_div_6_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 20)(1, "div")(2, "p")(3, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const input_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
    const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r24.getInputName(input_r20));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" is ", ctx_r24.inlet.dx, "");
  }
}
function InletComponent_ng_container_0_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div")(1, "div", 14)(2, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function InletComponent_ng_container_0_div_6_Template_button_click_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r27);
      const i_r21 = restoredCtx.index;
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r26.toggleVisibility(i_r21));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, InletComponent_ng_container_0_div_6_i_3_Template, 1, 0, "i", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, InletComponent_ng_container_0_div_6_i_4_Template, 1, 0, "i", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](5, InletComponent_ng_container_0_div_6_div_5_Template, 6, 2, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const i_r21 = ctx.index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpropertyInterpolate3"]("id", "inlet", ctx_r5.opid, "-", ctx_r5.inletid, "-", i_r21, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("matTooltip", ctx_r5.inlet.dx);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r5.show_connection_name !== i_r21);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r5.show_connection_name === i_r21);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r5.show_connection_name == i_r21);
  }
}
function InletComponent_ng_container_0_button_7_i_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 24);
  }
}
function InletComponent_ng_container_0_button_7_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 25);
  }
}
function InletComponent_ng_container_0_button_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "button", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function InletComponent_ng_container_0_button_7_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r31);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r30.inputSelected());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, InletComponent_ng_container_0_button_7_i_1_Template, 1, 0, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, InletComponent_ng_container_0_button_7_i_2_Template, 1, 0, "i", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("matTooltip", ctx_r6.inlet.dx);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r6.inlet_for_drafts);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r6.inlet_for_drafts);
  }
}
function InletComponent_ng_container_0_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 20)(1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2, "inlet description to: ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r7.inlet.dx);
  }
}
function InletComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, InletComponent_ng_container_0_ng_container_2_Template, 5, 3, "ng-container", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, InletComponent_ng_container_0_ng_container_3_Template, 3, 2, "ng-container", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, InletComponent_ng_container_0_ng_container_4_Template, 5, 3, "ng-container", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](5, InletComponent_ng_container_0_ng_container_5_Template, 3, 3, "ng-container", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](6, InletComponent_ng_container_0_div_6_Template, 6, 7, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](7, InletComponent_ng_container_0_button_7_Template, 3, 3, "button", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](9, InletComponent_ng_container_0_div_9_Template, 5, 1, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.inlet.type === "number" || ctx_r0.inlet.type === "draft");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.inlet.type === "notation" || ctx_r0.inlet.type === "profile");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.inlet.type === "system");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.inlet.type === "color");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx_r0.tree.getOpComponentInputs(ctx_r0.opid, ctx_r0.inletid));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.inlet.num_drafts == -1 || ctx_r0.tree.getInputsAtNdx(ctx_r0.opid, ctx_r0.inletid).length < ctx_r0.inlet.num_drafts);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r0.inlet_name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.show_inlet_desc);
  }
}
class InletComponent {
  constructor(tree, systems, ops) {
    this.tree = tree;
    this.systems = systems;
    this.ops = ops;
    this.onInputSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onInputVisibilityChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onConnectionRemoved = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onInletChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onInletLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.show_connection_name = -1;
    this.inlet_open = true;
    this.show_inlet_desc = false;
    this.inlet_for_drafts = true;
    this.inlet_name = "";
  }
  ngOnInit() {
    this.opnode = this.tree.getOpNode(this.opid);
    this.all_system_codes = this.systems.weft_systems.map(el => {
      return {
        code: el.name,
        id: el.id
      };
    });
    const op = this.ops.getOp(this.opnode.name);
    this.number_opts = [];
    for (let i = 1; i < 50; i++) {
      this.number_opts.push(i);
    }
    // initalize any dyanmic inlets
    if (this.opnode.inlets.length > 0 && this.inletid >= op.inlets.length && this.dynamic) {
      const type = op.dynamic_param_type;
      this.inlet = {
        type: type,
        name: '',
        value: this.parseDefaultInletValue(type, this.opnode.inlets[this.inletid]),
        uses: 'draft',
        num_drafts: 1,
        dx: ''
      };
    } else {
      this.inlet = op.inlets[this.inletid];
    }
    if (this.inlet === undefined) {
      this.inlet = {
        type: 'null',
        name: '',
        value: -1,
        uses: 'draft',
        num_drafts: 1,
        dx: 'input'
      };
    }
    this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.parseDefaultInletValue(this.inlet.type, this.opnode.inlets[this.inletid]));
    this.inlet_desc = "input " + this.inlet.dx;
    this.inlet_for_drafts = this.inlet.uses === 'draft';
    this.inlet_name = this.inlet.name;
  }
  ngAfterViewInit() {
    this.onInletLoaded.emit({
      ndx: this.inletid
    });
  }
  checkIfInletIsOpen() {
    this.inlet_open = this.inlet.num_drafts == -1 || this.tree.getInputsAtNdx(this.opid, this.inletid).length < this.inlet.num_drafts;
  }
  parseDefaultInletValue(type, value) {
    switch (type) {
      case 'number':
      case 'system':
      case 'draft':
        return parseInt(value);
        break;
      case 'notation':
      case 'string':
        return value.slice();
        break;
      case 'color':
        return value;
        break;
    }
  }
  toggleVisibility(input_ndx) {
    if (input_ndx == this.show_connection_name) {
      this.onInputVisibilityChange.emit({
        inletid: this.inletid,
        ndx_in_inlets: input_ndx,
        show: false
      });
      this.show_connection_name = -1;
    } else {
      this.show_connection_name = input_ndx;
      this.onInputVisibilityChange.emit({
        inletid: this.inletid,
        ndx_in_inlets: input_ndx,
        show: true
      });
    }
  }
  inputSelected() {
    this.onInputSelected.emit({
      inletid: this.inletid
    });
    this.show_connection_name = -1;
  }
  removeConnectionTo(sd_id) {
    this.onConnectionRemoved.emit({
      from: sd_id,
      to: this.opid,
      inletid: this.inletid
    });
    this.checkIfInletIsOpen();
  }
  getInputName(id) {
    const sd = this.tree.getDraft(id);
    if (sd === null || sd === undefined) return "null draft";
    return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_0__.getDraftName)(sd);
  }
  inletChange() {
    const opnode = this.tree.getNode(this.opid);
    // switch(this.inlet.type){
    //   case 'number':
    //     this.fc.setValue(value);
    //     opnode.inlets[this.inletid] = value;
    //     break;
    //   case 'system':
    //    // opnode.inlets[this.inletid] = value;
    //     break;
    //   case 'color':
    //     this.fc.setValue(value);
    //     opnode.inlets[this.inletid] = value;
    //     break;
    //   case 'notation':
    //     this.fc.setValue(value);
    //     opnode.inlets[this.inletid] = value;
    //     break;
    // }
    this.onInletChange.emit({
      id: this.inletid
    });
  }
}
InletComponent.ɵfac = function InletComponent_Factory(t) {
  return new (t || InletComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_2__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__.OperationService));
};
InletComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: InletComponent,
  selectors: [["app-inlet"]],
  inputs: {
    opid: "opid",
    inletid: "inletid",
    dynamic: "dynamic"
  },
  outputs: {
    onInputSelected: "onInputSelected",
    onInputVisibilityChange: "onInputVisibilityChange",
    onConnectionRemoved: "onConnectionRemoved",
    onInletChange: "onInletChange",
    onInletLoaded: "onInletLoaded"
  },
  decls: 1,
  vars: 1,
  consts: [[4, "ngIf"], [1, "inlet_block"], [4, "ngFor", "ngForOf"], ["class", "open_inlet", 3, "matTooltip", "click", 4, "ngIf"], ["class", "show_connection", 4, "ngIf"], [1, "inlet-label"], ["matNativeControl", "", "matTooltip", "this will assign this draft to the number you select", 3, "ngModel", "ngModelChange", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["class", "dynamic_", "class", "inlet-label", 4, "ngIf"], ["class", "inlet-label", 4, "ngIf"], ["matNativeControl", "", "matTooltip", "select the system to associate with this layer", 3, "ngModel", "ngModelChange", "selectionChange"], [1, "colorgroup"], [1, "input-color", 3, "matTooltip"], [1, "inlet_connector", 3, "id"], [1, "toggle_visibility", 3, "matTooltip", "click"], ["class", "fa-solid fa-eye", 4, "ngIf"], ["class", "fa-solid fa-eye-slash", 4, "ngIf"], [1, "fa-solid", "fa-eye"], [1, "fa-solid", "fa-eye-slash"], [1, "show_connection"], [1, "open_inlet", 3, "matTooltip", "click"], ["class", "draft-inlet-icon", 4, "ngIf"], ["class", "material-inlet-icon", 4, "ngIf"], [1, "draft-inlet-icon"], [1, "material-inlet-icon"]],
  template: function InletComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, InletComponent_ng_container_0_Template, 10, 8, "ng-container", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.inlet.type !== "null");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_6__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_5__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_5__.NgModel, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__.MatOption, _angular_material_select__WEBPACK_IMPORTED_MODULE_8__.MatSelect, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_9__.MatTooltip],
  styles: [".input-color[_ngcontent-%COMP%] {\n  width: 30px;\n  height: 80%;\n  border: thin solid white;\n}\n\n.inlet_connector[_ngcontent-%COMP%] {\n  display: block;\n}\n\nbutton[_ngcontent-%COMP%] {\n  display: block;\n  position: relative;\n}\n\nbutton.input[_ngcontent-%COMP%] {\n  position: relative;\n  background-color: #333333;\n  color: white;\n  border: 1px solid white;\n  display: flex;\n  flex-direction: row;\n  border-bottom: none;\n}\nbutton.input[_ngcontent-%COMP%]   .inlet_arrow[_ngcontent-%COMP%] {\n  margin-right: 4px;\n}\n\n.show_connection[_ngcontent-%COMP%] {\n  \n  flex-direction: column;\n  background: white;\n  color: black;\n  z-index: 100;\n  padding: 4px;\n  position: absolute;\n  top: 23px;\n  text-align: center;\n  border: thin solid black;\n  font-size: 1.5em;\n}\n\nbutton.open_inlet[_ngcontent-%COMP%], button.toggle_visibility[_ngcontent-%COMP%] {\n  background-color: transparent;\n  border: none;\n}\nbutton.open_inlet[_ngcontent-%COMP%]   i[_ngcontent-%COMP%], button.toggle_visibility[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  position: relative;\n  top: -9px;\n  font-size: 24px;\n}\n\nbutton.open_inlet[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  color: white;\n}\n\nbutton.toggle_visibility[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  color: #ff3860;\n}\n\nbutton.open_inlet[_ngcontent-%COMP%]:active   i[_ngcontent-%COMP%], button.open_inlet[_ngcontent-%COMP%]:hover   i[_ngcontent-%COMP%], button.toggle_visibility[_ngcontent-%COMP%]:active   i[_ngcontent-%COMP%], button.toggle_visibility[_ngcontent-%COMP%]:hover   i[_ngcontent-%COMP%] {\n  color: #ff3860;\n}\n\n.inlet_block[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  padding-right: 12px;\n  font-size: 1.2em;\n}\n\nbutton.input[_ngcontent-%COMP%]:active, button.input[_ngcontent-%COMP%]:hover {\n  background-color: #ff3860;\n}\n\n.input-name[_ngcontent-%COMP%] {\n  margin-left: 8px;\n  line-height: 30px;\n}\n\n.colorgroup[_ngcontent-%COMP%] {\n  display: inline-flex;\n}\n\n.inputs[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: flex-start;\n  text-align: center;\n}\n\n.mat-select[_ngcontent-%COMP%] {\n  width: 34px;\n  padding-left: 4px;\n  line-height: 30px;\n  background-color: #fff;\n}\n\n.mat-select-value[_ngcontent-%COMP%] {\n  color: #fff !important;\n}\n\ninput[_ngcontent-%COMP%] {\n  width: 35px;\n}\n\n.inlet-label[_ngcontent-%COMP%], .inlet-name[_ngcontent-%COMP%] {\n  color: #fff;\n  font-size: 1.2em;\n}\n\n.draft-inlet-icon[_ngcontent-%COMP%] {\n  display: block;\n  width: 24px;\n  height: 24px;\n  background: url('draft_inlet.svg');\n  background-size: 24px 24px;\n}\n\n.material-inlet-icon[_ngcontent-%COMP%] {\n  display: block;\n  width: 24px;\n  height: 24px;\n  background: url('material_inlet.svg');\n  background-size: 24px 24px;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/operation/inlet/inlet.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9vcGVyYXRpb24vaW5sZXQvaW5sZXQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxXQUFBO0VBQ0EsV0FBQTtFQUNBLHdCQUFBO0FBQUo7O0FBR0E7RUFDSSxjQUFBO0FBQUo7O0FBR0E7RUFDSSxjQUFBO0VBQ0Esa0JBQUE7QUFBSjs7QUFJQTtFQUNJLGtCQUFBO0VBQ0gseUJBQUE7RUFDQSxZQUFBO0VBQ0EsdUJBQUE7RUFDRyxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtBQURKO0FBR0k7RUFDRyxpQkFBQTtBQURQOztBQUtBO0VBQ0ksbUJBQUE7RUFDQSxzQkFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxTQUFBO0VBQ0Esa0JBQUE7RUFDQSx3QkFBQTtFQUNBLGdCQUFBO0FBRko7O0FBS0E7O0VBRUksNkJBQUE7RUFDQSxZQUFBO0FBRko7QUFJSTs7RUFDSSxrQkFBQTtFQUNBLFNBQUE7RUFDQSxlQUFBO0FBRFI7O0FBS0E7RUFDSSxZQUFBO0FBRko7O0FBSUE7RUFDSSxjQUFBO0FBREo7O0FBWUk7Ozs7RUFDSSxjQUFBO0FBTlI7O0FBVUE7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtFQUNBLGdCQUFBO0FBUEo7O0FBV0E7O0VBRUMseUJBQUE7QUFSRDs7QUFhQTtFQUNJLGdCQUFBO0VBQ0EsaUJBQUE7QUFWSjs7QUFhQTtFQUNJLG9CQUFBO0FBVko7O0FBY0E7RUFDSSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxrQkFBQTtBQVhKOztBQWVBO0VBQ0ksV0FBQTtFQUNBLGlCQUFBO0VBQ0EsaUJBQUE7RUFDQSxzQkFBQTtBQVpKOztBQWVBO0VBQ0ksc0JBQUE7QUFaSjs7QUFlQTtFQUNJLFdBQUE7QUFaSjs7QUFpQkE7O0VBRUksV0FBQTtFQUNBLGdCQUFBO0FBZEo7O0FBaUJBO0VBQ0ksY0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0NBQUE7RUFDQSwwQkFBQTtBQWRKOztBQWlCRTtFQUNFLGNBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHFDQUFBO0VBQ0EsMEJBQUE7QUFkSiIsInNvdXJjZXNDb250ZW50IjpbIi5pbnB1dC1jb2xvciB7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDgwJTtcbiAgYm9yZGVyOiB0aGluIHNvbGlkIHdoaXRlO1xufVxuXG4uaW5sZXRfY29ubmVjdG9yIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbmJ1dHRvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbmJ1dHRvbi5pbnB1dCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbn1cbmJ1dHRvbi5pbnB1dCAuaW5sZXRfYXJyb3cge1xuICBtYXJnaW4tcmlnaHQ6IDRweDtcbn1cblxuLnNob3dfY29ubmVjdGlvbiB7XG4gIC8qIGRpc3BsYXk6IGZsZXg7ICovXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBjb2xvcjogYmxhY2s7XG4gIHotaW5kZXg6IDEwMDtcbiAgcGFkZGluZzogNHB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMjNweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXI6IHRoaW4gc29saWQgYmxhY2s7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG59XG5cbmJ1dHRvbi5vcGVuX2lubGV0LFxuYnV0dG9uLnRvZ2dsZV92aXNpYmlsaXR5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogbm9uZTtcbn1cbmJ1dHRvbi5vcGVuX2lubGV0IGksXG5idXR0b24udG9nZ2xlX3Zpc2liaWxpdHkgaSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtOXB4O1xuICBmb250LXNpemU6IDI0cHg7XG59XG5cbmJ1dHRvbi5vcGVuX2lubGV0IGkge1xuICBjb2xvcjogd2hpdGU7XG59XG5cbmJ1dHRvbi50b2dnbGVfdmlzaWJpbGl0eSBpIHtcbiAgY29sb3I6ICNmZjM4NjA7XG59XG5cbmJ1dHRvbi5vcGVuX2lubGV0OmFjdGl2ZSBpLFxuYnV0dG9uLm9wZW5faW5sZXQ6aG92ZXIgaSxcbmJ1dHRvbi50b2dnbGVfdmlzaWJpbGl0eTphY3RpdmUgaSxcbmJ1dHRvbi50b2dnbGVfdmlzaWJpbGl0eTpob3ZlciBpIHtcbiAgY29sb3I6ICNmZjM4NjA7XG59XG5cbi5pbmxldF9ibG9jayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHBhZGRpbmctcmlnaHQ6IDEycHg7XG4gIGZvbnQtc2l6ZTogMS4yZW07XG59XG5cbmJ1dHRvbi5pbnB1dDphY3RpdmUsXG5idXR0b24uaW5wdXQ6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYzODYwO1xufVxuXG4uaW5wdXQtbmFtZSB7XG4gIG1hcmdpbi1sZWZ0OiA4cHg7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xufVxuXG4uY29sb3Jncm91cCB7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xufVxuXG4uaW5wdXRzIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5tYXQtc2VsZWN0IHtcbiAgd2lkdGg6IDM0cHg7XG4gIHBhZGRpbmctbGVmdDogNHB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cblxuLm1hdC1zZWxlY3QtdmFsdWUge1xuICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xufVxuXG5pbnB1dCB7XG4gIHdpZHRoOiAzNXB4O1xufVxuXG4uaW5sZXQtbGFiZWwsXG4uaW5sZXQtbmFtZSB7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXNpemU6IDEuMmVtO1xufVxuXG4uZHJhZnQtaW5sZXQtaWNvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBiYWNrZ3JvdW5kOiB1cmwoLi4vLi4vLi4vLi4vLi4vYXNzZXRzL3N2Zy9kcmFmdF9pbmxldC5zdmcpO1xuICBiYWNrZ3JvdW5kLXNpemU6IDI0cHggMjRweDtcbn1cblxuLm1hdGVyaWFsLWlubGV0LWljb24ge1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDI0cHg7XG4gIGhlaWdodDogMjRweDtcbiAgYmFja2dyb3VuZDogdXJsKC4uLy4uLy4uLy4uLy4uL2Fzc2V0cy9zdmcvbWF0ZXJpYWxfaW5sZXQuc3ZnKTtcbiAgYmFja2dyb3VuZC1zaXplOiAyNHB4IDI0cHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 26866:
/*!****************************************************************!*\
  !*** ./src/app/mixer/palette/operation/operation.component.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationComponent": () => (/* binding */ OperationComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/model/util */ 75973);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_image_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/provider/image.service */ 53398);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/provider/operation.service */ 46524);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/provider/tree.service */ 6177);
/* harmony import */ var _modal_ophelp_ophelp_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../modal/ophelp/ophelp.modal */ 41266);
/* harmony import */ var _provider_multiselect_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../provider/multiselect.service */ 16379);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../provider/viewport.service */ 2320);
/* harmony import */ var _inlet_inlet_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inlet/inlet.component */ 29047);
/* harmony import */ var _parameter_parameter_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parameter/parameter.component */ 62693);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/dialog */ 31484);

























function OperationComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "div", 13)(1, "app-inlet", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("onInputSelected", function OperationComponent_div_3_Template_app_inlet_onInputSelected_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r5);
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r4.inputSelected($event));
    })("onInputVisibilityChange", function OperationComponent_div_3_Template_app_inlet_onInputVisibilityChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r5);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r6.visibilityChange($event));
    })("onConnectionRemoved", function OperationComponent_div_3_Template_app_inlet_onConnectionRemoved_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r5);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r7.removeConnectionTo($event));
    })("onInletChange", function OperationComponent_div_3_Template_app_inlet_onInletChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r5);
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r8.onInletChange($event));
    })("onInletLoaded", function OperationComponent_div_3_Template_app_inlet_onInletLoaded_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r5);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r9.inletLoaded($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const i_r3 = ctx.index;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("opid", ctx_r0.id)("inletid", i_r3)("dynamic", ctx_r0.is_dynamic_op);
  }
}
function OperationComponent_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](1, "app-parameter", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("onOperationParamChange", function OperationComponent_ng_container_13_Template_app_parameter_onOperationParamChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r13);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r12.onParamChange($event));
    })("onFileUpload", function OperationComponent_ng_container_13_Template_app_parameter_onFileUpload_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r13);
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r14.handleFile($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const param_r10 = ctx.$implicit;
    const i_r11 = ctx.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("param", param_r10)("opid", ctx_r1.id)("paramid", i_r11);
  }
}
class OperationComponent {
  constructor(operations, dialog, viewport, tree, dm, imageService, systems, multiselect, opdescriptions) {
    this.operations = operations;
    this.dialog = dialog;
    this.viewport = viewport;
    this.tree = tree;
    this.dm = dm;
    this.imageService = imageService;
    this.systems = systems;
    this.multiselect = multiselect;
    this.opdescriptions = opdescriptions;
    this._scale = 5;
    this.onConnectionRemoved = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onConnectionMove = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onOperationMove = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onOperationMoveEnded = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onOperationParamChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.deleteOp = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.duplicateOp = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onInputAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onInputVisibilityChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onInletLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onOpLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.params_visible = true;
    /**
    * flag to tell if this is being from a loaded from a saved file
    */
    this.loaded = false;
    /**
      * flag to tell if this has been duplicated from another operation
      */
    this.duplicated = false;
    this.tooltip = "select drafts to input to this operation";
    this.disable_drag = false;
    this.topleft = {
      x: 0,
      y: 0
    };
    //for input params form control
    this.loaded_inputs = [];
    this.has_image_preview = false;
    // has_connections_in: boolean = false;
    this.subdraft_visible = true;
    this.is_dynamic_op = false;
    this.dynamic_type = 'main';
    this.filewarning = "";
    this.all_system_codes = [];
    this.viewInit = false;
    this.hasInlets = false;
  }
  get scale() {
    return this._scale;
  }
  set scale(value) {
    this._scale = value;
    this.rescale();
  }
  ngOnInit() {
    this.op = this.operations.getOp(this.name);
    this.is_dynamic_op = this.operations.isDynamic(this.name);
    this.description = this.opdescriptions.getOpDescription(this.name);
    this.displayname = this.opdescriptions.getDisplayName(this.name);
    this.application = this.opdescriptions.getOpApplication(this.name);
    // const tl: Point = this.viewport.getTopLeft();
    // const tl_offset = {x: tl.x, y: tl.y};
    // console.log("setting position to ", tl)
    //  if(this.topleft.x == 0 && this.topleft.y == 0){
    //   this.setPosition(tl_offset);
    //  } 
    this.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_1__["default"].resolvePointToAbsoluteNdx(this.topleft, this.scale);
    this.opnode = this.tree.getNode(this.id);
    if (this.is_dynamic_op) this.dynamic_type = this.op.dynamic_param_type;
  }
  ngAfterViewInit() {
    this.rescale();
    // this.onOperationParamChange.emit({id: this.id});
    if (this.name == 'imagemap' || this.name == 'bwimagemap') {
      this.drawImagePreview();
    }
    // const children = this.tree.getDraftNodes().filter(node => this.tree.getSubdraftParent(node.id) === this.id);
    // if(children.length > 0) this.updatePositionFromChild(<SubdraftComponent>this.tree.getComponent(children[0].id));
    this.viewInit = true;
    this.hasInlets = this.op.inlets.length > 0 || this.opnode.inlets.length > 0;
    this.onOpLoaded.emit({
      id: this.id
    });
  }
  // setBounds(bounds:Bounds){
  //   this.bounds.topleft = {x: bounds.topleft.x, y: bounds.topleft.y},
  //   this.bounds.width = bounds.width;
  //   this.bounds.height = bounds.height;
  //   this.interlacement = utilInstance.resolvePointToAbsoluteNdx(bounds.topleft, this.scale);
  // }
  setPosition(pos) {
    this.topleft = {
      x: pos.x,
      y: pos.y
    };
    this.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_1__["default"].resolvePointToAbsoluteNdx(pos, this.scale);
  }
  // refreshInlets(){
  //   this.opnode.inlets
  // }
  rescale() {
    const zoom_factor = this.scale / this.default_cell;
    const container = document.getElementById('scale-' + this.id);
    if (container === null) return;
    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';
    this.topleft = {
      x: this.interlacement.j * this.scale,
      y: this.interlacement.i * this.scale
    };
    // this.bounds.height = this.base_height * zoom_factor;
  }

  drawForPrint(canvas, cx, scale) {
    if (canvas === undefined) return;
    const bounds = document.getElementById('scale-' + this.id);
    cx.fillStyle = "#ffffff";
    cx.fillRect(this.topleft.x, this.topleft.y, bounds.offsetWidth, bounds.offsetHeight);
    cx.fillStyle = "#666666";
    cx.font = this.scale * 2 + "px Verdana";
    let datastring = this.name + " // ";
    let opnode = this.tree.getOpNode(this.id);
    this.op.params.forEach((p, ndx) => {
      datastring = datastring + p.name + ": " + opnode.params[ndx] + ", ";
    });
    cx.fillText(datastring, this.topleft.x + 5, this.topleft.y + 25);
  }
  /**
  * updates this components position based on the child component's position
  * */
  updatePositionFromChild(child) {
    if (child == undefined) return;
    const container = document.getElementById("scale-" + this.id);
    if (container !== null) this.setPosition({
      x: child.topleft.x,
      y: child.topleft.y - container.offsetHeight * this.scale / this.default_cell
    });
  }
  /**
   * set's the width to at least 200, but w if its large
   */
  // setWidth(w:number){
  //   this.bounds.width = (w > 200) ? w : 200;
  // }
  // addOutput(dm: DraftMap){
  //   this.outputs.push(dm);
  // }
  disableDrag() {
    console.log("DIABLE DRAG CALLED ON ", this.id);
    this.disable_drag = true;
  }
  enableDrag() {
    this.disable_drag = false;
  }
  toggleParamsVisible() {
    this.params_visible = !this.params_visible;
  }
  toggleSelection(e) {
    if (e.shiftKey == true) {
      this.multiselect.toggleSelection(this.id, this.topleft);
    } else {
      this.multiselect.clearSelections();
    }
  }
  /**
   * prevents hits on the operation to register as a palette click, thereby voiding the selection
   * @param e
   */
  mousedown(e) {
    e.stopPropagation();
  }
  drop() {
    console.log("dropped");
  }
  inputSelected(obj) {
    let input_id = obj.inletid;
    this.onInputAdded.emit({
      id: this.id,
      ndx: input_id
    });
  }
  visibilityChange(obj) {
    this.onInputVisibilityChange.emit({
      id: this.id,
      ndx: obj.inletid,
      ndx_in_inlets: obj.ndx_in_inlets,
      show: obj.show
    });
  }
  /**
   * resets the visibility on any inlet in the attached list
   * @param inlets
   */
  resetVisibliity(inlets) {
    inlets.forEach(id => {
      const ilet = this.inletComps.find(el => el.inletid == id);
      if (ilet !== undefined) ilet.show_connection_name = -1;
    });
  }
  removeConnectionTo(obj) {
    this.onConnectionRemoved.emit(obj);
    // const inlets = this.tree.getInputs(this.id);
    // inlets.forEach(id => {
    //   const comp = <ConnectionComponent> this.tree.getComponent(id);
    //   comp.updateToPosition(this);
    // })
  }

  openHelpDialog() {
    const dialogRef = this.dialog.open(_modal_ophelp_ophelp_modal__WEBPACK_IMPORTED_MODULE_8__.OpHelpModal, {
      data: {
        name: this.op.name,
        op: this.op
      }
    });
  }
  /**
   * called from the child parameter when a value has changed, this functin then updates the inlets
   * @param id an object containing the id of hte parameter that has changed
   * @param value
   */
  onParamChange(obj) {
    if (this.is_dynamic_op) {
      const opnode = this.tree.getNode(this.id);
      const op = this.operations.getOp(opnode.name);
      //this is a hack to use an input draft to generate inlets
      if (op.dynamic_param_id == obj.id || obj.type == "notation_toggle") {
        if (op.params[obj.id].type == 'draft') {
          const inputs = this.tree.getInputsAtNdx(this.id, 0);
          if (inputs.length === 0) obj.value = -1;else {
            const draft_node_in_id = inputs[0].tn.inputs[0].tn.node.id;
            obj.value = draft_node_in_id;
          }
        }
        this.opnode.inlets = this.tree.onDynanmicOperationParamChange(this.id, this.name, opnode.inlets, obj.id, obj.value);
        this.hasInlets = opnode.inlets.length > 0;
        if (opnode.name == 'imagemap' || opnode.name == 'bwimagemap') {
          this.drawImagePreview();
          //update the width and height
          let image_param = opnode.params[op.dynamic_param_id];
          opnode.params[1] = image_param.data.width;
          opnode.params[2] = image_param.data.height;
        }
      }
    }
    this.onOperationParamChange.emit({
      id: this.id
    });
  }
  drawImagePreview() {
    let param = this.paramsComps.get(this.op.dynamic_param_id);
    param.drawImagePreview();
  }
  //returned from a file upload event
  /**
   * get the data type and process it here
   * @param obj
   */
  handleFile(obj) {
    const image_div = document.getElementById('param-image-' + this.id);
    image_div.style.display = 'none';
    switch (obj.data.type) {
      case 'image':
        if (this.operations.isDynamic(this.name) && this.op.dynamic_param_type !== 'color') return;
        if (obj.data.warning !== '') {
          image_div.style.display = 'flex';
          this.filewarning = obj.warning;
        } else {
          const opnode = this.tree.getOpNode(this.id);
          obj.inlets.forEach(hex => {
            //add any new colors
            const ndx = opnode.inlets.findIndex(el => el.value === hex);
            if (ndx === -1) {
              opnode.inlets.push(hex);
            }
          });
          const remove = [];
          //now remove any inlets that no longer have values
          opnode.inlets.forEach((inlet, ndx) => {
            if (inlet === 0) return;
            const found = obj.inlets.find(el => el === inlet);
            if (found === undefined) {
              remove.push(ndx);
            }
          });
          remove.forEach(removeid => {
            opnode.inlets.splice(removeid, 1);
          });
          //now update the default parameters to the original size 
          opnode.params[1] = obj.data.width;
          opnode.params[2] = obj.data.height;
        }
        break;
    }
    this.onOperationParamChange.emit({
      id: this.id
    });
  }
  inletLoaded(obj) {
    obj.opid = this.id;
    this.onInletLoaded.emit(obj);
  }
  /**
   *
   * @param id
   * @param value
   */
  onInletChange(obj) {
    this.onOperationParamChange.emit({
      id: this.id
    });
  }
  delete() {
    this.deleteOp.emit({
      id: this.id
    });
  }
  duplicate() {
    this.duplicateOp.emit({
      id: this.id
    });
  }
  dragStart(e) {
    if (this.multiselect.isSelected(this.id)) {
      this.multiselect.setRelativePosition(this.topleft);
    } else {
      this.multiselect.clearSelections();
    }
  }
  dragMove($event) {
    //position of pointer of the page
    const pointer = $event.pointerPosition;
    const relative = _core_model_util__WEBPACK_IMPORTED_MODULE_1__["default"].getAdjustedPointerPosition(pointer, this.viewport.getBounds());
    const adj = _core_model_util__WEBPACK_IMPORTED_MODULE_1__["default"].snapToGrid(relative, this.scale);
    this.topleft = adj;
    this.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_1__["default"].resolvePointToAbsoluteNdx(adj, this.scale);
    this.onOperationMove.emit({
      id: this.id,
      point: adj
    });
  }
  dragEnd($event) {
    this.multiselect.setRelativePosition(this.topleft);
    this.onOperationMoveEnded.emit({
      id: this.id
    });
  }
}
OperationComponent.ɵfac = function OperationComponent_Factory(t) {
  return new (t || OperationComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_5__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_14__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_10__.ViewportService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_7__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_2__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_image_service__WEBPACK_IMPORTED_MODULE_3__.ImageService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_6__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_multiselect_service__WEBPACK_IMPORTED_MODULE_9__.MultiselectService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_4__.OperationDescriptionsService));
};
OperationComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineComponent"]({
  type: OperationComponent,
  selectors: [["app-operation"]],
  viewQuery: function OperationComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵviewQuery"](_parameter_parameter_component__WEBPACK_IMPORTED_MODULE_12__.ParameterComponent, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵviewQuery"](_inlet_inlet_component__WEBPACK_IMPORTED_MODULE_11__.InletComponent, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵloadQuery"]()) && (ctx.paramsComps = _t);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵloadQuery"]()) && (ctx.inletComps = _t);
    }
  },
  inputs: {
    id: "id",
    name: "name",
    scale: "scale",
    default_cell: "default_cell",
    zndx: "zndx"
  },
  outputs: {
    onConnectionRemoved: "onConnectionRemoved",
    onConnectionMove: "onConnectionMove",
    onOperationMove: "onOperationMove",
    onOperationMoveEnded: "onOperationMoveEnded",
    onOperationParamChange: "onOperationParamChange",
    deleteOp: "deleteOp",
    duplicateOp: "duplicateOp",
    onInputAdded: "onInputAdded",
    onInputVisibilityChange: "onInputVisibilityChange",
    onInletLoaded: "onInletLoaded",
    onOpLoaded: "onOpLoaded"
  },
  decls: 14,
  vars: 11,
  consts: [["cdkDrag", "", 3, "cdkDragDisabled", "cdkDragFreeDragPosition", "mousedown", "click", "cdkDragMoved", "cdkDragEnded", "cdkDragStarted"], [1, "operation-container", 3, "id"], [1, "cxn-row"], ["class", "input-group", 4, "ngFor", "ngForOf"], [1, "top-row"], [1, "operation-details"], [1, "name", "no-text-select"], [1, "button", "is-small", "is-primary", "fas", "fa-question", 3, "click"], ["matTooltip", "Duplilcate", 1, "button", "is-small", "is-primary", "fa", "fa-clone", 3, "click"], [1, "button", "is-small", "is-primary", 3, "click"], [1, "fas", "fa-times"], [1, "params"], [4, "ngFor", "ngForOf"], [1, "input-group"], [3, "opid", "inletid", "dynamic", "onInputSelected", "onInputVisibilityChange", "onConnectionRemoved", "onInletChange", "onInletLoaded"], [1, "param", 3, "param", "opid", "paramid", "onOperationParamChange", "onFileUpload"]],
  template: function OperationComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("mousedown", function OperationComponent_Template_div_mousedown_0_listener($event) {
        return ctx.mousedown($event);
      })("click", function OperationComponent_Template_div_click_0_listener($event) {
        return ctx.toggleSelection($event);
      })("cdkDragMoved", function OperationComponent_Template_div_cdkDragMoved_0_listener($event) {
        return ctx.dragMove($event);
      })("cdkDragEnded", function OperationComponent_Template_div_cdkDragEnded_0_listener($event) {
        return ctx.dragEnd($event);
      })("cdkDragStarted", function OperationComponent_Template_div_cdkDragStarted_0_listener($event) {
        return ctx.dragStart($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](1, "div", 1)(2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](3, OperationComponent_div_3_Template, 2, 3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](4, "div", 4)(5, "div", 5)(6, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](8, "button", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function OperationComponent_Template_button_click_8_listener() {
        return ctx.openHelpDialog();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](9, "button", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function OperationComponent_Template_button_click_9_listener() {
        return ctx.duplicate();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](10, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function OperationComponent_Template_button_click_10_listener() {
        return ctx.delete();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](11, "i", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](12, "div", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](13, OperationComponent_ng_container_13_Template, 2, 3, "ng-container", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("operation-container no-text-select selectable-", !ctx.disable_drag, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵstyleProp"]("z-index", ctx.zndx);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("cdkDragDisabled", ctx.disable_drag)("cdkDragFreeDragPosition", ctx.topleft);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "scale-", ctx.id, "");
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngForOf", ctx.opnode.inlets);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtextInterpolate"](ctx.displayname);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngForOf", ctx.op.params);
    }
  },
  styles: [".operation-container[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: max-content;\n  min-width: 300px;\n  background-color: #434345;\n  color: white;\n}\n.operation-container[_ngcontent-%COMP%]   .multiselected[_ngcontent-%COMP%] {\n  border: thin solid #ff3860;\n}\n.operation-container[_ngcontent-%COMP%]   .multiselected[_ngcontent-%COMP%]   .top-row[_ngcontent-%COMP%] {\n  background: #ff3860;\n}\n.operation-container[_ngcontent-%COMP%]   .multiselected[_ngcontent-%COMP%]   .top-row[_ngcontent-%COMP%]   .help[_ngcontent-%COMP%] {\n  background: #ff3860;\n}\n.operation-container[_ngcontent-%COMP%]   .multiselected[_ngcontent-%COMP%]   .top-row[_ngcontent-%COMP%]   .button.is-primary[_ngcontent-%COMP%] {\n  background-color: #ff3860;\n}\n\n\n@keyframes _ngcontent-%COMP%_added_to_workspace {\n  from {\n    background-color: #ff4081;\n  }\n  to {\n    background-color: transparent;\n  }\n}\n.top-row[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  vertical-align: bottom;\n  justify-content: flex-start;\n  padding: 6px 0 0 0;\n  border-top: white thin solid;\n}\n\nbutton.is-primary[_ngcontent-%COMP%] {\n  background-color: transparent;\n  border-color: transparent;\n  color: #fff;\n}\n\n.cxn-row[_ngcontent-%COMP%] {\n  font-size: 0.8em;\n  display: flex;\n  flex-direction: row;\n  text-align: left;\n  overflow: visible;\n  height: 25px;\n  padding: 2px 0;\n}\n\n.hidden[_ngcontent-%COMP%] {\n  display: none;\n}\n\n.cxn-row[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  border: none;\n  background: #00d1b2;\n  color: white;\n}\n\n.input-color[_ngcontent-%COMP%] {\n  width: 30px;\n  height: 30px;\n  border: thin solid white;\n}\n\nbutton.input[_ngcontent-%COMP%] {\n  position: relative;\n  background-color: #00d1b2;\n  color: white;\n  border: none;\n  width: 30px;\n}\n\nbutton.cxn[_ngcontent-%COMP%] {\n  background-color: #00d1b2;\n  border: none;\n  border-left: thin solid white;\n  color: white;\n}\n\n.input-name[_ngcontent-%COMP%] {\n  margin-left: 8px;\n  margin-right: 24px;\n  line-height: 30px;\n}\n\n.inputs[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: flex-start;\n  text-align: center;\n}\n\n.mat-select[_ngcontent-%COMP%] {\n  width: 34px;\n  padding-left: 4px;\n  line-height: 30px;\n  background-color: #fff;\n}\n\n.mat-select-value[_ngcontent-%COMP%] {\n  color: #fff !important;\n}\n\n.inlet-label[_ngcontent-%COMP%] {\n  color: #fff;\n  line-height: 30px;\n  display: flex;\n  padding-right: 6px;\n}\n\n.input-group[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  margin-right: 8px;\n}\n\n.input-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  width: 35px;\n}\n\nbutton.is-primary.is-active[_ngcontent-%COMP%] {\n  background-color: rgb(255, 64, 129);\n}\n\n.help[_ngcontent-%COMP%] {\n  background-color: #333333;\n  color: white;\n  height: 20px;\n  border: none;\n}\n\n.help[_ngcontent-%COMP%]:hover {\n  color: white;\n}\n\n.name[_ngcontent-%COMP%] {\n  margin: 0px 8px;\n  color: white;\n  font-size: 1.5em;\n  font-weight: bold;\n}\n\n.params[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  padding: 16px 8px;\n  width: 100%;\n}\n\n.param[_ngcontent-%COMP%] {\n  display: flex;\n  flex: 1 1 0px;\n}\n\n.operation-details[_ngcontent-%COMP%] {\n  animation-name: _ngcontent-%COMP%_added_to_workspace;\n  animation-duration: 4s;\n  color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/operation/operation.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9vcGVyYXRpb24vb3BlcmF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLDJCQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLHlCQUFBO0VBQ0EsWUFBQTtBQUNKO0FBQ0k7RUFDSSwwQkFBQTtBQUNSO0FBQ1E7RUFDSSxtQkFBQTtBQUNaO0FBQ1k7RUFDSSxtQkFBQTtBQUNoQjtBQUVZO0VBQ0kseUJBQUE7QUFBaEI7O0FBU0EsdUJBQUE7QUFDQTtFQUNJO0lBQU0seUJBQUE7RUFMUjtFQU1FO0lBQUksNkJBQUE7RUFITjtBQUNGO0FBT0E7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxzQkFBQTtFQUNBLDJCQUFBO0VBQ0Esa0JBQUE7RUFDQSw0QkFBQTtBQUxKOztBQXNCQTtFQUNJLDZCQUFBO0VBQ0EseUJBQUE7RUFDQSxXQUFBO0FBbkJKOztBQXNCQTtFQUNJLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBbkJKOztBQXlCQTtFQUNJLGFBQUE7QUF0Qko7O0FBeUJBO0VBQ0ksWUFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQXRCSjs7QUEwQkE7RUFDSSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHdCQUFBO0FBdkJKOztBQTBCQTtFQUNJLGtCQUFBO0VBQ0gseUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNHLFdBQUE7QUF2Qko7O0FBMEJBO0VBQ0kseUJBQUE7RUFDQSxZQUFBO0VBQ0EsNkJBQUE7RUFDQSxZQUFBO0FBdkJKOztBQTBCQTtFQUNJLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQXZCSjs7QUEyQkE7RUFDSSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxrQkFBQTtBQXhCSjs7QUE0QkE7RUFDSSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxpQkFBQTtFQUNBLHNCQUFBO0FBekJKOztBQTRCQTtFQUNJLHNCQUFBO0FBekJKOztBQTZCQTtFQUNJLFdBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtBQTFCSjs7QUFxQ0E7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtBQWxDSjs7QUFxQ0E7RUFDSSxXQUFBO0FBbENKOztBQXVDQTtFQUNJLG1DQUFBO0FBcENKOztBQXVDQTtFQUNJLHlCQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0FBcENKOztBQXVDQTtFQUNJLFlBQUE7QUFwQ0o7O0FBdUNBO0VBQ0ksZUFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0FBcENKOztBQXlDQTtFQUNRLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsV0FBQTtBQXRDUjs7QUEwQ0E7RUFFSSxhQUFBO0VBQ0EsYUFBQTtBQXhDSjs7QUFxREE7RUFDSSxrQ0FBQTtFQUNBLHNCQUFBO0VBRUEsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDhCQUFBO0VBQ0EsV0FBQTtBQW5ESiIsInNvdXJjZXNDb250ZW50IjpbIi5vcGVyYXRpb24tY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgd2lkdGg6IG1heC1jb250ZW50O1xuICBtaW4td2lkdGg6IDMwMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDM0MzQ1O1xuICBjb2xvcjogd2hpdGU7XG59XG4ub3BlcmF0aW9uLWNvbnRhaW5lciAubXVsdGlzZWxlY3RlZCB7XG4gIGJvcmRlcjogdGhpbiBzb2xpZCAjZmYzODYwO1xufVxuLm9wZXJhdGlvbi1jb250YWluZXIgLm11bHRpc2VsZWN0ZWQgLnRvcC1yb3cge1xuICBiYWNrZ3JvdW5kOiAjZmYzODYwO1xufVxuLm9wZXJhdGlvbi1jb250YWluZXIgLm11bHRpc2VsZWN0ZWQgLnRvcC1yb3cgLmhlbHAge1xuICBiYWNrZ3JvdW5kOiAjZmYzODYwO1xufVxuLm9wZXJhdGlvbi1jb250YWluZXIgLm11bHRpc2VsZWN0ZWQgLnRvcC1yb3cgLmJ1dHRvbi5pcy1wcmltYXJ5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMzg2MDtcbn1cblxuLyogVGhlIGFuaW1hdGlvbiBjb2RlICovXG5Aa2V5ZnJhbWVzIGFkZGVkX3RvX3dvcmtzcGFjZSB7XG4gIGZyb20ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjQwODE7XG4gIH1cbiAgdG8ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG59XG4udG9wLXJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgcGFkZGluZzogNnB4IDAgMCAwO1xuICBib3JkZXItdG9wOiB3aGl0ZSB0aGluIHNvbGlkO1xufVxuXG5idXR0b24uaXMtcHJpbWFyeSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICBjb2xvcjogI2ZmZjtcbn1cblxuLmN4bi1yb3cge1xuICBmb250LXNpemU6IDAuOGVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgaGVpZ2h0OiAyNXB4O1xuICBwYWRkaW5nOiAycHggMDtcbn1cblxuLmhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5jeG4tcm93IGlucHV0IHtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiAjMDBkMWIyO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5pbnB1dC1jb2xvciB7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIGJvcmRlcjogdGhpbiBzb2xpZCB3aGl0ZTtcbn1cblxuYnV0dG9uLmlucHV0IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBkMWIyO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDMwcHg7XG59XG5cbmJ1dHRvbi5jeG4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBkMWIyO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1sZWZ0OiB0aGluIHNvbGlkIHdoaXRlO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5pbnB1dC1uYW1lIHtcbiAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgbWFyZ2luLXJpZ2h0OiAyNHB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbn1cblxuLmlucHV0cyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubWF0LXNlbGVjdCB7XG4gIHdpZHRoOiAzNHB4O1xuICBwYWRkaW5nLWxlZnQ6IDRweDtcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG59XG5cbi5tYXQtc2VsZWN0LXZhbHVlIHtcbiAgY29sb3I6ICNmZmYgIWltcG9ydGFudDtcbn1cblxuLmlubGV0LWxhYmVsIHtcbiAgY29sb3I6ICNmZmY7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nLXJpZ2h0OiA2cHg7XG59XG5cbi5pbnB1dC1ncm91cCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbi1yaWdodDogOHB4O1xufVxuXG4uaW5wdXQtZ3JvdXAgaW5wdXQge1xuICB3aWR0aDogMzVweDtcbn1cblxuYnV0dG9uLmlzLXByaW1hcnkuaXMtYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgNjQsIDEyOSk7XG59XG5cbi5oZWxwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMztcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuLmhlbHA6aG92ZXIge1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5uYW1lIHtcbiAgbWFyZ2luOiAwcHggOHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ucGFyYW1zIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgcGFkZGluZzogMTZweCA4cHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4ucGFyYW0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxIDEgMHB4O1xufVxuXG4ub3BlcmF0aW9uLWRldGFpbHMge1xuICBhbmltYXRpb24tbmFtZTogYWRkZWRfdG9fd29ya3NwYWNlO1xuICBhbmltYXRpb24tZHVyYXRpb246IDRzO1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgd2lkdGg6IDEwMCU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 62693:
/*!**************************************************************************!*\
  !*** ./src/app/mixer/palette/operation/parameter/parameter.component.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParameterComponent": () => (/* binding */ ParameterComponent),
/* harmony export */   "regexValidator": () => (/* binding */ regexValidator)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/provider/operation.service */ 46524);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/provider/tree.service */ 6177);
/* harmony import */ var _core_provider_image_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/provider/image.service */ 53398);











function ParameterComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 1)(2, "input", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("change", function ParameterComponent_ng_container_0_Template_input_change_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r6);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r5.onParamChange(ctx_r5.fc.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r0.opnode.params[ctx_r0.paramid])("formControl", ctx_r0.fc)("matTooltip", ctx_r0.description)("name", ctx_r0.param.name)("min", ctx_r0.param.min)("max", ctx_r0.param.max);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", ctx_r0.param.name, " ");
  }
}
function ParameterComponent_ng_container_1_mat_option_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "mat-option", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const opt_r8 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("value", opt_r8.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", opt_r8.name, " ");
  }
}
function ParameterComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 4)(2, "mat-select", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("selectionChange", function ParameterComponent_ng_container_1_Template_mat_select_selectionChange_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r9.onParamChange(ctx_r9.fc.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, ParameterComponent_ng_container_1_mat_option_3_Template, 2, 2, "mat-option", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "mat-label", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r1.opnode.params[ctx_r1.paramid])("matTooltip", ctx_r1.description)("formControl", ctx_r1.fc);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx_r1.selectparam.selectlist);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r1.param.name);
  }
}
function ParameterComponent_ng_container_2_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r11.boolparam.truestate);
  }
}
function ParameterComponent_ng_container_2_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r12.boolparam.falsestate);
  }
}
function ParameterComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 9)(2, "mat-slide-toggle", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("change", function ParameterComponent_ng_container_2_Template_mat_slide_toggle_change_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r14);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r13.onParamChange(ctx_r13.fc.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, ParameterComponent_ng_container_2_span_4_Template, 2, 1, "span", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](5, ParameterComponent_ng_container_2_span_5_Template, 2, 1, "span", 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r2.opnode.params[ctx_r2.paramid])("formControl", ctx_r2.fc)("matTooltip", ctx_r2.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.fc.value == 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.fc.value == 0);
  }
}
function ParameterComponent_ng_container_3_div_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " an input is required ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function ParameterComponent_ng_container_3_div_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1, " the current input is not correctly formatted ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
}
function ParameterComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 12)(2, "div", 13)(3, "textarea", 14, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("ngModelChange", function ParameterComponent_ng_container_3_Template_textarea_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r19);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r18.opnode.params[ctx_r18.paramid] = $event);
    })("change", function ParameterComponent_ng_container_3_Template_textarea_change_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r19);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r20.onParamChange(ctx_r20.fc.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](5, "        ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](6, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function ParameterComponent_ng_container_3_Template_button_click_6_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r19);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r21.onParamChange(ctx_r21.fc.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](7, "i", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](8, "div", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](10, ParameterComponent_ng_container_3_div_10_Template, 2, 0, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](11, ParameterComponent_ng_container_3_div_11_Template, 2, 0, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngModel", ctx_r3.opnode.params[ctx_r3.paramid])("matTooltip", ctx_r3.description)("formControl", ctx_r3.fc)("errorStateMatcher", ctx_r3.regexValidator);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("disabled", !ctx_r3.fc.dirty || ctx_r3.fc.hasError("required") || ctx_r3.fc.hasError("forbiddenInput"));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"]("", ctx_r3.param.name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r3.fc.hasError("required"));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r3.fc.hasError("forbiddenInput"));
  }
}
function ParameterComponent_ng_container_4_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate"](ctx_r22.filewarning);
  }
}
function ParameterComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 21)(2, "div", 22)(3, "upload-form", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("onData", function ParameterComponent_ng_container_4_Template_upload_form_onData_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r24);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r23.handleFile($event));
    })("onError", function ParameterComponent_ng_container_4_Template_upload_form_onError_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r24);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresetView"](ctx_r25.handleError($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "div", 24)(5, "div", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](6, "canvas", 26)(7, "div", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](8, "div", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](9, ParameterComponent_ng_container_4_div_9_Template, 2, 1, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("has_image", ctx_r4.has_image_preview)("no_image", !ctx_r4.has_image_preview);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpropertyInterpolate1"]("id", "param-image-", ctx_r4.opid, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpropertyInterpolate1"]("id", "image_preview-", ctx_r4.opid, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpropertyInterpolate1"]("id", "preview_canvas-", ctx_r4.opid, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpropertyInterpolate1"]("id", "param-image-dims-", ctx_r4.opid, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r4.filewarning !== "");
  }
}
function regexValidator(nameRe) {
  return control => {
    const globalRegex = new RegExp(nameRe, 'g');
    const valid = globalRegex.test(control.value);
    return !valid ? {
      forbiddenInput: {
        value: control.value
      }
    } : null;
  };
}
class ParameterComponent {
  constructor(tree, ops, op_desc, imageService) {
    this.tree = tree;
    this.ops = ops;
    this.op_desc = op_desc;
    this.imageService = imageService;
    this.onOperationParamChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.onFileUpload = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.has_image_preview = false;
    this.filewarning = '';
  }
  ngOnInit() {
    this.opnode = this.tree.getOpNode(this.opid);
    this.description = this.op_desc.getParamDescription(this.param.name);
    if (this.description == undefined || this.description == null) this.description = this.param.dx;
    //initalize the form controls for the parameters: 
    switch (this.param.type) {
      case 'number':
        this.numparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.param.value);
        break;
      case 'boolean':
        this.boolparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.param.value);
        break;
      case 'select':
        this.selectparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.param.value);
        break;
      case 'file':
        this.fileparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.param.value);
        break;
      case 'string':
        this.stringparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.stringparam.value, [_angular_forms__WEBPACK_IMPORTED_MODULE_5__.Validators.required, regexValidator(this.param.regex)]);
        break;
      case 'notation_toggle':
        this.boolparam = this.param;
        this.fc = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__.UntypedFormControl(this.param.value);
        break;
      // case 'draft':
      //   this.draftparam = <DraftParam> this.param;
      //   this.fc = new FormControl(this.draftparam.value);
      //   break;
    }
  }
  /**
   * changes the view and updates the tree with the new value
   * @param value
   */
  onParamChange(value) {
    const opnode = this.tree.getNode(this.opid);
    switch (this.param.type) {
      case 'number':
        if (value == null) value = 1;
        opnode.params[this.paramid] = value;
        this.fc.setValue(value);
        this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
      case 'boolean':
        if (value == null) value = false;
        opnode.params[this.paramid] = value ? 1 : 0;
        this.fc.setValue(value);
        this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
      case 'notation_toggle':
        if (value == null) value = false;
        opnode.params[this.paramid] = value ? 1 : 0;
        this.fc.setValue(value);
        this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
      case 'string':
        if (value == null) value = '';
        opnode.params[this.paramid] = value;
        this.fc.setValue(value);
        if (!this.fc.hasError('forbiddenInput')) this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
      case 'select':
        if (value == null) value = 0;
        opnode.params[this.paramid] = value;
        this.fc.setValue(value);
        this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
      case 'draft':
        opnode.params[this.paramid] = value;
        this.fc.setValue(value);
        this.onOperationParamChange.emit({
          id: this.paramid,
          value: value,
          type: this.param.type
        });
        break;
    }
  }
  handleError(err) {
    console.log("CAUGHT ERROR", err);
    this.filewarning = err;
    this.clearImagePreview();
  }
  /**
   * this is called by the upload services "On Data function" which uploads and analyzes the image data in the image and returns it as a image data object
   * @param obj
   */
  handleFile(obj) {
    this.filewarning = "";
    this.opnode.params[this.paramid] = {
      id: obj[0].id,
      data: obj[0]
    };
    this.onOperationParamChange.emit({
      id: this.paramid,
      value: this.opnode.params[this.paramid]
    });
    this.fc.setValue(obj[0].name);
    switch (obj.type) {
      case 'image':
        if (obj.data.warning !== '') {
          this.filewarning = obj.warning;
        } else {
          const opnode = this.tree.getOpNode(this.opid);
          //now update the default parameters to the original size 
          opnode.params[1] = obj.data.width;
          opnode.params[2] = obj.data.height;
          this.drawImagePreview();
        }
        break;
    }
  }
  drawImagePreview() {
    const opnode = this.tree.getOpNode(this.opid);
    const obj = this.imageService.getImageData(opnode.params[this.paramid].id);
    if (obj === undefined || obj.data == undefined || obj.data.image == null) return;
    const data = obj.data;
    this.has_image_preview = true;
    const image_div = document.getElementById('param-image-' + this.opid);
    image_div.style.display = 'flex';
    const dims_div = document.getElementById('param-image-dims-' + this.opid);
    dims_div.innerHTML = data.width + "px x " + data.height + "px";
    const canvas = document.getElementById('preview_canvas-' + this.opid);
    const ctx = canvas.getContext('2d');
    const max_dim = data.width > data.height ? data.width : data.height;
    const use_width = data.width > 100 ? data.width / max_dim * 100 : data.width;
    const use_height = data.height > 100 ? data.height / max_dim * 100 : data.height;
    canvas.width = use_width;
    canvas.height = use_height;
    ctx.drawImage(data.image, 0, 0, use_width, use_height);
  }
  clearImagePreview() {
    this.has_image_preview = false;
    const opnode = this.tree.getOpNode(this.opid);
    const obj = this.imageService.getImageData(opnode.params[this.paramid].id);
    if (obj === undefined) return;
    const data = obj.data;
    const image_div = document.getElementById('param-image-' + this.opid);
    image_div.style.display = 'none';
    const dims_div = document.getElementById('param-image-dims-' + this.opid);
    dims_div.innerHTML = "";
    const canvas = document.getElementById('preview_canvas-' + this.opid);
    canvas.width = 0;
    canvas.height = 0;
  }
}
ParameterComponent.ɵfac = function ParameterComponent_Factory(t) {
  return new (t || ParameterComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_2__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__.OperationDescriptionsService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_core_provider_image_service__WEBPACK_IMPORTED_MODULE_3__.ImageService));
};
ParameterComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: ParameterComponent,
  selectors: [["app-parameter"]],
  inputs: {
    param: "param",
    opid: "opid",
    paramid: "paramid"
  },
  outputs: {
    onOperationParamChange: "onOperationParamChange",
    onFileUpload: "onFileUpload"
  },
  decls: 5,
  vars: 5,
  consts: [[4, "ngIf"], [1, "number_input"], ["matInput", "", "type", "number", "step", "1", 3, "ngModel", "formControl", "matTooltip", "name", "min", "max", "change"], [1, "number-label"], [1, "select-input"], [3, "ngModel", "matTooltip", "formControl", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [1, "select-label"], [3, "value"], [1, "boolean-input"], [3, "ngModel", "formControl", "matTooltip", "change"], [1, "boolean-label"], [1, "string-input"], [1, "string-and-refresh"], ["matInput", "", "cdkTextareaAutosize", "", "cdkAutosizeMinRows", "1", "cdkAutosizeMaxRows", "5", 1, "param-text", 3, "ngModel", "matTooltip", "formControl", "errorStateMatcher", "ngModelChange", "change"], ["autosize", "cdkTextareaAutosize"], ["mat-icon-button", "", "matTooltip", "update draft with input values", 1, "refresh", 3, "disabled", "click"], [1, "fas", "fa-redo"], [1, "string-label"], ["class", "text-err", 4, "ngIf"], [1, "text-err"], [1, "file-input-param"], [1, "form-and-image"], ["type", "init", "multiple", "false", "accepts", ".jpg,.png,.bmp", "type", "single_image", 1, "upload-form-box", 3, "onData", "onError"], [1, "param-image", 3, "id"], [1, "image_preview", 3, "id"], [3, "id"], [1, "file-label"]],
  template: function ParameterComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, ParameterComponent_ng_container_0_Template, 5, 7, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, ParameterComponent_ng_container_1_Template, 6, 5, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, ParameterComponent_ng_container_2_Template, 6, 5, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, ParameterComponent_ng_container_3_Template, 12, 8, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, ParameterComponent_ng_container_4_Template, 10, 9, "ng-container", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.param.type === "number");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.param.type == "select");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.param.type == "boolean" || ctx.param.type == "notation_toggle");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.param.type == "string");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.param.type == "file");
    }
  },
  styles: [".param-row {\n  display: flex;\n  vertical-align: middle;\n  flex-direction: row;\n  text-align: left;\n  width: 100%;\n  padding: 0.25em 0em 0em 0.5em;\n  font-size: 1.5em;\n}\n\n.number_input {\n  display: flex;\n  flex-direction: column;\n  color: white;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n.number_input input {\n  height: 100%;\n  align-content: baseline;\n  font-size: 1.2em;\n  flex-basis: 0;\n  font-weight: bolder;\n  font-size: 1.5em;\n}\n\n.number-label,\n.select-label,\n.boolean-label,\n.string-label {\n  color: white;\n  height: -moz-fit-content;\n  height: fit-content;\n  font-size: 0.8em;\n  font-size: 1em;\n}\n\n.boolean-input {\n  display: flex;\n  flex-direction: column;\n}\n.boolean-input .mat-slide-toggle-bar {\n  position: relative;\n  width: 30px !important;\n  height: 15px !important;\n  flex-shrink: 0;\n  border-radius: 6px;\n}\n.boolean-input .mat-slide-toggle-content {\n  font-size: 0.8em;\n}\n.boolean-input .mat-slide-toggle-thumb {\n  height: 18px !important;\n  width: 18px !important;\n}\n\n.select-input {\n  margin-right: 20px;\n  flex-grow: 2;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  height: -moz-fit-content;\n  height: fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n.select-input .mat-select {\n  height: 100%;\n  align-content: baseline;\n  flex-basis: 0;\n}\n.select-input .mat-select-value {\n  color: white;\n  font-weight: bolder;\n  font-size: 1.5em;\n}\n.select-input .mat-select-arrow {\n  color: white;\n}\n.file-input-param {\n  width: -moz-fit-content;\n  width: fit-content;\n  flex-grow: 4;\n}\n.file-input-param .form-and-image {\n  display: flex;\n  flex-direction: column;\n}\n.file-input-param .upload-form-box {\n  flex-grow: 4;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n.file-input-param .no_image {\n  height: 0px;\n}\n.file-input-param .has_image {\n  height: max-content;\n}\n\n.string-input {\n  margin-right: 20px;\n  flex-grow: 2;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  height: -moz-fit-content;\n  height: fit-content;\n  width: 100%;\n}\n.string-input .string-and-refresh {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n.string-input .param-text {\n  font-size: 1.2em;\n  font-weight: bolder;\n  font-size: 1.5em;\n  color: white;\n}\n.string-input .mat-input-element {\n  caret-color: white !important;\n  border-bottom: thin solid white;\n  width: 90%;\n}\n.string-input .refresh,\n.string-input .mat-icon-button {\n  color: white;\n  top: -1px;\n  font-size: 1.2em;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n.string-input .dirty {\n  color: rgb(255, 64, 129) !important;\n}\n\n.param-slider {\n  width: 50%;\n}\n\n.param-select {\n  width: 70%;\n  text-align: left;\n  position: relative;\n  left: 10px;\n}\n\n.input-color {\n  width: 30px;\n  height: 30px;\n  border: thin solid white;\n}\n\n.param-toggle {\n  width: 70%;\n  text-align: left;\n  position: relative;\n  left: 10px;\n  overflow: hidden;\n}\n\n.param-inputs {\n  min-width: 75%;\n  overflow: visible;\n  text-align: left;\n  margin-left: 6px;\n}\n\n.mat-slider {\n  height: 40px;\n  padding: 0px;\n}\n\n.mat-icon-button {\n  position: relative;\n  top: -9px;\n}\n\nbutton.is-primary.is-active {\n  background-color: rgb(255, 64, 129);\n}\n\n.text-err,\n.error {\n  color: rgb(255, 64, 129);\n}\n\n.inputs {\n  display: flex;\n  justify-content: flex-start;\n  text-align: center;\n}\n\n.slider-label,\n.param-name {\n  font-size: 11pt;\n  font-weight: bold;\n  color: #ddd;\n  text-overflow: ellipsis;\n}\n\n.stringandrefresh {\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/operation/parameter/parameter.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9vcGVyYXRpb24vcGFyYW1ldGVyL3BhcmFtZXRlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsNkJBQUE7RUFDQSxnQkFBQTtBQURKOztBQUlBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLHdCQUFBO0VBQUEsbUJBQUE7QUFESjtBQUdJO0VBQ0ksWUFBQTtFQUNBLHVCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQURSOztBQU1BOzs7O0VBSUksWUFBQTtFQUNBLHdCQUFBO0VBQUEsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFISjs7QUFNQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtBQUhKO0FBS0k7RUFDSSxrQkFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxjQUFBO0VBQ0Esa0JBQUE7QUFIUjtBQU1JO0VBQ0ksZ0JBQUE7QUFKUjtBQU9JO0VBQ0ksdUJBQUE7RUFDQSxzQkFBQTtBQUxSOztBQWFBO0VBQ0ksa0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLHdCQUFBO0VBQUEsbUJBQUE7RUFDQSx1QkFBQTtFQUFBLGtCQUFBO0FBVko7QUFZRztFQUNLLFlBQUE7RUFDQSx1QkFBQTtFQUNBLGFBQUE7QUFWUjtBQWFJO0VBQ0ksWUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFYUjtBQWVJO0VBQ0ksWUFBQTtBQWJSO0FBc0JBO0VBQ0ksdUJBQUE7RUFBQSxrQkFBQTtFQUNBLFlBQUE7QUFwQko7QUFzQkk7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7QUFwQlI7QUF1Qkk7RUFDSSxZQUFBO0VBQ0EsdUJBQUE7RUFBQSxrQkFBQTtFQUNBLHdCQUFBO0VBQUEsbUJBQUE7QUFyQlI7QUF3Qkk7RUFDSSxXQUFBO0FBdEJSO0FBeUJJO0VBQ0ksbUJBQUE7QUF2QlI7O0FBNkJBO0VBQ0ksa0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLHdCQUFBO0VBQUEsbUJBQUE7RUFDQSxXQUFBO0FBMUJKO0FBNEJJO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtBQTFCUjtBQTZCSTtFQUNJLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7QUEzQlI7QUE4Qkk7RUFDSSw2QkFBQTtFQUNBLCtCQUFBO0VBQ0EsVUFBQTtBQTVCUjtBQStCSTs7RUFFSSxZQUFBO0VBQ0EsU0FBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7RUFBQSxrQkFBQTtBQTdCUjtBQWdDSTtFQUNJLG1DQUFBO0FBOUJSOztBQTZDQTtFQUNJLFVBQUE7QUExQ0o7O0FBNkNBO0VBQ0ksVUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxVQUFBO0FBMUNKOztBQTREQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0Esd0JBQUE7QUF6REo7O0FBNkRBO0VBQ0ksVUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxVQUFBO0VBQ0EsZ0JBQUE7QUExREo7O0FBNkRBO0VBQ0ksY0FBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtBQTFESjs7QUE2REE7RUFDSSxZQUFBO0VBQ0EsWUFBQTtBQTFESjs7QUE2REE7RUFDSSxrQkFBQTtFQUNBLFNBQUE7QUExREo7O0FBNkRBO0VBQ0ksbUNBQUE7QUExREo7O0FBK0RBOztFQUVJLHdCQUFBO0FBNURKOztBQStEQTtFQUNJLGFBQUE7RUFDQSwyQkFBQTtFQUNBLGtCQUFBO0FBNURKOztBQXFFQTs7RUFFSSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSxXQUFBO0VBQ0EsdUJBQUE7QUFsRUo7O0FBcUVBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0FBbEVKIiwic291cmNlc0NvbnRlbnQiOlsiLnBhcmFtLXJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAwLjI1ZW0gMGVtIDBlbSAwLjVlbTtcbiAgZm9udC1zaXplOiAxLjVlbTtcbn1cblxuLm51bWJlcl9pbnB1dCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbn1cbi5udW1iZXJfaW5wdXQgaW5wdXQge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGFsaWduLWNvbnRlbnQ6IGJhc2VsaW5lO1xuICBmb250LXNpemU6IDEuMmVtO1xuICBmbGV4LWJhc2lzOiAwO1xuICBmb250LXdlaWdodDogYm9sZGVyO1xuICBmb250LXNpemU6IDEuNWVtO1xufVxuXG4ubnVtYmVyLWxhYmVsLFxuLnNlbGVjdC1sYWJlbCxcbi5ib29sZWFuLWxhYmVsLFxuLnN0cmluZy1sYWJlbCB7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgZm9udC1zaXplOiAxZW07XG59XG5cbi5ib29sZWFuLWlucHV0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cbi5ib29sZWFuLWlucHV0IC5tYXQtc2xpZGUtdG9nZ2xlLWJhciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDMwcHggIWltcG9ydGFudDtcbiAgaGVpZ2h0OiAxNXB4ICFpbXBvcnRhbnQ7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG59XG4uYm9vbGVhbi1pbnB1dCAubWF0LXNsaWRlLXRvZ2dsZS1jb250ZW50IHtcbiAgZm9udC1zaXplOiAwLjhlbTtcbn1cbi5ib29sZWFuLWlucHV0IC5tYXQtc2xpZGUtdG9nZ2xlLXRodW1iIHtcbiAgaGVpZ2h0OiAxOHB4ICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiAxOHB4ICFpbXBvcnRhbnQ7XG59XG5cbi5zZWxlY3QtaW5wdXQge1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gIGZsZXgtZ3JvdzogMjtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG59XG4uc2VsZWN0LWlucHV0IC5tYXQtc2VsZWN0IHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBhbGlnbi1jb250ZW50OiBiYXNlbGluZTtcbiAgZmxleC1iYXNpczogMDtcbn1cbi5zZWxlY3QtaW5wdXQgLm1hdC1zZWxlY3QtdmFsdWUge1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG59XG4uc2VsZWN0LWlucHV0IC5tYXQtc2VsZWN0LWFycm93IHtcbiAgY29sb3I6IHdoaXRlO1xufVxuLmZpbGUtaW5wdXQtcGFyYW0ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGZsZXgtZ3JvdzogNDtcbn1cbi5maWxlLWlucHV0LXBhcmFtIC5mb3JtLWFuZC1pbWFnZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG4uZmlsZS1pbnB1dC1wYXJhbSAudXBsb2FkLWZvcm0tYm94IHtcbiAgZmxleC1ncm93OiA0O1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG59XG4uZmlsZS1pbnB1dC1wYXJhbSAubm9faW1hZ2Uge1xuICBoZWlnaHQ6IDBweDtcbn1cbi5maWxlLWlucHV0LXBhcmFtIC5oYXNfaW1hZ2Uge1xuICBoZWlnaHQ6IG1heC1jb250ZW50O1xufVxuXG4uc3RyaW5nLWlucHV0IHtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICBmbGV4LWdyb3c6IDI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgd2lkdGg6IDEwMCU7XG59XG4uc3RyaW5nLWlucHV0IC5zdHJpbmctYW5kLXJlZnJlc2gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICB3aWR0aDogMTAwJTtcbn1cbi5zdHJpbmctaW5wdXQgLnBhcmFtLXRleHQge1xuICBmb250LXNpemU6IDEuMmVtO1xuICBmb250LXdlaWdodDogYm9sZGVyO1xuICBmb250LXNpemU6IDEuNWVtO1xuICBjb2xvcjogd2hpdGU7XG59XG4uc3RyaW5nLWlucHV0IC5tYXQtaW5wdXQtZWxlbWVudCB7XG4gIGNhcmV0LWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xuICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHdoaXRlO1xuICB3aWR0aDogOTAlO1xufVxuLnN0cmluZy1pbnB1dCAucmVmcmVzaCxcbi5zdHJpbmctaW5wdXQgLm1hdC1pY29uLWJ1dHRvbiB7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgdG9wOiAtMXB4O1xuICBmb250LXNpemU6IDEuMmVtO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG59XG4uc3RyaW5nLWlucHV0IC5kaXJ0eSB7XG4gIGNvbG9yOiByZ2IoMjU1LCA2NCwgMTI5KSAhaW1wb3J0YW50O1xufVxuXG4ucGFyYW0tc2xpZGVyIHtcbiAgd2lkdGg6IDUwJTtcbn1cblxuLnBhcmFtLXNlbGVjdCB7XG4gIHdpZHRoOiA3MCU7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGVmdDogMTBweDtcbn1cblxuLmlucHV0LWNvbG9yIHtcbiAgd2lkdGg6IDMwcHg7XG4gIGhlaWdodDogMzBweDtcbiAgYm9yZGVyOiB0aGluIHNvbGlkIHdoaXRlO1xufVxuXG4ucGFyYW0tdG9nZ2xlIHtcbiAgd2lkdGg6IDcwJTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAxMHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ucGFyYW0taW5wdXRzIHtcbiAgbWluLXdpZHRoOiA3NSU7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBtYXJnaW4tbGVmdDogNnB4O1xufVxuXG4ubWF0LXNsaWRlciB7XG4gIGhlaWdodDogNDBweDtcbiAgcGFkZGluZzogMHB4O1xufVxuXG4ubWF0LWljb24tYnV0dG9uIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IC05cHg7XG59XG5cbmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDY0LCAxMjkpO1xufVxuXG4udGV4dC1lcnIsXG4uZXJyb3Ige1xuICBjb2xvcjogcmdiKDI1NSwgNjQsIDEyOSk7XG59XG5cbi5pbnB1dHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnNsaWRlci1sYWJlbCxcbi5wYXJhbS1uYW1lIHtcbiAgZm9udC1zaXplOiAxMXB0O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgY29sb3I6ICNkZGQ7XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4uc3RyaW5nYW5kcmVmcmVzaCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"],
  encapsulation: 2
});

/***/ }),

/***/ 64989:
/*!****************************************************!*\
  !*** ./src/app/mixer/palette/palette.component.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PaletteComponent": () => (/* binding */ PaletteComponent)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs */ 36312);
/* harmony import */ var _core_model_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/model/defaults */ 45286);
/* harmony import */ var _core_model_cell__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/model/cell */ 94467);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/model/drafts */ 1435);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/model/util */ 75973);
/* harmony import */ var _core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/provider/designmodes.service */ 73169);
/* harmony import */ var _core_provider_notes_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/provider/notes.service */ 31326);
/* harmony import */ var _core_provider_state_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/provider/state.service */ 99938);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/provider/tree.service */ 6177);
/* harmony import */ var _mixer_provider_ink_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../mixer/provider/ink.service */ 37045);
/* harmony import */ var _mixer_provider_layers_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../mixer/provider/layers.service */ 53452);
/* harmony import */ var _provider_multiselect_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../provider/multiselect.service */ 16379);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../provider/viewport.service */ 2320);
/* harmony import */ var _provider_zoom_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../provider/zoom.service */ 75817);
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../core/provider/file.service */ 96374);
/* harmony import */ var _connection_connection_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./connection/connection.component */ 28300);
/* harmony import */ var _marquee_marquee_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./marquee/marquee.component */ 9088);
/* harmony import */ var _note_note_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./note/note.component */ 84462);
/* harmony import */ var _operation_operation_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./operation/operation.component */ 26866);
/* harmony import */ var _snackbar_snackbar_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./snackbar/snackbar.component */ 11307);
/* harmony import */ var _subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./subdraft/subdraft.component */ 49258);
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/snack-bar */ 10930);





































const _c0 = ["vc"];
class PaletteComponent {
  /**
   * Constructs a palette object. The palette supports drawing without components and dynamically
   * creates components from shapes and scribbles on the canvas.
   * @param dm  a reference to the service containing the current design modes and selections
   * @param tree reference to the objects and relationships within this palette
   * @param inks a reference to the service manaing the available inks
   * @param layers a reference to the sercie managing the view layers (z-indexes) of components
   * @param resolver a reference to the factory component for dynamically generating components
   * @param fs file service for saving and loading files
   * @param _snackBar _snackBar a reference to the snackbar component that shows data on move and select
   * @param viewport reference to the window and palette variables and where the viewer is currently lookin
   * @param notes reference the service that stores all the tagged comments
   */
  constructor(dm, tree, inks, layers, resolver, fs, _snackBar, viewport, notes, ss, zs, multiselect) {
    this.dm = dm;
    this.tree = tree;
    this.inks = inks;
    this.layers = layers;
    this.resolver = resolver;
    this.fs = fs;
    this._snackBar = _snackBar;
    this.viewport = viewport;
    this.notes = notes;
    this.ss = ss;
    this.zs = zs;
    this.multiselect = multiselect;
    this.onDesignModeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_22__.EventEmitter();
    this.onRevealDraftDetails = new _angular_core__WEBPACK_IMPORTED_MODULE_22__.EventEmitter();
    this.subdraftSubscriptions = [];
    this.operationSubscriptions = [];
    this.connectionSubscriptions = [];
    this.noteSubscriptions = [];
    /**
     * flag to determine how conneection should be drawn
     */
    this.selecting_connection = false;
    /**
     * holds a reference to the selection component
     * @property {Selection}
     */
    this.selection = new _marquee_marquee_component__WEBPACK_IMPORTED_MODULE_17__.MarqueeComponent();
    /**
     * holds the data of events drawn on this component (that are not associated with a subdraft)
     * @property {Array<Array<Cell>>}
     */
    this.scratch_pad = [];
    /**
     * links to the z-index to push the canvas to the front or back of view when freehand drawing.
     */
    this.canvas_zndx = -1;
    /**
     * a reference to the base size of each cell. Zoom in and out only modifies the view, not this base size.
     */
    this.default_cell_size = 5;
    this.needs_init = true;
    this.visible_op = -1;
    this.visible_op_inlet = -1;
    this.shape_vtxs = [];
    this.pointer_events = true;
  }
  /**
   * Called when palette is initailized
   */
  ngOnInit() {
    this.scale_string = this.default_cell_size + "px " + this.default_cell_size + "px";
    this.vc.clear();
    this.default_cell_size = _core_model_defaults__WEBPACK_IMPORTED_MODULE_1__.defaults.mixer_cell_size;
  }
  /**
   * Gets references to view items and adds to them after the view is initialized
   */
  ngAfterViewInit() {
    const div = document.getElementById('scrollable-container');
    this.viewport.set(div.offsetParent.scrollLeft, div.offsetParent.scrollTop, div.offsetParent.clientWidth, div.offsetParent.clientHeight);
    // const center:Point = this.viewport.setViewportCenter();
    // div.offsetParent.scrollLeft = this.viewport.getTopLeft().x;
    // div.offsetParent.scrollTop = this.viewport.getTopLeft().y;
    this.canvas = document.getElementById("scratch");
    this.cx = this.canvas.getContext("2d");
    this.canvas.width = this.viewport.getWidth();
    this.canvas.height = this.viewport.getHeight();
    // this.cx.beginPath();
    // this.cx.rect(20, 20, this.viewport.width-40, this.viewport.height-40);
    // this.cx.stroke();
    this.selection.scale = this.zs.zoom;
    this.selection.active = false;
    this.designModeChanged();
    this.rescale(-1);
  }
  /**
   * unsubscribes to all open subscriptions and clears the view component
   */
  ngOnDestroy() {
    this.unsubscribeFromAll();
    this.vc.clear();
  }
  /**
   * the only way to prevent memory leaks is to unsubscribe.
   * since we lose access to tree when a new file is uploaded we must unsubscribe
   * when any upload action is taking place. If no action takes place, then resubscribe
   */
  unsubscribeFromAll() {
    this.subdraftSubscriptions.forEach(element => element.unsubscribe());
    this.operationSubscriptions.forEach(element => element.unsubscribe());
    this.connectionSubscriptions.forEach(element => element.unsubscribe());
    this.noteSubscriptions.forEach(element => element.unsubscribe());
  }
  /**
   * resubscribes to each subscription
   */
  resubscribe() {
    this.tree.getDrafts().forEach(element => {
      this.setSubdraftSubscriptions(element);
    });
    this.tree.getOperations().forEach(element => {
      this.setOperationSubscriptions(element);
    });
    this.tree.getConnections().forEach(element => {});
    this.tree.getConnections().forEach(element => {});
  }
  /**
   * called when a new file is loaded
   */
  clearComponents() {
    this.unsubscribeFromAll();
    this.notes.getRefs().forEach(ref => this.removeFromViewContainer(ref));
    this.vc.clear();
  }
  /**
   * called when user moves position within viewer
   * @param data
   */
  handleScroll(position) {
    this.viewport.setTopLeft(position);
    const div = document.getElementById('scrollable-container');
    div.offsetParent.scrollLeft = this.viewport.getTopLeft().x;
    div.offsetParent.scrollTop = this.viewport.getTopLeft().y;
  }
  /**
   * called when user moves position within viewer
   * @param data
   */
  handlePan(diff) {
    const div = document.getElementById('scrollable-container');
    console.log("Offset ", diff, div.offsetParent.scrollLeft);
    div.offsetParent.scrollLeft += diff.x;
    div.offsetParent.scrollTop += diff.y;
  }
  /**
  * when someone zooms in or out, we'd like to keep the center point the same. We do this by scaling the entire palette and
  * elements and then manually scrolling to the new center point.
  * @param data
  */
  handleScrollFromZoom(old_zoom) {
    // this.viewport.setTopLeft(position);
    // console.log(old_center, this.viewport.getCenterPoint());
    const div = document.getElementById('scrollable-container');
    const past_scroll_x = div.offsetParent.scrollLeft / old_zoom;
    const new_scroll_x = past_scroll_x * this.zs.zoom;
    const past_scroll_y = div.offsetParent.scrollTop / old_zoom;
    const new_scroll_y = past_scroll_y * this.zs.zoom;
    div.offsetParent.scrollLeft = new_scroll_x;
    div.offsetParent.scrollTop = new_scroll_y;
  }
  /**
  * called when user scrolls the winidow
  * @param data
  */
  handleWindowScroll(data) {
    const div = document.getElementById('scrollable-container');
    this.viewport.set(div.offsetParent.scrollLeft, div.offsetParent.scrollTop, div.offsetParent.clientWidth, div.offsetParent.clientHeight);
    //update the canvas to this position
  }
  /**
   * removes the view associate with this view ref
   * @param ref
   */
  removeFromViewContainer(ref) {
    const ndx = this.vc.indexOf(ref);
    if (ndx !== -1) this.vc.remove(ndx);else console.log('Error: view ref not found for removal', ref);
  }
  /**
   * adds a state to the timeline. This should be called
   * each time a user performs an action that they should be able to undo/redo
   */
  addTimelineState() {
    // version: string,
    // workspace: any,
    // type: string,
    // nodes: Array<NodeComponentProxy>,
    // tree: Array<TreeNodeProxy>,
    // drafts: Array<Draft>,
    // looms: Array<Loom>,
    // loom_settings: Array<LoomSettings>
    // ops: Array<any>,
    // notes: Array<Note>,
    // materials: Array<Shuttle>,
    // scale: number
    this.fs.saver.ada('mixer', true, this.zs.zoom).then(so => {
      this.ss.addMixerHistoryState(so);
    });
  }
  /**
   * this cycles through all subdrafts and calls the download call on any subdrafts
   * who are currently visible.
   */
  downloadVisibleDraftsAsBmp() {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const drafts = _this.tree.getDrafts();
      const visible_drafts = drafts.filter(el => el.draft_visible);
      const functions = visible_drafts.map(el => el.saveAsBmp());
      return Promise.all(functions).then(el => console.log("Downloaded " + functions.length + " files"));
    })();
  }
  /**
   * this cycles through all subdrafts and calls the download call on any subdrafts
   * who are currently visible.
   */
  downloadVisibleDraftsAsWif() {
    var _this2 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const drafts = _this2.tree.getDrafts();
      const visible_drafts = drafts.filter(el => el.draft_visible);
      const functions = visible_drafts.map(el => el.saveAsWif());
      return Promise.all(functions).then(el => console.log("Downloaded " + functions.length + " files"));
    })();
  }
  /**
  //  * called anytime an operation is added. Adds the operation to the tree.
  //  * @param name the name of the operation to add
  //  */
  addOperation(name) {
    const opcomp = this.createOperation(name);
    this.performAndUpdateDownstream(opcomp.id).then(el => {
      this.addTimelineState();
    });
    return opcomp.id;
  }
  /**
  //  * called anytime an operation is added. Adds the operation to the tree.
  //  * @param name the name of the operation to add
  //  */
  pasteOperation(opnode) {
    const opcomp = this.createOperation(opnode.name);
    const new_node = this.tree.getNode(opcomp.id);
    new_node.inlets = opnode.inlets.slice();
    new_node.params = opnode.params.slice();
    new_node.component.topleft = {
      x: opnode.component.topleft.x + 100,
      y: opnode.component.topleft.y + 100
    };
    return this.performAndUpdateDownstream(opcomp.id).then(el => {
      this.addTimelineState();
      return Promise.resolve(new_node.id);
    });
  }
  /**
   * redraws each operation and subdraft at the new scale, then redraws each of their connections
   * @param scale
   */
  rescale(prev_zoom) {
    //this.scale = scale;
    const zoom_factor = this.zs.zoom / this.default_cell_size;
    const container = document.getElementById('palette');
    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';
    //these subdrafts are all rendered independely of the canvas and need to indivdiually rescalled. This 
    //essentially rerenders (but does not redraw them) and updates their top/lefts to scaled points
    this.tree.nodes.forEach(node => {
      if (node.type !== "cxn") {
        node.component.scale = this.zs.zoom;
      }
    });
    this.tree.getConnections().forEach(sd => {
      sd.rescale(this.zs.zoom);
    });
    this.notes.getComponents().forEach(el => {
      el.scale = this.zs.zoom;
    });
    if (this.tree.getPreview() !== undefined) this.tree.getPreviewComponent().scale = this.zs.zoom;
    this.handleScrollFromZoom(prev_zoom);
  }
  /**
   * loads the snackbar at the bottom of the screen
   * @param message the message to show on the snack bar
   * @param bounds the bounds of the element that we are showing info aboout
   */
  startSnackBar(message, bounds) {
    this.updateSnackBar(message, bounds);
    this._snackBar.openFromComponent(_snackbar_snackbar_component__WEBPACK_IMPORTED_MODULE_20__.SnackbarComponent, {
      data: {
        message: this.snack_message,
        bounds: this.snack_bounds,
        scale: this.zs.zoom
      }
    });
  }
  snackBarAlert(message) {
    this._snackBar.open(message, 'Undo', {
      duration: 3000
    });
  }
  /**
   * updates data shown on the snackbar
   * @param message
   * @param bounds
   */
  updateSnackBar(message, bounds) {
    this.snack_bounds = bounds;
    this.snack_message = message;
  }
  /**
   * called to close the snackbar
   */
  closeSnackBar() {
    this._snackBar.dismiss();
  }
  /**
   * called when the palette needs to change the design mode, emits output to parent
   * @param name - the mode to switchh to
   */
  changeDesignmode(name) {
    this.dm.selectDesignMode(name, 'design_modes');
    const mode = this.dm.getDesignMode(name, 'design_modes');
    this.onDesignModeChange.emit(name);
  }
  // disablePointerEvents(){
  //   this.pointer_events = false;
  // }
  // enablePointerEvents(){
  //   this.pointer_events = true;
  // }
  /**
   * called when a new subdraft is created
   * @param sd
   */
  setSubdraftSubscriptions(sd) {
    this.subdraftSubscriptions.push(sd.onSubdraftDrop.subscribe(this.subdraftDropped.bind(this)));
    this.subdraftSubscriptions.push(sd.onSubdraftMove.subscribe(this.subdraftMoved.bind(this)));
    this.subdraftSubscriptions.push(sd.onSubdraftStart.subscribe(this.subdraftStarted.bind(this)));
    this.subdraftSubscriptions.push(sd.onDeleteCalled.subscribe(this.onDeleteSubdraftCalled.bind(this)));
    this.subdraftSubscriptions.push(sd.onDuplicateCalled.subscribe(this.onDuplicateSubdraftCalled.bind(this)));
    this.subdraftSubscriptions.push(sd.onConnectionStarted.subscribe(this.onConnectionStarted.bind(this)));
    this.subdraftSubscriptions.push(sd.onDesignAction.subscribe(this.onSubdraftAction.bind(this)));
    this.subdraftSubscriptions.push(sd.onSubdraftViewChange.subscribe(this.onSubdraftViewChange.bind(this)));
    this.subdraftSubscriptions.push(sd.onNameChange.subscribe(this.onSubdraftNameChange.bind(this)));
    this.subdraftSubscriptions.push(sd.onShowDetails.subscribe(this.revealDraftDetails.bind(this)));
  }
  revealDraftDetails(id) {
    this.onRevealDraftDetails.emit(id);
  }
  /**
   * dynamically creates a a note component
   * @returns the created note instance
   */
  createNote(note) {
    let tl = null;
    const factory = this.resolver.resolveComponentFactory(_note_note_component__WEBPACK_IMPORTED_MODULE_18__.NoteComponent);
    const notecomp = this.vc.createComponent(factory);
    this.setNoteSubscriptions(notecomp.instance);
    if (note === null || note.interlacement == null) {
      tl = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolvePointToAbsoluteNdx(this.viewport.getCenterPoint(), this.zs.zoom);
    } else {
      tl = note.interlacement;
    }
    let id = this.notes.createNote(tl, notecomp.instance, notecomp.hostView, note);
    notecomp.instance.id = id;
    notecomp.instance.scale = this.zs.zoom;
    notecomp.instance.default_cell = this.default_cell_size;
    this.changeDesignmode('move');
    return notecomp.instance;
  }
  //   /**
  //  * dynamically creates a a note component
  //  * @returns the created note instance
  //  */
  //   loadNote(note: Note):NoteComponent{
  //     console.log("LOADING NOTE", note);
  //     if(note.component === null || note.component === undefined){
  //       const noteinstance  = this.createNote();
  //     }else{
  //     }
  //     const notecomp = this.vc.createComponent(NoteComponent);
  //     this.setNoteSubscriptions(notecomp.instance);
  //     note.component = notecomp.instance;
  //     note.ref = notecomp.hostView;
  //     notecomp.instance.id = note.id;
  //     notecomp.instance.scale = this.zs.zoom;
  //     notecomp.instance.default_cell = this.default_cell_size;
  //     return notecomp.instance;
  //   }
  /**
  * called when a new operation is added
  * @param op
  */
  setNoteSubscriptions(note) {
    this.noteSubscriptions.push(note.deleteNote.subscribe(this.deleteNote.bind(this)));
    this.noteSubscriptions.push(note.saveNoteText.subscribe(this.saveNote.bind(this)));
  }
  deleteNote(id) {
    const note = this.notes.get(id);
    if (note === undefined) return;
    this.removeFromViewContainer(note.ref);
    this.notes.delete(id);
  }
  saveNote() {
    this.changeDesignmode('move');
    this.addTimelineState();
  }
  /**
   * dynamically creates a subdraft component, adds its inputs and event listeners, pushes the subdraft to the list of references
   * @param d a Draft object for this component to contain
   * @returns the created subdraft instance
   */
  createSubDraft(d, parent) {
    const factory = this.resolver.resolveComponentFactory(_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_21__.SubdraftComponent);
    const subdraft = this.vc.createComponent(factory);
    const id = this.tree.createNode('draft', subdraft.instance, subdraft.hostView);
    this.setSubdraftSubscriptions(subdraft.instance);
    subdraft.instance.id = id;
    subdraft.instance.draft = d;
    subdraft.instance.default_cell = this.default_cell_size;
    subdraft.instance.scale = this.zs.zoom;
    subdraft.instance.ink = this.inks.getSelected(); //default to the currently selected ink
    return this.tree.loadDraftData({
      prev_id: -1,
      cur_id: id
    }, d, null, null, true).then(d => {
      return Promise.resolve(subdraft.instance);
    });
  }
  createSubDraftFromEditedDetail(id) {
    const node = this.tree.getNode(id);
    const factory = this.resolver.resolveComponentFactory(_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_21__.SubdraftComponent);
    const subdraft = this.vc.createComponent(factory);
    this.setSubdraftSubscriptions(subdraft.instance);
    node.component = subdraft.instance;
    node.ref = subdraft.hostView;
    subdraft.instance.id = id;
    subdraft.instance.draft = this.tree.getDraft(id);
    subdraft.instance.default_cell = this.default_cell_size;
    subdraft.instance.scale = this.zs.zoom;
    subdraft.instance.ink = this.inks.getSelected(); //default to the currently selected ink
    return Promise.resolve(subdraft.instance);
  }
  /**
   * loads a subdraft component from data
   * @param id the node id assigned to this element on load
   * @param d the draft object to load into this subdraft
   * @param nodep the component proxy used to define
   */
  loadSubDraft(id, d, nodep, draftp, saved_scale) {
    const factory = this.resolver.resolveComponentFactory(_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_21__.SubdraftComponent);
    const subdraft = this.vc.createComponent(factory);
    const node = this.tree.getNode(id);
    node.component = subdraft.instance;
    node.ref = subdraft.hostView;
    this.setSubdraftSubscriptions(subdraft.instance);
    subdraft.instance.id = id;
    subdraft.instance.default_cell = this.default_cell_size;
    subdraft.instance.scale = this.zs.zoom;
    subdraft.instance.draft_visible = true;
    subdraft.instance.use_colors = true;
    subdraft.instance.ink = this.inks.getSelected(); //default to the currently selected ink
    subdraft.instance.draft = d;
    subdraft.instance.parent_id = this.tree.getSubdraftParent(id);
    if (nodep !== null && nodep.topleft !== null) {
      const topleft_ilace = {
        j: nodep.topleft.x / saved_scale,
        i: nodep.topleft.y / saved_scale
      };
      const adj_topleft = {
        x: topleft_ilace.j * this.zs.zoom,
        y: topleft_ilace.i * this.zs.zoom
      };
      subdraft.instance.topleft = adj_topleft;
      if (draftp !== null && draftp !== undefined) {
        subdraft.instance.draft_visible = draftp.draft_visible;
      }
      if (draftp !== null && draftp !== undefined && draftp.render_colors !== undefined) {
        subdraft.instance.use_colors = draftp.render_colors;
      }
    }
  }
  setConnectionSubscriptions(cxn) {
    this.connectionSubscriptions.push(cxn.onConnectionRemoved.subscribe(this.removeConnection.bind(this)));
  }
  /**
   * called when a new operation is added
   * @param op
   */
  setOperationSubscriptions(op) {
    this.operationSubscriptions.push(op.onOperationMove.subscribe(this.operationMoved.bind(this)));
    this.operationSubscriptions.push(op.onOperationMoveEnded.subscribe(this.operationMoveEnded.bind(this)));
    this.operationSubscriptions.push(op.onOperationParamChange.subscribe(this.operationParamChanged.bind(this)));
    this.operationSubscriptions.push(op.deleteOp.subscribe(this.onDeleteOperationCalled.bind(this)));
    this.operationSubscriptions.push(op.duplicateOp.subscribe(this.onDuplicateOpCalled.bind(this)));
    this.operationSubscriptions.push(op.onConnectionRemoved.subscribe(this.removeConnection.bind(this)));
    this.operationSubscriptions.push(op.onInputAdded.subscribe(this.connectionMade.bind(this)));
    this.operationSubscriptions.push(op.onInputVisibilityChange.subscribe(this.updateVisibility.bind(this)));
    this.operationSubscriptions.push(op.onInletLoaded.subscribe(this.inletLoaded.bind(this)));
    this.operationSubscriptions.push(op.onOpLoaded.subscribe(this.opCompLoaded.bind(this)));
  }
  /**
   * creates an operation component
   * @param name the name of the operation this component will perform
   * @returns the OperationComponent created
   */
  createOperation(name) {
    const factory = this.resolver.resolveComponentFactory(_operation_operation_component__WEBPACK_IMPORTED_MODULE_19__.OperationComponent);
    const op = this.vc.createComponent(factory);
    const id = this.tree.createNode('op', op.instance, op.hostView);
    this.tree.loadOpData({
      prev_id: -1,
      cur_id: id
    }, name, undefined, undefined);
    this.setOperationSubscriptions(op.instance);
    op.instance.name = name;
    op.instance.id = id;
    op.instance.zndx = this.layers.createLayer();
    op.instance.scale = this.zs.zoom;
    op.instance.default_cell = this.default_cell_size;
    const tr = this.viewport.getTopRight();
    op.instance.topleft = {
      x: tr.x - 340,
      y: tr.y + 120
    };
    return op.instance;
  }
  /**
  * loads an operation with the information supplied.
  * @param name the name of the operation this component will perform
  * @params params the input data to be used in this operation
  * @returns the id of the node this has been assigned to
  */
  loadOperation(id, name, params, inlets, topleft, saved_scale) {
    const factory = this.resolver.resolveComponentFactory(_operation_operation_component__WEBPACK_IMPORTED_MODULE_19__.OperationComponent);
    const op = this.vc.createComponent(factory);
    const node = this.tree.getNode(id);
    node.component = op.instance;
    node.ref = op.hostView;
    this.setOperationSubscriptions(op.instance);
    op.instance.name = name;
    op.instance.id = id;
    op.instance.zndx = this.layers.createLayer();
    op.instance.scale = this.zs.zoom;
    op.instance.default_cell = this.default_cell_size;
    op.instance.loaded_inputs = params;
    op.instance.topleft = {
      x: topleft.x,
      y: topleft.y
    };
    op.instance.loaded = true;
    // if(bounds !== null){
    //   const topleft_ilace = {j: bounds.topleft.x/saved_scale, i: bounds.topleft.y/saved_scale};
    //   const adj_topleft: Point = {x: topleft_ilace.j*this.zs.zoom, y: topleft_ilace.i*this.zs.zoom};
    //   const new_bounds: Bounds = {
    //     topleft: adj_topleft,
    //     width: bounds.width / saved_scale * this.zs.zoom,
    //     height: bounds.height / saved_scale * this.zs.zoom,
    //   }
    //   op.instance.bounds = new_bounds;
    // } 
  }
  /**
   * duplicates an operation with the information supplied.
   * @param name the name of the operation this component will perform
   * @params params the input data to be used in this operation
   * @returns the id of the node this has been assigned to
   */
  duplicateOperation(name, params, topleft, inlets) {
    const op = this.createOperation(name);
    this.tree.setOpParams(op.id, params.slice(), inlets.slice());
    op.loaded_inputs = params.slice();
    op.topleft = {
      x: topleft.x,
      y: topleft.y
    };
    op.duplicated = true;
    return op.id;
  }
  /**
   * creates a connection and draws it to screen
   * @param id - the id of this node
   */
  loadConnection(id) {
    const factory = this.resolver.resolveComponentFactory(_connection_connection_component__WEBPACK_IMPORTED_MODULE_16__.ConnectionComponent);
    const cxn = this.vc.createComponent(factory);
    const node = this.tree.getNode(id);
    node.component = cxn.instance;
    this.setConnectionSubscriptions(cxn.instance);
    node.ref = cxn.hostView;
    cxn.instance.id = id;
    cxn.instance.scale = this.zs.zoom;
    cxn.instance.default_cell_size = this.default_cell_size;
  }
  /**
   * creates a connection component and registers it with the tree
   * @returns the list of all id's connected to the "to" node
   */
  createConnection(id_from, id_to, to_ndx) {
    const factory = this.resolver.resolveComponentFactory(_connection_connection_component__WEBPACK_IMPORTED_MODULE_16__.ConnectionComponent);
    const cxn = this.vc.createComponent(factory);
    const id = this.tree.createNode('cxn', cxn.instance, cxn.hostView);
    const to_input_ids = this.tree.addConnection(id_from, 0, id_to, to_ndx, id);
    cxn.instance.id = id;
    cxn.instance.scale = this.zs.zoom;
    cxn.instance.default_cell_size = this.default_cell_size;
    this.setConnectionSubscriptions(cxn.instance);
    this.connectionSubscriptions.push();
    return {
      input_ids: to_input_ids,
      id: id
    };
  }
  /**
   * called from upload or import events
   * @param d
   */
  addSubdraftFromDraft(d) {
    this.createSubDraft(d, -1).then(sd => {
      sd.setPosition({
        x: this.viewport.getTopLeft().x + 60,
        y: this.viewport.getTopLeft().y + 60
      });
      // const interlacement = utilInstance.resolvePointToAbsoluteNdx(sd.bounds.topleft, this.scale); 
      // this.viewport.addObj(sd.id, interlacement);
      this.addTimelineState();
    });
  }
  /**
  //  * called anytime an operation is added. Adds the operation to the tree.
  //  * @param name the name of the operation to add
  //  */
  pasteSubdraft(draftnode) {
    //create a new idea for this draft node: 
    let d = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.copyDraft)(draftnode.draft);
    d.id = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].generateId(8);
    return this.createSubDraft(d, -1).then(sd => {
      sd.setPosition({
        x: this.viewport.getTopLeft().x + 60,
        y: this.viewport.getTopLeft().y + 60
      });
      sd.topleft = {
        x: draftnode.component.topleft.x + 100,
        y: draftnode.component.topleft.y + 100
      };
      this.addTimelineState();
      return Promise.resolve(sd.id);
    });
  }
  /**
   * a subdraft can only have an operation for a parent
   * removes the subdraft sent to the function
   * updates the tree view_id's in response
   * @param id {number}
      */
  removeSubdraft(id) {
    if (id === undefined) return;
    const outputs = this.tree.getNonCxnOutputs(id);
    const delted_nodes = this.tree.removeSubdraftNode(id);
    delted_nodes.forEach(node => {
      this.removeFromViewContainer(node.ref);
      this.viewport.removeObj(node.id);
    });
    outputs.forEach(out => {
      this.performAndUpdateDownstream(out);
    });
  }
  /**
   * this calls the tree to delete the operation.
   * the tree returns a list of all nodes deleted and this function updates the view to remove those elements
   * @param id
   */
  removeOperation(id) {
    if (id === undefined) return;
    const drafts_out = this.tree.getNonCxnOutputs(id);
    const outputs = drafts_out.reduce((acc, el) => {
      return acc.concat(this.tree.getNonCxnOutputs(el));
    }, []);
    const delted_nodes = this.tree.removeOperationNode(id);
    delted_nodes.forEach(node => {
      this.removeFromViewContainer(node.ref);
      this.viewport.removeObj(node.id);
    });
    outputs.forEach(out => {
      this.performAndUpdateDownstream(out);
    });
  }
  /**
  * dynamically creates a subdraft component with specific requirements of the intersection, adds its inputs and event listeners, pushes the subdraft to the list of references
  * @param d a Draft object for this component to contain
  * @returns the created subdraft instance
  */
  createAndSetPreview(d) {
    const factory = this.resolver.resolveComponentFactory(_subdraft_subdraft_component__WEBPACK_IMPORTED_MODULE_21__.SubdraftComponent);
    const subdraft = this.vc.createComponent(factory);
    return this.tree.setPreview(subdraft, d).then(dn => {
      //note, the preview is not added to the tree, as it will only be added if it eventually accepted by droppings
      const sd = dn.component;
      sd.id = -1;
      sd.default_cell = this.default_cell_size;
      sd.scale = this.zs.zoom;
      sd.draft = d;
      sd.ink = this.inks.getSelected(); //default to the currently selected ink
      sd.setAsPreview();
      // sd.disableDrag();
      return dn;
    });
  }
  /**
   * destorys the preview component
   */
  removePreview() {
    const preview = this.tree.getPreview();
    const ndx = this.vc.indexOf(this.tree.getPreview().ref);
    this.vc.remove(ndx);
    this.tree.unsetPreview();
  }
  /**
   * Called from mixer when it receives a change from the design mode tool or keyboard press
   * triggers view mode changes required for this mode
   */
  designModeChanged() {
    if (this.dm.getDesignMode('move', 'design_modes').selected) {
      this.unfreezePaletteObjects();
    } else {
      console.log("DESIGN MODE CHANGED");
      this.freezePaletteObjects();
    }
    // if(this.dm.getDesignMode('draw', 'design_modes').selected || this.dm.getDesignMode('shape',  'design_modes').selected){
    //   const old_zoom = this.zs.zoom;
    //   this.zs.setZoom(Math.ceil(this.zs.zoom))
    //   this.rescale(old_zoom);
    // }
  }
  /**
   * specifically removes the subscription from the move event
   */
  removeSubscription() {
    if (this.moveSubscription) {
      this.moveSubscription.unsubscribe();
    }
  }
  /**
   * draws the selection atop the view
   * todo: update this to account for scroll
   * @param ndx
   */
  drawSelection(ndx) {
    this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    const bounds = {
      left: this.selection.start.j * this.zs.zoom,
      top: this.selection.start.i * this.zs.zoom,
      right: ndx.j * this.zs.zoom,
      bottom: ndx.i * this.zs.zoom
    };
    //will draw on outside of selection
    this.cx.beginPath();
    this.cx.strokeStyle = "#ff4081";
    this.cx.lineWidth = 1;
    this.cx.setLineDash([this.zs.zoom, 2]);
    this.cx.strokeRect(bounds.left - this.viewport.getTopLeft().x, bounds.top - this.viewport.getTopLeft().y, bounds.right - bounds.left, bounds.bottom - bounds.top);
    this.cx.fillStyle = "#ff4081";
    this.cx.font = "12px Arial";
    const w = Math.round(this.selection.bounds.width / this.zs.zoom);
    const h = Math.round(this.selection.bounds.height / this.zs.zoom);
    this.cx.fillText(w.toString() + "x" + h.toString(), bounds.left - this.viewport.getTopLeft().x, bounds.bottom + 16 - this.viewport.getTopLeft().y);
  }
  /**
   * Takes an absolute index and returns it to an index relative to the viewport.
   * @param abs
   * @returns
   */
  getRelativeInterlacement(abs) {
    const i_offset = Math.floor(this.viewport.getTopLeft().y / this.zs.zoom);
    const j_offset = Math.floor(this.viewport.getTopLeft().x / this.zs.zoom);
    const rel = {
      i: abs.i - i_offset,
      j: abs.j - j_offset,
      si: -1
    };
    return rel;
  }
  /**
   * sets the value of the scratchpad cell at ndx
   * checks for self interselcting
   * @param ndx (i,j)
   */
  setCell(ndx) {
    const rel = this.getRelativeInterlacement(ndx);
    let c = this.scratch_pad[rel.i][rel.j];
    const selected = this.dm.getSelectedDesignMode('draw_modes').value;
    switch (selected) {
      case 'toggle':
        const cur = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.getCellValue)(c);
        if (cur == null) c = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(c, true);else c = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(c, !cur);
        break;
      case 'down':
        c = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(c, false);
        break;
      case 'up':
        c = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(c, true);
        break;
      case 'unset':
        c = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(c, null);
        break;
    }
    //use the code below to use past scratchpad values, but this seems wrong
    // console.log(c);
    // const val: boolean = c.isSet(); //check for a previous value
    // c.setHeddle(true);
    // if(val){
    //   const newval:boolean = this.computeCellValue(this.inks.getSelected(), c, val);
    //   console.log("setting to", newval);
    //   c.setHeddle(newval);
    // } 
  }
  /**
   * called by drawcell. Draws on screen based on the current ink
   * @param ink
   * @param over
   * @param under
   * @returns
   */
  computeCellColor(ink, over, under) {
    const res = this.computeCellValue(ink, over, under);
    if (ink === 'unset' && res == true) return "#cccccc";
    if (res === null) return "#fafafa";
    if (res) return "#000000";
    return "#ffffff";
  }
  /**
   * applies the filter betetween over and under and returns the result
   * @param ink the ink with which to compute the transition
   * @param over the value of the primary (top) cell
   * @param under the value of the intersecting (bottom) cell
   * @returns
   */
  computeCellValue(ink, over, under) {
    let res = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].computeFilter(ink, (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.getCellValue)(over), under);
    return res;
  }
  /**
   * called when creating a subdraft from the drawing on the screen. Computes the resulting value based on
   * all intersections with the drawing
   * @param ndx the i,j location of the cell we are checking
   * @param ink the currently selected ink
   * @param over the Cell we are checking against
   * @returns true/false or null
   */
  getScratchpadProduct(ndx, ink, over) {
    switch (ink) {
      case 'neq':
      case 'and':
      case 'or':
        const p = {
          x: ndx.j * this.zs.zoom,
          y: ndx.i * this.zs.zoom
        };
        // const isect = this.getIntersectingSubdraftsForPoint(p);
        // if(isect.length > 0){
        //   const prev: boolean = isect[0].resolveToValue(p);
        //   return this.computeCellValue(ink, over, prev);
        // }else{
        //   return this.computeCellValue(ink, over, null);
        // }
        break;
      default:
        return this.computeCellValue(ink, over, null);
        break;
    }
    return null;
  }
  /**
   * draw the cell at position ndx
   * @param ndx (i,j)
   */
  drawCell(ndx) {
    const rel = this.getRelativeInterlacement(ndx);
    const c = this.scratch_pad[rel.i][rel.j];
    this.cx.fillStyle = "#cccccc";
    const selected_ink = this.inks.getSelected();
    switch (selected_ink) {
      case 'neq':
      case 'and':
      case 'or':
        const p = {
          x: ndx.j * this.zs.zoom,
          y: ndx.i * this.zs.zoom
        };
        // const isect = this.getIntersectingSubdraftsForPoint(p);
        // if(isect.length > 0){
        //   const prev: boolean = isect[0].resolveToValue(p);
        //   this.cx.fillStyle = this.computeCellColor(selected_ink, c, prev);
        // }else{
        //   this.cx.fillStyle =  this.computeCellColor(selected_ink, c, null);;
        // }
        break;
      default:
        this.cx.fillStyle = this.computeCellColor(selected_ink, c, null);
        break;
    }
    this.cx.fillRect(rel.j * this.zs.zoom, rel.i * this.zs.zoom, this.zs.zoom, this.zs.zoom);
  }
  /**
   * Deletes the subdraft that called this function.
   */
  onDeleteSubdraftCalled(obj) {
    if (obj === null) return;
    this.removeSubdraft(obj.id);
    this.addTimelineState();
  }
  /**
  * Deletes the subdraft that called this function.
  */
  onDeleteOperationCalled(obj) {
    if (obj === null) return;
    this.removeOperation(obj.id);
    this.addTimelineState();
  }
  /**
  * Duplicates the operation that called this function.
  */
  onDuplicateOpCalled(obj) {
    if (obj === null) return;
    const op = this.tree.getOpNode(obj.id);
    const op_comp = this.tree.getComponent(obj.id);
    let new_tl = null;
    if (this.tree.hasSingleChild(obj.id) && this.tree.opHasHiddenChild(obj.id)) {
      new_tl = {
        x: op_comp.topleft.x + 200,
        y: op_comp.topleft.y
      };
    } else {
      let container = document.getElementById('scale-' + obj.id);
      new_tl = {
        x: op_comp.topleft.x + 10 + container.offsetWidth * this.zs.zoom / this.default_cell_size,
        y: op_comp.topleft.y
      };
    }
    const id = this.duplicateOperation(op.name, op.params, new_tl, op.inlets);
    const new_op = this.tree.getComponent(id);
    //duplicate the connections as well
    const cxns = this.tree.getInputsWithNdx(op.id);
    cxns.forEach(cxn => {
      if (cxn.tn.inputs.length > 0) {
        const from = cxn.tn.inputs[0].tn.node.id;
        this.createConnection(from, new_op.id, cxn.ndx);
      }
    });
    this.operationParamChanged({
      id: id
    });
    this.addTimelineState();
  }
  /**
   This is called when the finetune mode is closed and we need to create a new subdraft to hold the changes.
   * @param obj {parent_id, new_id}
   * @returns
   */
  // createNewSubdraftFromEdits(obj: any){
  //   this.changeDesignmode('move')
  //   if(obj === null) return;
  //   const sd = <SubdraftComponent> this.tree.getComponent(obj.parent_id);
  //   const new_draft = this.tree.getDraft(obj.new_id);
  //   const new_loom = this.tree.getLoom(obj.new_id);
  //   const new_ls = this.tree.getLoomSettings(obj.new_id);
  //   const new_topleft = {
  //       x: sd.topleft.x + 40 + this.zs.zoom *2, 
  //       y: sd.topleft.y}
  //   this.loadSubDraft(
  //     obj.new_id, 
  //     new_draft, 
  //     {
  //       node_id: obj.new_id,
  //       type: 'draft',
  //       topleft: sd.topleft
  //     },
  //     {
  //       node_id: obj.new_id,
  //       draft_id: new_draft.id,
  //       draft_name: new_draft.ud_name,
  //       draft: new_draft,
  //       draft_visible: true,
  //       loom: new_loom,
  //       loom_settings:new_ls,
  //       render_colors: true
  //     },
  //     this.zs.zoom);
  //     this.addTimelineState();
  //  }
  onDuplicateSubdraftCalled(obj) {
    if (obj === null) return;
    const sd = this.tree.getComponent(obj.id);
    const sd_draft = this.tree.getDraft(obj.id);
    this.createSubDraft((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.initDraftWithParams)({
      wefts: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.wefts)(sd_draft.drawdown),
      warps: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.warps)(sd_draft.drawdown),
      drawdown: sd_draft.drawdown.slice(),
      rowShuttleMapping: sd_draft.rowShuttleMapping.slice(),
      colShuttleMapping: sd_draft.colShuttleMapping.slice(),
      rowSystemMapping: sd_draft.rowSystemMapping.slice(),
      colSystemMapping: sd_draft.colSystemMapping.slice(),
      gen_name: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.getDraftName)(sd_draft) + " copy"
    }), -1).then(new_sd => {
      const orig_size = document.getElementById('scale-' + obj.id);
      new_sd.setPosition({
        x: sd.topleft.x + orig_size.offsetWidth * (this.zs.zoom / this.default_cell_size) + this.zs.zoom * 2,
        y: sd.topleft.y
      });
      //const interlacement = utilInstance.resolvePointToAbsoluteNdx(new_sd.bounds.topleft, this.scale); 
      //this.viewport.addObj(new_sd.id, interlacement);
      this.addTimelineState();
    }).catch(console.error);
  }
  /**
   * A mouse event, originated in a subdraft, has been started
   * checkes the design mode and handles the event as required
   * @param obj contains the id of the moving subdraft
   */
  subdraftStarted(obj) {
    if (obj === null) return;
    if (this.dm.isSelected("move", 'design_modes')) {
      //get the reference to the draft that's moving
      const moving = this.tree.getComponent(obj.id);
      if (moving === null) return;
      // // this.startSnackBar("Using Ink: "+moving.ink, null);
      // const isect:Array<SubdraftComponent> = this.getIntersectingSubdrafts(moving);
      // const seed_drafts = isect.filter(el => !this.tree.hasParent(el.id)); //filter out drafts that were generated
      // if(seed_drafts.length === 0) return;
      // const bounds: any = utilInstance.getCombinedBounds(moving, seed_drafts);
      // const temp: Draft = this.getCombinedDraft(bounds, moving, seed_drafts);
      // this.createAndSetPreview(temp).then(dn => {
      //   this.tree.getPreviewComponent().setPosition(bounds.topleft);
      // }).catch(console.error);
    } else if (this.dm.isSelected("marquee", 'design_modes')) {
      this.selectionStarted();
    } else if (this.dm.isSelected("draw", 'design_modes')) {
      this.drawStarted();
    }
  }
  /**
   * triggers a mode that allows mouse-mouse to be followed by a line.
   * todo; add code that holds the point on scroll
   * @param obj - contains event, id of component who called
   */
  onConnectionStarted(obj) {
    if (obj.type == 'stop') {
      this.selecting_connection = false;
      this.tree.unsetOpenConnection();
      this.processConnectionEnd();
      return;
    }
    const valid = this.tree.setOpenConnection(obj.id);
    if (!valid) return;
    this.changeDesignmode('operation');
    this.selecting_connection = true;
    //make sure to unselect anything else that had previously been selected
    const all_drafts = this.tree.getDraftNodes();
    const not_selected = all_drafts.filter(el => el.id !== obj.id);
    not_selected.forEach(node => {
      let comp = node.component;
      comp.selecting_connection = false;
    });
    const sd = this.tree.getComponent(obj.id);
    let adj;
    if (sd.draft_visible) {
      const from = document.getElementById('scale-' + obj.id);
      adj = {
        x: sd.topleft.x - this.viewport.getTopLeft().x + 8,
        y: sd.topleft.y + from.offsetHeight * (this.zs.zoom / this.default_cell_size) - this.viewport.getTopLeft().y
      };
    } else {
      adj = {
        x: sd.topleft.x - this.viewport.getTopLeft().x + 10,
        y: sd.topleft.y - this.viewport.getTopLeft().y
      };
    }
    this.unfreezePaletteObjects();
    this.shape_bounds = {
      topleft: adj,
      width: this.zs.zoom,
      height: this.zs.zoom
    };
    this.startSnackBar("select an input or click an empty space to stop selecting", null);
  }
  /**
  * adds a connector flag to any subdrafts that we are allowed to connect to from this operation
  */
  // setDraftsConnectable(op_id: number){
  //   const nodes: Array<SubdraftComponent> = this.tree.getDrafts();
  //   const op: OperationComponent = <OperationComponent> this.tree.getComponent(op_id);
  //   const inputs: Array<number> = this.tree.getInputs(op_id);
  //   if(inputs.length >= op.maxInputs()){
  //     nodes.forEach(el => {
  //       el.unsetConnectable();
  //       //now unset the ones that are already assigned to other ops
  //       const connections: Array<number> = this.tree.getNonCxnOutputs(el.id);
  //       const op_ndx: number = connections.findIndex(id => (id === op_id));
  //       //if it had connections and the connection was not this operation, unset it
  //       if(op_ndx !== -1){
  //         el.setConnectable();
  //       }    
  //     });
  //   }else{
  //     nodes.forEach(el => {
  //       //look upstream to see if this operation is linked in any way to this op
  //       const upstream: Array<number> = this.tree.getUpstreamOperations(el.id);
  //       const ndx: number = upstream.findIndex(i => i === op_id);
  //       if(ndx === -1) el.setConnectable();
  //       //now unset the ones that are already assigned to other ops
  //       const connections: Array<number> = this.tree.getOutputs(el.id);
  //       const ops: Array<number> = connections.map(cxn => this.tree.getConnectionOutput(cxn));
  //       const op_ndx: number = ops.findIndex(op => (op === op_id));
  //       //if it had connections and the connection was not this operation, unset it
  //       if(ops.length > 0 && op_ndx === -1){
  //         el.unsetConnectable();
  //       }    
  //     });
  //   }
  //   const ops: Array<OperationComponent> = this.tree.getOperations();
  //   ops.forEach(op => {
  //     if(op.id != op_id) op.active_connection = true;
  //   });
  //  }
  /**
  * disables selection and pointer events on all
  */
  // unsetDraftsConnectable(){
  //   const nodes: Array<SubdraftComponent> = this.tree.getDrafts();
  //   nodes.forEach(el => {
  //     el.unsetConnectable();
  //   });
  //   const ops: Array<OperationComponent> = this.tree.getOperations();
  //   ops.forEach(op => {
  //     op.active_connection = false;
  //   });
  //  }
  /**
   * disables selection and pointer events on all
   */
  freezePaletteObjects() {
    const nodes = this.tree.getComponents();
    nodes.forEach(el => {
      el.disableDrag();
    });
    const notes = this.notes.getComponents();
    notes.forEach(el => {
      el.disableDrag();
    });
  }
  /**
  * unfreezes all palette objects (except connections)
  */
  unfreezePaletteObjects() {
    const nodes = this.tree.getComponents();
    nodes.forEach(el => {
      if (el != null) {
        el.enableDrag();
      }
    });
    const notes = this.notes.getComponents();
    notes.forEach(el => {
      el.enableDrag();
    });
  }
  /**
   * this is called when an subdraft updates its show/hide value
   */
  onSubdraftViewChange(id) {
    this.updateAttachedComponents(id, false);
  }
  /**
  * this is called when an subdraft updates its show/hide value
  */
  onSubdraftNameChange(id) {
    const outs = this.tree.getNonCxnOutputs(id);
    const to_perform = outs.map(el => this.performAndUpdateDownstream(el));
    return Promise.all(to_perform).then(el => {
      this.addTimelineState();
    }).catch(console.error);
    ;
  }
  /**
    * draws when a user is using the mouse to identify an input to a component
    * @param mouse the absolute position of the mouse on screen
    * @param shift boolean representing if shift is pressed as well
    */
  connectionDragged(mouse, shift) {
    //get the mouse position relative to the view frame
    const adj = {
      x: mouse.x - this.viewport.getTopLeft().x,
      y: mouse.y - this.viewport.getTopLeft().y
    };
    this.shape_bounds.width = adj.x - this.shape_bounds.topleft.x;
    this.shape_bounds.height = adj.y - this.shape_bounds.topleft.y;
    const svg = document.getElementById('scratch_svg');
    svg.style.top = this.viewport.getTopLeft().y + this.shape_bounds.topleft.y + "px";
    svg.style.left = this.viewport.getTopLeft().x + this.shape_bounds.topleft.x + "px";
    svg.innerHTML = ' <path d="M 0 0 C 0 50,' + this.shape_bounds.width + ' ' + (this.shape_bounds.height - 50) + ', ' + this.shape_bounds.width + ' ' + this.shape_bounds.height + '" fill="transparent" stroke="#ff4081"  stroke-dasharray="4 2"  stroke-width="2"/> ';
  }
  /**
   * resets the view when a connection event ends
   */
  processConnectionEnd() {
    this.closeSnackBar();
    this.selecting_connection = false;
    const svg = document.getElementById('scratch_svg');
    svg.innerHTML = ' ';
    this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.changeDesignmode('move');
    if (!this.tree.hasOpenConnection()) return;
    const sd = this.tree.getOpenConnection();
    if (sd !== null) sd.connectionEnded();
    this.tree.unsetOpenConnection();
  }
  /**
   * calculates the default topleft position for this node based on the width and size of its parent and/or neighbors
   * @param id the id of the component to position
   * @returns a promise for the updated point
   */
  calculateInitialLocaiton(id) {
    console.log("CALC INIT LOCATION");
    let new_tl = this.viewport.getTopLeft();
    //if it has a parent, align it to the bottom edge
    if (this.tree.hasParent(id)) {
      const parent_id = this.tree.getSubdraftParent(id);
      const opnode = this.tree.getNode(parent_id);
      const topleft = opnode.component.topleft;
      const container = document.getElementById('scale-' + parent_id);
      //this component was just generated and needs a postion
      if (container == null) {
        new_tl = {
          x: topleft.x,
          y: topleft.y
        };
        // //component is not yet initalized on this calculation so we do it manually
        const default_height = 100 * this.zs.zoom / this.default_cell_size;
        new_tl = {
          x: topleft.x,
          y: topleft.y + default_height
        };
      } else {
        const container = document.getElementById('scale-' + parent_id);
        console.log("scale-", parent_id, container);
        const parent_height = container.offsetHeight * (this.zs.zoom / this.default_cell_size);
        new_tl = {
          x: topleft.x,
          y: topleft.y + parent_height
        };
      }
      const outs = this.tree.getNonCxnOutputs(parent_id);
      if (outs.length > 1) {
        const this_child = outs.findIndex(el => el === id);
        if (this_child === -1) {
          console.error("subdraft not found in parent output list");
        }
        ;
        const updated_point = outs.filter((el, ndx) => ndx < this_child).reduce((acc, el, ndx) => {
          const el_draft = this.tree.getDraft(el);
          acc.x = acc.x + ((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.warps)(el_draft.drawdown) + 2) * this.default_cell_size;
          return acc;
        }, topleft);
        new_tl = updated_point;
      }
    }
    return new_tl;
  }
  /**
   * this calls a function for an operation to perform and then subsequently calls all children
   * to recalculate. After each calculation, it redraws and or creates any new subdrafts
   * @param op_id
   * @returns
   */
  performAndUpdateDownstream(op_id) {
    this.tree.getOpNode(op_id).dirty = true;
    this.tree.getDownstreamOperations(op_id).forEach(el => this.tree.getNode(el).dirty = true);
    return this.tree.performGenerationOps([op_id]).then(draft_ids => {
      const fns = this.tree.getDraftNodes().filter(el => el.component !== null && el.dirty).map(el => el.component.drawDraft(el.draft));
      //create any new subdrafts nodes
      const new_drafts = this.tree.getDraftNodes().filter(el => el.component === null).map(el => {
        //console.log("loading new subdraft", (<DraftNode>el).draft);
        return this.loadSubDraft(el.id, el.draft, {
          node_id: el.id,
          type: el.type,
          topleft: this.calculateInitialLocaiton(el.id)
        }, null, this.zs.zoom);
      });
      return Promise.all([Promise.all(fns), Promise.all(new_drafts)]);
    }).then(el => {
      const loads = [];
      const new_cxns = this.tree.nodes.filter(el => el.type === 'cxn' && el.component === null);
      new_cxns.forEach(cxn => {
        const from_node = this.tree.getInputs(cxn.id);
        const to_node = this.tree.getOutputs(cxn.id);
        if (from_node.length !== 1 || to_node.length !== 1) Promise.reject("connection has zero or more than one input or output");
        loads.push(this.loadConnection(cxn.id));
      });
      //update the positions of the connections
      let all_cxns = this.tree.getConnections();
      all_cxns.forEach(cxn => {
        let to = this.tree.getOutputs(cxn.id);
        to.forEach(id => {
          cxn.updateToPosition(id, this.zs.zoom);
        });
      });
      return Promise.all(loads);
    });
  }
  /**
   * when a subdraft is closed, it has no operation to run before updaing downstream, instead it ONLY needs to update the downstream values
   * @param subdraft_id
   */
  updateDownstream(subdraft_id) {
    let out = this.tree.getNonCxnOutputs(subdraft_id);
    console.log("out ", out);
    out.forEach(op_id => {
      this.tree.getOpNode(op_id).dirty = true;
      this.tree.getDownstreamOperations(op_id).forEach(el => this.tree.getNode(el).dirty = true);
    });
    return this.tree.performGenerationOps(out).then(draft_ids => {
      const fns = this.tree.getDraftNodes().filter(el => el.component !== null && el.dirty).map(el => el.component.drawDraft(el.draft));
      //create any new subdrafts nodes
      const new_drafts = this.tree.getDraftNodes().filter(el => el.component === null).map(el => {
        //console.log("loading new subdraft", (<DraftNode>el).draft);
        return this.loadSubDraft(el.id, el.draft, {
          node_id: el.id,
          type: el.type,
          topleft: this.calculateInitialLocaiton(el.id)
        }, null, this.zs.zoom);
      });
      return Promise.all([Promise.all(fns), Promise.all(new_drafts)]);
    }).then(el => {
      const loads = [];
      const new_cxns = this.tree.nodes.filter(el => el.type === 'cxn' && el.component === null);
      new_cxns.forEach(cxn => {
        const from_node = this.tree.getInputs(cxn.id);
        const to_node = this.tree.getOutputs(cxn.id);
        if (from_node.length !== 1 || to_node.length !== 1) Promise.reject("connection has zero or more than one input or output");
        loads.push(this.loadConnection(cxn.id));
      });
      return Promise.all(loads);
    });
  }
  /**
   * when an inlet is pressed on an operation, highlight all things contributed to this inlet
   * @param op_id
   * @param inlet_id
   * @param ndx_in_inlets - if there aremultiple inputs at a single inlet, give the number in that list
   */
  highlightPathToInlet(op_id, inlet_id, ndx_in_inlets) {
    const cxns = this.tree.getInputsAtNdx(op_id, inlet_id);
    const upstream_ops = this.tree.getUpstreamOperations(cxns[ndx_in_inlets].tn.node.id);
    const upstream_drafts = this.tree.getUpstreamDrafts(cxns[ndx_in_inlets].tn.node.id);
    // const upstream_ops = cxns.reduce((acc, val)=>{
    //    const ids = this.tree.getUpstreamOperations(val.tn.node.id);
    //    return acc.concat(ids);
    //  }, []); 
    // const upstream_drafts = cxns.reduce((acc, val)=>{
    //   const ids = this.tree.getUpstreamDrafts(val.tn.node.id);
    //   return acc.concat(ids);
    // }, []); 
    const upstream_cxn = upstream_drafts.reduce((acc, draft) => {
      return acc.concat(this.tree.getOutputs(draft));
    }, []);
    //  const upstream_drafts = this.tree.getUpstreamDrafts(op_id);
    const op_children = this.tree.getNonCxnOutputs(op_id);
    const all_ops = this.tree.getOpNodes();
    all_ops.forEach(op => {
      if (upstream_ops.find(el => el === op.id) === undefined) {
        if (op.id !== op_id) {
          const div = document.getElementById("scale-" + op.id);
          if (div !== null) div.style.opacity = ".2";
        }
      }
    });
    const all_drafts = this.tree.getDraftNodes();
    all_drafts.forEach(draft => {
      if (upstream_drafts.find(el => el === draft.id) === undefined) {
        if (op_children.find(del => del === draft.id) === undefined) {
          const div = document.getElementById("scale-" + draft.id);
          if (div !== null) div.style.opacity = ".2";
        }
      }
    });
    const all_cxns = this.tree.getConnections();
    all_cxns.forEach(cxn => {
      if (upstream_cxn.find(el => el === cxn.id) === undefined) {
        const div = document.getElementById("scale-" + cxn.id);
        if (div !== null) div.style.opacity = ".2";
      } else {
        cxn.show_path_text = true;
        cxn.drawConnection(this.zs.zoom);
      }
    });
  }
  resetOpacity() {
    const ops = this.tree.getOpNodes();
    ops.forEach(op => {
      const div = document.getElementById("scale-" + op.id);
      if (div !== null) div.style.opacity = "1";
    });
    const drafts = this.tree.getDraftNodes();
    drafts.forEach(draft => {
      const div = document.getElementById("scale-" + draft.id);
      if (div !== null) div.style.opacity = "1";
    });
    const cxns = this.tree.getConnections();
    cxns.forEach(cxn => {
      const div = document.getElementById("scale-" + cxn.id);
      if (div !== null) div.style.opacity = "1";
      cxn.show_path_text = false;
      cxn.drawConnection(this.zs.zoom);
    });
  }
  /**
   * called from an operation or inlet to allow for the inlighting of all upstream operations and drafts
   * @param obj
   */
  updateVisibility(obj) {
    {
      this.resetOpacity();
      if (obj.show == true) {
        //unset any no longer selected inlets
        const ops = this.tree.getOpNodes();
        const not_selected = ops.filter(el => el.id !== obj.id);
        not_selected.forEach((op, ndx) => {
          const inlets = op.inlets.map((val, ndx) => ndx);
          op.component.resetVisibliity(inlets);
        });
        let selected = ops.filter(el => el.id == obj.id);
        if (selected.length > 0) {
          const inlets = selected[0].inlets.map((val, ndx) => ndx).filter(el => el !== obj.ndx);
          selected[0].component.resetVisibliity(inlets);
        }
        this.highlightPathToInlet(obj.id, obj.ndx, obj.ndx_in_inlets);
      } else {
        this.visible_op = -1;
        this.visible_op_inlet = -1;
      }
    }
  }
  /**
   * called from an operation or inlet to allow for the inlighting of all upstream operations and drafts
   * @param obj
   */
  inletLoaded(obj) {
    //redraw the inlet
    // let opid = obj.opid;
    // let ndx = obj.ndx;
    // const opnode = this.tree.getOpNode(opid);
    // const cxns = this.tree.getInputsAtNdx(opnode.id, ndx);
    // // console.log("CXNS ", cxns);
    // cxns.forEach(io => {
    //   const cxn = <ConnectionComponent> this.tree.getComponent(io.tn.node.id);
    //   // console.log("ATTEMPTING TO UPDATE TO POSITION ")
    //   cxn.updateToPosition(opnode.id, this.zs.zoom)
    // })
  }
  /**
   * called from an operation or inlet to allow for the inlighting of all upstream operations and drafts
   * @param obj
   */
  opCompLoaded(obj) {
    //redraw the inlet
    let opid = obj.id;
    const cxns = this.tree.getInputsWithNdx(opid);
    cxns.forEach((cxn, input_ndx) => {
      const cxn_comp = this.tree.getComponent(cxn.tn.node.id);
      cxn_comp.updateToPosition(opid, this.zs.zoom);
    });
  }
  /**
   * emitted from operation when it receives a hit on its connection button, the id refers to the operation id
   */
  connectionMade(obj) {
    if (!this.tree.hasOpenConnection()) return;
    //this is defined in the order that the line was drawn
    const op = this.tree.getComponent(obj.id);
    const sd = this.tree.getOpenConnection();
    this.createConnection(sd.id, obj.id, obj.ndx);
    this.performAndUpdateDownstream(obj.id).then(el => {
      this.addTimelineState();
    });
    this.processConnectionEnd();
  }
  pasteConnection(from, to, inlet) {
    this.createConnection(from, to, inlet);
    this.performAndUpdateDownstream(to).then(el => {
      this.addTimelineState();
    });
  }
  /**
   * Called when a connection is explicitly deleted
  */
  removeConnection(obj) {
    let to = this.tree.getConnectionOutput(obj.id);
    const to_delete = this.tree.removeConnectionNodeById(obj.id);
    to_delete.forEach(node => this.removeFromViewContainer(node.ref));
    // if(to_delete.length > 0) console.log("Error: Removing Connection triggered other deletions");
    this.processConnectionEnd();
    if (this.tree.getType(to) === "op") {
      this.performAndUpdateDownstream(to);
    }
    this.addTimelineState();
  }
  selectionStarted() {
    this.selection.start = this.last;
    this.selection.active = true;
  }
  panStarted(mouse_pos) {
    console.log("PAN STARTED");
    this.last_point = mouse_pos;
    this.freezePaletteObjects();
  }
  /**
  * brings the base canvas to view and begins to render the
  * @param mouse the absolute position of the mouse on screen
  */
  shapeStarted(mouse) {
    const rel = {
      x: mouse.x - this.viewport.getTopLeft().x,
      y: mouse.y - this.viewport.getTopLeft().y
    };
    this.shape_bounds = {
      topleft: rel,
      width: this.zs.zoom,
      height: this.zs.zoom
    };
    this.shape_vtxs = [];
    this.canvas_zndx = this.layers.createLayer(); //bring this canvas forward
    this.cx.fillStyle = "#ff4081";
    this.cx.fillRect(this.shape_bounds.topleft.x, this.shape_bounds.topleft.y, this.shape_bounds.width, this.shape_bounds.height);
    if (this.dm.isSelected('free', 'shapes')) {
      this.startSnackBar("CTRL+Click to end drawing", this.shape_bounds);
    } else {
      this.startSnackBar("Press SHIFT while dragging to constrain shape", this.shape_bounds);
    }
  }
  /**
   * resizes and redraws the shape between the the current mouse and where the shape started
   * @param mouse the absolute position of the mouse on screen
   */
  shapeDragged(mouse, shift) {
    const rel = {
      x: mouse.x - this.viewport.getTopLeft().x,
      y: mouse.y - this.viewport.getTopLeft().y
    };
    this.shape_bounds.width = rel.x - this.shape_bounds.topleft.x;
    this.shape_bounds.height = rel.y - this.shape_bounds.topleft.y;
    if (shift) {
      const max = Math.max(this.shape_bounds.width, this.shape_bounds.height);
      //allow lines to snap to coords
      if (this.dm.isSelected('line', 'shapes')) {
        if (Math.abs(this.shape_bounds.width) < Math.abs(this.shape_bounds.height / 2)) {
          this.shape_bounds.height = max;
          this.shape_bounds.width = this.zs.zoom;
        } else if (Math.abs(this.shape_bounds.height) < Math.abs(this.shape_bounds.width / 2)) {
          this.shape_bounds.width = max;
          this.shape_bounds.height = this.zs.zoom;
        } else {
          this.shape_bounds.width = max;
          this.shape_bounds.height = max;
        }
      } else {
        this.shape_bounds.width = max;
        this.shape_bounds.height = max;
      }
    }
    this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.cx.beginPath();
    this.cx.fillStyle = "#ff4081";
    this.cx.strokeStyle = "#ff4081";
    this.cx.setLineDash([]);
    this.cx.lineWidth = this.zs.zoom;
    if (this.dm.isSelected('line', 'shapes')) {
      this.cx.moveTo(this.shape_bounds.topleft.x + this.zs.zoom, this.shape_bounds.topleft.y + this.zs.zoom);
      this.cx.lineTo(this.shape_bounds.topleft.x + this.shape_bounds.width, this.shape_bounds.topleft.y + this.shape_bounds.height);
      this.cx.stroke();
    } else if (this.dm.isSelected('fill_circle', 'shapes')) {
      this.shape_bounds.width = Math.abs(this.shape_bounds.width);
      this.shape_bounds.height = Math.abs(this.shape_bounds.height);
      this.cx.ellipse(this.shape_bounds.topleft.x, this.shape_bounds.topleft.y, this.shape_bounds.width, this.shape_bounds.height, 2 * Math.PI, 0, this.shape_bounds.height / 2);
      this.cx.fill();
    } else if (this.dm.isSelected('stroke_circle', 'shapes')) {
      this.cx.ellipse(this.shape_bounds.topleft.x, this.shape_bounds.topleft.y, this.shape_bounds.width, this.shape_bounds.height, 2 * Math.PI, 0, this.shape_bounds.height / 2);
      this.cx.stroke();
    } else if (this.dm.isSelected('fill_rect', 'shapes')) {
      this.cx.fillRect(this.shape_bounds.topleft.x, this.shape_bounds.topleft.y, this.shape_bounds.width, this.shape_bounds.height);
    } else if (this.dm.isSelected('stroke_rect', 'shapes')) {
      this.cx.strokeRect(this.shape_bounds.topleft.x + this.zs.zoom, this.shape_bounds.topleft.y + this.zs.zoom, this.shape_bounds.width - this.zs.zoom, this.shape_bounds.height - this.zs.zoom);
    } else {
      if (this.shape_vtxs.length > 1) {
        this.cx.moveTo(this.shape_vtxs[0].x, this.shape_vtxs[0].y);
        for (let i = 1; i < this.shape_vtxs.length; i++) {
          this.cx.lineTo(this.shape_vtxs[i].x, this.shape_vtxs[i].y);
          //this.cx.moveTo(this.shape_vtxs[i].x, this.shape_vtxs[i].y);
        }
      } else {
        this.cx.moveTo(this.shape_bounds.topleft.x, this.shape_bounds.topleft.y);
      }
      this.cx.lineTo(this.shape_bounds.topleft.x + this.shape_bounds.width, this.shape_bounds.topleft.y + this.shape_bounds.height);
      this.cx.stroke();
      this.cx.fill();
    }
    if (this.dm.isSelected('free', 'shapes')) {
      this.updateSnackBar("CTRL+click to end drawing", this.shape_bounds);
    } else {
      this.updateSnackBar("Press SHIFT to contstrain shape", this.shape_bounds);
    }
  }
  /**
   * clears the scratchpad for the new drawing event
   */
  drawStarted() {
    this.canvas_zndx = this.layers.createLayer(); //bring this canvas forward
    this.scratch_pad = [];
    for (let i = 0; i < this.canvas.height; i += this.zs.zoom) {
      const row = [];
      for (let j = 0; j < this.canvas.width; j += this.zs.zoom) {
        row.push((0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.createCell)(null));
      }
      this.scratch_pad.push(row);
    }
    this.startSnackBar("Drag to Draw", null);
  }
  /**
   * gets the bounds of a drawing on the scratchpad, a drawing is represented by set cells
   * @returns an object representing the bounds in the format of i, j (the row, column index of the pad)
   */
  getScratchPadBounds() {
    let bottom = 0;
    let right = 0;
    let top = this.scratch_pad.length - 1;
    let left = this.scratch_pad[0].length - 1;
    for (let i = 0; i < this.scratch_pad.length; i++) {
      for (let j = 0; j < this.scratch_pad[0].length; j++) {
        if (this.scratch_pad[i][j].is_set) {
          if (i < top) top = i;
          if (j < left) left = j;
          if (i > bottom) bottom = i;
          if (j > right) right = j;
        }
      }
    }
    return [{
      i: top,
      j: left,
      si: -1
    }, {
      i: bottom,
      j: right,
      si: -1
    }];
  }
  /**
   * handles checks and actions to take when drawing event ends
   * gets the boudary of drawn segment and creates a subdraft containing that drawing
   * if the drawing sits on top of an existing subdraft, merge the drawing into that subdraft (extending the original if neccessary)
   * @returns
   */
  processDrawingEnd() {
    this.canvas_zndx = -1;
    if (this.scratch_pad === undefined) return;
    if (this.scratch_pad[0] === undefined) return;
    const corners = this.getScratchPadBounds();
    const warps = corners[1].j - corners[0].j + 1;
    const wefts = corners[1].i - corners[0].i + 1;
    //there must be at least one cell selected
    if (warps < 1 || wefts < 1) {
      this.scratch_pad = undefined;
      return;
    }
    const pattern = [];
    for (let i = 0; i < wefts; i++) {
      pattern.push([]);
      for (let j = 0; j < warps; j++) {
        const c = this.scratch_pad[corners[0].i + i][corners[0].j + j];
        const b = this.getScratchpadProduct({
          i: i,
          j: j,
          si: -1
        }, this.inks.getSelected(), c);
        pattern[i].push((0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.createCell)(b));
      }
    }
    //if this drawing does not intersect with any existing subdrafts, 
    return this.createSubDraft((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.initDraftWithParams)({
      wefts: wefts,
      warps: warps,
      pattern: pattern
    }), -1).then(sd => {
      const pos = {
        topleft: {
          x: this.viewport.getTopLeft().x + corners[0].j * this.zs.zoom,
          y: this.viewport.getTopLeft().y + corners[0].i * this.zs.zoom
        },
        width: warps * this.zs.zoom,
        height: wefts * this.zs.zoom
      };
      sd.setPosition(pos.topleft);
      //sd.setComponentSize(pos.width, pos.height);
      sd.disableDrag();
      //  const had_merge = this.mergeSubdrafts(sd);
      this.addTimelineState();
    });
  }
  /**
   * update the viewport when the window is resized
   * @param event
   */
  onResize(event) {
    this.viewport.setWidth(event.target.innerWidth);
    this.viewport.setHeight(event.target.innerHeight);
    this.canvas.width = this.viewport.getWidth();
    this.canvas.height = this.viewport.getHeight();
  }
  /**
   * handles actions to take when the mouse is down inside of the palette
   * @param event the mousedown event
   */
  onStart(event) {
    if (this.selecting_connection == true) {
      this.processConnectionEnd();
    }
    if (this.needs_init) {
      //this is a hack to update the screen posiitons because not all inforamtion is ready when onload and onview init completes
      let ops = this.tree.getOpNodes();
      ops.forEach(op => {
        this.opCompLoaded(op);
        let drafts = this.tree.getDraftOutputs(op.id);
        drafts.forEach((draft, ndx) => {
          let draftcomp = this.tree.getComponent(draft);
          draftcomp.updatePositionFromParent(op.component, ndx);
        });
      });
      this.needs_init = false;
    }
    const ctrl = event.ctrlKey;
    const mouse = {
      x: this.viewport.getTopLeft().x + event.clientX,
      y: this.viewport.getTopLeft().y + event.clientY
    };
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolveCoordsToNdx(mouse, this.zs.zoom);
    //use this to snap the mouse to the nearest coord
    mouse.x = ndx.j * this.zs.zoom;
    mouse.y = ndx.i * this.zs.zoom;
    this.last = ndx;
    this.selection.start = this.last;
    this.removeSubscription();
    if (this.dm.getDesignMode("marquee", 'design_modes').selected) {
      this.selectionStarted();
      this.moveSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.fromEvent)(event.target, 'mousemove').subscribe(e => this.onDrag(e));
      // }else if(this.dm.isSelected("draw",'design_modes')){
      //   this.moveSubscription = 
      //   fromEvent(event.target, 'mousemove').subscribe(e => this.onDrag(e)); 
      //     this.drawStarted();    
      //     this.setCell(ndx);
      //     this.drawCell(ndx); 
      // }else if(this.dm.isSelected("shape",'design_modes')){
      //   this.moveSubscription = 
      //   fromEvent(event.target, 'mousemove').subscribe(e => this.onDrag(e)); 
      //   if(this.dm.isSelected('free','shapes')){
      //     if(ctrl){
      //       this.processShapeEnd().then(el => {
      //         this.changeDesignmode('move');
      //         this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      //       });
      //     }else{
      //       if(this.shape_vtxs.length == 0) this.shapeStarted(mouse);
      //       this.shape_vtxs.push(mouse);
      //     }
      //   }else{
      //     this.shapeStarted(mouse);
      //   }
      // }else if(this.dm.isSelected("operation",'design_modes')){
      // this.processConnectionEnd();
      // this.changeDesignmode('move');
    } else if (this.dm.isSelected("move", "design_modes")) {
      if (event.shiftKey) return;
      this.multiselect.clearSelections();
    } else if (this.dm.isSelected("pan", 'design_modes')) {
      this.panStarted({
        x: event.clientX,
        y: event.clientY
      });
      this.moveSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.fromEvent)(event.target, 'mousemove').subscribe(e => this.onDrag(e));
    }
  }
  onMove(event) {
    const shift = event.shiftKey;
    const mouse = {
      x: this.viewport.getTopLeft().x + event.clientX,
      y: this.viewport.getTopLeft().y + event.clientY
    };
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolveCoordsToNdx(mouse, this.zs.zoom);
    mouse.x = ndx.j * this.zs.zoom;
    mouse.y = ndx.i * this.zs.zoom;
    if (this.dm.isSelected('free', 'shapes') && this.shape_vtxs.length > 0) {
      this.shapeDragged(mouse, shift);
    } else if (this.selecting_connection) {
      this.connectionDragged(mouse, shift);
    }
  }
  /**
   * called when the operation input is selected and used to draw
    * @param event the event object
    */
  mouseSelectingDraft(event, id) {
    const shift = event.shiftKey;
    const mouse = {
      x: this.viewport.getTopLeft().x + event.clientX,
      y: this.viewport.getTopLeft().y + event.clientY
    };
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolveCoordsToNdx(mouse, this.zs.zoom);
    //use this to snap the mouse to the nearest coord
    mouse.x = ndx.j * this.zs.zoom;
    mouse.y = ndx.i * this.zs.zoom;
    if (_core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].isSameNdx(this.last, ndx)) return;
    // if(this.dm.getDesignMode("operation",'design_modes').selected){
    // }
    this.last = ndx;
  }
  /**
   * called form the subscription created on start, checks the index of the location and returns null if its the same
   * @param event the event object
   */
  onDrag(event) {
    const shift = event.shiftKey;
    const mouse = {
      x: this.viewport.getTopLeft().x + event.clientX,
      y: this.viewport.getTopLeft().y + event.clientY
    };
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolveCoordsToNdx(mouse, this.zs.zoom);
    //use this to snap the mouse to the nearest coord
    mouse.x = ndx.j * this.zs.zoom;
    mouse.y = ndx.i * this.zs.zoom;
    if (_core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].isSameNdx(this.last, ndx)) return;
    if (this.dm.getDesignMode("marquee", 'design_modes').selected) {
      this.drawSelection(ndx);
      const bounds = this.getSelectionBounds(this.selection.start, this.last);
      this.selection.setPositionAndSize(bounds);
    } else if (this.dm.getDesignMode("pan", 'design_modes').selected) {
      const diff = {
        x: this.last_point.x - event.clientX,
        y: this.last_point.y - event.clientY
      };
      this.handlePan(diff);
    }
    // }else if(this.dm.getDesignMode("draw", 'design_modes').selected){
    //   this.setCell(ndx);
    //   this.drawCell(ndx);
    // }else if(this.dm.getDesignMode("shape",'design_modes').selected){
    //   this.shapeDragged(mouse, shift);
    // }
    this.last = ndx;
    this.last_point = {
      x: event.clientX,
      y: event.clientY
    };
  }
  /**
   * Called when the mouse is up or leaves the boundary of the view
   * @param event
   * @returns
   */
  onEnd(event) {
    //if this.last is null, we have a mouseleave with no mousestart
    if (this.last === undefined) return;
    const mouse = {
      x: this.viewport.getTopLeft().x + event.clientX,
      y: this.viewport.getTopLeft().y + event.clientY
    };
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolveCoordsToNdx(mouse, this.zs.zoom);
    //use this to snap the mouse to the nearest coord
    mouse.x = ndx.j * this.zs.zoom;
    mouse.y = ndx.i * this.zs.zoom;
    this.removeSubscription();
    if (this.dm.getDesignMode("marquee", 'design_modes').selected) {
      if (this.selection.active) this.processSelection();
      this.closeSnackBar();
      this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.changeDesignmode('move');
      this.unfreezePaletteObjects();
    } else if (this.dm.isSelected('pan', 'design_modes')) {
      const div = document.getElementById('scrollable-container');
      this.viewport.set(div.offsetParent.scrollLeft, div.offsetParent.scrollTop, div.offsetParent.clientWidth, div.offsetParent.clientHeight);
    }
    // }else if(this.dm.isSelected("draw",'design_modes')){
    //   this.processDrawingEnd().then(el => {
    //     this.closeSnackBar();
    //     this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    //     this.changeDesignmode('move');
    //     this.scratch_pad = undefined;
    //   }).catch(console.error);
    // }else if(this.dm.isSelected("shape",'design_modes')){
    //   if(!this.dm.isSelected('free','shapes')){
    //     this.processShapeEnd().then(el => {
    //       this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    //       this.changeDesignmode('move');
    //    });
    //   }
    // }
    //unset vars that would have been created on press
    this.last = undefined;
    this.last_point = undefined;
    this.selection.active = false;
    this.canvas_zndx = -1;
  }
  /**
   * Called when a selection operation ends. Checks to see if this selection intersects with any subdrafts and
   * merges and or splits as required.
   */
  processSelection() {
    this.closeSnackBar();
    //create the selection as subdraft
    const bounds = this.getSelectionBounds(this.selection.start, this.last);
    this.createSubDraft((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.initDraftWithParams)({
      wefts: bounds.height / this.zs.zoom,
      warps: bounds.width / this.zs.zoom
    }), -1).then(sc => {
      sc.setPosition(bounds.topleft);
      //const isect:Array<SubdraftComponent> = this.getIntersectingSubdrafts(sc);
      const isect = [];
      if (isect.length === 0) {
        this.addTimelineState();
        return;
      }
      //get a draft that reflects only the poitns in the selection view
      // const new_draft: Draft = this.getCombinedDraft(bounds, sc, isect);
      // this.tree.setDraftOnly(sc.id, new_draft)
      // isect.forEach(el => {
      //   const ibound = utilInstance.getIntersectionBounds(sc, el);
      //   if(el.isSameBoundsAs(ibound)){
      //      console.log("Component had same Bounds as Intersection, Consumed");
      //      this.removeSubdraft(el.id);
      //   }
      // });
    }).catch(console.error);
  }
  /**
   * this function will update any components that should move when the compoment passed by obj moves
   * moves all compoments returned from tree.getNodesToUpdate(). All changes to what updates should be
   * handled by getNodesToUpdateOnMove
   * @param obj
   */
  updateAttachedComponents(id, follow) {
    //start by moving the original object than ripple out;
    const moving = this.tree.getComponent(id);
    this.tree.getInputs(id).forEach(cxn => {
      const comp = this.tree.getComponent(cxn);
      comp.updateToPosition(id, this.zs.zoom);
    });
    this.tree.getOutputs(id).forEach(cxn => {
      const comp = this.tree.getComponent(cxn);
      comp.updateFromPosition(id, this.zs.zoom);
    });
    if (!follow) return;
    const outs = this.tree.getNonCxnOutputs(id);
    //if this an operation with one child, move the child. 
    if (this.tree.getType(moving.id) === "op") {
      outs.forEach((out, ndx) => {
        const out_comp = this.tree.getComponent(out);
        if (this.tree.getType(out_comp.id) === 'draft') out_comp.updatePositionFromParent(moving, ndx);
        this.updateAttachedComponents(out_comp.id, false);
      });
    }
    const ins = this.tree.getNonCxnInputs(id);
    //if this is a draft with a parent, move the parent as well 
    if (this.tree.getType(moving.id) === "draft" && !this.tree.isSibling(moving.id)) {
      ins.forEach(input => {
        const in_comp = this.tree.getComponent(input);
        in_comp.updatePositionFromChild(moving);
        this.updateAttachedComponents(in_comp.id, false);
      });
    }
  }
  /**
   * emitted from a subdraft when an internal action has changeded its value
   * checks for a child subdraft, recomputes, redraws.
   * @param obj with attribute id describing the subdraft that called this
   * @returns
   */
  onSubdraftAction(obj) {
    if (obj === null) return;
    const outputs = this.tree.getNonCxnOutputs(obj.id);
    const fns = outputs.map(out => this.performAndUpdateDownstream(out));
    Promise.all(fns).then(el => {
      this.addTimelineState();
      this.changeDesignmode('move');
    });
  }
  /**
   * emitted from an operatioin when its param has changed. This is automatically called on load
   * which is annoying because it recomputes everything!
   * checks for a child subdraft, recomputes, redraws.
   * @param obj with attribute id describing the operation that called this
   * @returns
   */
  operationParamChanged(obj) {
    var _this3 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (obj === null) return;
      return _this3.tree.sweepInlets(obj.id).then(viewRefs => {
        viewRefs.forEach(el => {
          _this3.removeFromViewContainer(el);
        });
        _this3.performAndUpdateDownstream(obj.id);
      }).then(el => {
        _this3.addTimelineState();
      }).catch(console.error);
    })();
  }
  paletteClicked() {}
  /**
   * called from an operation component when it is dragged
   * @param obj (id, point of toplleft)
   */
  operationMoved(obj) {
    if (obj === null) return;
    this.updateAttachedComponents(obj.id, true);
    this.moveAllSelections(obj.id);
  }
  /**
  * called from an operation component when it is done moving
  * this allows us to not write postioin continuously, but just once on end
  * @param obj (id, point of toplleft)
  */
  operationMoveEnded(obj) {
    if (obj === null) return;
    this.updateSelectionPositions(obj.id);
    this.addTimelineState();
  }
  updateSelectionPositions(moving_id) {
    const selections = this.multiselect.getSelections();
    selections.forEach(sel => {
      if (this.tree.getType(sel) != 'cxn' && sel !== moving_id) {
        const comp = this.tree.getComponent(sel);
        this.multiselect.setPosition(sel, comp.topleft);
      }
    });
  }
  /**
   * this is called when a multi-selected block of items is moved.
   * Sometimes its called if you paste one set of items to a new space, in which case the nodes do
   * not yet exist.
   * @param moving_id
   * @returns
   */
  moveAllSelections(moving_id) {
    const selections = this.multiselect.getSelections();
    if (selections.length == 0) return;
    const rel_pos = this.multiselect.getRelativePosition();
    const cur_pos = this.tree.getComponent(moving_id).topleft;
    const diff = {
      x: cur_pos.x - rel_pos.x,
      y: cur_pos.y - rel_pos.y
    };
    selections.forEach(sel => {
      if (this.tree.getNode(sel) == null) return;
      if (this.tree.getType(sel) == 'op' && sel !== moving_id) {
        const comp = this.tree.getComponent(sel);
        comp.topleft = this.multiselect.getNewPosition(sel, diff);
        this.updateAttachedComponents(sel, true);
      }
      if (this.tree.getType(sel) == 'draft' && sel !== moving_id) {
        const comp = this.tree.getComponent(sel);
        if (comp.parent_id == -1) comp.setPosition(this.multiselect.getNewPosition(sel, diff));
      }
    });
  }
  /**
   * called when subdraft component says its moving
   * @param obj the subdraft that called this
   * @returns
   */
  subdraftMoved(obj) {
    if (obj === null) return;
    //get the reference to the draft that's moving
    const moving = this.tree.getComponent(obj.id);
    if (moving === null) return;
    this.moveAllSelections(obj.id);
    // // this.updateSnackBar("Using Ink: "+moving.ink,null);
    this.updateAttachedComponents(moving.id, true);
    // const isect:Array<SubdraftComponent> = this.getIntersectingSubdrafts(moving);
    // const seed_drafts = isect.filter(el => !this.tree.hasParent(el.id)); //filter out drafts that were generated
    // if(seed_drafts.length === 0){
    //   if(this.tree.hasPreview()) this.removePreview();
    //   return;
    // } 
    // const bounds: Bounds = utilInstance.getCombinedBounds(moving, seed_drafts);
    // const temp: Draft = this.getCombinedDraft(bounds, moving, seed_drafts);
    // if(this.tree.hasPreview()) {
    //   this.tree.setPreviewDraft(temp).then(dn => {
    //     dn.component.bounds = bounds;
    //    (<SubdraftComponent> dn.component).setPosition(bounds.topleft)
    //   });
    // }else{
    //   this.createAndSetPreview(temp).then(dn => {
    //     dn.component.bounds = bounds;
    //     (<SubdraftComponent> dn.component).setPosition(bounds.topleft)
    //   }).catch(console.error);
    // } 
  }
  /**
   * checks if this subdraft has been dropped onto of another and merges them accordingly
   * @param obj
   * @returns
   */
  subdraftDropped(obj) {
    this.closeSnackBar();
    if (obj === null) return;
    this.updateSelectionPositions(obj.id);
    //creaet a subdraft of this intersection
    if (this.tree.hasPreview()) {
      const preview_node = this.tree.getPreview();
      const preview_draft = preview_node.draft;
      let to_right = preview_node.component.getTopleft();
      this.createSubDraft((0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.initDraftWithParams)({
        wefts: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.wefts)(preview_draft.drawdown),
        warps: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.warps)(preview_draft.drawdown)
      }), -1).then(component => {
        this.tree.setDraftPattern(component.id, preview_draft.drawdown);
        //this.redrawDirtyDrafts();
        // to_right.x += preview_node.component.bounds.width + this.zs.zoom *4;
        // component.setPosition(to_right);
        component.zndx = this.layers.createLayer();
        this.removePreview();
        const interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolvePointToAbsoluteNdx(component.topleft, this.zs.zoom);
        this.viewport.addObj(component.id, interlacement);
        this.addTimelineState();
        this.tree.unsetPreview();
      }).catch(console.error);
    } else {
      this.addTimelineState();
      this.tree.unsetPreview();
      //get the reference to the draft that's moving
      const moving = this.tree.getComponent(obj.id);
      const interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].resolvePointToAbsoluteNdx(moving.topleft, this.zs.zoom);
      this.viewport.updatePoint(moving.id, interlacement);
    }
  }
  /**
   * merges a collection of subdraft components into the primary component, deletes the merged components
   * @param primary the draft to merge into
   * @returns true or false to describe if a merge took place.
   */
  // mergeSubdrafts(primary: SubdraftComponent): boolean{
  //   const isect:Array<SubdraftComponent> = this.getIntersectingSubdrafts(primary);
  //     if(isect.length == 0){
  //       return false;
  //     }   
  //     const bounds: Bounds = utilInstance.getCombinedBounds(primary, isect);
  //     const temp: Draft = this.getCombinedDraft(bounds, primary, isect);
  //     this.tree.setDraftOnly(primary.id, temp);
  //     primary.setPosition(bounds.topleft);
  //     //primary.drawDraft();
  //     const interlacement = utilInstance.resolvePointToAbsoluteNdx(primary.bounds.topleft, this.zs.zoom);
  //     this.viewport.updatePoint(primary.id, interlacement);
  //   //remove the intersecting drafts from the view containier and from subrefts
  //   isect.forEach(element => {
  //     this.removeSubdraft(element.id);
  //   });
  //   return true;
  // }
  computeHeddleValue(p, main, isect) {
    const a = main.resolveToValue(p);
    //this may return an empty array, because the intersection might not have the point
    const b_array = isect.filter(el => el.hasPoint(p));
    //should never have more than one value in barray
    // if(b_array.length > 1) console.log("WARNING: Intersecting with Two Elements");
    const val = b_array.reduce((acc, arr) => arr.resolveToValue(p), null);
    return _core_model_util__WEBPACK_IMPORTED_MODULE_5__["default"].computeFilter(main.ink, a, val);
  }
  // getSubdraftsIntersectingSelection(selection: MarqueeComponent){
  //   //find intersections between main and the others
  //   const drafts: Array<SubdraftComponent> = this.tree.getDrafts();
  //   const isect:Array<SubdraftComponent> = drafts.filter(sr => (utilInstance.doOverlap(
  //     selection.bounds.topleft, 
  //     {x:  selection.bounds.topleft.x + selection.bounds.width, y: selection.bounds.topleft.y + selection.bounds.height}, 
  //     sr.getTopleft(), 
  //     {x: sr.getTopleft().x + sr.bounds.width, y: sr.getTopleft().y + sr.bounds.height}
  //     ) ? sr : null));
  //   return isect;
  // }
  /**
    * get any subdrafts that intersect a given screen position
    * @param p the x, y position of this cell
    * @returns
    */
  // getIntersectingSubdraftsForPoint(p: any){
  //   const primary_topleft = {x:  p.x, y: p.y };
  //   const primary_bottomright = {x:  p.x + this.zs.zoom, y: p.y + this.zs.zoom};
  //   const isect:Array<SubdraftComponent> = [];
  //   const drafts: Array<SubdraftComponent> = this.tree.getDrafts();
  //   drafts.forEach(sr => {
  //     let sr_bottomright = {x: sr.getTopleft().x + sr.bounds.width, y: sr.getTopleft().y + sr.bounds.height};
  //     const b: boolean = utilInstance.doOverlap(primary_topleft, primary_bottomright, sr.getTopleft(), sr_bottomright);
  //     if(b) isect.push(sr);
  //    });
  //   return isect;
  // }
  /**
   * get any subdrafts that intersect primary based on checks on their boundaries
   * @param primary
   * @returns
   */
  // getIntersectingSubdrafts(primary: SubdraftComponent){
  //   const primary_draft = this.tree.getDraft(primary.id);
  //   const drafts:Array<DraftNode> =  this.tree.getDraftNodes(); 
  //   const to_check:Array<DraftNode> =  drafts.filter(sr => (sr.draft.id.toString() !== primary_draft.id.toString()));
  //   const primary_bottomright = {x:  primary.getTopleft().x + primary.bounds.width, y: primary.getTopleft().y + primary.bounds.height};
  //    const isect:Array<SubdraftComponent> = [];
  //    to_check
  //    .map(el => <SubdraftComponent> this.tree.getComponent(el.id))
  //    .forEach(sr => {
  //     let sr_bottomright = {x: sr.getTopleft().x + sr.bounds.width, y: sr.getTopleft().y + sr.bounds.height};
  //     const b: boolean = utilInstance.doOverlap(primary.getTopleft(), primary_bottomright, sr.getTopleft(), sr_bottomright);
  //     if(b) isect.push(sr);
  //    });
  //   return isect;
  // }
  getSelectionBounds(c1, c2) {
    let bottomright = {
      x: 0,
      y: 0
    };
    let bounds = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 0,
      height: 0
    };
    if (c1.i < c2.i) {
      bounds.topleft.y = c1.i * this.zs.zoom;
      bottomright.y = c2.i * this.zs.zoom;
    } else {
      bounds.topleft.y = c2.i * this.zs.zoom;
      bottomright.y = c1.i * this.zs.zoom;
    }
    if (c1.j < c2.j) {
      bounds.topleft.x = c1.j * this.zs.zoom;
      bottomright.x = c2.j * this.zs.zoom;
    } else {
      bounds.topleft.x = c1.j * this.zs.zoom;
      bottomright.x = c2.j * this.zs.zoom;
    }
    bounds.width = bottomright.x - bounds.topleft.x;
    bounds.height = bottomright.y - bounds.topleft.y;
    return bounds;
  }
  /**
  * creates a draft in size bounds that contains all of the computed points of its intersections
  * @param bounds the boundary of all the intersections
  * @param primary the primary draft that we are checking for intersections
  * @param isect an Array of the intersecting components
  * @returns
  */
  getCombinedDraft(bounds, primary, isect) {
    const primary_draft = this.tree.getDraft(primary.id);
    const temp = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.initDraftWithParams)({
      id: primary_draft.id,
      gen_name: (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.getDraftName)(primary_draft),
      warps: Math.floor(bounds.width / this.zs.zoom),
      wefts: Math.floor(bounds.height / this.zs.zoom)
    });
    for (var i = 0; i < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.wefts)(temp.drawdown); i++) {
      const top = bounds.topleft.y + i * this.zs.zoom;
      for (var j = 0; j < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_4__.warps)(temp.drawdown); j++) {
        const left = bounds.topleft.x + j * this.zs.zoom;
        const p = {
          x: left,
          y: top
        };
        const val = this.computeHeddleValue(p, primary, isect);
        if (val != null) temp.drawdown[i][j] = (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(temp.drawdown[i][j], val);else (0,_core_model_cell__WEBPACK_IMPORTED_MODULE_2__.setCellValue)(temp.drawdown[i][j], null);
      }
    }
    return temp;
  }
  /**
   * TODO: Update this to get bounds and print all items, not just what's visible
   * @param obj
   * @returns
   */
  getPrintableCanvas(obj) {
    this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    const drafts = this.tree.getDrafts();
    drafts.forEach(sd => {
      sd.drawForPrint(this.canvas, this.cx, this.zs.zoom);
    });
    const ops = this.tree.getOperations();
    ops.forEach(op => {
      op.drawForPrint(this.canvas, this.cx, this.zs.zoom);
    });
    const cxns = this.tree.getConnections();
    cxns.forEach(cxn => {
      cxn.drawForPrint(this.canvas, this.cx, this.zs.zoom);
    });
    // this.note_components.forEach(note =>{
    //   note.drawForPrint(this.canvas, this.cx, this.scale);
    // })
    return this.canvas;
  }
  clearCanvas() {
    this.cx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }
  // redrawOpenModals(){
  //   const comps = this.tree.getDrafts();
  //   comps.forEach(sd => {
  //     if(sd.modal !== undefined && sd.modal.componentInstance !== null){
  //       sd.modal.componentInstance.redraw();
  //     }
  //   })
  // }
  redrawAllSubdrafts() {
    const comps = this.tree.getDrafts();
    comps.forEach(sd => {
      sd.redrawExistingDraft();
    });
  }
}
PaletteComponent.ɵfac = function PaletteComponent_Factory(t) {
  return new (t || PaletteComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_core_provider_designmodes_service__WEBPACK_IMPORTED_MODULE_6__.DesignmodesService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_9__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_mixer_provider_ink_service__WEBPACK_IMPORTED_MODULE_10__.InkService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_mixer_provider_layers_service__WEBPACK_IMPORTED_MODULE_11__.LayersService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_22__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_15__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_24__.MatSnackBar), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_13__.ViewportService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_core_provider_notes_service__WEBPACK_IMPORTED_MODULE_7__.NotesService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_core_provider_state_service__WEBPACK_IMPORTED_MODULE_8__.StateService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_provider_zoom_service__WEBPACK_IMPORTED_MODULE_14__.ZoomService), _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdirectiveInject"](_provider_multiselect_service__WEBPACK_IMPORTED_MODULE_12__.MultiselectService));
};
PaletteComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵdefineComponent"]({
  type: PaletteComponent,
  selectors: [["app-palette"]],
  viewQuery: function PaletteComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵviewQuery"](_c0, 7, _angular_core__WEBPACK_IMPORTED_MODULE_22__.ViewContainerRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵloadQuery"]()) && (ctx.vc = _t.first);
    }
  },
  hostBindings: function PaletteComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵlistener"]("resize", function PaletteComponent_resize_HostBindingHandler($event) {
        return ctx.onResize($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵresolveWindow"])("mousedown", function PaletteComponent_mousedown_HostBindingHandler($event) {
        return ctx.onStart($event);
      })("mousemove", function PaletteComponent_mousemove_HostBindingHandler($event) {
        return ctx.onMove($event);
      })("mouseleave", function PaletteComponent_mouseleave_HostBindingHandler($event) {
        return ctx.onEnd($event);
      })("mouseup", function PaletteComponent_mouseup_HostBindingHandler($event) {
        return ctx.onEnd($event);
      });
    }
  },
  outputs: {
    onDesignModeChange: "onDesignModeChange",
    onRevealDraftDetails: "onRevealDraftDetails"
  },
  decls: 5,
  vars: 14,
  consts: [["vc", ""], ["id", "palette", 1, "palette-container"], ["id", "scratch_svg"], ["id", "scratch"]],
  template: function PaletteComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵelementContainerStart"](0, null, 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵelement"](2, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵnamespaceSVG"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵelement"](3, "svg", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵnamespaceHTML"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵelement"](4, "canvas", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵelementContainerEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵstyleProp"]("width", ctx.viewport.getAbsoluteWidth(), "px")("height", ctx.viewport.getAbsoluteHeight(), "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵclassProp"]("no-pointer", !ctx.pointer_events);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵstyleProp"]("z-index", ctx.canvas_zndx)("left", ctx.viewport.vp.topleft.x, "px")("top", ctx.viewport.vp.topleft.y, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_22__["ɵɵclassProp"]("no-pointer", !ctx.pointer_events);
    }
  },
  styles: ["div[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  background: #cccccc;\n  z-index: -1;\n  background-size: 5px 5px;\n  background-image: linear-gradient(to right, #c2c1c1 0.5px, transparent 0.5px), linear-gradient(to bottom, #c2c1c1 0.5px, transparent 0.5px);\n}\n\nsvg[_ngcontent-%COMP%] {\n  position: absolute;\n}\n\ncanvas[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  overflow: scroll;\n}\n\n.no-pointer[_ngcontent-%COMP%] {\n  pointer-events: none;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/palette.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9wYWxldHRlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUdBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLHdCQUFBO0VBQ0EsMklBQ0E7QUFGSjs7QUFRQTtFQUNJLGtCQUFBO0FBTEo7O0FBU0E7RUFDSSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsZ0JBQUE7QUFOSjs7QUFTQTtFQUNJLG9CQUFBO0FBTkoiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZDogI2NjY2NjYztcbiAgei1pbmRleDogLTE7XG4gIGJhY2tncm91bmQtc2l6ZTogNXB4IDVweDtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjYzJjMWMxIDAuNXB4LCB0cmFuc3BhcmVudCAwLjVweCksIGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICNjMmMxYzEgMC41cHgsIHRyYW5zcGFyZW50IDAuNXB4KTtcbn1cblxuc3ZnIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuXG5jYW52YXMge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIG92ZXJmbG93OiBzY3JvbGw7XG59XG5cbi5uby1wb2ludGVyIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */"]
});

/***/ }),

/***/ 11307:
/*!**************************************************************!*\
  !*** ./src/app/mixer/palette/snackbar/snackbar.component.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SnackbarComponent": () => (/* binding */ SnackbarComponent)
/* harmony export */ });
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/snack-bar */ 10930);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 94666);



function SnackbarComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.message);
  }
}
class SnackbarComponent {
  constructor(data) {
    this.data = data;
    this.bounds = data.bounds;
    this.message = data.message;
    this.scale = data.scale;
  }
  ngOnInit() {}
}
SnackbarComponent.ɵfac = function SnackbarComponent_Factory(t) {
  return new (t || SnackbarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_1__.MAT_SNACK_BAR_DATA));
};
SnackbarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SnackbarComponent,
  selectors: [["app-snackbar"]],
  decls: 2,
  vars: 1,
  consts: [[1, "snackbar"], [4, "ngIf"], [1, "pink"]],
  template: function SnackbarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SnackbarComponent_ng_container_1_Template, 3, 1, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.message !== null);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgIf],
  styles: [".snackbar[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  pointer-events: none;\n  width: 100%;\n}\n\n.pink[_ngcontent-%COMP%] {\n  color: #00d1b2;\n  font-weight: bold;\n  padding-left: 1em;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/snackbar/snackbar.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9zbmFja2Jhci9zbmFja2Jhci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDZCQUFBO0VBQ0Esb0JBQUE7RUFDQSxXQUFBO0FBQ0o7O0FBR0E7RUFDSSxjQUFBO0VBQ0EsaUJBQUE7RUFDQSxpQkFBQTtBQUFKIiwic291cmNlc0NvbnRlbnQiOlsiLnNuYWNrYmFyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnBpbmsge1xuICBjb2xvcjogIzAwZDFiMjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHBhZGRpbmctbGVmdDogMWVtO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 49258:
/*!**************************************************************!*\
  !*** ./src/app/mixer/palette/subdraft/subdraft.component.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubdraftComponent": () => (/* binding */ SubdraftComponent)
/* harmony export */ });
/* harmony import */ var _Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/provider/systems.service */ 14711);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/model/datatypes */ 86789);
/* harmony import */ var _core_model_drafts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/model/drafts */ 1435);
/* harmony import */ var _core_model_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/model/util */ 75973);
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/provider/file.service */ 96374);
/* harmony import */ var _core_provider_materials_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/provider/materials.service */ 2940);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/provider/tree.service */ 6177);
/* harmony import */ var _core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../core/provider/workspace.service */ 80828);
/* harmony import */ var _provider_ink_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../provider/ink.service */ 37045);
/* harmony import */ var _provider_layers_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../provider/layers.service */ 53452);
/* harmony import */ var _provider_multiselect_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../provider/multiselect.service */ 16379);
/* harmony import */ var _provider_viewport_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../provider/viewport.service */ 2320);
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/dialog */ 31484);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/button */ 84522);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/input */ 68562);
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/material/menu */ 88589);
/* harmony import */ var _angular_material_slider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/material/slider */ 5682);
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/tooltip */ 6896);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 47727);


































const _c0 = ["bitmapImage"];
function SubdraftComponent_div_0_button_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "button", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_button_9_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r7.showhide());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassProp"]("fa-eye-slash", ctx_r2.draft_visible)("fa-eye", !ctx_r2.draft_visible);
  }
}
function SubdraftComponent_div_0_button_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "button", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_button_13_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r9.designActionChange("delete"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("name", ctx_r3.delete);
  }
}
function SubdraftComponent_div_0_button_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "button", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_button_17_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r12);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r11.designActionChange("delete"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("name", ctx_r4.delete);
  }
}
function SubdraftComponent_div_0_div_22_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](0, "div");
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("warp-system-col origin", ctx_r5.ws.selected_origin_option, "");
  }
}
function SubdraftComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "div", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("mousedown", function SubdraftComponent_div_0_Template_div_mousedown_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r15.mousedown($event));
    })("click", function SubdraftComponent_div_0_Template_div_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r17.toggleMultiSelection($event));
    })("cdkDragMoved", function SubdraftComponent_div_0_Template_div_cdkDragMoved_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r18.dragMove($event));
    })("cdkDragEnded", function SubdraftComponent_div_0_Template_div_cdkDragEnded_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r19.dragEnd($event));
    })("cdkDragStarted", function SubdraftComponent_div_0_Template_div_cdkDragStarted_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r20.dragStart($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](1, "div", 2)(2, "div", 3)(3, "div", 4)(4, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r21.finetune());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](5, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r22.toggleDraftRendering());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](6, "button", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](7, "mat-menu", null, 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](9, SubdraftComponent_div_0_button_9_Template, 1, 4, "button", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](10, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r23.designActionChange("duplicate"));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](11, "button", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_11_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r24.saveAsBmp());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](12, "button", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_12_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r25.saveAsPrint());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](13, SubdraftComponent_div_0_button_13_Template, 1, 1, "button", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](14, "div", 14)(15, "mat-slider", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("ngModelChange", function SubdraftComponent_div_0_Template_mat_slider_ngModelChange_15_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r26.draft_cell_size = $event);
    })("valueChange", function SubdraftComponent_div_0_Template_mat_slider_valueChange_15_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r27.zoomChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](16, "input", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("ngModelChange", function SubdraftComponent_div_0_Template_input_ngModelChange_16_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r28.draft_cell_size = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](17, SubdraftComponent_div_0_button_17_Template, 1, 1, "button", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](18, "div")(19, "div", 17)(20, "div")(21, "div", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](22, SubdraftComponent_div_0_div_22_Template, 1, 3, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](23, "canvas", 17)(24, "canvas", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](25, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](26, "canvas", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](27, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](28, "canvas", 17)(29, "canvas", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](30, "div", 22)(31, "button", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("click", function SubdraftComponent_div_0_Template_button_click_31_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r29.connectionStarted(ctx_r29.id));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](32, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](33, "div", 25)(34, "div", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtext"](35);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](36, "div")(37, "input", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("ngModelChange", function SubdraftComponent_div_0_Template_input_ngModelChange_37_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r30.ud_name = $event);
    })("focusout", function SubdraftComponent_div_0_Template_input_focusout_37_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r31.nameFocusOut($event));
    })("change", function SubdraftComponent_div_0_Template_input_change_37_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵrestoreView"](_r16);
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵresetView"](ctx_r32.updateName());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](38, "canvas", 28, 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵreference"](8);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("subdraft-parent-container selectable-", !ctx_r0.disable_drag, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵstyleProp"]("z-index", ctx_r0.zndx);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassProp"]("is_preview", ctx_r0.is_preview)("drawing", ctx_r0.disable_drag && !ctx_r0.is_preview)("no-pointer", ctx_r0.disable_drag);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "con-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("cdkDragDisabled", ctx_r0.disable_drag)("cdkDragFreeDragPosition", ctx_r0.topleft);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "scale-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassProp"]("fa-chess-board", ctx_r0.use_colors)("fa-rug", !ctx_r0.use_colors);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("matMenuTriggerFor", _r1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngIf", ctx_r0.parent_id !== -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵstyleProp"]("color", ctx_r0.button_color);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("name", ctx_r0.duplicate);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngIf", ctx_r0.parent_id === -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngModel", ctx_r0.draft_cell_size);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngModel", ctx_r0.draft_cell_size);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngIf", ctx_r0.parent_id === -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("subdraft-contents origin", ctx_r0.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassProp"]("hidden", !ctx_r0.draft_visible);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("local_zoom origin", ctx_r0.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "local-zoom-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("warp-systems-container origin", ctx_r0.ws.selected_origin_option, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("warp-systems-text origin", ctx_r0.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngForOf", ctx_r0.colShuttleMapping);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "warp-systems-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "warp-materials-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("drawdown-container origin", ctx_r0.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate"]("id", ctx_r0.id);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassMapInterpolate1"]("weft-systems-container origin", ctx_r0.ws.selected_origin_option, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "weft-materials-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "weft-systems-", ctx_r0.id, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵclassProp"]("active", ctx_r0.selecting_connection);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpropertyInterpolate1"]("id", "", ctx_r0.id, "-out");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtextInterpolate2"]("", ctx_r0.warps(), " x ", ctx_r0.wefts(), ",\u00A0");
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngModel", ctx_r0.ud_name)("placeholder", ctx_r0.tree.getDraft(ctx_r0.id).gen_name);
  }
}
class SubdraftComponent {
  constructor(inks, layer, ms, ss, tree, fs, viewport, dialog, ws, multiselect) {
    this.inks = inks;
    this.layer = layer;
    this.ms = ms;
    this.ss = ss;
    this.tree = tree;
    this.fs = fs;
    this.viewport = viewport;
    this.dialog = dialog;
    this.ws = ws;
    this.multiselect = multiselect;
    this._scale = 5;
    this._draft = null;
    this._topleft = {
      x: 0,
      y: 0
    };
    this.onSubdraftMove = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onSubdraftDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onSubdraftStart = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onDeleteCalled = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onDuplicateCalled = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onConnectionMade = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onConnectionRemoved = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onDesignAction = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onConnectionStarted = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onSubdraftViewChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.createNewSubdraftFromEdits = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onNameChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.onShowDetails = new _angular_core__WEBPACK_IMPORTED_MODULE_13__.EventEmitter();
    this.parent_id = -1;
    /**
    * flag to tell if this is in a mode where it is looking foor a connectino
    */
    this.selecting_connection = false;
    // private _scale: number; 
    this.ink = 'neq'; //can be or, and, neq, not, splice
    this.counter = 0; // keeps track of how frequently to call the move functions
    this.counter_limit = 50; //this sets the threshold for move calls, lower number == more calls
    this.last_ndx = {
      i: -1,
      j: -1,
      si: -1
    }; //used to check if we should recalculate a move operation
    this.moving = false;
    this.disable_drag = false;
    this.is_preview = false;
    this.zndx = 0;
    this.has_active_connection = false;
    this.set_connectable = false;
    this.draft_visible = true;
    this.use_colors = false;
    this.draft_zoom = 1;
    this.draft_cell_size = 8;
    this.zndx = layer.createLayer();
  }
  get scale() {
    return this._scale;
  }
  set scale(value) {
    this._scale = value;
    this.rescale().catch(e => console.log(e));
  }
  get draft() {
    return this._draft;
  }
  set draft(value) {
    this._draft = value;
    this.drawDraft(value);
  }
  get topleft() {
    return this._topleft;
  }
  set topleft(value) {
    this.updateViewport(value);
    this._topleft = value;
    ;
  }
  ngOnInit() {
    if (!this.is_preview) this.parent_id = this.tree.getSubdraftParent(this.id);
    const tl = this.viewport.getTopRight();
    const tl_offset = {
      x: tl.x - 250,
      y: tl.y + 200
    };
    if (this.topleft.x === 0 && this.topleft.y === 0) this.setPosition(tl_offset);
    this.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].resolvePointToAbsoluteNdx(this.topleft, this.scale);
    if (!this.is_preview) this.viewport.addObj(this.id, this.interlacement);
    const draft = this.tree.getDraft(this.id);
    this.loom_settings = this.tree.getLoomSettings(this.id);
    this.ud_name = draft.ud_name;
    const dn = this.tree.getNode(this.id);
    this.use_colors = dn.render_colors;
    this.draft_cell_size = this.calculateDefaultCellSize(this.draft);
    if (this.tree.isSibling(this.id)) this.disableDrag();
  }
  ngAfterViewInit() {
    this.draft_canvas = document.getElementById(this.id.toString());
    this.draft_cx = this.draft_canvas.getContext("2d");
    this.warp_data_canvas = document.getElementById('warp-data-' + this.id.toString());
    this.warp_data_cx = this.draft_canvas.getContext("2d");
    /**
     * when loading a draft from a file, the connections won't match if the connection is drawn before this
     * function executes. For this reason, I made these sequential function and then they manually call updates
     */
    this.drawDraft(this.draft).then(out => {
      return this.rescale();
    }).then(after => {
      this.updateViewport(this.topleft);
      //this must be called to trigger redrawing on any outgoing connections
      this.onSubdraftMove.emit({
        id: this.id,
        point: this.topleft
      });
    });
  }
  nameFocusOut() {
    this.onNameChange.emit(this.id);
    const scale = document.getElementById('scale-' + this.id);
  }
  /**
   * this is called when the global workspace is rescaled.
   * @returns
   */
  rescale() {
    if (this.draft === null) {
      return Promise.reject("draft is null on draft rescale");
    }
    const zoom_factor = this.scale / this.default_cell;
    //redraw at scale
    const container = document.getElementById('scale-' + this.id.toString());
    if (container === null) return Promise.reject("no container initialized on draft rescale");
    container.style.transformOrigin = 'top left';
    container.style.transform = 'scale(' + zoom_factor + ')';
    this.topleft = {
      x: this.interlacement.j * this.scale,
      y: this.interlacement.i * this.scale
    };
    return Promise.resolve(true);
  }
  /**called when bounds change, updates the global view port */
  updateViewport(topleft) {
    this.interlacement = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].resolvePointToAbsoluteNdx(topleft, this.scale);
    this.viewport.updatePoint(this.id, this.interlacement);
  }
  zoomChange(event) {
    this.draft_cell_size = event;
    this.drawDraft(this.draft);
    this.onSubdraftMove.emit({
      id: this.id,
      point: this.topleft
    });
    // console.log(this.draft_zoom, event);
    // const zoom_container = document.getElementById('local-zoom-'+this.id);
    // zoom_container.style.transform = 'scale('+this.draft_zoom+')';
    // zoom_container.style.width = (warps(this.draft.drawdown) * cell_size * event)+"px";
    // zoom_container.style.height = (wefts(this.draft.drawdown) * cell_size * event)+"px";
    // console.log(wefts(this.draft.drawdown), cell_size, event, this.scale);
  }
  /**
   * updates this components position based on the input component's position
   * */
  updatePositionFromParent(parent, ndx) {
    if (this.parent_id !== parent.id) {
      console.error("attempitng to update subdraft position from non-parent operation", this.parent_id, parent.id);
      return;
    }
    let container = document.getElementById("scale-" + this.parent_id);
    let outs = this.tree.getNonCxnOutputs(this.parent_id);
    if (outs.length == 1) {
      if (container !== null) this.setPosition({
        x: parent.topleft.x,
        y: parent.topleft.y + container.offsetHeight * this.scale / this.default_cell
      });else {
        console.error("no element named scale-" + this.parent_id + "found");
      }
    } else {
      let offlet_left = parent.topleft.x;
      let total_width = 0;
      outs.forEach((out, i) => {
        let child_container = document.getElementById("scale-" + out);
        if (i < ndx) offlet_left += child_container.offsetWidth * this.scale / this.default_cell + 10;
        total_width += child_container.offsetWidth * this.scale / this.default_cell + 10;
      });
      let rel_size = total_width - container.offsetWidth * this.scale / this.default_cell;
      let margin = rel_size / 2;
      offlet_left -= margin;
      outs.forEach((out, i) => {
        if (i == ndx) {
          if (container !== null) this.setPosition({
            x: offlet_left,
            y: parent.topleft.y + 20 + container.offsetHeight * this.scale / this.default_cell
          });else {
            console.error("no element named scale-" + this.parent_id + "found");
          }
        }
      });
    }
  }
  // updateVisibility(){
  //   const cxns = this.tree.getOutputs(this.id);
  //   if(cxns.length == 0){
  //     this.render_materials = true;
  //     this.render_drawdown = true;
  //   }
  //   /**this subdraft might have multiple outputs so you want to show the relevant information for each.  */
  //   cxns.forEach(cxn => {
  //     const op_id = this.tree.getOutputs(cxn);
  //     if(op_id.length > 0 && this.tree.getType(op_id[0]) == 'op'){
  //       const op_data = this.tree.getOpNode(op_id[0]);
  //       const inlet = this.tree.getInletOfCxn(op_data.id, cxn);
  //       const op = this.ops.getOp(op_data.name);
  //       if(op.inlets[inlet].uses == 'draft'){
  //         this.render_drawdown = true;
  //       }else{
  //         this.render_materials = true;
  //       }
  //     }
  //   })
  // }
  updateName() {
    const draft = this.tree.getDraft(this.id);
    draft.ud_name = this.ud_name;
  }
  updateSize(parent) {
    const draft = this.tree.getDraft(this.id);
    if (this.parent_id !== parent.id) {
      console.error("attempitng to update subdraft position from non-parent operation", this.parent_id, parent.id);
      console.log("attempitng to update subdraft position from non-parent operation", this.parent_id, parent.id);
      return;
    }
  }
  toggleMultiSelection(e) {
    if (e.shiftKey) {
      this.multiselect.toggleSelection(this.id, this.topleft);
    } else {
      this.multiselect.clearSelections();
    }
  }
  rescaleForBitmap() {
    if (this.draft_canvas === undefined) return;
    const draft = this.tree.getDraft(this.id);
    this.draft_canvas.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown);
    this.draft_canvas.height = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown);
    for (let i = 0; i < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown); i++) {
      for (let j = 0; j < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown); j++) {
        this.drawCell(draft, 1, i, j, false, true);
      }
    }
  }
  connectionEnded() {
    this.selecting_connection = false;
    this.enableDrag();
  }
  connectionStarted(event) {
    if (this.selecting_connection == true) {
      this.selecting_connection = false;
      this.onConnectionStarted.emit({
        type: 'stop',
        event: event,
        id: this.id
      });
    } else {
      this.selecting_connection = true;
      this.disableDrag();
      this.onConnectionStarted.emit({
        type: 'start',
        event: event,
        id: this.id
      });
    }
  }
  /**
   * called on create to position the element on screen
   * @param pos
   */
  setPosition(pos) {
    this.enableDrag();
    this.topleft = pos;
    this.updateViewport(this.topleft);
  }
  inkActionChange(name) {
    this.ink = name;
    this.inks.select(name);
    //this.drawDraft();
  }
  /**
   * gets the next z-ndx to place this in front
   */
  setAsPreview() {
    this.is_preview = true;
    this.zndx = this.layer.createLayer();
  }
  /**
   * does this subdraft exist at this point?
   * @param p the absolute position of the coordinate (based on the screen)
   * @returns true/false for yes or no
   */
  hasPoint(p) {
    const size = document.getElementById('scale' + this.id);
    const endPosition = {
      x: this.topleft.x + size.offsetWidth,
      y: this.topleft.y + size.offsetHeight
    };
    if (p.x < this.topleft.x || p.x > endPosition.x) return false;
    if (p.y < this.topleft.y || p.y > endPosition.y) return false;
    return true;
  }
  /**
   * Takes row/column position in this subdraft and translates it to an absolution position
   * @param ndx the index
   * @returns the absolute position as nxy
   */
  resolveNdxToPoint(ndx) {
    let y = this.topleft.y + ndx.i * this.scale;
    let x = this.topleft.x + ndx.j * this.scale;
    return {
      x: x,
      y: y
    };
  }
  /**
   * Takes an absolute coordinate and translates it to the row/column position Relative to this subdraft
   * @param p the screen coordinate
   * @returns the row and column within the draft (i = row, j=col), returns -1 if out of bounds
   */
  resolvePointToNdx(p) {
    const draft = this.tree.getDraft(this.id);
    let i = Math.floor((p.y - this.topleft.y) / this.scale);
    let j = Math.floor((p.x - this.topleft.x) / this.scale);
    if (i < 0 || i >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown)) i = -1;
    if (j < 0 || j >= (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown)) j = -1;
    return {
      i: i,
      j: j,
      si: i
    };
  }
  /**
   * takes an absolute reference and returns the value at that cell boolean or null if its unset
   * @param p a point of the absolute poistion of coordinate in question
   * @returns true/false/or null representing the eddle value at this point
   */
  resolveToValue(p) {
    const coords = this.resolvePointToNdx(p);
    if (coords.i < 0 || coords.j < 0) return null; //this out of range
    const draft = this.tree.getDraft(this.id);
    if (!draft.drawdown[coords.i][coords.j].is_set) return null;
    return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.isUp)(draft.drawdown, coords.i, coords.j);
  }
  // /**
  //  * sets a new draft
  //  * @param temp the draft to set this component to
  //  */
  // setNewDraft(temp: Draft) {
  //   this.bounds.width = temp.warps * this.scale;
  //   this.bounds.height = temp.wefts * this.scale;
  //   this.draft.reload(temp);
  //   this.drawDraft();
  // }
  // setComponentPosition(point: Point){
  //   this.bounds.topleft = point;
  // }
  // setComponentBounds(bounds: Bounds){
  //   this.setPosition(bounds.topleft);
  //   this.bounds = bounds;
  // }
  /**
   * manually sets the component size. While such an operation should be handled on init but there is a bug where this value is checked before the
   * component runds its init sequence. Manually adding the data makes it possible for check for intersections on selection and drawing end.
   * @param width
   * @param height
   */
  // setComponentSize(width: number, height: number){
  //   this.bounds.width = width;
  //   this.bounds.height = height;
  // }
  drawCell(draft, cell_size, i, j, usecolor, forprint) {
    var _this = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let is_up = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.isUp)(draft.drawdown, i, j);
      let is_set = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.isSet)(draft.drawdown, i, j);
      let color = "#ffffff";
      if (is_set) {
        if (_this.ink === 'unset' && is_up) {
          _this.draft_cx.fillStyle = "#999999";
        } else {
          if (is_up) {
            color = usecolor ? _this.ms.getColor(draft.colShuttleMapping[j]) : '#000000';
          } else {
            color = usecolor ? _this.ms.getColor(draft.rowShuttleMapping[i]) : '#ffffff';
          }
          _this.draft_cx.fillStyle = color;
        }
      } else {
        if (forprint) _this.draft_cx.fillStyle = '#ffffff';else _this.draft_cx.fillStyle = '#ADD8E6';
        // this.cx.fillStyle =  '#ff0000';
      }

      _this.draft_cx.strokeStyle = "#666666";
      _this.draft_cx.lineWidth = 1;
      if (!forprint && cell_size > 1 && usecolor === false) _this.draft_cx.strokeRect(j * cell_size, i * cell_size, cell_size, cell_size);
      _this.draft_cx.fillRect(j * cell_size, i * cell_size, cell_size, cell_size);
    })();
  }
  redrawExistingDraft() {
    this.drawDraft(this.draft);
  }
  drawWeftData(draft) {
    let cell_size = this.calculateCellSize(draft);
    draft = this.tree.getDraft(this.id);
    const weft_systems_canvas = document.getElementById('weft-systems-' + this.id.toString());
    const weft_mats_canvas = document.getElementById('weft-materials-' + this.id.toString());
    if (weft_systems_canvas === undefined) return;
    const weft_systems_cx = weft_systems_canvas.getContext("2d");
    const weft_mats_cx = weft_mats_canvas.getContext("2d");
    weft_systems_canvas.height = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) * cell_size;
    weft_systems_canvas.width = cell_size;
    weft_mats_canvas.height = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) * cell_size;
    weft_mats_canvas.width = cell_size;
    for (let j = 0; j < draft.rowShuttleMapping.length; j++) {
      let color = this.ms.getColor(draft.rowShuttleMapping[j]);
      let system = this.ss.getWeftSystemCode(draft.rowSystemMapping[j]);
      weft_mats_cx.fillStyle = color;
      weft_mats_cx.fillRect(1, j * cell_size + 1, cell_size - 2, cell_size - 2);
      weft_systems_cx.fillStyle = "#666666";
      weft_systems_cx.fillText(system, 0, (j + 1) * cell_size - 1);
    }
  }
  drawWarpData(draft) {
    draft = this.tree.getDraft(this.id);
    let cell_size = this.calculateCellSize(draft);
    const warp_systems_canvas = document.getElementById('warp-systems-' + this.id.toString());
    const warp_mats_canvas = document.getElementById('warp-materials-' + this.id.toString());
    if (this.warp_data_canvas === undefined) return;
    const warp_mats_cx = warp_mats_canvas.getContext("2d");
    const warp_systems_cx = warp_systems_canvas.getContext("2d");
    warp_mats_canvas.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) * cell_size;
    warp_mats_canvas.height = cell_size;
    warp_systems_canvas.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) * cell_size;
    warp_systems_canvas.height = cell_size;
    for (let j = 0; j < draft.colShuttleMapping.length; j++) {
      let color = this.ms.getColor(draft.colShuttleMapping[j]);
      let system = this.ss.getWarpSystemCode(draft.colSystemMapping[j]);
      warp_mats_cx.fillStyle = color;
      warp_mats_cx.fillRect(j * cell_size + 1, 1, cell_size - 2, cell_size - 2);
      warp_systems_cx.fillStyle = "#666666";
      warp_systems_cx.fillText(system, j * cell_size + 2, cell_size);
    }
  }
  calculateDefaultCellSize(draft) {
    const num_cells = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) * (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown);
    if (num_cells < 1000) return 10;
    if (num_cells < 10000) return 8;
    if (num_cells < 100000) return 5;
    if (num_cells < 1000000) return 2;
    return 1;
  }
  /**
   * the canvas object is limited in how many pixels it can render. Adjust the draft cell size based on the number of cells in the draft
   * @param draft
   */
  calculateCellSize(draft) {
    return this.draft_cell_size;
  }
  /**
   * draw whetever is stored in the draft object to the screen
   * @returns
   */
  drawDraft(draft) {
    var _this2 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let cell_size = _this2.calculateCellSize(draft);
      draft = _this2.tree.getDraft(_this2.id);
      const use_colors = _this2.tree.getNode(_this2.id).render_colors;
      if (_this2.parent_id !== -1) {
        const container = document.getElementById('scale-' + _this2.parent_id);
        if (container === undefined || container === null) return;
        const w = container !== undefined && container !== null ? container.offsetWidth : 300;
        const thiscontainer = document.getElementById('scale-' + _this2.id);
        thiscontainer.style.minWidth = w + "px";
      }
      if (_this2.draft_canvas === undefined) return;
      _this2.draft_cx = _this2.draft_canvas.getContext("2d");
      if (draft === null) {
        _this2.draft_canvas.width = 0;
        _this2.draft_canvas.height = 0;
        _this2.tree.setDraftClean(_this2.id);
        return Promise.resolve("complete");
      } else {
        const fns = [_this2.drawWarpData(draft), _this2.drawWeftData(draft)];
        return Promise.all(fns).then(el => {
          _this2.draft_canvas.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown) * cell_size;
          _this2.draft_canvas.height = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown) * cell_size;
          for (let i = 0; i < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown); i++) {
            for (let j = 0; j < (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown); j++) {
              _this2.drawCell(draft, cell_size, i, j, use_colors, false);
            }
          }
          _this2.tree.setDraftClean(_this2.id);
          return Promise.resolve("complete");
        });
      }
    })();
  }
  /**
   * draw onto the supplied canvas, to be used when printing
   * @returns
   */
  drawForPrint(canvas, cx, scale) {
    // if(canvas === undefined) return;
    // const draft = this.tree.getDraft(this.id);
    // for (let i = 0; i < draft.wefts; i++) {
    //   for (let j = 0; j < draft.warps; j++) {
    //     let is_up = draft.isUp(i,j);
    //     let is_set = draft.isSet(i, j);
    //     if(is_set){
    //       if(this.ink === 'unset' && is_up){
    //         cx.fillStyle = "#999999"; 
    //       }else{
    //         cx.fillStyle = (is_up) ?  '#000000' :  '#ffffff';
    //       }
    //     } else{
    //       cx.fillStyle =  '#0000000d';
    //     }
    //     cx.fillRect(j*scale+this.bounds.topleft.x, i*scale+this.bounds.topleft.y, scale, scale);
    //   }
    // }
    // //draw the supplemental info like size
    // cx.fillStyle = "#666666";
    // cx.font = "20px Verdana";
    // let datastring: string =  draft.warps + " x " + draft.wefts;
    // cx.fillText(datastring,this.bounds.topleft.x + 5, this.bounds.topleft.y+this.bounds.height + 20 );
  }
  /**
   * gets the position of this elment on the canvas. Dyanic top left might be bigger due to scolling intersection
   * previews. Use static for all calculating of intersections, etc.
   * @returns
   */
  getTopleft() {
    return this.topleft;
  }
  /**
  * prevents hits on the operation to register as a palette click, thereby voiding the selection
  * @param e
  */
  mousedown(e) {
    e.stopPropagation();
  }
  // isSameBoundsAs(bounds: Bounds) : boolean {   
  //   if(bounds.topleft.x != this.bounds.topleft.x) return false;
  //   if(bounds.topleft.y != this.bounds.topleft.y) return false;
  //   if(bounds.width != this.bounds.width) return false;
  //   if(bounds.height != this.bounds.height) return false;
  //   return true;
  // }
  dragEnd($event) {
    this.moving = false;
    this.counter = 0;
    this.last_ndx = {
      i: -1,
      j: -1,
      si: -1
    };
    this.multiselect.setRelativePosition(this.topleft);
    this.onSubdraftDrop.emit({
      id: this.id
    });
  }
  dragStart($event) {
    this.moving = true;
    this.counter = 0;
    //set the relative position of this operation if its the one that's dragging
    if (this.multiselect.isSelected(this.id)) {
      this.multiselect.setRelativePosition(this.topleft);
    } else {
      this.multiselect.clearSelections();
    }
    this.onSubdraftStart.emit({
      id: this.id
    });
  }
  dragMove($event) {
    //position of pointer of the page
    const pointer = $event.pointerPosition;
    const relative = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].getAdjustedPointerPosition(pointer, this.viewport.getBounds());
    const adj = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].snapToGrid(relative, this.scale);
    this.topleft = adj;
    // this.bounds.topleft = adj;
    const ndx = _core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].resolvePointToAbsoluteNdx(adj, this.scale);
    this.interlacement = ndx;
    if (this.counter % this.counter_limit === 0 || !_core_model_util__WEBPACK_IMPORTED_MODULE_4__["default"].isSameNdx(this.last_ndx, ndx)) {
      this.onSubdraftMove.emit({
        id: this.id,
        point: adj
      });
      this.counter = 0;
    }
    this.counter++;
    this.last_ndx = ndx;
  }
  disableDrag() {
    this.disable_drag = true;
  }
  enableDrag() {
    this.disable_drag = false;
  }
  showhide() {
    this.draft_visible = !this.draft_visible;
    this.onSubdraftViewChange.emit(this.id);
  }
  connectionClicked(id) {
    this.has_active_connection = true;
    // if(this.active_connection_order === 0){
    //   this.onConnectionMade.emit(id);
    // }else{
    //   this.onConnectionRemoved.emit(id);
    // }
  }

  resetConnections() {
    this.has_active_connection = false;
  }
  toggleDraftRendering() {
    const dn = this.tree.getNode(this.id);
    dn.render_colors = !dn.render_colors;
    this.use_colors = dn.render_colors;
    this.redrawExistingDraft();
  }
  designActionChange(e) {
    var _this3 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const draft = _this3.tree.getDraft(_this3.id);
      switch (e) {
        case 'duplicate':
          _this3.onDuplicateCalled.emit({
            id: _this3.id
          });
          break;
        case 'delete':
          _this3.onDeleteCalled.emit({
            id: _this3.id
          });
          break;
        default:
          _this3.onDesignAction.emit({
            id: _this3.id
          });
          break;
      }
    })();
  }
  /**
   * Draws to hidden bitmap canvas a file in which each draft cell is represented as a single pixel.
   * @returns
   */
  saveAsBmp() {
    var _this4 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this4.rescaleForBitmap();
      let b = _this4.bitmap.nativeElement;
      let context = b.getContext('2d');
      const draft = _this4.tree.getDraft(_this4.id);
      b.width = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(draft.drawdown);
      b.height = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(draft.drawdown);
      context.fillStyle = "white";
      context.fillRect(0, 0, b.width, b.height);
      context.drawImage(_this4.draft_canvas, 0, 0);
      const a = document.createElement('a');
      return _this4.fs.saver.bmp(b).then(href => {
        a.href = href;
        a.download = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.getDraftName)(draft) + "_bitmap.jpg";
        a.click();
        _this4.drawDraft(draft);
      });
    })();
  }
  saveAsAda() {
    var _this5 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const draft = _this5.tree.getDraft(_this5.id);
      const a = document.createElement('a');
      return _this5.fs.saver.ada('draft', false, _this5.scale).then(out => {
        a.href = "data:application/json;charset=UTF-8," + encodeURIComponent(out.json);
        a.download = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.getDraftName)(draft) + ".ada";
        a.click();
      });
    })();
  }
  saveAsWif() {
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  } // const draft = this.tree.getDraft(this.id);
  // const loom = this.tree.getLoom(this.id);
  // const a = document.createElement('a');
  // return this.fs.saver.wif(draft, loom)
  // .then(href => {
  //   a.href = href;
  //   a.download  = getDraftName(draft) +".wif";
  //   a.click();
  // });

  saveAsPrint() {
    var _this6 = this;
    return (0,_Users_ld_Documents_dev_AdaCAD_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // let dims = this.default_cell;
      // let b = this.bitmap.nativeElement;
      // let context = b.getContext('2d');
      // console.log(dims)
      const draft = _this6.tree.getDraft(_this6.id);
      // b.width = warps(draft.drawdown) * dims;
      // b.height = wefts(draft.drawdown) * dims;
      // context.fillStyle = "white";
      // context.fillRect(0,0,b.width,b.height);
      // context.drawImage(this.draft_canvas, 0, 0);
      const a = document.createElement('a');
      return _this6.fs.saver.jpg(_this6.draft_canvas).then(href => {
        a.href = href;
        a.download = (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.getDraftName)(draft) + ".jpg";
        a.click();
      });
    })();
  }
  warps() {
    return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.warps)(this.draft.drawdown);
  }
  wefts() {
    return (0,_core_model_drafts__WEBPACK_IMPORTED_MODULE_3__.wefts)(this.draft.drawdown);
  }
  /**
   * Open this when
   * @returns
   */
  finetune() {
    this.onShowDetails.emit(this.id);
    //if this is already open, don't reopen it
    // if(this.modal != undefined && this.modal.componentInstance != null) return;
    // const draft = this.tree.getDraft(this.id);
    // const loom = this.tree.getLoom(this.id);
    // const loom_settings = this.tree.getLoomSettings(this.id);
    // let use_id = this.id;
    // /** if this was a generated draft, create a temp node to hold a copy of this draft*/
    // if(this.tree.hasParent(this.id)){
    //   const new_id = this.tree.createNode('draft', null, null);
    //   draft.id = new_id;
    //   this.tree.loadDraftData( {prev_id: null, cur_id: new_id}, draft, loom, loom_settings,false);
    //   use_id = new_id;
    // }
    // this.modal = this.dialog.open(DraftdetailComponent,
    //   {disableClose: true,
    //     hasBackdrop: false,
    //     data: {
    //       id: use_id,
    //       ink: this.inks.getInk(this.ink).viewValue
    //     }
    //   });
    //   this.modal.afterClosed().subscribe(result => {
    //     console.log("FINE TUNE CLOSED", this.id, result)
    //     if(result === null) return;
    //       if(this.parent_id == -1){
    //         this.draft = this.tree.getDraft(this.id);
    //         this.onDesignAction.emit({id: this.id});
    //       }else{
    //         const cur_draft = this.tree.getDraft(this.id);
    //         const new_draft = this.tree.getDraft(result);
    //         const cur_loom = this.tree.getLoom(this.id);
    //         const new_loom = this.tree.getLoom(result);
    //         if(!utilInstance.areDraftsTheSame(cur_draft, new_draft)){
    //           this.createNewSubdraftFromEdits.emit({parent_id: this.parent_id, new_id: result});
    //           return;
    //         }
    //         if(!utilInstance.areLoomsTheSame(cur_loom, new_loom)){
    //           this.createNewSubdraftFromEdits.emit({parent_id: this.parent_id, new_id: result});
    //           return;
    //         }
    //         //if you get here, then we can remove the temp node
    //         console.log("NODE REMOVED", result)
    //         this.tree.removeNode(result);
    //       }
    //   })   
  }
}

SubdraftComponent.ɵfac = function SubdraftComponent_Factory(t) {
  return new (t || SubdraftComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_ink_service__WEBPACK_IMPORTED_MODULE_9__.InkService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_layers_service__WEBPACK_IMPORTED_MODULE_10__.LayersService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_materials_service__WEBPACK_IMPORTED_MODULE_6__.MaterialsService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_systems_service__WEBPACK_IMPORTED_MODULE_1__.SystemsService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_7__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_5__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_viewport_service__WEBPACK_IMPORTED_MODULE_12__.ViewportService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_14__.MatDialog), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_core_provider_workspace_service__WEBPACK_IMPORTED_MODULE_8__.WorkspaceService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_provider_multiselect_service__WEBPACK_IMPORTED_MODULE_11__.MultiselectService));
};
SubdraftComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineComponent"]({
  type: SubdraftComponent,
  selectors: [["app-subdraft"]],
  viewQuery: function SubdraftComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵviewQuery"](_c0, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵloadQuery"]()) && (ctx.bitmap = _t.first);
    }
  },
  inputs: {
    id: "id",
    default_cell: "default_cell",
    scale: "scale",
    draft: "draft",
    topleft: "topleft"
  },
  outputs: {
    onSubdraftMove: "onSubdraftMove",
    onSubdraftDrop: "onSubdraftDrop",
    onSubdraftStart: "onSubdraftStart",
    onDeleteCalled: "onDeleteCalled",
    onDuplicateCalled: "onDuplicateCalled",
    onConnectionMade: "onConnectionMade",
    onConnectionRemoved: "onConnectionRemoved",
    onDesignAction: "onDesignAction",
    onConnectionStarted: "onConnectionStarted",
    onSubdraftViewChange: "onSubdraftViewChange",
    createNewSubdraftFromEdits: "createNewSubdraftFromEdits",
    onNameChange: "onNameChange",
    onShowDetails: "onShowDetails"
  },
  decls: 1,
  vars: 1,
  consts: [["cdkDrag", "", 3, "id", "class", "is_preview", "z-index", "drawing", "no-pointer", "cdkDragDisabled", "cdkDragFreeDragPosition", "mousedown", "click", "cdkDragMoved", "cdkDragEnded", "cdkDragStarted", 4, "ngIf"], ["cdkDrag", "", 3, "id", "cdkDragDisabled", "cdkDragFreeDragPosition", "mousedown", "click", "cdkDragMoved", "cdkDragEnded", "cdkDragStarted"], [1, "subdraft-container", 3, "id"], [1, "bottom-opts"], ["id", "subdraft-details"], ["mat-icon-button", "", "matTooltip", "View Draft Details", 1, "fa-solid", "fa-magnifying-glass", 3, "click"], ["mat-icon-button", "", "matTooltip", "Toggle Material View", 1, "is-small", "fa-solid", 3, "click"], ["mat-icon-button", "", "matTooltip", "View Options", 1, "is-small", "fa-solid", "fa-ellipsis", 3, "matMenuTriggerFor"], ["subdraftOptions", ""], ["mat-icon-button", "", "matTooltip", "Show/Hide Draft", "class", "fas", 3, "fa-eye-slash", "fa-eye", "click", 4, "ngIf"], ["mat-icon-button", "", "matTooltip", "Duplilcate", 1, "fa", "fa-clone", 3, "name", "click"], ["mat-icon-button", "", "matTooltip", "Download as Bitmap", 1, "fas", "fa-download", 3, "click"], ["mat-icon-button", "", "matTooltip", "Download as Printable Image", 1, "fa-solid", "fa-file-image", 3, "click"], ["mat-icon-button", "", "matTooltip", "Delete", "class", "fas fa-times", 3, "name", "click", 4, "ngIf"], ["id", "slider"], ["min", "1", "max", "10", "step", "0.05", 3, "ngModel", "ngModelChange", "valueChange"], ["matSliderThumb", "", 3, "ngModel", "ngModelChange"], [3, "id"], ["id", "warp-systems-text"], [3, "class", 4, "ngFor", "ngForOf"], [1, "warp-materials", 3, "id"], [1, "maindraft", 3, "id"], [1, "outlet_row"], ["matTooltip", "connect this draft to an operation", 1, "output", 3, "id", "click"], [1, "fa-sharp", "fa-solid", "fa-circle-down"], [1, "single_line"], [1, "dims"], ["matInput", "", 3, "ngModel", "placeholder", "ngModelChange", "focusout", "change"], ["hidden", ""], ["bitmapImage", ""], ["mat-icon-button", "", "matTooltip", "Show/Hide Draft", 1, "fas", 3, "click"], ["mat-icon-button", "", "matTooltip", "Delete", 1, "fas", "fa-times", 3, "name", "click"]],
  template: function SubdraftComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtemplate"](0, SubdraftComponent_div_0_Template, 40, 62, "div", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ngIf", ctx.tree.getDraft(ctx.id) !== null);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_15__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_15__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgModel, _angular_material_button__WEBPACK_IMPORTED_MODULE_17__.MatButton, _angular_material_input__WEBPACK_IMPORTED_MODULE_18__.MatInput, _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__.MatMenu, _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__.MatMenuTrigger, _angular_material_slider__WEBPACK_IMPORTED_MODULE_20__.MatSlider, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_21__.MatTooltip, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_22__.CdkDrag],
  styles: ["canvas[_ngcontent-%COMP%] {\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\n.top-half-draft[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.local_zoom.origin0[_ngcontent-%COMP%], .local_zoom.origin3[_ngcontent-%COMP%] {\n  flex-direction: column;\n}\n\n.local_zoom.origin1[_ngcontent-%COMP%], .local_zoom.origin2[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n}\n\n.warp-systems-container[_ngcontent-%COMP%] {\n  display: flex;\n  margin: 10px 0px;\n}\n\n.warp-systems-container.origin0[_ngcontent-%COMP%] {\n  flex-direction: column;\n  align-items: flex-start;\n  padding-right: 30px;\n}\n\n.warp-systems-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.warp-systems-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n  align-items: flex-start;\n  padding-right: 10px;\n}\n\n.warp-systems-container.origin2[_ngcontent-%COMP%] {\n  flex-direction: column-reverse;\n  align-items: flex-end;\n}\n\n.drawdown-container[_ngcontent-%COMP%] {\n  display: flex;\n}\n\n.drawdown-container.origin0[_ngcontent-%COMP%], .drawdown-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n}\n\n.drawdown-container.origin2[_ngcontent-%COMP%], .drawdown-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.weft-systems-container[_ngcontent-%COMP%] {\n  display: flex;\n  margin: 0px 10px;\n}\n\n.weft-systems-container.origin0[_ngcontent-%COMP%], .weft-systems-container.origin1[_ngcontent-%COMP%] {\n  flex-direction: row;\n}\n\n.weft-systems-container.origin2[_ngcontent-%COMP%], .weft-systems-container.origin3[_ngcontent-%COMP%] {\n  flex-direction: row-reverse;\n}\n\n.subdraft-container[_ngcontent-%COMP%] {\n  background: rgba(255, 255, 255, 0.6);\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  min-width: 300px;\n  height: -moz-fit-content;\n  height: fit-content;\n  padding: 0px 10px 0px 0px;\n}\n\n.multiselected[_ngcontent-%COMP%] {\n  border: thin solid #ff3860;\n}\n\n.datarow[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  color: white;\n  font-size: 0.7em;\n  padding: 0px 4px;\n  height: 20px;\n}\n\n.bottom-opts[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  padding: 8px 0px;\n  color: #555;\n  height: 40px;\n}\n\n.bottom-opts.has_draft_hidden[_ngcontent-%COMP%] {\n  height: auto;\n  width: 224px;\n}\n\n.scale-container[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  color: grey;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\nh3[_ngcontent-%COMP%] {\n  font-weight: 800;\n}\n\n.cloak[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  width: 30px;\n}\n\n.is_preview[_ngcontent-%COMP%] {\n  z-index: 10;\n}\n\nbutton.output[_ngcontent-%COMP%] {\n  position: relative;\n  top: 9px;\n  font-size: 24px;\n  color: #333;\n  background-color: transparent;\n  border: none;\n}\n\nbutton.output.active[_ngcontent-%COMP%], button.output[_ngcontent-%COMP%]:active, button.output[_ngcontent-%COMP%]:hover {\n  color: #ff3860;\n}\n\n.single_line[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n\n.outlet_row[_ngcontent-%COMP%] {\n  height: 34px;\n  display: flex;\n  flex-direction: row;\n  padding-top: 9px;\n  color: black;\n}\n\n.outlet[_ngcontent-%COMP%] {\n  background-color: transparent;\n  color: white;\n  border: none;\n  width: 20px;\n}\n.outlet[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  font-size: 20px;\n  position: relative;\n}\n\n.error[_ngcontent-%COMP%] {\n  color: #ff3860;\n}\n\n.dropdown[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.subdraft-details[_ngcontent-%COMP%] {\n  position: relative;\n  top: -10px;\n}\n\n.local_zoom[_ngcontent-%COMP%] {\n  transform-origin: top center;\n  display: flex;\n}\n\n.cloak[_ngcontent-%COMP%] {\n  display: none;\n  flex-direction: column;\n  width: 30px;\n}\n\n.align-top[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n\n.subdraft-contents[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  border: none;\n  background-color: transparent;\n}\n\n.is-active[_ngcontent-%COMP%] {\n  background: #00d1b2;\n  background: rgba(0, 0, 0, 0.4392156863);\n}\n\nsvg[_ngcontent-%COMP%] {\n  display: block;\n  color: black;\n}\n\n#bitmapImage[_ngcontent-%COMP%] {\n  display: none;\n  pointer-events: none;\n}\n\n.maindraft[_ngcontent-%COMP%] {\n  display: block;\n  overflow: hidden;\n}\n\n.hidden[_ngcontent-%COMP%] {\n  display: none;\n}\n\n.no-pointer[_ngcontent-%COMP%] {\n  pointer-events: none;\n}\n\n.hide[_ngcontent-%COMP%] {\n  display: none;\n}\n\n.connectable[_ngcontent-%COMP%] {\n  color: #ff4081;\n  background: black;\n}\n/*# sourceURL=webpack://./src/app/mixer/palette/subdraft/subdraft.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcGFsZXR0ZS9zdWJkcmFmdC9zdWJkcmFmdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTtFQUNDLHVCQUFBO0VBQUEsa0JBQUE7RUFDQSx3QkFBQTtFQUFBLG1CQUFBO0FBRkQ7O0FBS0E7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFGQTs7QUFNQTs7RUFHRSxzQkFBQTtBQUpGOztBQU9BOztFQUdFLDhCQUFBO0FBTEY7O0FBUUE7RUFDQyxhQUFBO0VBQ0EsZ0JBQUE7QUFMRDs7QUFRRTtFQUVELHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQU5EOztBQVdFO0VBRUQsc0JBQUE7RUFDQSxxQkFBQTtBQVREOztBQWFFO0VBRUUsOEJBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBWEo7O0FBaUJFO0VBRUUsOEJBQUE7RUFDQSxxQkFBQTtBQWZKOztBQW9CQTtFQUNDLGFBQUE7QUFqQkQ7O0FBb0JFOztFQUdELG1CQUFBO0FBbEJEOztBQXFCRTs7RUFHRCwyQkFBQTtBQW5CRDs7QUF3QkE7RUFDQyxhQUFBO0VBQ0EsZ0JBQUE7QUFyQkQ7O0FBd0JFOztFQUdELG1CQUFBO0FBdEJEOztBQXlCRTs7RUFHRCwyQkFBQTtBQXZCRDs7QUE4QkE7RUFDQyxvQ0FBQTtFQUVBLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSwyQkFBQTtFQUNBLGdCQUFBO0VBQ0Esd0JBQUE7RUFBQSxtQkFBQTtFQUNBLHlCQUFBO0FBNUJEOztBQWlDQTtFQUNDLDBCQUFBO0FBOUJEOztBQW1DQTtFQUNDLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDhCQUFBO0VBQ0EsWUFBQTtFQUNHLGdCQUFBO0VBQ0gsZ0JBQUE7RUFDQSxZQUFBO0FBaENEOztBQW9DQTtFQUNDLGFBQUE7RUFDRyxtQkFBQTtFQUNBLDJCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQWpDSjs7QUFzQ0E7RUFDQyxZQUFBO0VBQ0EsWUFBQTtBQW5DRDs7QUFzQ0E7RUFFQyxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHlCQUFBO0FBcENEOztBQXdDQTtFQUNDLGdCQUFBO0FBckNEOztBQXdDQTtFQUNDLFdBQUE7QUFyQ0Q7O0FBMENBO0VBQ0MsV0FBQTtBQXZDRDs7QUE0Q0E7RUFDSSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxlQUFBO0VBQ0EsV0FBQTtFQUNILDZCQUFBO0VBQ0EsWUFBQTtBQXpDRDs7QUE0Q0E7OztFQUdDLGNBQUE7QUF6Q0Q7O0FBOENBO0VBQ0MsYUFBQTtFQUNBLG1CQUFBO0FBM0NEOztBQThDQTtFQUNJLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7QUEzQ0o7O0FBOENBO0VBQ0MsNkJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUEzQ0Q7QUE2Q0M7RUFDQyxlQUFBO0VBQ0Esa0JBQUE7QUEzQ0Y7O0FBa0RBO0VBQ0MsY0FBQTtBQS9DRDs7QUFrREE7RUFDQyxhQUFBO0VBQ0Esc0JBQUE7QUEvQ0Q7O0FBa0RBO0VBQ0Msa0JBQUE7RUFDQSxVQUFBO0FBL0NEOztBQW1EQTtFQUNDLDRCQUFBO0VBQ0EsYUFBQTtBQWhERDs7QUFtREE7RUFDQyxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0FBaEREOztBQW1EQTtFQUNDLGFBQUE7RUFDQSxzQkFBQTtBQWhERDs7QUFtREE7RUFDQyxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLDZCQUFBO0FBaEREOztBQXFEQTtFQUNDLG1CQUFBO0VBQ0EsdUNBQUE7QUFsREQ7O0FBc0RBO0VBQ0MsY0FBQTtFQUNBLFlBQUE7QUFuREQ7O0FBc0RBO0VBQ0MsYUFBQTtFQUNBLG9CQUFBO0FBbkREOztBQXNEQTtFQUNDLGNBQUE7RUFDQSxnQkFBQTtBQW5ERDs7QUFzREE7RUFDQyxhQUFBO0FBbkREOztBQXNEQTtFQUNDLG9CQUFBO0FBbkREOztBQXVEQTtFQUNDLGFBQUE7QUFwREQ7O0FBdURBO0VBQ0MsY0FBQTtFQUNBLGlCQUFBO0FBcEREIiwic291cmNlc0NvbnRlbnQiOlsiY2FudmFzIHtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xufVxuXG4udG9wLWhhbGYtZHJhZnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuXG4ubG9jYWxfem9vbS5vcmlnaW4wLFxuLmxvY2FsX3pvb20ub3JpZ2luMyB7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5sb2NhbF96b29tLm9yaWdpbjEsXG4ubG9jYWxfem9vbS5vcmlnaW4yIHtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xufVxuXG4ud2FycC1zeXN0ZW1zLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMTBweCAwcHg7XG59XG5cbi53YXJwLXN5c3RlbXMtY29udGFpbmVyLm9yaWdpbjAge1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgcGFkZGluZy1yaWdodDogMzBweDtcbn1cblxuLndhcnAtc3lzdGVtcy1jb250YWluZXIub3JpZ2luMyB7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbn1cblxuLndhcnAtc3lzdGVtcy1jb250YWluZXIub3JpZ2luMSB7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG59XG5cbi53YXJwLXN5c3RlbXMtY29udGFpbmVyLm9yaWdpbjIge1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbn1cblxuLmRyYXdkb3duLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5kcmF3ZG93bi1jb250YWluZXIub3JpZ2luMCxcbi5kcmF3ZG93bi1jb250YWluZXIub3JpZ2luMSB7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi5kcmF3ZG93bi1jb250YWluZXIub3JpZ2luMixcbi5kcmF3ZG93bi1jb250YWluZXIub3JpZ2luMyB7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbn1cblxuLndlZnQtc3lzdGVtcy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW46IDBweCAxMHB4O1xufVxuXG4ud2VmdC1zeXN0ZW1zLWNvbnRhaW5lci5vcmlnaW4wLFxuLndlZnQtc3lzdGVtcy1jb250YWluZXIub3JpZ2luMSB7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi53ZWZ0LXN5c3RlbXMtY29udGFpbmVyLm9yaWdpbjIsXG4ud2VmdC1zeXN0ZW1zLWNvbnRhaW5lci5vcmlnaW4zIHtcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xufVxuXG4uc3ViZHJhZnQtY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgbWluLXdpZHRoOiAzMDBweDtcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgcGFkZGluZzogMHB4IDEwcHggMHB4IDBweDtcbn1cblxuLm11bHRpc2VsZWN0ZWQge1xuICBib3JkZXI6IHRoaW4gc29saWQgI2ZmMzg2MDtcbn1cblxuLmRhdGFyb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGNvbG9yOiB3aGl0ZTtcbiAgZm9udC1zaXplOiAwLjdlbTtcbiAgcGFkZGluZzogMHB4IDRweDtcbiAgaGVpZ2h0OiAyMHB4O1xufVxuXG4uYm90dG9tLW9wdHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIHBhZGRpbmc6IDhweCAwcHg7XG4gIGNvbG9yOiAjNTU1O1xuICBoZWlnaHQ6IDQwcHg7XG59XG5cbi5ib3R0b20tb3B0cy5oYXNfZHJhZnRfaGlkZGVuIHtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMjI0cHg7XG59XG5cbi5zY2FsZS1jb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGNvbG9yOiBncmV5O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuXG5oMyB7XG4gIGZvbnQtd2VpZ2h0OiA4MDA7XG59XG5cbi5jbG9hayBidXR0b24ge1xuICB3aWR0aDogMzBweDtcbn1cblxuLmlzX3ByZXZpZXcge1xuICB6LWluZGV4OiAxMDtcbn1cblxuYnV0dG9uLm91dHB1dCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiA5cHg7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgY29sb3I6ICMzMzM7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG59XG5cbmJ1dHRvbi5vdXRwdXQuYWN0aXZlLFxuYnV0dG9uLm91dHB1dDphY3RpdmUsXG5idXR0b24ub3V0cHV0OmhvdmVyIHtcbiAgY29sb3I6ICNmZjM4NjA7XG59XG5cbi5zaW5nbGVfbGluZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi5vdXRsZXRfcm93IHtcbiAgaGVpZ2h0OiAzNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBwYWRkaW5nLXRvcDogOXB4O1xuICBjb2xvcjogYmxhY2s7XG59XG5cbi5vdXRsZXQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IG5vbmU7XG4gIHdpZHRoOiAyMHB4O1xufVxuLm91dGxldCBpIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5lcnJvciB7XG4gIGNvbG9yOiAjZmYzODYwO1xufVxuXG4uZHJvcGRvd24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4uc3ViZHJhZnQtZGV0YWlscyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtMTBweDtcbn1cblxuLmxvY2FsX3pvb20ge1xuICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgY2VudGVyO1xuICBkaXNwbGF5OiBmbGV4O1xufVxuXG4uY2xvYWsge1xuICBkaXNwbGF5OiBub25lO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogMzBweDtcbn1cblxuLmFsaWduLXRvcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5zdWJkcmFmdC1jb250ZW50cyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBhZGRpbmc6IDRweDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLmlzLWFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6ICMwMGQxYjI7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40MzkyMTU2ODYzKTtcbn1cblxuc3ZnIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGNvbG9yOiBibGFjaztcbn1cblxuI2JpdG1hcEltYWdlIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5tYWluZHJhZnQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLmhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5uby1wb2ludGVyIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5oaWRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmNvbm5lY3RhYmxlIHtcbiAgY29sb3I6ICNmZjQwODE7XG4gIGJhY2tncm91bmQ6IGJsYWNrO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 37045:
/*!***********************************************!*\
  !*** ./src/app/mixer/provider/ink.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InkService": () => (/* binding */ InkService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class InkService {
  constructor() {
    this.inks = [{
      value: 'neq',
      viewValue: 'Reversing Ink',
      dx: "REVERSING INK compares this pattern with what is underneight and draws black square when they are not equal",
      icon: "fas fa-adjust",
      selected: false,
      uses_mask: false
    }, {
      value: 'up',
      viewValue: 'Setting Ink',
      dx: "SETTING INK sets this pattern within the draft no matter what is under it",
      icon: "fas fa-square",
      selected: false,
      uses_mask: false
    }, {
      value: 'down',
      viewValue: 'Erasing Ink',
      dx: "ERASING INK places all the heddle downs atop the draft underneith it",
      icon: "far fa-square",
      selected: false,
      uses_mask: false
    }, {
      value: 'unset',
      viewValue: 'Removing Ink',
      dx: "REMOVING INK removes the use of this heddle in the draft (for shape and inlay weaving)",
      icon: "fas fa-times",
      selected: false,
      uses_mask: false
    }, {
      value: 'and',
      viewValue: 'Masking Ink',
      dx: "MASKING INK only reveals bottom pattern in areas where this pattern is black",
      icon: "fas fa-mask",
      selected: false,
      uses_mask: true
    }, {
      value: 'or',
      viewValue: 'Overlaying Ink',
      dx: "OVERLAYING INK copies all black pattern cells atop the draft",
      icon: "fas fa-plus",
      selected: false,
      uses_mask: false
    }];
    this.select('neq');
  }
  getInks() {
    return this.inks;
  }
  selectedHasMask() {
    const mode = this.getInk(this.getSelected());
    return mode.uses_mask;
  }
  /**
   * A function to retreive an ink by name.
   * @param name the name of the ink we're looking to retreive
   * @returns the Ink associated with that name, or null if nothing was found
   */
  getInk(name) {
    let found = null;
    this.inks.forEach(ink => {
      if (ink.value === name) found = ink;
    });
    return found;
  }
  /**
   * sets false to the selection parameter on all the modes.
   */
  clearSelection() {
    this.selected = null;
  }
  /**
   * clears previous selections and selects ink associated with name
   * @param name a string corresponding to the name of this ink
   * @returns boolean cooresponding to whether or not a selection was made
   */
  select(name) {
    let found = false;
    this.clearSelection();
    this.inks.forEach(ink => {
      if (ink.value === name) {
        ink.selected = true;
        found = true;
        this.selected = ink;
      } else {
        ink.selected = false;
      }
    });
    return found;
  }
  /**
   * Get the current ink name that is selected
   * @returns returns the selected ink name
   */
  getSelected() {
    return this.selected.value;
  }
  /**
   * checks if a user specified ink is selected
   * @param name the name of the mode we are asking about
   * @returns boolean describing if it was selected or not
   */
  isSelected(name) {
    return name == this.selected.value;
  }
}
InkService.ɵfac = function InkService_Factory(t) {
  return new (t || InkService)();
};
InkService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: InkService,
  factory: InkService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 53452:
/*!**************************************************!*\
  !*** ./src/app/mixer/provider/layers.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayersService": () => (/* binding */ LayersService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

/**
 * a service that keeps track of how many elements are on the screen so that new
 * layers can always be drawn in front
 */
class LayersService {
  constructor() {
    this.count = 0;
  }
  createLayer() {
    this.count++;
    return this.count;
  }
  clearLayers() {
    this.count = 0;
  }
  getFrontLayer() {
    return this.count;
  }
}
LayersService.ɵfac = function LayersService_Factory(t) {
  return new (t || LayersService)();
};
LayersService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: LayersService,
  factory: LayersService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 16379:
/*!*******************************************************!*\
  !*** ./src/app/mixer/provider/multiselect.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MultiselectService": () => (/* binding */ MultiselectService)
/* harmony export */ });
/* harmony import */ var _core_provider_file_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/file.service */ 96374);
/* harmony import */ var _zoom_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./zoom.service */ 75817);
/* harmony import */ var _core_model_datatypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/model/datatypes */ 86789);
/* harmony import */ var _core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/provider/tree.service */ 6177);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 22560);








class MultiselectService {
  constructor(tree, fs, zs) {
    this.tree = tree;
    this.fs = fs;
    this.zs = zs;
    this.selected = [];
    this.relative_position = {
      x: 0,
      y: 0
    };
  }
  updateSelectedStyles(comp_id) {}
  setRelativePosition(point) {
    this.relative_position = point;
  }
  getRelativePosition() {
    return {
      x: this.relative_position.x,
      y: this.relative_position.y
    };
  }
  setPosition(id, tl) {
    const el = this.selected.find(el => el.id === id);
    if (el !== undefined) {
      el.topleft = {
        x: tl.x,
        y: tl.y
      };
    }
  }
  /**
   * toggle selection will add a selected element, and if its an op, all the child subdrafts, to the selected list
   * @param id the id of the element you are toggling
   * @param topleft the topleft point of this element, used to update position if one selected element moves
   */
  toggleSelection(id, topleft) {
    console.log("TOGGLING SELECTION ON ", id);
    const type = this.tree.getType(id);
    let container;
    if (this.selected.find(el => el.id == id) !== undefined) {
      this.selected = this.selected.filter(el => el.id != id);
      container = document.getElementById("scale-" + id);
      container.classList.remove('multiselected');
      //remove the children as well 
      if (type === 'op') {
        const cxn_outs = this.tree.getOutputs(id);
        cxn_outs.forEach(o => {
          this.selected = this.selected.filter(el => el.id != o);
          const child = this.tree.getConnectionOutput(o);
          container = document.getElementById("scale-" + child);
          if (container !== null) container.classList.remove('multiselected');
          this.selected = this.selected.filter(el => el.id != child);
        });
      }
      return false;
    } else {
      this.selected.push({
        id,
        topleft
      });
      container = document.getElementById("scale-" + id);
      container.classList.add('multiselected');
      //remove the children as well 
      if (type == 'op') {
        const cxn_outs = this.tree.getOutputs(id);
        cxn_outs.forEach(o => {
          let tl = this.tree.getComponent(o).topleft;
          this.selected.push({
            id: o,
            topleft: tl
          });
          const child = this.tree.getConnectionOutput(o);
          tl = this.tree.getComponent(child).topleft;
          this.selected.push({
            id: child,
            topleft: tl
          });
          container = document.getElementById("scale-" + child);
          if (container !== null) container.classList.add('multiselected');
        });
      } else if (type == 'draft') {
        const parent = this.tree.getSubdraftParent(id);
        if (parent !== -1) {
          let tl = this.tree.getComponent(parent).topleft;
          this.selected.push({
            id: parent,
            topleft: tl
          });
          container = document.getElementById("scale-" + parent);
          if (container !== null) container.classList.add('multiselected');
        }
      }
      return true;
    }
  }
  clearAllStyles() {
    this.selected.forEach(sel => {
      const container = document.getElementById("scale-" + sel.id);
      if (container !== null) container.classList.remove('multiselected');
    });
  }
  clearSelections() {
    //clear all styles
    this.clearAllStyles();
    this.selected = [];
  }
  isSelected(id) {
    const f = this.selected.find(el => el.id == id);
    if (f === undefined) return false;else return true;
  }
  getSelections() {
    return this.selected.map(el => el.id);
  }
  getNewPosition(id, diff) {
    const f = this.selected.find(el => el.id == id);
    return {
      x: f.topleft.x + diff.x,
      y: f.topleft.y + diff.y
    };
  }
  /**
   * creates a copy of each of the elements (and their positions, for pasting into this file or another file)
   * @returns
   */
  copySelections() {
    let selected_nodes = this.selected.map(el => this.tree.getNode(el.id)).filter(el => el.type !== 'cxn'); //filter out connections because we will add these in later
    let node_mirror = selected_nodes.slice();
    let relevant_connection_ids = [];
    let relevant_connection_nodes = [];
    selected_nodes.forEach(node => {
      node_mirror = node_mirror.filter(el => el.id !== node.id);
      node_mirror.forEach(mirror => {
        let cxn = this.tree.getConnection(node.id, mirror.id);
        if (cxn !== -1 && relevant_connection_ids.find(el => el == cxn) === undefined) relevant_connection_ids.push(cxn);
      });
    });
    relevant_connection_nodes = relevant_connection_ids.map(el => this.tree.getNode(el));
    let all_nodes = selected_nodes.concat(relevant_connection_nodes);
    this.copy = this.fs.saver.copy(all_nodes.map(el => el.id), this.zs.zoom);
  }
}
MultiselectService.ɵfac = function MultiselectService_Factory(t) {
  return new (t || MultiselectService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_core_provider_tree_service__WEBPACK_IMPORTED_MODULE_3__.TreeService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_core_provider_file_service__WEBPACK_IMPORTED_MODULE_0__.FileService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_zoom_service__WEBPACK_IMPORTED_MODULE_1__.ZoomService));
};
MultiselectService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: MultiselectService,
  factory: MultiselectService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 2320:
/*!****************************************************!*\
  !*** ./src/app/mixer/provider/viewport.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewportService": () => (/* binding */ ViewportService)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 92218);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 22560);


class ViewportService {
  constructor() {
    this.vpchanged$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    this.vp = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 0,
      height: 0
    };
    this.absolute = {
      topleft: {
        x: 0,
        y: 0
      },
      width: 0,
      height: 0
    };
    this.objs = [];
  }
  clear() {
    this.objs = [];
  }
  /**
   * called when a new subdraft is added
   * @param id the id of the subdraft
   * @param i the topleft corner as interlacement
   */
  addObj(id, i) {
    this.objs.push({
      id: id,
      i: i
    });
  }
  /**
   * calledd when subdraft is deleted
   * @param id - the subdraft id
   */
  removeObj(id) {
    this.objs = this.objs.filter(el => el.id != id);
  }
  /**
   * called when a subdraft is moved and we need to update its location
   * @param id - the subdraft id to move
   * @param i - the new position to set to
   */
  updatePoint(id, i) {
    this.objs = this.objs.map(el => {
      if (el.id === id) el.i = i;
      return el;
    });
  }
  setAbsolute(w, h) {
    this.absolute.width = w;
    this.absolute.height = h;
  }
  /**
   * called when the local view is scrolled to a new part of the page
   * @param x
   * @param y
   */
  move(x, y) {
    if (x === undefined || y == undefined) return;
    const bleh = {
      x: this.vp.topleft.x + x,
      y: this.vp.topleft.y + y
    };
    this.set(bleh.x, bleh.y, this.vp.width, this.vp.height);
  }
  set(x, y, width, height) {
    this.vp.topleft = {
      x: x,
      y: y
    };
    this.vp.width = width;
    this.vp.height = height;
    this.vpchanged$.next(this.vp.topleft);
  }
  setWidth(w) {
    this.vp.width = w;
  }
  getWidth() {
    return this.vp.width;
  }
  getAbsoluteWidth() {
    return this.absolute.width;
  }
  setHeight(h) {
    this.vp.height = h;
  }
  getHeight() {
    return this.vp.height;
  }
  getAbsoluteHeight() {
    return this.absolute.height;
  }
  setTopLeft(p) {
    this.vp.topleft = {
      x: p.x,
      y: p.y
    };
  }
  getTopLeft() {
    return this.vp.topleft;
  }
  getTopRight() {
    return {
      x: this.vp.topleft.x + this.vp.width,
      y: this.vp.topleft.y
    };
  }
  getBounds() {
    return this.vp;
  }
  /**
   * this gets the center point of the current viewport in screen terms.
   * @returns
   */
  getCenterPoint() {
    const center = {
      x: this.vp.topleft.x + this.vp.width / 2,
      y: this.vp.topleft.y + this.vp.height / 2
    };
    return center;
  }
  /**
  * set the viewport in the center of the screen
  * @returns the point for referencing
   */
  setViewportCenter() {
    const abs_topleft = {
      x: this.absolute.width / 2 - this.vp.width / 2,
      y: this.absolute.height / 2 - this.vp.height / 2
    };
    this.vp.topleft = abs_topleft;
    return abs_topleft;
  }
}
ViewportService.ɵfac = function ViewportService_Factory(t) {
  return new (t || ViewportService)();
};
ViewportService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ViewportService,
  factory: ViewportService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 75817:
/*!************************************************!*\
  !*** ./src/app/mixer/provider/zoom.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomService": () => (/* binding */ ZoomService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 22560);

class ZoomService {
  constructor() {
    this.num_steps = 15;
    this.zoom_min = .1;
    this.zoom_step = .05;
    this.zoom_table = [];
    //create a table that stores each zoom value, which increments exponentally as it gets larger
    this.zoom_table_ndx = Math.floor(this.num_steps / 2);
    for (let i = 0; i < this.num_steps; i++) {
      const raw = this.zoom_min + this.zoom_step * (i * i);
      this.zoom_table.push(this.manageZoomRounding(raw));
    }
    this.zoom = this.zoom_table[this.zoom_table_ndx];
  }
  getZoomMax() {
    return this.zoom_table[this.zoom_table.length - 1];
  }
  manageZoomRounding(val) {
    // if(val >= 1) return Math.floor(val);
    return Math.round(val * 1000) / 1000;
  }
  zoomIn() {
    this.zoom_table_ndx++;
    if (this.zoom_table_ndx < this.zoom_table.length) {
      this.zoom = this.zoom_table[this.zoom_table_ndx];
    } else {
      this.zoom_table_ndx = this.zoom_table.length;
    }
  }
  zoomOut() {
    this.zoom_table_ndx--;
    if (this.zoom_table_ndx >= 0) {
      this.zoom = this.zoom_table[this.zoom_table_ndx];
    } else {
      this.zoom_table_ndx = 0;
    }
  }
  setZoom(val) {
    if (val >= this.zoom_min && val <= this.zoom_table.length) {
      this.zoom_table_ndx = val;
      this.zoom = this.zoom_table[this.zoom_table_ndx];
    }
  }
}
ZoomService.ɵfac = function ZoomService_Factory(t) {
  return new (t || ZoomService)();
};
ZoomService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ZoomService,
  factory: ZoomService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 75754:
/*!****************************************************!*\
  !*** ./src/app/mixer/quickop/quickop.component.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QuickopComponent": () => (/* binding */ QuickopComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 25722);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 86942);
/* harmony import */ var _core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/provider/operation-descriptions.service */ 27049);
/* harmony import */ var _core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/provider/operation.service */ 46524);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 94666);
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/autocomplete */ 88550);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/core */ 59121);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/form-field */ 75074);
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/input */ 68562);














function QuickopComponent_mat_option_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "mat-option", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r2 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("value", option_r2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", option_r2, " ");
  }
}
class QuickopComponent {
  constructor(ops, op_desc) {
    this.ops = ops;
    this.op_desc = op_desc;
    this.onOperationAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.opnames = [];
    this.displaynames = [];
    this.myControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__.UntypedFormControl();
    this.searchOnly = false;
  }
  ngOnInit() {
    const allops = this.ops.ops.concat(this.ops.dynamic_ops).filter(el => this.op_desc.hasDisplayName(el.name));
    this.classifications = this.op_desc.getOpClassifications();
    this.opnames = allops.map(el => el.name);
    this.displaynames = allops.map(el => this.op_desc.getDisplayName(el.name));
    this.filteredOptions = this.myControl.valueChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.startWith)(''), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.map)(value => this._filter(value)));
  }
  _filter(value) {
    const filterValue = value.toLowerCase();
    return this.displaynames.filter(option => option.toLowerCase().includes(filterValue));
  }
  addOpFromSearch(event) {
    //need to convert display name toname here
    const ndx = this.displaynames.findIndex(el => el === event.option.value);
    if (ndx !== -1) {
      this.onOperationAdded.emit(this.opnames[ndx]);
    }
  }
}
QuickopComponent.ɵfac = function QuickopComponent_Factory(t) {
  return new (t || QuickopComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_service__WEBPACK_IMPORTED_MODULE_1__.OperationService), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_core_provider_operation_descriptions_service__WEBPACK_IMPORTED_MODULE_0__.OperationDescriptionsService));
};
QuickopComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: QuickopComponent,
  selectors: [["app-quickop"]],
  outputs: {
    onOperationAdded: "onOperationAdded"
  },
  decls: 10,
  vars: 5,
  consts: [["id", "quickop", "autocomplete", "off", 1, "quickop"], ["matNativeControl", "", "appearance", "fill", "width", "100%", "color", "primary", 1, "quickop_form", "is-fullwidth"], [1, "fas", "fa-project-diagram"], ["type", "text", "placeholder", "", "matInput", "", 3, "formControl", "matAutocomplete"], ["autoActiveFirstOption", "", 3, "optionSelected"], ["auto", "matAutocomplete"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]],
  template: function QuickopComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "form", 0)(1, "mat-form-field", 1)(2, "mat-label");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](3, "i", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](4, " add operation");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](5, "input", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](6, "mat-autocomplete", 4, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("optionSelected", function QuickopComponent_Template_mat_autocomplete_optionSelected_6_listener($event) {
        return ctx.addOpFromSearch($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](8, QuickopComponent_mat_option_8_Template, 2, 2, "mat-option", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpipe"](9, "async");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵreference"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("formControl", ctx.myControl)("matAutocomplete", _r0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpipeBind1"](9, 3, ctx.filteredOptions));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgForOf, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgForm, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.FormControlDirective, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_7__.MatAutocomplete, _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_7__.MatAutocompleteTrigger, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__.MatOption, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__.MatFormField, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_9__.MatLabel, _angular_material_input__WEBPACK_IMPORTED_MODULE_10__.MatInput, _angular_common__WEBPACK_IMPORTED_MODULE_6__.AsyncPipe],
  styles: [".quickop_form .mat-form-field {\n  color: #3f51b5;\n  width: 100%;\n}\n\n.quickop_form .mat-form-field-flex {\n  background-color: white;\n}\n\n.quickop_form .mat-input-element {\n  color: #3f51b5;\n}\n\n.quickop_form .mat-form-field-label {\n  color: #3f51b5;\n}\n\n.quickop_form .mat-form-field-underline {\n  background-color: #3f51b5;\n}\n\n.quickop_form .mat-form-field-ripple {\n  background-color: #3f51b5;\n}\n\n.quickop_form .mat-form-field-required-marker {\n  color: #3f51b5;\n}\n\n.mat-option {\n  white-space: normal !important;\n  overflow-wrap: normal !important;\n  text-overflow: normal !important;\n  display: block;\n  line-height: 1.2em !important;\n  height: -moz-fit-content !important;\n  height: fit-content !important;\n  padding: 16px !important;\n  text-align: left;\n  text-decoration: none;\n  max-width: 100%;\n  position: relative;\n  cursor: pointer;\n  outline: none;\n  display: flex;\n  flex-direction: row;\n  max-width: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.mat-option-text {\n  display: block !important;\n  flex-grow: 1 !important;\n  overflow-wrap: normal !important;\n}\n/*# sourceURL=webpack://./src/app/mixer/quickop/quickop.component.scss */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWl4ZXIvcXVpY2tvcC9xdWlja29wLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksY0FBQTtFQUNBLFdBQUE7QUFDSjs7QUFHQTtFQUNJLHVCQUFBO0FBQUo7O0FBR0E7RUFDSSxjQUFBO0FBQUo7O0FBR0E7RUFDSSxjQUFBO0FBQUo7O0FBRUE7RUFDSSx5QkFBQTtBQUNKOztBQUNBO0VBQ0kseUJBQUE7QUFFSjs7QUFBQTtFQUNJLGNBQUE7QUFHSjs7QUFBQTtFQUNJLDhCQUFBO0VBQ0EsZ0NBQUE7RUFDQSxnQ0FBQTtFQUNBLGNBQUE7RUFDQSw2QkFBQTtFQUNBLG1DQUFBO0VBQUEsOEJBQUE7RUFDQSx3QkFBQTtFQUNBLGdCQUFBO0VBQ0EscUJBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0Esd0NBQUE7QUFHSjs7QUFBQTtFQUNJLHlCQUFBO0VBQ0EsdUJBQUE7RUFDQSxnQ0FBQTtBQUdKIiwic291cmNlc0NvbnRlbnQiOlsiLnF1aWNrb3BfZm9ybSAubWF0LWZvcm0tZmllbGQge1xuICBjb2xvcjogIzNmNTFiNTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5xdWlja29wX2Zvcm0gLm1hdC1mb3JtLWZpZWxkLWZsZXgge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuLnF1aWNrb3BfZm9ybSAubWF0LWlucHV0LWVsZW1lbnQge1xuICBjb2xvcjogIzNmNTFiNTtcbn1cblxuLnF1aWNrb3BfZm9ybSAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICBjb2xvcjogIzNmNTFiNTtcbn1cblxuLnF1aWNrb3BfZm9ybSAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNmNTFiNTtcbn1cblxuLnF1aWNrb3BfZm9ybSAubWF0LWZvcm0tZmllbGQtcmlwcGxlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNmNTFiNTtcbn1cblxuLnF1aWNrb3BfZm9ybSAubWF0LWZvcm0tZmllbGQtcmVxdWlyZWQtbWFya2VyIHtcbiAgY29sb3I6ICMzZjUxYjU7XG59XG5cbi5tYXQtb3B0aW9uIHtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbCAhaW1wb3J0YW50O1xuICBvdmVyZmxvdy13cmFwOiBub3JtYWwgIWltcG9ydGFudDtcbiAgdGV4dC1vdmVyZmxvdzogbm9ybWFsICFpbXBvcnRhbnQ7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBsaW5lLWhlaWdodDogMS4yZW0gIWltcG9ydGFudDtcbiAgaGVpZ2h0OiBmaXQtY29udGVudCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiAxNnB4ICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgb3V0bGluZTogbm9uZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4ubWF0LW9wdGlvbi10ZXh0IHtcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcbiAgZmxleC1ncm93OiAxICFpbXBvcnRhbnQ7XG4gIG92ZXJmbG93LXdyYXA6IG5vcm1hbCAhaW1wb3J0YW50O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */"],
  encapsulation: 2
});

/***/ }),

/***/ 92340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": () => (/* binding */ environment)
/* harmony export */ });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
const environment = {
  firebase: {
    apiKey: "AIzaSyDeFrip7Pbp_3qxAuTgflhS-EH6ZbZhPrg",
    authDomain: "adacad-beta-fa4dc.firebaseapp.com",
    databaseURL: "https://adacad-beta-fa4dc-default-rtdb.firebaseio.com",
    projectId: "adacad-beta-fa4dc",
    storageBucket: "adacad-beta-fa4dc.appspot.com",
    messagingSenderId: "256364414107",
    appId: "1:256364414107:web:bd7439b027c997eb1c723e",
    measurementId: "G-CM8RPB246D"
  },
  production: false
};

/***/ }),

/***/ 14431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 34497);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 22560);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 36747);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 92340);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.platformBrowser().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule);

/***/ }),

/***/ 75042:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 18639:
/*!***************************************!*\
  !*** ./src/assets/json/examples.json ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"examples":[{"id":"material-calculus","ext":"gif","title":"Intro to Drafting as Material Calculus","desc":"Not sure what a weave draft is or how you might think about weave drafting as a series of algorithmic operations, start here."},{"id":"operation_playground","ext":"gif","title":"Operations Playground","desc":"Play with every possible operation that AdaCAD offers"},{"id":"drawdownexperiments","ext":"gif","title":"Drawdown Experiments","desc":"Playing with generating drawdowns by manipulating threading and threadlines with sine waves and zig zags"},{"id":"sample7b","ext":"png","title":"Lattice Structures","desc":"We recreate one of Elizabeth Meiklejohn\'s Samples from the 2023 Experimental Weaving Residency in AdaCAD for those who are interesting in making stretchy, multi-layer, lattice structures"},{"id":"shading","ext":"png","title":"Shaded Structures","desc":"A few different examples of how AdaCAD structures can be leveraged to make shaded structures"},{"id":"etextile","ext":"png","title":"E-Textiles Sampler","desc":"Shows partiuclar techniques that can be particularly useful for creating e-textile LED circuits, force sensors, or electrodes"},{"id":"electrode","ext":"png","title":"Woven Electrode Sample","desc":"Presents strategies and patterns for drafting woven electrodes."},{"id":"twopic","ext":"png","title":"Color Effects with Two Pick Structures","desc":"Two pick structures can create really interesting graphic patterns in the cloth and you can a apply a set of operations to make any weft-facing structure a 2 pic structure "},{"id":"threelayer","ext":"png","title":"Designing Multi-Layer Weaves","desc":" We create three variations of a three layer weave structure, each which has a different layer on top. We then map each of those to an image."}]}');

/***/ }),

/***/ 29885:
/*!*************************************************!*\
  !*** ./src/assets/json/op_classifications.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"classifications":[{"category_name":"structure","description":"A weave structure is the order or pattern of interlacement between the warp and weft threads. There are different families of woven structure that share core properties, such as plain weave, twill, and satin. Each of the operations is capable of generating structures that obey the rules of a given family","op_names":["tabbyder","twill","satin","shaded_satin","waffle","waffleish","complextwill","undulatingtwill","random","combos","bwimagemap","sine","sawtooth","satinish"]},{"category_name":"transformations","description":"Takes an input structure or draft and transforms it in some way.","op_names":["invert","flip","shift","rotate","makesymmetric","slope","stretch","clear","set unset","set down to unset","crop","trim","margin","undulatewefts","undulatewarps"]},{"category_name":"cloth","description":"Describes the arrangements of pattern regions in an overall draft or cloth. Regions defined by the cloth design parameters can be filled with input drafts. ","op_names":["rectangle","tile","chaos","warp_profile","weft_profile","sample_width","sample_length","fill","imagemap","join left","join top"]},{"category_name":"compound","description":"Describes operations that support joining different structural elements together compound weave structures characterized by the use of multiple weft and warp systems and/or layers.","op_names":["interlace","interlacewarps","overlay_multiple","splice in wefts","splice in warps","layer","notation","notation_system","assign weft systems"]},{"category_name":"dissect","description":"Describes operations that split apart a single input draft into multiple outputs according to some criteria.","op_names":["deinterlace"]},{"category_name":"compute","description":"Applies different forms of computational, binary, and/or mathematical functions to the production and modification of drafts.","op_names":["atop","overlay","mask","cutout","diff"]},{"category_name":"helper","description":"Describes common drafting techniuques to ensure good woven and cloth structure.","op_names":["selvedge","bind weft floats","bind warp floats"]},{"category_name":"color effects","description":"Supports the specification of materials in order to describe different color effects on the woven cloth","op_names":["apply materials"]},{"category_name":"drafting styles","description":"Supports the conversion of one style of drafting to another, based on the requirements of specific equipment","op_names":["floor loom","direct loom","drawdown","directdrawdown"]}]}');

/***/ }),

/***/ 45243:
/*!**********************************************!*\
  !*** ./src/assets/json/op_descriptions.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"operation":[{"name":"rectangle","displayname":"rectangle","description":"Generates an unfilled rectangle of the size defined by the parameters. If given an input, the rectangle fills with the input.","application":"Creating a rectangle that is the width of the cloth (total ends) and height of your pattern repeat (total pics) and inputting a generated draft is an easy way to repeat a draft or pattern across the width of your cloth. Rectangles can be joined together as bars, tiles, and layers using operations under “combine”."},{"name":"satinish","displayname":"satin-ish","description":"Generates a structure by shifting the first row (described by the input string), the number of shifts specified on each row.","application":"Allows for the creation and customization of satin or steep twill structures by shifting more than 1 end to the left or right on each subsequence pic"},{"name":"undulatingtwill","displayname":"undulating twill","description":"Generates an undulating twill structure by shifting the first row (described by the input string), the number of shifts specified by the second input string.","application":"Allows for the creation and customization of satin or steep twills by shifting more than 1 end to the left or right on each subsequence pic"},{"name":"clear","displayname":"clear","description":"Converts all the interlacements in the input draft to be raised.","application":"Often used when masking one draft with another, this defines an entire region as black cells, allowing them to function as a masking region"},{"name":"set unset","displayname":"set unset interlacements to","description":"Sets all unset interlacements/cells in this draft to the value set in the parameter.","application":"Unset cells allows someone to describe shape or inlay elements in a cloth. Set unset can control if interlacements outside that region are interpreted as warp lifts or lowers. "},{"name":"set down to unset","displayname":"set interlacements of type to unset","description":"This sets all interlacements of a particular type (e.g. raised or lowered) in the input draft to unset","application":"Unset cells allows someone to describe shapeed or inlay elements in a cloth. Set interlacements of one type to unset will have the effect of specifying an area where no weft will travel"},{"name":"set down to unset","displayname":"set interlacements of type to unset...","description":"This sets all interlacements of a particular type (e.g. raised or lowered) in the input draft to unset","application":"Unset cells allows someone to describe shapeed or inlay elements in a cloth. Set interlacements of one type to unset will have the effect of specifying an area where no weft will travel"},{"name":"apply materials","displayname":"set materials and systems","description":"Adds information to the draft that represents the materials and warp- and weft-systems that will be associated with the draft","application":"Complex weavers often generate structures that consider each warp and weft as a logical system that will behave differently in different regions of the cloth. Thus, some operations, like layer notation, require systems to be specified in order to compute complex structures that obey the systems of warps and wefts over the cloth. Applying materials allows one to visualize the relationship between the draft and the color effects visible on the cloth\'s surface"},{"name":"invert","displayname":"invert","description":"Inverts the draft so that raised warp ends become weft picks and weft pics become raised warp ends.","application":"Swaps the faces of the cloth, moving the front to back and back to front."},{"name":"flip","displayname":"flip","description":"Generates an output draft that mirrors the input draft from left to right and/or top to bottom as the parameters indicate.","application":"Can be used to create structures that include rotations of a basic motif"},{"name":"shift","displayname":"shift","description":"Generates an output that is shifted to the left and top by the number of warp ends and weft pics specified in the parameters.","application":"Creates a version of a draft that is structurally identical, but has the placement of interlacements fine tuned in relation to other structures"},{"name":"slope","displayname":"slope","description":"Shifts every nth pic by the vaule given in ends","application":"We do not know of an existing reason, but essentially slants the input draft, which can be fun"},{"name":"undulatewefts","displayname":"undulate wefts","description":"Given a user specified input of a series of number, it shifts every pic by the vaule specified in the corresponding location of the user specified input. For example, if 1 3 1 is entered, it shifts the first pic to the right by 1, second to the right by 3, third by 1","application":"This can be used to create structures that repond to non-linear shift patterns. It could also allow someone to enter a data stream into the input field representing data values, and have the structures generated reflect those values"},{"name":"undulatewarps","displayname":"undulate warps","description":"Given a user specified input of a series of number, it shifts every end by the vaule specified in the corresponding location of the user specified input. For example, if 1 3 1 is entered, it shifts the first end to the down by 1, second to the down by 3, third down by 1","application":"This can be used to create structures that repond to non-linear shift patterns. It could also allow someone to enter a data stream into the input field representing data values, and have the structures generated reflect those values"},{"name":"rotate","displayname":"rotate","description":"Generates an output draft that is the same as the input draft, but rotated by the amount specified","application":"To create patterns and motifs that involve a rotated element"},{"name":"makesymmetric","displayname":"make symmetric","description":"Rotates and \'stamps\' the input draft around a corner, creating rotational symmetry around the selected point according to the parameters described below.","application":"to create structures with rotational symmetry"},{"name":"interlace","displayname":"interlace wefts","description":"Creates a new draft by taking one pic from each input and assigning them to sucessive pics in the output draft.","application":"Combines two structures into a compound structure. For instance, for overshot, you might interlace a tabby into a floating structure, the alteranting tabby pics would add structure, the floats would add surface color and texture"},{"name":"deinterlace","displayname":"deinterlace wefts","description":"Creates multiple draft by splitting each pic from the input and assigning it to separate drafts. If the factor of two, two drafts are created. The first with all the odd pics and the send with all the even. If 3 is selected, three drafts are created, and so on","application":"Not sure, but perhaps it is interesting for the purposes of analysing a draft structure or splitting apart layered drafts into their component layer patterns"},{"name":"interlacewarps","displayname":"interlace warps","description":"Creates a new draft by taking one end from each input and assigning them to sucessive ends in the output draft.","application":"Combines two structures into a compound structure."},{"name":"splice in wefts","displayname":"splice in pics","description":"Splices the pics of the second input draft into the first. You can use the parameters to describe if you want the entire draft spliced in, or to splice the draft in pic by pic and the amount of pics between each insertion.","application":"Can be used when you need to insert a material with a certain property (say elastic) even so many pics to control the level of stretch. Alterantively, pics can be inserted to bind layers together"},{"name":"splice in warps","displayname":"splice in ends","description":"Splices the ends of the second input draft into the first. You can use the parameters to describe if you want the entire draft spliced in, or to splice the draft in end by end and the amount of ends between each insertion.","application":"Warp-wise splicing can be used to add a specific textual feature to the length of the cross in even intervals"},{"name":"assign systems","displayname":"assign draft to systems","description":"Given a user specified pattern for the weft (a b c) and warp systems (1 2 3), this function will create a draft that follows those system patterns and then map the input draft to the system specified. ","application":"While the same function could be achieved with layer notation, this might be a simpler way to assign drafts to systems while having control over the system order across multiple drafts, ensuring alignment. It can also be helpful for making systems without having to edit the system assignments directly on a draft"},{"name":"notation","displayname":"notation (assign by layer)","description":"Developed in collaboration with Kathryn Walters, this operation uses a notation system to assign drafts to different warp and weft patterns on different layers of cloth. Layers are represented by () so (1a)(2b) puts warp 1 and weft a on layer 1, warp 2 and weft b on layer 2. This function is slightly different than notation (assign by system) because it will apply a single input draft across all systems associated with a layer.","application":"This is used to create differetn structures, with different layer relationships, across an entire cloth. It becomes especially powerful with one changes layer numbers. For example (a1b2)(c2) will place the first layer across two systems, and the second layer across one system. This means that one can arbitrary change both layer order, as well as the association of different warp and weft systems to different layers across different regions of the cloth.","dynamic":"true"},{"name":"notation_system","displayname":"notation (assign by system)","description":"Developed in collaboration with Kathryn Walters, this operation uses a notation system to assign drafts to different warp and weft patterns on different layers of cloth. Layers are represented by () so (1a)(2b) puts warp 1 and weft a on layer 1, warp 2 and weft b on layer 2. This function is slightly different than notation (assign by layer) because it lets you assign drafts to each individual system within a layer (instead of to the layer as a whole)","application":"This is used to create differetn structures, with different layer relationships, across an entire cloth. It becomes especially powerful with one changes layer numbers. For example (a1b2)(c2) will place the first layer across two systems, and the second layer across one system. This means that one can arbitrary change both layer order, as well as the association of different warp and weft systems to different layers across different regions of the cloth.","dynamic":"true"},{"name":"layer","displayname":"layer","description":"Creates a draft in which each input is assigned to a layer in a multilayered structure. Assigns the first input to the top layer and so on.","application":"To arrange different structures on different layers"},{"name":"selvedge","displayname":"selvedge","description":"Adds a selvedge of so many ends on both sides of the input draft, \'draft.\' The second input, \'selvedge,\' determines the selvedge pattern, and if none is given, a selvedge is generated.","application":"Adding selvedges to the sides of the cloth maintains clean edges"},{"name":"overlay","displayname":"overlay, (a,b) => (a OR b)","description":"Applies binary math to two drafts. To do so, it looks at each interlacement in input drafts a and b. If either interlacement a or b are marked as warp lifted, the resulting draft will have a warp raised in that location. ","application":"No esablished application, but a fun way to see how to apply binary math to the production of drafts. Retains the pattern of raised warp ends (black cells) from each input draft when they are overlaid. (Keeps any region that is marked black/true in either draft)"},{"name":"overlay_multiple","displayname":"overlay multiple","description":"This function will take the lifted heddles within each draft and combine them to make a composite draft whereby each draft can be understood to be overlayed upon eachother. The resulting draft size is recalculated in order to ensure equal repeats","application":"Can be a useful way to think about the composite structures as independent units, which can then be combined into a composite draft"},{"name":"atop","displayname":"set atop, (a, b) => b","description":"Applies binary math to two drafts. To do so, it looks at each interlacement in input drafts a and b. If a is marked warp raised and b marked warp lowered, or vice versa, it sets the corresponding interlacement in the output draft to warp raised.","application":"No esablished application, but a fun way to see how to apply binary math to the production of drafts."},{"name":"cutout","displayname":"cut, (a, b) => (a NAND b)","description":"Applies binary math to two drafts. To do so, it looks at each interlacement in input drafts a and b. If a and b are both marked as having warped raised, it changes the value to warp lowered, effectively cutting the black cells in b from a. This is the opposite of mask","application":"No esablished application, but a fun way to see how to apply binary math to the production of drafts."},{"name":"diff","displayname":"diff, (a, b) => (a NEQ b)","description":"Applies binary math to two drafts. To do so, it looks at each interlacement in input drafts a and b and it returns a black cell in any location where the two draft cells were different","application":"No esablished application, but a fun way to see how to apply binary math to the production of drafts. Diffs are widly used in computation to compare how two things are similar or different"},{"name":"mask","displayname":"mask, (a,b) => (a AND b)","description":"Applies binary math to two drafts. To do so, it looks at each interlacement in input drafts a and b  If a is marked warp raised and b marked warp raised, it sets the corresponding interlacement in the output draft to warp raised. Otherwise, the interlacement is marked warp lowered. This effectively masks draft a with draft b","application":"No esablished application, but a fun way to see how to apply binary math to the production of drafts. Retains input draft b in regions where input draft a has raised warp ends (black cells); draft b is only retained within the area of draft a."},{"name":"sine","displayname":"sine wave sample","description":"Samples a sine wave at a rate specified by the the interval parameter, and stretches the wave to the size of amplitude. Converts this wave to a draft by marking a warp raised in any location where the wave is present","application":"No esablished application, but an interesting way to create threadings and threadlings for interesting looking drawdowns"},{"name":"sawtooth","displayname":"sawtooth","description":"Creates a sawtooth pattern (e.g. mountain/valley zigzag) of a user specified width with a user specified number of teeth in the sawtooth as described by the segments parameter","application":"Can be used to generated pointed threadings and treadlings"},{"name":"fill","displayname":"fill","description":"Fills black cells of the first input, “pattern,” with the draft specified by the second input, and the white cells with draft specified by the third input.","application":"Fill can be used to create graphic regions on cloth. For instance, the input draft can contain a simple graphic drawn in black/warp raised cells, the fill operation then, can fill the black cells with a structure, such as a shaded satin, so that the heart is visible and well structured on the resulting cloth."},{"name":"tabbyder","displayname":"tabby","description":"Also known as plain weave. Plain weave is one of the most basic weave structures in which each weft thread passes over one warp end and under one warp end; the next weft pick follows the pattern on the alternate warp threads (over/under/over/under). Tabby variations include basket weave, rib weave, and rep weave. These dervicatives can be generated by modifying the parameters","application":"Generates a tabby or tabby derivative structure that can be modified as needed as ones design evolves."},{"name":"twill","displayname":"twill","description":"In this context, a complex twill is a straight twill with multiple ratios of interlacement in a single structure unit so that a 2 2 3 3 pattern describes a structure with two raised warp ends, two lowered ends, three raised ends, and three lowered ends. Each successive pic begins the same pattern of interlacement on an adjacent warp end, creating a diagonal pattern.","application":"Generates a twill or twill derivative structure that can be modified as needed as ones design evolves."},{"name":"waffleish","displayname":"waffle-ish","description":"Waffle weave is a twill-based structure in which warp and weft floats of increasing and then decreasing lengths are bound by a border of tabby interlacements to create a grid of cells. There is typically an equal number of pics and ends in a single pattern unit. This operation generates waffle-type structures, but also creates something strange when given uneven pics and ends, or more than one border of tabby interlacements","application":"Generates a waffle or waffle-inspired structure that can be modified as needed as ones design evolves."},{"name":"waffle","displayname":"waffle","description":"Waffle weave is a twill-based structure in which warp and weft floats of increasing and then decreasing lengths are bound by a border of tabby interlacements to create a grid of cells. There is typically an equal number of pics and ends in a single pattern unit. This operation generates waffle structures based on specifying the longest float and number of binding rows to surround each waffle. ","application":"Generates a waffle  structure that can be modified as needed as ones design evolves."},{"name":"complextwill","displayname":"complex twill","description":"Twill is a family of weave structures in which weft picks pass over or under one or more warp threads in a repeating pattern (i.e. 1/3, 2/2, or 3/1). The same interlacement sequence begins on an adjacent warp end, either to the left or right, in the next weft row, creating a diagonal pattern of interlacement.","application":"Generates a complex twill structure that can be modified as needed as ones design evolves."},{"name":"satin","displayname":"satin","description":"Satin is a family of weave structures that create cloth with weft floats on one face of the fabric and warp floats on the other. The succeeding interlacements of warp and weft threads in each row occur on non-adjacent warp threads, creating a smooth surface of floating threads on each face. The number of ends between succeeding warp interlacements is consistent in each row (i.e. a 1/8 satin will have one raised warp end followed by a weft float over 8 warp ends in each row).","application":"Generates a satin structure that can be modified as needed as ones design evolves."},{"name":"shaded_satin","displayname":"shaded satin","description":"Satin is a family of weave structures that create cloth with weft floats on one face of the fabric and warp floats on the other. The succeeding interlacements of warp and weft threads in each row occur on non-adjacent warp threads, creating a smooth surface of floating threads on each face. The number of ends between succeeding warp interlacements is consistent in each row (i.e. a 1/8 satin will have one raised warp end followed by a weft float over 8 warp ends in each row). Shaded satins typically use more than just one raised warp on each pic to control the visiblity of the warp or weft colors proportionally","application":"Generates a satin or shaded satin structure that can be modified as needed as ones design evolves."},{"name":"random","displayname":"random","description":"Generates a draft of the size specified where the value of each interlacement is generated randomly.","application":"We don\'t know of current random draft generators, so this one is just for the fun of applying code-based random number generators to weaving structures"},{"name":"combos","displayname":"all possible structures","description":"This structure operation was prompted by a question from weaver and AdaCAD collaborator Marianne Fairbanks who wanted to implement an algorithm to find every possible structure for an N x N draft. The motivation was largely based on the observance that three structures are said to be the core of all weaving: satin, twill and tabby. M wanted to know why these three? What other options were there? And what might be possible in these other options. This algorithm revealed that there are 102 possible 3x3 structures and 22874 possible 4x4 structures (though some structures are rotations, reflections, and shifts of others, leading us to questions of definition of equivalency in structures).","application":"Allows one to systematically explore all possible drafts, just for the sake of it"},{"name":"stretch","displayname":"stretch","description":"Repeats each warp and/or weft by the values given in the parameters.","application":"Most often, stretch can be used to resize a structure to ensure that it weaves square"},{"name":"resize","displayname":"resize","description":"Stretches or compresses the draft to fit the boundary defined by the values given in the parameters. It does so by adding or removing whole pics and ends every in constent intervals.","application":"Resize can help one convert artwork to a boundary size different then what was originally intended. We suggest playing with the boundary size until the resize generates a desirable draft"},{"name":"margin","displayname":"add margins","description":"When the second inlet is unfilled, it adds a margin of unset threads to the top, right, bottom, and/or left. If the second inlet has a draft, the margin is filled with the pattern of the draft specified","application":"Adds borders of a given structure to rectangular blocks, perhaps to maintain consistent packing as one samples various structures across the width of the cloth."},{"name":"crop","displayname":"crop","description":"Crops the structure or pattern to a region of the input draft. The crop size and placement are defined by the parameters","application":"To pick a section out of a draft that you might want to modify"},{"name":"trim","displayname":"trim","description":"Trims off the edges of an input draft according to the parameters described below.","application":"Can be used to trim off the edges of the draft that might not repeat nicely"},{"name":"warp_profile","displayname":"pattern across width","description":"Given a series of letters (a b c), this operation will associate a draft with each letter, and then arrange those drafts from left to right following the pattern order ","application":"Can be used for profile drafting and describing repeating patterns across the cloth.","dynamic":"true"},{"name":"weft_profile","displayname":"pattern across length","description":"Given a series of letters (a b c), this operation will associate a draft with each letter, and then arrange following the pattern order ","application":"Can be used for profile drafting and describing repeating patterns along the length the cloth.","dynamic":"true"},{"name":"sample_width","displayname":"variable width sampler","description":"Given a series of letters and numbers (a100 b200 c300), this operation will associate a draft with each letter, and then arrange those drafts from left to right following the pattern order. The numbers next to each letter describe the number of ends upon which the specified pattern should be repeated","application":"Can be used for creating several sample swatches across the width of the cloth","dynamic":"true"},{"name":"sample_length","displayname":"variable length sampler","description":"Given a series of letters and numbers (a100 b200 c300), this operation will associate a draft with each letter, and then arrange those drafts following the pattern order. The numbers next to each letter describe the number of pics upon which the specified pattern should be repeated","application":"Can be used for creating several sample swatches across the length of the cloth","dynamic":"true"},{"name":"tile","displayname":"tile","description":"Repeats the input block along the warp and weft according to the parameters described below.","application":"Can be used to repeat a pattern across the cloth a specified number of times"},{"name":"chaos","displayname":"chaos sequence","description":"Made in collaboration Jacqueline Wernimont, Molly Morin and Nikki Stevens. Tiles the input drafts, randomly selecting which draft to place at which position","application":"No specific application, just creates some nice tilings","youtube":"kQWCOMvLNqk"},{"name":"bind weft floats","displayname":"bind weft floats","description":"Adds interlacements to weft floats over the user specified length","application":"To automatically find and bind long floats in a design"},{"name":"bind warp floats","displayname":"bind warp floats","description":"Adds interlacements to warp floats over the user specified length","application":"To automatically find and bind long floats in a design"},{"name":"erase blank rows","displayname":"erase blank rows","description":"Erases any rows that are entirely unset.","application":"Blank rows can emerge when working across multiple systems. Erasing blank rows, then, can speed up weaving by avoiding picing blank rows"},{"name":"join top","displayname":"join top","description":"Joins drafts assigned to the drafts input together from bottom to top.","application":"To arrange different structures across rows"},{"name":"join left","displayname":"join left","description":"Joins drafts assigned to the drafts input together from left to right.","application":"To arrange different structures across columns"},{"name":"dynamicjoinleft","displayname":"subdivide width","description":"Subdivides the width (number of ends) of the draft into equal-sized sections, then, takes each input draft and assigns it a division from left to right.","application":"Simplifies the ability to evenly split structures, side by side, across a particular number of ends","dynamic":"true"},{"name":"dynamicjointop","displayname":"subdivide length","description":"Subdivides the length (number of pics) of the draft into equal-sized sections, then, takes each input draft and assigns it a division","application":"Simplifies the ability to evenly split structures, one ontop of another, across a particular number of pics","dynamic":"true"},{"name":"bwimagemap","displayname":"upload draft","description":"Uploads a draft from an image into AdaCAD","application":"To upload drafts from other sources into the workspace"},{"name":"imagemap","displayname":"image map","description":"Uploads an image and creates an input for each color found in the image. Assigning a draft to the color fills the color region with the selected draft.","application":"Can be used to create complex woven motifs or images with regions filled with different structures","dynamic":"true"},{"name":"germanify","displayname":"germanify","description":"Uses machine learning to edit the input draft based on common patterns found in a set of German Weave drafts.","application":"No particular application, just curious"},{"name":"crackle-ify","displayname":"crackle-ify","description":"Uses machine learning to edit the input draft based on common patterns found in a set of Crackle Weave drafts.","application":"No particular application, just curious"},{"name":"direct loom","displayname":"generate direct tie loom threading and lift plan","description":"Uses the input draft as drawdown and generates a threading and lift plan pattern","application":"To create threading and treadlings plans from drawdowns"},{"name":"floor loom","displayname":"generate floor loom threading and treadling","description":"Uses the input draft as drawdown and generates a threading and lift plan pattern","application":"To create threading and treadlings plans from drawdowns"},{"name":"drawdown","displayname":"make drawdown from threading, tieup, and treadling","description":"Create a drawdown from the input drafts (order 1. threading, 2. tieup, 3.treadling)","application":"To create drawdown from from a floor loom plan"},{"name":"directdrawdown","displayname":"make drawdown from threading and lift plan","description":"Create a drawdown from the input drafts (order 1. threading, 2. tieup, 3.lift plan)","application":"To create drawdown from from a direct loom plan"}],"param":[{"name":"ends","description":"the number of warp ends to use in the resulting draft"},{"name":"pics","description":"the number of weft pics to use in the resulting draft"},{"name":"raised/lowered","description":"toggles interlacements between selecting warp raised or warp lowered"},{"name":"calculate repeats","description":"automatically repeats the input drafts by the amount neccessary to ensure that each draft repeats in even intervals"},{"name":"shift ends","description":"shifts the draft a certain number of ends"},{"name":"shift pics","description":"shifts the draft a certain number of pics"},{"name":"warps raised","description":"the number of warp ends to have lifted in the first pic"},{"name":"warps lowered","description":"the number of warp ends to keep lowered in the first pic"},{"name":"S/Z","description":"defines the direction of the sequential pattern shift"},{"name":"facing","description":"toggle the warps raised and lowered so that the structure is more warp-facing or weft-facing."}],"dynamic_description":"This is a dyanmic operation, meaning that one of the parameters generates multiple \'inlets\' to the function. Changing that parameter adds or changes the number of inlets). Each inlet can accept a draft and associate a particular value with that draft. "}');

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(14431)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map